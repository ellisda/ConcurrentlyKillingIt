var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_DEFINES;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.DEBUG) {
    if (!caller) {
      throw Error("arguments.caller not defined.  goog.base() expects not " + "to be running in strict mode. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
    }
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;").replace(goog.string.singleQuoteRe_, "\x26#39;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.singleQuoteRe_, "\x26#39;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /"/g;
goog.string.singleQuoteRe_ = /'/g;
goog.string.allRe_ = /[&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2268";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15772__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__15772 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15772__delegate.call(this, args);
    };
    G__15772.cljs$lang$maxFixedArity = 0;
    G__15772.cljs$lang$applyTo = function(arglist__15773) {
      var args = cljs.core.seq(arglist__15773);
      return G__15772__delegate(args);
    };
    G__15772.cljs$core$IFn$_invoke$arity$variadic = G__15772__delegate;
    return G__15772;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3040__auto__ = ty;
    if (cljs.core.truth_(and__3040__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3040__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__3908__auto___15774 = len;
  var i_15775 = 0;
  while (true) {
    if (i_15775 < n__3908__auto___15774) {
      new_arr[i_15775] = arr[i_15775];
      var G__15776 = i_15775 + 1;
      i_15775 = G__15776;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__15777__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__15777 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15777__delegate.call(this, array, i, idxs);
    };
    G__15777.cljs$lang$maxFixedArity = 2;
    G__15777.cljs$lang$applyTo = function(arglist__15778) {
      var array = cljs.core.first(arglist__15778);
      arglist__15778 = cljs.core.next(arglist__15778);
      var i = cljs.core.first(arglist__15778);
      var idxs = cljs.core.rest(arglist__15778);
      return G__15777__delegate(array, i, idxs);
    };
    G__15777.cljs$core$IFn$_invoke$arity$variadic = G__15777__delegate;
    return G__15777;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__15779__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__15779 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15779__delegate.call(this, array, idx, idx2, idxv);
    };
    G__15779.cljs$lang$maxFixedArity = 3;
    G__15779.cljs$lang$applyTo = function(arglist__15780) {
      var array = cljs.core.first(arglist__15780);
      arglist__15780 = cljs.core.next(arglist__15780);
      var idx = cljs.core.first(arglist__15780);
      arglist__15780 = cljs.core.next(arglist__15780);
      var idx2 = cljs.core.first(arglist__15780);
      var idxv = cljs.core.rest(arglist__15780);
      return G__15779__delegate(array, idx, idx2, idxv);
    };
    G__15779.cljs$core$IFn$_invoke$arity$variadic = G__15779__delegate;
    return G__15779;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj15782 = {};
  return obj15782;
}();
cljs.core.IFn = function() {
  var obj15784 = {};
  return obj15784;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3040__auto__ = this$;
      if (and__3040__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__3679__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3052__auto__ = cljs.core._invoke[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._invoke["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj15786 = {};
  return obj15786;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3040__auto__ = value;
    if (and__3040__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__3679__auto__ = value == null ? null : value;
    return function() {
      var or__3052__auto__ = cljs.core._clone[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._clone["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj15788 = {};
  return obj15788;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._count[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._count["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj15790 = {};
  return obj15790;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._empty[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._empty["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj15792 = {};
  return obj15792;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._conj[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._conj["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj15794 = {};
  return obj15794;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3040__auto__ = coll;
      if (and__3040__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__3679__auto__ = coll == null ? null : coll;
      return function() {
        var or__3052__auto__ = cljs.core._nth[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._nth["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3040__auto__ = coll;
      if (and__3040__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__3679__auto__ = coll == null ? null : coll;
      return function() {
        var or__3052__auto__ = cljs.core._nth[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._nth["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj15796 = {};
  return obj15796;
}();
cljs.core.ISeq = function() {
  var obj15798 = {};
  return obj15798;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._first[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._first["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._rest[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._rest["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj15800 = {};
  return obj15800;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._next[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._next["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj15802 = {};
  return obj15802;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3040__auto__ = o;
      if (and__3040__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__3679__auto__ = o == null ? null : o;
      return function() {
        var or__3052__auto__ = cljs.core._lookup[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._lookup["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3040__auto__ = o;
      if (and__3040__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__3679__auto__ = o == null ? null : o;
      return function() {
        var or__3052__auto__ = cljs.core._lookup[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._lookup["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj15804 = {};
  return obj15804;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._assoc[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._assoc["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj15806 = {};
  return obj15806;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._dissoc[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._dissoc["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj15808 = {};
  return obj15808;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._key[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._key["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._val[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._val["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj15810 = {};
  return obj15810;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._disjoin[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._disjoin["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj15812 = {};
  return obj15812;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._peek[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._peek["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._pop[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._pop["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj15814 = {};
  return obj15814;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._assoc_n[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj15816 = {};
  return obj15816;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3040__auto__ = o;
    if (and__3040__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__3679__auto__ = o == null ? null : o;
    return function() {
      var or__3052__auto__ = cljs.core._deref[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._deref["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15818 = {};
  return obj15818;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3040__auto__ = o;
    if (and__3040__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__3679__auto__ = o == null ? null : o;
    return function() {
      var or__3052__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj15820 = {};
  return obj15820;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3040__auto__ = o;
    if (and__3040__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__3679__auto__ = o == null ? null : o;
    return function() {
      var or__3052__auto__ = cljs.core._meta[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._meta["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj15822 = {};
  return obj15822;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3040__auto__ = o;
    if (and__3040__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__3679__auto__ = o == null ? null : o;
    return function() {
      var or__3052__auto__ = cljs.core._with_meta[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._with_meta["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj15824 = {};
  return obj15824;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3040__auto__ = coll;
      if (and__3040__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__3679__auto__ = coll == null ? null : coll;
      return function() {
        var or__3052__auto__ = cljs.core._reduce[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._reduce["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3040__auto__ = coll;
      if (and__3040__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__3679__auto__ = coll == null ? null : coll;
      return function() {
        var or__3052__auto__ = cljs.core._reduce[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._reduce["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj15826 = {};
  return obj15826;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._kv_reduce[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj15828 = {};
  return obj15828;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3040__auto__ = o;
    if (and__3040__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__3679__auto__ = o == null ? null : o;
    return function() {
      var or__3052__auto__ = cljs.core._equiv[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._equiv["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj15830 = {};
  return obj15830;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3040__auto__ = o;
    if (and__3040__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__3679__auto__ = o == null ? null : o;
    return function() {
      var or__3052__auto__ = cljs.core._hash[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._hash["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj15832 = {};
  return obj15832;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3040__auto__ = o;
    if (and__3040__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__3679__auto__ = o == null ? null : o;
    return function() {
      var or__3052__auto__ = cljs.core._seq[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._seq["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj15834 = {};
  return obj15834;
}();
cljs.core.IList = function() {
  var obj15836 = {};
  return obj15836;
}();
cljs.core.IRecord = function() {
  var obj15838 = {};
  return obj15838;
}();
cljs.core.IReversible = function() {
  var obj15840 = {};
  return obj15840;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._rseq[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._rseq["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj15842 = {};
  return obj15842;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._sorted_seq[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._entry_key[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._entry_key["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._comparator[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._comparator["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj15844 = {};
  return obj15844;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3040__auto__ = writer;
    if (and__3040__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__3679__auto__ = writer == null ? null : writer;
    return function() {
      var or__3052__auto__ = cljs.core._write[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._write["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3040__auto__ = writer;
    if (and__3040__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__3679__auto__ = writer == null ? null : writer;
    return function() {
      var or__3052__auto__ = cljs.core._flush[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._flush["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj15846 = {};
  return obj15846;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3040__auto__ = o;
    if (and__3040__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__3679__auto__ = o == null ? null : o;
    return function() {
      var or__3052__auto__ = cljs.core._pr_writer[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj15848 = {};
  return obj15848;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3040__auto__ = d;
    if (and__3040__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__3679__auto__ = d == null ? null : d;
    return function() {
      var or__3052__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj15850 = {};
  return obj15850;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3040__auto__ = this$;
    if (and__3040__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__3679__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3052__auto__ = cljs.core._notify_watches[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3040__auto__ = this$;
    if (and__3040__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__3679__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3052__auto__ = cljs.core._add_watch[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._add_watch["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3040__auto__ = this$;
    if (and__3040__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__3679__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3052__auto__ = cljs.core._remove_watch[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj15852 = {};
  return obj15852;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._as_transient[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._as_transient["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj15854 = {};
  return obj15854;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3040__auto__ = tcoll;
    if (and__3040__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__3679__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3052__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3040__auto__ = tcoll;
    if (and__3040__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__3679__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3052__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj15856 = {};
  return obj15856;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3040__auto__ = tcoll;
    if (and__3040__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__3679__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3052__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj15858 = {};
  return obj15858;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3040__auto__ = tcoll;
    if (and__3040__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__3679__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3052__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj15860 = {};
  return obj15860;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3040__auto__ = tcoll;
    if (and__3040__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__3679__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3052__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3040__auto__ = tcoll;
    if (and__3040__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__3679__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3052__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj15862 = {};
  return obj15862;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3040__auto__ = tcoll;
    if (and__3040__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__3679__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3052__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj15864 = {};
  return obj15864;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3040__auto__ = x;
    if (and__3040__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__3679__auto__ = x == null ? null : x;
    return function() {
      var or__3052__auto__ = cljs.core._compare[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._compare["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj15866 = {};
  return obj15866;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._drop_first[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._drop_first["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15868 = {};
  return obj15868;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._chunked_first[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._chunked_rest[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj15870 = {};
  return obj15870;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3040__auto__ = coll;
    if (and__3040__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__3679__auto__ = coll == null ? null : coll;
    return function() {
      var or__3052__auto__ = cljs.core._chunked_next[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj15872 = {};
  return obj15872;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3040__auto__ = x;
    if (and__3040__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__3679__auto__ = x == null ? null : x;
    return function() {
      var or__3052__auto__ = cljs.core._name[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._name["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3040__auto__ = x;
    if (and__3040__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__3679__auto__ = x == null ? null : x;
    return function() {
      var or__3052__auto__ = cljs.core._namespace[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._namespace["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__15873 = i + 2;
        var G__15874 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__15873;
        h1 = G__15874;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj15876 = {};
  return obj15876;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__15877 = i + 1;
          var G__15878 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__15877;
          hash = G__15878;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj15882 = {};
      return obj15882;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__15884 = o;
    if (G__15884) {
      var bit__3695__auto__ = G__15884.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__3695__auto__ || G__15884.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3040__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3040__auto__) {
        return b.ns;
      } else {
        return and__3040__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", -1987822328)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3463__auto__ = self__._hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__15886 = null;
  var G__15886__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__15886__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__15886 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15886__2.call(this, self__, coll);
      case 3:
        return G__15886__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15886;
}();
cljs.core.Symbol.prototype.apply = function(self__, args15885) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15885)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__15888 = value;
  if (G__15888) {
    var bit__3702__auto__ = G__15888.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__3702__auto__ || G__15888.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__15888.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15888);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15888);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15890 = coll;
      if (G__15890) {
        var bit__3695__auto__ = G__15890.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__3695__auto__ || G__15890.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15892 = coll;
      if (G__15892) {
        var bit__3695__auto__ = G__15892.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__3695__auto__ || G__15892.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15894 = coll;
      if (G__15894) {
        var bit__3695__auto__ = G__15894.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__3695__auto__ || G__15894.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15896 = coll;
      if (G__15896) {
        var bit__3695__auto__ = G__15896.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__3695__auto__ || G__15896.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__15897__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__15898 = y;
            var G__15899 = cljs.core.first.call(null, more);
            var G__15900 = cljs.core.next.call(null, more);
            x = G__15898;
            y = G__15899;
            more = G__15900;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15897 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15897__delegate.call(this, x, y, more);
    };
    G__15897.cljs$lang$maxFixedArity = 2;
    G__15897.cljs$lang$applyTo = function(arglist__15901) {
      var x = cljs.core.first(arglist__15901);
      arglist__15901 = cljs.core.next(arglist__15901);
      var y = cljs.core.first(arglist__15901);
      var more = cljs.core.rest(arglist__15901);
      return G__15897__delegate(x, y, more);
    };
    G__15897.cljs$core$IFn$_invoke$arity$variadic = G__15897__delegate;
    return G__15897;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15902 = n + 1;
      var G__15903 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__15904 = cljs.core.next.call(null, coll__$1);
      n = G__15902;
      hash_code = G__15903;
      coll__$1 = G__15904;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15905 = n + 1;
      var G__15906 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__15907 = cljs.core.next.call(null, coll__$1);
      n = G__15905;
      hash_code = G__15906;
      coll__$1 = G__15907;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15908 = nval;
            var G__15909 = n + 1;
            val = G__15908;
            n = G__15909;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15910 = nval;
          var G__15911 = n + 1;
          val__$1 = G__15910;
          n = G__15911;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15912 = nval;
          var G__15913 = n + 1;
          val__$1 = G__15912;
          n = G__15913;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15914 = nval;
            var G__15915 = n + 1;
            val = G__15914;
            n = G__15915;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15916 = nval;
          var G__15917 = n + 1;
          val__$1 = G__15916;
          n = G__15917;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15918 = nval;
          var G__15919 = n + 1;
          val__$1 = G__15918;
          n = G__15919;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__15921 = x;
  if (G__15921) {
    var bit__3702__auto__ = G__15921.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__3702__auto__ || G__15921.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__15921.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15921);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15921);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__15923 = x;
  if (G__15923) {
    var bit__3702__auto__ = G__15923.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__3702__auto__ || G__15923.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__15923.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15923);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15923);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__15924 = sn;
      s = G__15924;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__15925__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__15926 = conj.call(null, coll, x);
          var G__15927 = cljs.core.first.call(null, xs);
          var G__15928 = cljs.core.next.call(null, xs);
          coll = G__15926;
          x = G__15927;
          xs = G__15928;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__15925 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15925__delegate.call(this, coll, x, xs);
    };
    G__15925.cljs$lang$maxFixedArity = 2;
    G__15925.cljs$lang$applyTo = function(arglist__15929) {
      var coll = cljs.core.first(arglist__15929);
      arglist__15929 = cljs.core.next(arglist__15929);
      var x = cljs.core.first(arglist__15929);
      var xs = cljs.core.rest(arglist__15929);
      return G__15925__delegate(coll, x, xs);
    };
    G__15925.cljs$core$IFn$_invoke$arity$variadic = G__15925__delegate;
    return G__15925;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__15930 = cljs.core.next.call(null, s);
      var G__15931 = acc + 1;
      s = G__15930;
      acc = G__15931;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15933 = coll;
      if (G__15933) {
        var bit__3695__auto__ = G__15933.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__3695__auto__ || G__15933.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15934 = cljs.core.next.call(null, coll);
              var G__15935 = n - 1;
              coll = G__15934;
              n = G__15935;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15936 = cljs.core.next.call(null, coll);
              var G__15937 = n - 1;
              var G__15938 = not_found;
              coll = G__15936;
              n = G__15937;
              not_found = G__15938;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__15943 = coll;
          if (G__15943) {
            var bit__3695__auto__ = G__15943.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__3695__auto__ || G__15943.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__15944 = coll;
                  if (G__15944) {
                    var bit__3702__auto__ = G__15944.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__3702__auto__ || G__15944.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15944.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15944);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15944);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__15945 = coll;
          if (G__15945) {
            var bit__3695__auto__ = G__15945.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__3695__auto__ || G__15945.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__15946 = coll;
                  if (G__15946) {
                    var bit__3702__auto__ = G__15946.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__3702__auto__ || G__15946.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15946.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15946);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15946);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__15949 = o;
        if (G__15949) {
          var bit__3695__auto__ = G__15949.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__3695__auto__ || G__15949.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__15950 = o;
        if (G__15950) {
          var bit__3695__auto__ = G__15950.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__3695__auto__ || G__15950.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__15951__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__15952 = ret;
          var G__15953 = cljs.core.first.call(null, kvs);
          var G__15954 = cljs.core.second.call(null, kvs);
          var G__15955 = cljs.core.nnext.call(null, kvs);
          coll = G__15952;
          k = G__15953;
          v = G__15954;
          kvs = G__15955;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__15951 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15951__delegate.call(this, coll, k, v, kvs);
    };
    G__15951.cljs$lang$maxFixedArity = 3;
    G__15951.cljs$lang$applyTo = function(arglist__15956) {
      var coll = cljs.core.first(arglist__15956);
      arglist__15956 = cljs.core.next(arglist__15956);
      var k = cljs.core.first(arglist__15956);
      arglist__15956 = cljs.core.next(arglist__15956);
      var v = cljs.core.first(arglist__15956);
      var kvs = cljs.core.rest(arglist__15956);
      return G__15951__delegate(coll, k, v, kvs);
    };
    G__15951.cljs$core$IFn$_invoke$arity$variadic = G__15951__delegate;
    return G__15951;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__15957__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15958 = ret;
            var G__15959 = cljs.core.first.call(null, ks);
            var G__15960 = cljs.core.next.call(null, ks);
            coll = G__15958;
            k = G__15959;
            ks = G__15960;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15957 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15957__delegate.call(this, coll, k, ks);
    };
    G__15957.cljs$lang$maxFixedArity = 2;
    G__15957.cljs$lang$applyTo = function(arglist__15961) {
      var coll = cljs.core.first(arglist__15961);
      arglist__15961 = cljs.core.next(arglist__15961);
      var k = cljs.core.first(arglist__15961);
      var ks = cljs.core.rest(arglist__15961);
      return G__15957__delegate(coll, k, ks);
    };
    G__15957.cljs$core$IFn$_invoke$arity$variadic = G__15957__delegate;
    return G__15957;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3052__auto__ = goog.isFunction(f);
  if (or__3052__auto__) {
    return or__3052__auto__;
  } else {
    var G__15965 = f;
    if (G__15965) {
      var bit__3702__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3052__auto____$1 = bit__3702__auto__;
        if (cljs.core.truth_(or__3052__auto____$1)) {
          return or__3052__auto____$1;
        } else {
          return G__15965.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__15965.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15965);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15965);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__15967 = null;
  var G__15967__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__15967__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__15967__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__15967__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__15967__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__15967__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__15967__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__15967__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__15967__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__15967__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__15967__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__15967__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__15967__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__15967__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__15967__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__15967__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__15967__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__15967__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__15967__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__15967__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__15967__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__15967__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__15967 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__15967__1.call(this, self__);
      case 2:
        return G__15967__2.call(this, self__, a);
      case 3:
        return G__15967__3.call(this, self__, a, b);
      case 4:
        return G__15967__4.call(this, self__, a, b, c);
      case 5:
        return G__15967__5.call(this, self__, a, b, c, d);
      case 6:
        return G__15967__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__15967__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__15967__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__15967__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__15967__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__15967__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__15967__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__15967__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__15967__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__15967__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__15967__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__15967__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__15967__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__15967__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__15967__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__15967__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__15967__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15967;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args15966) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15966)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__15971 = o;
    if (G__15971) {
      var bit__3702__auto__ = G__15971.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__3702__auto__ || G__15971.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15971.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15971);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15971);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3040__auto__ = !(o == null);
    if (and__3040__auto__) {
      var G__15975 = o;
      if (G__15975) {
        var bit__3702__auto__ = G__15975.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__3702__auto__ || G__15975.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__15975.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15975);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15975);
      }
    } else {
      return and__3040__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__15976__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15977 = ret;
            var G__15978 = cljs.core.first.call(null, ks);
            var G__15979 = cljs.core.next.call(null, ks);
            coll = G__15977;
            k = G__15978;
            ks = G__15979;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15976 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15976__delegate.call(this, coll, k, ks);
    };
    G__15976.cljs$lang$maxFixedArity = 2;
    G__15976.cljs$lang$applyTo = function(arglist__15980) {
      var coll = cljs.core.first(arglist__15980);
      arglist__15980 = cljs.core.next(arglist__15980);
      var k = cljs.core.first(arglist__15980);
      var ks = cljs.core.rest(arglist__15980);
      return G__15976__delegate(coll, k, ks);
    };
    G__15976.cljs$core$IFn$_invoke$arity$variadic = G__15976__delegate;
    return G__15976;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15982 = x;
    if (G__15982) {
      var bit__3702__auto__ = G__15982.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__3702__auto__ || G__15982.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__15982.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15982);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15982);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15984 = x;
    if (G__15984) {
      var bit__3702__auto__ = G__15984.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__3702__auto__ || G__15984.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__15984.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15984);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15984);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__15986 = x;
  if (G__15986) {
    var bit__3702__auto__ = G__15986.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__3702__auto__ || G__15986.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__15986.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15986);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15986);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__15988 = x;
  if (G__15988) {
    var bit__3702__auto__ = G__15988.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__3702__auto__ || G__15988.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__15988.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15988);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15988);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__15990 = x;
  if (G__15990) {
    var bit__3702__auto__ = G__15990.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__3702__auto__ || G__15990.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__15990.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15990);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15990);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__15992 = x;
  if (G__15992) {
    var bit__3702__auto__ = G__15992.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__3702__auto__ || G__15992.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__15992.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15992);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15992);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15994 = x;
    if (G__15994) {
      var bit__3702__auto__ = G__15994.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__3702__auto__ || G__15994.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__15994.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15994);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15994);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__15996 = x;
  if (G__15996) {
    var bit__3702__auto__ = G__15996.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__3702__auto__ || G__15996.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__15996.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15996);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15996);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__15998 = x;
  if (G__15998) {
    var bit__3695__auto__ = G__15998.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__3695__auto__ || G__15998.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj16002 = {};
    return obj16002;
  };
  var js_obj__1 = function() {
    var G__16003__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__16003 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16003__delegate.call(this, keyvals);
    };
    G__16003.cljs$lang$maxFixedArity = 0;
    G__16003.cljs$lang$applyTo = function(arglist__16004) {
      var keyvals = cljs.core.seq(arglist__16004);
      return G__16003__delegate(keyvals);
    };
    G__16003.cljs$core$IFn$_invoke$arity$variadic = G__16003__delegate;
    return G__16003;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16005 = i__$1 + 1;
      var G__16006 = j__$1 + 1;
      var G__16007 = len__$1 - 1;
      i__$1 = G__16005;
      j__$1 = G__16006;
      len__$1 = G__16007;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16008 = i__$1 - 1;
      var G__16009 = j__$1 - 1;
      var G__16010 = len__$1 - 1;
      i__$1 = G__16008;
      j__$1 = G__16009;
      len__$1 = G__16010;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj16012 = {};
  return obj16012;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__16014 = s;
    if (G__16014) {
      var bit__3702__auto__ = G__16014.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__3702__auto__ || G__16014.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__16014.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16014);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16014);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__16016 = s;
  if (G__16016) {
    var bit__3702__auto__ = G__16016.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__3702__auto__ || G__16016.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__16016.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16016);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16016);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3052__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3052__auto__) {
    return or__3052__auto__;
  } else {
    var G__16020 = f;
    if (G__16020) {
      var bit__3702__auto__ = G__16020.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__3702__auto__ || G__16020.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__16020.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16020);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16020);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__16021__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__16022 = cljs.core.conj.call(null, s, x__$1);
              var G__16023 = etc;
              s = G__16022;
              xs = G__16023;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__16021 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16021__delegate.call(this, x, y, more);
    };
    G__16021.cljs$lang$maxFixedArity = 2;
    G__16021.cljs$lang$applyTo = function(arglist__16024) {
      var x = cljs.core.first(arglist__16024);
      arglist__16024 = cljs.core.next(arglist__16024);
      var y = cljs.core.first(arglist__16024);
      var more = cljs.core.rest(arglist__16024);
      return G__16021__delegate(x, y, more);
    };
    G__16021.cljs$core$IFn$_invoke$arity$variadic = G__16021__delegate;
    return G__16021;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3052__auto__ = cljs.core.seq.call(null, coll);
    if (or__3052__auto__) {
      return or__3052__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__16026 = x;
            if (G__16026) {
              var bit__3695__auto__ = G__16026.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__3695__auto__ || G__16026.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__16027 = xs;
        var G__16028 = ys;
        var G__16029 = len;
        var G__16030 = n + 1;
        xs = G__16027;
        ys = G__16028;
        len = G__16029;
        n = G__16030;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16031 = nval;
          var G__16032 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__16031;
          coll__$1 = G__16032;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__16035 = coll;
      if (G__16035) {
        var bit__3695__auto__ = G__16035.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__3695__auto__ || G__16035.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__16036 = coll;
      if (G__16036) {
        var bit__3695__auto__ = G__16036.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__3695__auto__ || G__16036.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__16037__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__16037 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16037__delegate.call(this, x, y, more);
    };
    G__16037.cljs$lang$maxFixedArity = 2;
    G__16037.cljs$lang$applyTo = function(arglist__16038) {
      var x = cljs.core.first(arglist__16038);
      arglist__16038 = cljs.core.next(arglist__16038);
      var y = cljs.core.first(arglist__16038);
      var more = cljs.core.rest(arglist__16038);
      return G__16037__delegate(x, y, more);
    };
    G__16037.cljs$core$IFn$_invoke$arity$variadic = G__16037__delegate;
    return G__16037;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__16039__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__16039 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16039__delegate.call(this, x, y, more);
    };
    G__16039.cljs$lang$maxFixedArity = 2;
    G__16039.cljs$lang$applyTo = function(arglist__16040) {
      var x = cljs.core.first(arglist__16040);
      arglist__16040 = cljs.core.next(arglist__16040);
      var y = cljs.core.first(arglist__16040);
      var more = cljs.core.rest(arglist__16040);
      return G__16039__delegate(x, y, more);
    };
    G__16039.cljs$core$IFn$_invoke$arity$variadic = G__16039__delegate;
    return G__16039;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__16041__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__16041 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16041__delegate.call(this, x, y, more);
    };
    G__16041.cljs$lang$maxFixedArity = 2;
    G__16041.cljs$lang$applyTo = function(arglist__16042) {
      var x = cljs.core.first(arglist__16042);
      arglist__16042 = cljs.core.next(arglist__16042);
      var y = cljs.core.first(arglist__16042);
      var more = cljs.core.rest(arglist__16042);
      return G__16041__delegate(x, y, more);
    };
    G__16041.cljs$core$IFn$_invoke$arity$variadic = G__16041__delegate;
    return G__16041;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__16043__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__16043 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16043__delegate.call(this, x, y, more);
    };
    G__16043.cljs$lang$maxFixedArity = 2;
    G__16043.cljs$lang$applyTo = function(arglist__16044) {
      var x = cljs.core.first(arglist__16044);
      arglist__16044 = cljs.core.next(arglist__16044);
      var y = cljs.core.first(arglist__16044);
      var more = cljs.core.rest(arglist__16044);
      return G__16043__delegate(x, y, more);
    };
    G__16043.cljs$core$IFn$_invoke$arity$variadic = G__16043__delegate;
    return G__16043;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__16045__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__16046 = y;
            var G__16047 = cljs.core.first.call(null, more);
            var G__16048 = cljs.core.next.call(null, more);
            x = G__16046;
            y = G__16047;
            more = G__16048;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16045 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16045__delegate.call(this, x, y, more);
    };
    G__16045.cljs$lang$maxFixedArity = 2;
    G__16045.cljs$lang$applyTo = function(arglist__16049) {
      var x = cljs.core.first(arglist__16049);
      arglist__16049 = cljs.core.next(arglist__16049);
      var y = cljs.core.first(arglist__16049);
      var more = cljs.core.rest(arglist__16049);
      return G__16045__delegate(x, y, more);
    };
    G__16045.cljs$core$IFn$_invoke$arity$variadic = G__16045__delegate;
    return G__16045;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__16050__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16051 = y;
            var G__16052 = cljs.core.first.call(null, more);
            var G__16053 = cljs.core.next.call(null, more);
            x = G__16051;
            y = G__16052;
            more = G__16053;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16050 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16050__delegate.call(this, x, y, more);
    };
    G__16050.cljs$lang$maxFixedArity = 2;
    G__16050.cljs$lang$applyTo = function(arglist__16054) {
      var x = cljs.core.first(arglist__16054);
      arglist__16054 = cljs.core.next(arglist__16054);
      var y = cljs.core.first(arglist__16054);
      var more = cljs.core.rest(arglist__16054);
      return G__16050__delegate(x, y, more);
    };
    G__16050.cljs$core$IFn$_invoke$arity$variadic = G__16050__delegate;
    return G__16050;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__16055__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__16056 = y;
            var G__16057 = cljs.core.first.call(null, more);
            var G__16058 = cljs.core.next.call(null, more);
            x = G__16056;
            y = G__16057;
            more = G__16058;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16055 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16055__delegate.call(this, x, y, more);
    };
    G__16055.cljs$lang$maxFixedArity = 2;
    G__16055.cljs$lang$applyTo = function(arglist__16059) {
      var x = cljs.core.first(arglist__16059);
      arglist__16059 = cljs.core.next(arglist__16059);
      var y = cljs.core.first(arglist__16059);
      var more = cljs.core.rest(arglist__16059);
      return G__16055__delegate(x, y, more);
    };
    G__16055.cljs$core$IFn$_invoke$arity$variadic = G__16055__delegate;
    return G__16055;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__16060__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16061 = y;
            var G__16062 = cljs.core.first.call(null, more);
            var G__16063 = cljs.core.next.call(null, more);
            x = G__16061;
            y = G__16062;
            more = G__16063;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16060 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16060__delegate.call(this, x, y, more);
    };
    G__16060.cljs$lang$maxFixedArity = 2;
    G__16060.cljs$lang$applyTo = function(arglist__16064) {
      var x = cljs.core.first(arglist__16064);
      arglist__16064 = cljs.core.next(arglist__16064);
      var y = cljs.core.first(arglist__16064);
      var more = cljs.core.rest(arglist__16064);
      return G__16060__delegate(x, y, more);
    };
    G__16060.cljs$core$IFn$_invoke$arity$variadic = G__16060__delegate;
    return G__16060;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3359__auto__ = x;
    var y__3360__auto__ = y;
    return x__3359__auto__ > y__3360__auto__ ? x__3359__auto__ : y__3360__auto__;
  };
  var max__3 = function() {
    var G__16065__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3359__auto__ = x;
        var y__3360__auto__ = y;
        return x__3359__auto__ > y__3360__auto__ ? x__3359__auto__ : y__3360__auto__;
      }(), more);
    };
    var G__16065 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16065__delegate.call(this, x, y, more);
    };
    G__16065.cljs$lang$maxFixedArity = 2;
    G__16065.cljs$lang$applyTo = function(arglist__16066) {
      var x = cljs.core.first(arglist__16066);
      arglist__16066 = cljs.core.next(arglist__16066);
      var y = cljs.core.first(arglist__16066);
      var more = cljs.core.rest(arglist__16066);
      return G__16065__delegate(x, y, more);
    };
    G__16065.cljs$core$IFn$_invoke$arity$variadic = G__16065__delegate;
    return G__16065;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3366__auto__ = x;
    var y__3367__auto__ = y;
    return x__3366__auto__ < y__3367__auto__ ? x__3366__auto__ : y__3367__auto__;
  };
  var min__3 = function() {
    var G__16067__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3366__auto__ = x;
        var y__3367__auto__ = y;
        return x__3366__auto__ < y__3367__auto__ ? x__3366__auto__ : y__3367__auto__;
      }(), more);
    };
    var G__16067 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16067__delegate.call(this, x, y, more);
    };
    G__16067.cljs$lang$maxFixedArity = 2;
    G__16067.cljs$lang$applyTo = function(arglist__16068) {
      var x = cljs.core.first(arglist__16068);
      arglist__16068 = cljs.core.next(arglist__16068);
      var y = cljs.core.first(arglist__16068);
      var more = cljs.core.rest(arglist__16068);
      return G__16067__delegate(x, y, more);
    };
    G__16067.cljs$core$IFn$_invoke$arity$variadic = G__16067__delegate;
    return G__16067;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__16069__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__16069 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16069__delegate.call(this, x, y, more);
    };
    G__16069.cljs$lang$maxFixedArity = 2;
    G__16069.cljs$lang$applyTo = function(arglist__16070) {
      var x = cljs.core.first(arglist__16070);
      arglist__16070 = cljs.core.next(arglist__16070);
      var y = cljs.core.first(arglist__16070);
      var more = cljs.core.rest(arglist__16070);
      return G__16069__delegate(x, y, more);
    };
    G__16069.cljs$core$IFn$_invoke$arity$variadic = G__16069__delegate;
    return G__16069;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__16071__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__16071 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16071__delegate.call(this, x, y, more);
    };
    G__16071.cljs$lang$maxFixedArity = 2;
    G__16071.cljs$lang$applyTo = function(arglist__16072) {
      var x = cljs.core.first(arglist__16072);
      arglist__16072 = cljs.core.next(arglist__16072);
      var y = cljs.core.first(arglist__16072);
      var more = cljs.core.rest(arglist__16072);
      return G__16071__delegate(x, y, more);
    };
    G__16071.cljs$core$IFn$_invoke$arity$variadic = G__16071__delegate;
    return G__16071;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__16073__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__16073 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16073__delegate.call(this, x, y, more);
    };
    G__16073.cljs$lang$maxFixedArity = 2;
    G__16073.cljs$lang$applyTo = function(arglist__16074) {
      var x = cljs.core.first(arglist__16074);
      arglist__16074 = cljs.core.next(arglist__16074);
      var y = cljs.core.first(arglist__16074);
      var more = cljs.core.rest(arglist__16074);
      return G__16073__delegate(x, y, more);
    };
    G__16073.cljs$core$IFn$_invoke$arity$variadic = G__16073__delegate;
    return G__16073;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__16075__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__16075 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16075__delegate.call(this, x, y, more);
    };
    G__16075.cljs$lang$maxFixedArity = 2;
    G__16075.cljs$lang$applyTo = function(arglist__16076) {
      var x = cljs.core.first(arglist__16076);
      arglist__16076 = cljs.core.next(arglist__16076);
      var y = cljs.core.first(arglist__16076);
      var more = cljs.core.rest(arglist__16076);
      return G__16075__delegate(x, y, more);
    };
    G__16075.cljs$core$IFn$_invoke$arity$variadic = G__16075__delegate;
    return G__16075;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__16077__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__16077 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16077__delegate.call(this, x, y, more);
    };
    G__16077.cljs$lang$maxFixedArity = 2;
    G__16077.cljs$lang$applyTo = function(arglist__16078) {
      var x = cljs.core.first(arglist__16078);
      arglist__16078 = cljs.core.next(arglist__16078);
      var y = cljs.core.first(arglist__16078);
      var more = cljs.core.rest(arglist__16078);
      return G__16077__delegate(x, y, more);
    };
    G__16077.cljs$core$IFn$_invoke$arity$variadic = G__16077__delegate;
    return G__16077;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__16079__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__16079 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16079__delegate.call(this, x, y, more);
    };
    G__16079.cljs$lang$maxFixedArity = 2;
    G__16079.cljs$lang$applyTo = function(arglist__16080) {
      var x = cljs.core.first(arglist__16080);
      arglist__16080 = cljs.core.next(arglist__16080);
      var y = cljs.core.first(arglist__16080);
      var more = cljs.core.rest(arglist__16080);
      return G__16079__delegate(x, y, more);
    };
    G__16079.cljs$core$IFn$_invoke$arity$variadic = G__16079__delegate;
    return G__16079;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__16081__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__16081 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16081__delegate.call(this, x, y, more);
    };
    G__16081.cljs$lang$maxFixedArity = 2;
    G__16081.cljs$lang$applyTo = function(arglist__16082) {
      var x = cljs.core.first(arglist__16082);
      arglist__16082 = cljs.core.next(arglist__16082);
      var y = cljs.core.first(arglist__16082);
      var more = cljs.core.rest(arglist__16082);
      return G__16081__delegate(x, y, more);
    };
    G__16081.cljs$core$IFn$_invoke$arity$variadic = G__16081__delegate;
    return G__16081;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__16083__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__16084 = y;
            var G__16085 = cljs.core.first.call(null, more);
            var G__16086 = cljs.core.next.call(null, more);
            x = G__16084;
            y = G__16085;
            more = G__16086;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16083 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16083__delegate.call(this, x, y, more);
    };
    G__16083.cljs$lang$maxFixedArity = 2;
    G__16083.cljs$lang$applyTo = function(arglist__16087) {
      var x = cljs.core.first(arglist__16087);
      arglist__16087 = cljs.core.next(arglist__16087);
      var y = cljs.core.first(arglist__16087);
      var more = cljs.core.rest(arglist__16087);
      return G__16083__delegate(x, y, more);
    };
    G__16083.cljs$core$IFn$_invoke$arity$variadic = G__16083__delegate;
    return G__16083;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__16088 = n__$1 - 1;
      var G__16089 = cljs.core.next.call(null, xs);
      n__$1 = G__16088;
      xs = G__16089;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__16090__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__16091 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__16092 = cljs.core.next.call(null, more);
          sb = G__16091;
          more = G__16092;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__16090 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16090__delegate.call(this, x, ys);
    };
    G__16090.cljs$lang$maxFixedArity = 1;
    G__16090.cljs$lang$applyTo = function(arglist__16093) {
      var x = cljs.core.first(arglist__16093);
      var ys = cljs.core.rest(arglist__16093);
      return G__16090__delegate(x, ys);
    };
    G__16090.cljs$core$IFn$_invoke$arity$variadic = G__16090__delegate;
    return G__16090;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__16094 = cljs.core.next.call(null, xs);
            var G__16095 = cljs.core.next.call(null, ys);
            xs = G__16094;
            ys = G__16095;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__16096 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__16097 = cljs.core.next.call(null, s);
        res = G__16096;
        s = G__16097;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__16098 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__16099 = cljs.core.next.call(null, s);
      h = G__16098;
      s = G__16099;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__16100 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__16101 = cljs.core.next.call(null, s__$1);
      h = G__16100;
      s__$1 = G__16101;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__16108_16114 = cljs.core.seq.call(null, fn_map);
  var chunk__16109_16115 = null;
  var count__16110_16116 = 0;
  var i__16111_16117 = 0;
  while (true) {
    if (i__16111_16117 < count__16110_16116) {
      var vec__16112_16118 = cljs.core._nth.call(null, chunk__16109_16115, i__16111_16117);
      var key_name_16119 = cljs.core.nth.call(null, vec__16112_16118, 0, null);
      var f_16120 = cljs.core.nth.call(null, vec__16112_16118, 1, null);
      var str_name_16121 = cljs.core.name.call(null, key_name_16119);
      obj[str_name_16121] = f_16120;
      var G__16122 = seq__16108_16114;
      var G__16123 = chunk__16109_16115;
      var G__16124 = count__16110_16116;
      var G__16125 = i__16111_16117 + 1;
      seq__16108_16114 = G__16122;
      chunk__16109_16115 = G__16123;
      count__16110_16116 = G__16124;
      i__16111_16117 = G__16125;
      continue;
    } else {
      var temp__4126__auto___16126 = cljs.core.seq.call(null, seq__16108_16114);
      if (temp__4126__auto___16126) {
        var seq__16108_16127__$1 = temp__4126__auto___16126;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16108_16127__$1)) {
          var c__3808__auto___16128 = cljs.core.chunk_first.call(null, seq__16108_16127__$1);
          var G__16129 = cljs.core.chunk_rest.call(null, seq__16108_16127__$1);
          var G__16130 = c__3808__auto___16128;
          var G__16131 = cljs.core.count.call(null, c__3808__auto___16128);
          var G__16132 = 0;
          seq__16108_16114 = G__16129;
          chunk__16109_16115 = G__16130;
          count__16110_16116 = G__16131;
          i__16111_16117 = G__16132;
          continue;
        } else {
          var vec__16113_16133 = cljs.core.first.call(null, seq__16108_16127__$1);
          var key_name_16134 = cljs.core.nth.call(null, vec__16113_16133, 0, null);
          var f_16135 = cljs.core.nth.call(null, vec__16113_16133, 1, null);
          var str_name_16136 = cljs.core.name.call(null, key_name_16134);
          obj[str_name_16136] = f_16135;
          var G__16137 = cljs.core.next.call(null, seq__16108_16127__$1);
          var G__16138 = null;
          var G__16139 = 0;
          var G__16140 = 0;
          seq__16108_16114 = G__16137;
          chunk__16109_16115 = G__16138;
          count__16110_16116 = G__16139;
          i__16111_16117 = G__16140;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__16142 = coll;
  if (G__16142) {
    var bit__3702__auto__ = G__16142.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__3702__auto__ || G__16142.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__16142.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16142);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16142);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__16143 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__16143;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__16144 = i - 1;
        var G__16145 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__16144;
        r = G__16145;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__16146) {
    var xs = cljs.core.seq(arglist__16146);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3052__auto__ = coll == null;
    if (or__3052__auto__) {
      return or__3052__auto__;
    } else {
      var G__16150 = coll;
      if (G__16150) {
        var bit__3695__auto__ = G__16150.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__3695__auto__ || G__16150.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__16152 = x;
  if (G__16152) {
    var bit__3702__auto__ = G__16152.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__3702__auto__ || G__16152.cljs$core$IList$) {
      return true;
    } else {
      if (!G__16152.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16152);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16152);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__3463__auto__ = self__._hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__16154 = null;
  var G__16154__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__16154__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__16154 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16154__2.call(this, self__, coll);
      case 3:
        return G__16154__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16154;
}();
cljs.core.Keyword.prototype.apply = function(self__, args16153) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16153)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__16156 = x;
    if (G__16156) {
      var bit__3695__auto__ = G__16156.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__3695__auto__ || G__16156.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__16157 = ls.sval();
        ls = G__16157;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__16159 = s;
    if (G__16159) {
      var bit__3695__auto__ = G__16159.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__3695__auto__ || G__16159.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__16160 = cljs.core.next.call(null, s__$1);
      s__$1 = G__16160;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_16161 = 0;
  var xs_16162 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_16162) {
      ret[i_16161] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_16162));
      var G__16163 = i_16161 + 1;
      var G__16164 = cljs.core.next.call(null, xs_16162);
      i_16161 = G__16163;
      xs_16162 = G__16164;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16165 = i + 1;
          var G__16166 = cljs.core.next.call(null, s__$1);
          i = G__16165;
          s__$1 = G__16166;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3908__auto___16167 = size;
      var i_16168 = 0;
      while (true) {
        if (i_16168 < n__3908__auto___16167) {
          a[i_16168] = init_val_or_seq;
          var G__16169 = i_16168 + 1;
          i_16168 = G__16169;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16170 = i + 1;
          var G__16171 = cljs.core.next.call(null, s__$1);
          i = G__16170;
          s__$1 = G__16171;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3908__auto___16172 = size;
      var i_16173 = 0;
      while (true) {
        if (i_16173 < n__3908__auto___16172) {
          a[i_16173] = init_val_or_seq;
          var G__16174 = i_16173 + 1;
          i_16173 = G__16174;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16175 = i + 1;
          var G__16176 = cljs.core.next.call(null, s__$1);
          i = G__16175;
          s__$1 = G__16176;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3908__auto___16177 = size;
      var i_16178 = 0;
      while (true) {
        if (i_16178 < n__3908__auto___16177) {
          a[i_16178] = init_val_or_seq;
          var G__16179 = i_16178 + 1;
          i_16178 = G__16179;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16180 = i + 1;
          var G__16181 = cljs.core.next.call(null, s__$1);
          i = G__16180;
          s__$1 = G__16181;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3908__auto___16182 = size;
      var i_16183 = 0;
      while (true) {
        if (i_16183 < n__3908__auto___16182) {
          a[i_16183] = init_val_or_seq;
          var G__16184 = i_16183 + 1;
          i_16183 = G__16184;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__16185 = cljs.core.next.call(null, s__$1);
        var G__16186 = i - 1;
        var G__16187 = sum + 1;
        s__$1 = G__16185;
        i = G__16186;
        sum = G__16187;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__16188__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__16188 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16188__delegate.call(this, x, y, zs);
    };
    G__16188.cljs$lang$maxFixedArity = 2;
    G__16188.cljs$lang$applyTo = function(arglist__16189) {
      var x = cljs.core.first(arglist__16189);
      arglist__16189 = cljs.core.next(arglist__16189);
      var y = cljs.core.first(arglist__16189);
      var zs = cljs.core.rest(arglist__16189);
      return G__16188__delegate(x, y, zs);
    };
    G__16188.cljs$core$IFn$_invoke$arity$variadic = G__16188__delegate;
    return G__16188;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__16190__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__16190 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16190__delegate.call(this, a, b, c, d, more);
    };
    G__16190.cljs$lang$maxFixedArity = 4;
    G__16190.cljs$lang$applyTo = function(arglist__16191) {
      var a = cljs.core.first(arglist__16191);
      arglist__16191 = cljs.core.next(arglist__16191);
      var b = cljs.core.first(arglist__16191);
      arglist__16191 = cljs.core.next(arglist__16191);
      var c = cljs.core.first(arglist__16191);
      arglist__16191 = cljs.core.next(arglist__16191);
      var d = cljs.core.first(arglist__16191);
      var more = cljs.core.rest(arglist__16191);
      return G__16190__delegate(a, b, c, d, more);
    };
    G__16190.cljs$core$IFn$_invoke$arity$variadic = G__16190__delegate;
    return G__16190;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__16192__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16193 = ntcoll;
          var G__16194 = cljs.core.first.call(null, vals);
          var G__16195 = cljs.core.next.call(null, vals);
          tcoll = G__16193;
          val = G__16194;
          vals = G__16195;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16192 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16192__delegate.call(this, tcoll, val, vals);
    };
    G__16192.cljs$lang$maxFixedArity = 2;
    G__16192.cljs$lang$applyTo = function(arglist__16196) {
      var tcoll = cljs.core.first(arglist__16196);
      arglist__16196 = cljs.core.next(arglist__16196);
      var val = cljs.core.first(arglist__16196);
      var vals = cljs.core.rest(arglist__16196);
      return G__16192__delegate(tcoll, val, vals);
    };
    G__16192.cljs$core$IFn$_invoke$arity$variadic = G__16192__delegate;
    return G__16192;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__16197__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__16198 = ntcoll;
          var G__16199 = cljs.core.first.call(null, kvs);
          var G__16200 = cljs.core.second.call(null, kvs);
          var G__16201 = cljs.core.nnext.call(null, kvs);
          tcoll = G__16198;
          key = G__16199;
          val = G__16200;
          kvs = G__16201;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16197 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16197__delegate.call(this, tcoll, key, val, kvs);
    };
    G__16197.cljs$lang$maxFixedArity = 3;
    G__16197.cljs$lang$applyTo = function(arglist__16202) {
      var tcoll = cljs.core.first(arglist__16202);
      arglist__16202 = cljs.core.next(arglist__16202);
      var key = cljs.core.first(arglist__16202);
      arglist__16202 = cljs.core.next(arglist__16202);
      var val = cljs.core.first(arglist__16202);
      var kvs = cljs.core.rest(arglist__16202);
      return G__16197__delegate(tcoll, key, val, kvs);
    };
    G__16197.cljs$core$IFn$_invoke$arity$variadic = G__16197__delegate;
    return G__16197;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__16203__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__16204 = ntcoll;
          var G__16205 = cljs.core.first.call(null, ks);
          var G__16206 = cljs.core.next.call(null, ks);
          tcoll = G__16204;
          key = G__16205;
          ks = G__16206;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16203 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16203__delegate.call(this, tcoll, key, ks);
    };
    G__16203.cljs$lang$maxFixedArity = 2;
    G__16203.cljs$lang$applyTo = function(arglist__16207) {
      var tcoll = cljs.core.first(arglist__16207);
      arglist__16207 = cljs.core.next(arglist__16207);
      var key = cljs.core.first(arglist__16207);
      var ks = cljs.core.rest(arglist__16207);
      return G__16203__delegate(tcoll, key, ks);
    };
    G__16203.cljs$core$IFn$_invoke$arity$variadic = G__16203__delegate;
    return G__16203;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__16208__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16209 = ntcoll;
          var G__16210 = cljs.core.first.call(null, vals);
          var G__16211 = cljs.core.next.call(null, vals);
          tcoll = G__16209;
          val = G__16210;
          vals = G__16211;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16208 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16208__delegate.call(this, tcoll, val, vals);
    };
    G__16208.cljs$lang$maxFixedArity = 2;
    G__16208.cljs$lang$applyTo = function(arglist__16212) {
      var tcoll = cljs.core.first(arglist__16212);
      arglist__16212 = cljs.core.next(arglist__16212);
      var val = cljs.core.first(arglist__16212);
      var vals = cljs.core.rest(arglist__16212);
      return G__16208__delegate(tcoll, val, vals);
    };
    G__16208.cljs$core$IFn$_invoke$arity$variadic = G__16208__delegate;
    return G__16208;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a3952 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a3952);
      } else {
        return f.call(null, a3952);
      }
    } else {
      var b3953 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a3952, b3953);
        } else {
          return f.call(null, a3952, b3953);
        }
      } else {
        var c3954 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a3952, b3953, c3954);
          } else {
            return f.call(null, a3952, b3953, c3954);
          }
        } else {
          var d3955 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a3952, b3953, c3954, d3955);
            } else {
              return f.call(null, a3952, b3953, c3954, d3955);
            }
          } else {
            var e3956 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a3952, b3953, c3954, d3955, e3956);
              } else {
                return f.call(null, a3952, b3953, c3954, d3955, e3956);
              }
            } else {
              var f3957 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a3952, b3953, c3954, d3955, e3956, f3957);
                } else {
                  return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957);
                }
              } else {
                var g3958 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a3952, b3953, c3954, d3955, e3956, f3957, g3958);
                  } else {
                    return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958);
                  }
                } else {
                  var h3959 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959);
                    } else {
                      return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959);
                    }
                  } else {
                    var i3960 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960);
                      } else {
                        return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960);
                      }
                    } else {
                      var j3961 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961);
                        } else {
                          return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961);
                        }
                      } else {
                        var k3962 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962);
                          } else {
                            return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962);
                          }
                        } else {
                          var l3963 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963);
                            } else {
                              return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963);
                            }
                          } else {
                            var m3964 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964);
                              } else {
                                return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964);
                              }
                            } else {
                              var n3965 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965);
                                } else {
                                  return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965);
                                }
                              } else {
                                var o3966 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966);
                                  } else {
                                    return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966);
                                  }
                                } else {
                                  var p3967 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967);
                                    } else {
                                      return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967);
                                    }
                                  } else {
                                    var q3968 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967, q3968);
                                      } else {
                                        return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967, q3968);
                                      }
                                    } else {
                                      var r3969 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967, q3968, r3969);
                                        } else {
                                          return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967, q3968, r3969);
                                        }
                                      } else {
                                        var s3970 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967, q3968, r3969, s3970);
                                          } else {
                                            return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967, q3968, r3969, s3970);
                                          }
                                        } else {
                                          var t3971 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967, q3968, r3969, s3970, t3971);
                                            } else {
                                              return f.call(null, a3952, b3953, c3954, d3955, e3956, f3957, g3958, h3959, i3960, j3961, k3962, l3963, m3964, n3965, o3966, p3967, q3968, r3969, s3970, t3971);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__16213__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__16213 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__16213__delegate.call(this, f, a, b, c, d, args);
    };
    G__16213.cljs$lang$maxFixedArity = 5;
    G__16213.cljs$lang$applyTo = function(arglist__16214) {
      var f = cljs.core.first(arglist__16214);
      arglist__16214 = cljs.core.next(arglist__16214);
      var a = cljs.core.first(arglist__16214);
      arglist__16214 = cljs.core.next(arglist__16214);
      var b = cljs.core.first(arglist__16214);
      arglist__16214 = cljs.core.next(arglist__16214);
      var c = cljs.core.first(arglist__16214);
      arglist__16214 = cljs.core.next(arglist__16214);
      var d = cljs.core.first(arglist__16214);
      var args = cljs.core.rest(arglist__16214);
      return G__16213__delegate(f, a, b, c, d, args);
    };
    G__16213.cljs$core$IFn$_invoke$arity$variadic = G__16213__delegate;
    return G__16213;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__16215__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__16215 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16215__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__16215.cljs$lang$maxFixedArity = 6;
    G__16215.cljs$lang$applyTo = function(arglist__16216) {
      var obj = cljs.core.first(arglist__16216);
      arglist__16216 = cljs.core.next(arglist__16216);
      var f = cljs.core.first(arglist__16216);
      arglist__16216 = cljs.core.next(arglist__16216);
      var a = cljs.core.first(arglist__16216);
      arglist__16216 = cljs.core.next(arglist__16216);
      var b = cljs.core.first(arglist__16216);
      arglist__16216 = cljs.core.next(arglist__16216);
      var c = cljs.core.first(arglist__16216);
      arglist__16216 = cljs.core.next(arglist__16216);
      var d = cljs.core.first(arglist__16216);
      var args = cljs.core.rest(arglist__16216);
      return G__16215__delegate(obj, f, a, b, c, d, args);
    };
    G__16215.cljs$core$IFn$_invoke$arity$variadic = G__16215__delegate;
    return G__16215;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__16217__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__16217 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16217__delegate.call(this, x, y, more);
    };
    G__16217.cljs$lang$maxFixedArity = 2;
    G__16217.cljs$lang$applyTo = function(arglist__16218) {
      var x = cljs.core.first(arglist__16218);
      arglist__16218 = cljs.core.next(arglist__16218);
      var y = cljs.core.first(arglist__16218);
      var more = cljs.core.rest(arglist__16218);
      return G__16217__delegate(x, y, more);
    };
    G__16217.cljs$core$IFn$_invoke$arity$variadic = G__16217__delegate;
    return G__16217;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__16219 = pred;
        var G__16220 = cljs.core.next.call(null, coll);
        pred = G__16219;
        coll = G__16220;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3052__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        var G__16221 = pred;
        var G__16222 = cljs.core.next.call(null, coll);
        pred = G__16221;
        coll = G__16222;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__16223 = null;
    var G__16223__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__16223__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__16223__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__16223__3 = function() {
      var G__16224__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__16224 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__16224__delegate.call(this, x, y, zs);
      };
      G__16224.cljs$lang$maxFixedArity = 2;
      G__16224.cljs$lang$applyTo = function(arglist__16225) {
        var x = cljs.core.first(arglist__16225);
        arglist__16225 = cljs.core.next(arglist__16225);
        var y = cljs.core.first(arglist__16225);
        var zs = cljs.core.rest(arglist__16225);
        return G__16224__delegate(x, y, zs);
      };
      G__16224.cljs$core$IFn$_invoke$arity$variadic = G__16224__delegate;
      return G__16224;
    }();
    G__16223 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__16223__0.call(this);
        case 1:
          return G__16223__1.call(this, x);
        case 2:
          return G__16223__2.call(this, x, y);
        default:
          return G__16223__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16223.cljs$lang$maxFixedArity = 2;
    G__16223.cljs$lang$applyTo = G__16223__3.cljs$lang$applyTo;
    return G__16223;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__16226__delegate = function(args) {
      return x;
    };
    var G__16226 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16226__delegate.call(this, args);
    };
    G__16226.cljs$lang$maxFixedArity = 0;
    G__16226.cljs$lang$applyTo = function(arglist__16227) {
      var args = cljs.core.seq(arglist__16227);
      return G__16226__delegate(args);
    };
    G__16226.cljs$core$IFn$_invoke$arity$variadic = G__16226__delegate;
    return G__16226;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__16228 = null;
      var G__16228__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__16228__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__16228__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__16228__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__16228__4 = function() {
        var G__16229__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__16229 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16229__delegate.call(this, x, y, z, args);
        };
        G__16229.cljs$lang$maxFixedArity = 3;
        G__16229.cljs$lang$applyTo = function(arglist__16230) {
          var x = cljs.core.first(arglist__16230);
          arglist__16230 = cljs.core.next(arglist__16230);
          var y = cljs.core.first(arglist__16230);
          arglist__16230 = cljs.core.next(arglist__16230);
          var z = cljs.core.first(arglist__16230);
          var args = cljs.core.rest(arglist__16230);
          return G__16229__delegate(x, y, z, args);
        };
        G__16229.cljs$core$IFn$_invoke$arity$variadic = G__16229__delegate;
        return G__16229;
      }();
      G__16228 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16228__0.call(this);
          case 1:
            return G__16228__1.call(this, x);
          case 2:
            return G__16228__2.call(this, x, y);
          case 3:
            return G__16228__3.call(this, x, y, z);
          default:
            return G__16228__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16228.cljs$lang$maxFixedArity = 3;
      G__16228.cljs$lang$applyTo = G__16228__4.cljs$lang$applyTo;
      return G__16228;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__16231 = null;
      var G__16231__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__16231__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__16231__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__16231__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__16231__4 = function() {
        var G__16232__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__16232 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16232__delegate.call(this, x, y, z, args);
        };
        G__16232.cljs$lang$maxFixedArity = 3;
        G__16232.cljs$lang$applyTo = function(arglist__16233) {
          var x = cljs.core.first(arglist__16233);
          arglist__16233 = cljs.core.next(arglist__16233);
          var y = cljs.core.first(arglist__16233);
          arglist__16233 = cljs.core.next(arglist__16233);
          var z = cljs.core.first(arglist__16233);
          var args = cljs.core.rest(arglist__16233);
          return G__16232__delegate(x, y, z, args);
        };
        G__16232.cljs$core$IFn$_invoke$arity$variadic = G__16232__delegate;
        return G__16232;
      }();
      G__16231 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16231__0.call(this);
          case 1:
            return G__16231__1.call(this, x);
          case 2:
            return G__16231__2.call(this, x, y);
          case 3:
            return G__16231__3.call(this, x, y, z);
          default:
            return G__16231__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16231.cljs$lang$maxFixedArity = 3;
      G__16231.cljs$lang$applyTo = G__16231__4.cljs$lang$applyTo;
      return G__16231;
    }();
  };
  var comp__4 = function() {
    var G__16234__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__16235__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__16236 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__16237 = cljs.core.next.call(null, fs__$2);
                ret = G__16236;
                fs__$2 = G__16237;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__16235 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__16235__delegate.call(this, args);
          };
          G__16235.cljs$lang$maxFixedArity = 0;
          G__16235.cljs$lang$applyTo = function(arglist__16238) {
            var args = cljs.core.seq(arglist__16238);
            return G__16235__delegate(args);
          };
          G__16235.cljs$core$IFn$_invoke$arity$variadic = G__16235__delegate;
          return G__16235;
        }();
      }(fs__$1);
    };
    var G__16234 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16234__delegate.call(this, f1, f2, f3, fs);
    };
    G__16234.cljs$lang$maxFixedArity = 3;
    G__16234.cljs$lang$applyTo = function(arglist__16239) {
      var f1 = cljs.core.first(arglist__16239);
      arglist__16239 = cljs.core.next(arglist__16239);
      var f2 = cljs.core.first(arglist__16239);
      arglist__16239 = cljs.core.next(arglist__16239);
      var f3 = cljs.core.first(arglist__16239);
      var fs = cljs.core.rest(arglist__16239);
      return G__16234__delegate(f1, f2, f3, fs);
    };
    G__16234.cljs$core$IFn$_invoke$arity$variadic = G__16234__delegate;
    return G__16234;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__16240__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__16240 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16240__delegate.call(this, args);
      };
      G__16240.cljs$lang$maxFixedArity = 0;
      G__16240.cljs$lang$applyTo = function(arglist__16241) {
        var args = cljs.core.seq(arglist__16241);
        return G__16240__delegate(args);
      };
      G__16240.cljs$core$IFn$_invoke$arity$variadic = G__16240__delegate;
      return G__16240;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__16242__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__16242 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16242__delegate.call(this, args);
      };
      G__16242.cljs$lang$maxFixedArity = 0;
      G__16242.cljs$lang$applyTo = function(arglist__16243) {
        var args = cljs.core.seq(arglist__16243);
        return G__16242__delegate(args);
      };
      G__16242.cljs$core$IFn$_invoke$arity$variadic = G__16242__delegate;
      return G__16242;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__16244__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__16244 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16244__delegate.call(this, args);
      };
      G__16244.cljs$lang$maxFixedArity = 0;
      G__16244.cljs$lang$applyTo = function(arglist__16245) {
        var args = cljs.core.seq(arglist__16245);
        return G__16244__delegate(args);
      };
      G__16244.cljs$core$IFn$_invoke$arity$variadic = G__16244__delegate;
      return G__16244;
    }();
  };
  var partial__5 = function() {
    var G__16246__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__16247__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__16247 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16247__delegate.call(this, args);
        };
        G__16247.cljs$lang$maxFixedArity = 0;
        G__16247.cljs$lang$applyTo = function(arglist__16248) {
          var args = cljs.core.seq(arglist__16248);
          return G__16247__delegate(args);
        };
        G__16247.cljs$core$IFn$_invoke$arity$variadic = G__16247__delegate;
        return G__16247;
      }();
    };
    var G__16246 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16246__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__16246.cljs$lang$maxFixedArity = 4;
    G__16246.cljs$lang$applyTo = function(arglist__16249) {
      var f = cljs.core.first(arglist__16249);
      arglist__16249 = cljs.core.next(arglist__16249);
      var arg1 = cljs.core.first(arglist__16249);
      arglist__16249 = cljs.core.next(arglist__16249);
      var arg2 = cljs.core.first(arglist__16249);
      arglist__16249 = cljs.core.next(arglist__16249);
      var arg3 = cljs.core.first(arglist__16249);
      var more = cljs.core.rest(arglist__16249);
      return G__16246__delegate(f, arg1, arg2, arg3, more);
    };
    G__16246.cljs$core$IFn$_invoke$arity$variadic = G__16246__delegate;
    return G__16246;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__16250 = null;
      var G__16250__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__16250__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__16250__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__16250__4 = function() {
        var G__16251__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__16251 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16251__delegate.call(this, a, b, c, ds);
        };
        G__16251.cljs$lang$maxFixedArity = 3;
        G__16251.cljs$lang$applyTo = function(arglist__16252) {
          var a = cljs.core.first(arglist__16252);
          arglist__16252 = cljs.core.next(arglist__16252);
          var b = cljs.core.first(arglist__16252);
          arglist__16252 = cljs.core.next(arglist__16252);
          var c = cljs.core.first(arglist__16252);
          var ds = cljs.core.rest(arglist__16252);
          return G__16251__delegate(a, b, c, ds);
        };
        G__16251.cljs$core$IFn$_invoke$arity$variadic = G__16251__delegate;
        return G__16251;
      }();
      G__16250 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__16250__1.call(this, a);
          case 2:
            return G__16250__2.call(this, a, b);
          case 3:
            return G__16250__3.call(this, a, b, c);
          default:
            return G__16250__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16250.cljs$lang$maxFixedArity = 3;
      G__16250.cljs$lang$applyTo = G__16250__4.cljs$lang$applyTo;
      return G__16250;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__16253 = null;
      var G__16253__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16253__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__16253__4 = function() {
        var G__16254__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__16254 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16254__delegate.call(this, a, b, c, ds);
        };
        G__16254.cljs$lang$maxFixedArity = 3;
        G__16254.cljs$lang$applyTo = function(arglist__16255) {
          var a = cljs.core.first(arglist__16255);
          arglist__16255 = cljs.core.next(arglist__16255);
          var b = cljs.core.first(arglist__16255);
          arglist__16255 = cljs.core.next(arglist__16255);
          var c = cljs.core.first(arglist__16255);
          var ds = cljs.core.rest(arglist__16255);
          return G__16254__delegate(a, b, c, ds);
        };
        G__16254.cljs$core$IFn$_invoke$arity$variadic = G__16254__delegate;
        return G__16254;
      }();
      G__16253 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16253__2.call(this, a, b);
          case 3:
            return G__16253__3.call(this, a, b, c);
          default:
            return G__16253__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16253.cljs$lang$maxFixedArity = 3;
      G__16253.cljs$lang$applyTo = G__16253__4.cljs$lang$applyTo;
      return G__16253;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__16256 = null;
      var G__16256__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16256__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__16256__4 = function() {
        var G__16257__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__16257 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16257__delegate.call(this, a, b, c, ds);
        };
        G__16257.cljs$lang$maxFixedArity = 3;
        G__16257.cljs$lang$applyTo = function(arglist__16258) {
          var a = cljs.core.first(arglist__16258);
          arglist__16258 = cljs.core.next(arglist__16258);
          var b = cljs.core.first(arglist__16258);
          arglist__16258 = cljs.core.next(arglist__16258);
          var c = cljs.core.first(arglist__16258);
          var ds = cljs.core.rest(arglist__16258);
          return G__16257__delegate(a, b, c, ds);
        };
        G__16257.cljs$core$IFn$_invoke$arity$variadic = G__16257__delegate;
        return G__16257;
      }();
      G__16256 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16256__2.call(this, a, b);
          case 3:
            return G__16256__3.call(this, a, b, c);
          default:
            return G__16256__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16256.cljs$lang$maxFixedArity = 3;
      G__16256.cljs$lang$applyTo = G__16256__4.cljs$lang$applyTo;
      return G__16256;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3908__auto___16259 = size;
          var i_16260 = 0;
          while (true) {
            if (i_16260 < n__3908__auto___16259) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_16260, cljs.core._nth.call(null, c, i_16260)));
              var G__16261 = i_16260 + 1;
              i_16260 = G__16261;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__3908__auto___16262 = size;
        var i_16263 = 0;
        while (true) {
          if (i_16263 < n__3908__auto___16262) {
            var x_16264 = f.call(null, cljs.core._nth.call(null, c, i_16263));
            if (x_16264 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_16264);
            }
            var G__16265 = i_16263 + 1;
            i_16263 = G__16265;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3908__auto___16266 = size;
          var i_16267 = 0;
          while (true) {
            if (i_16267 < n__3908__auto___16266) {
              var x_16268 = f.call(null, idx + i_16267, cljs.core._nth.call(null, c, i_16267));
              if (x_16268 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_16268);
              }
              var G__16269 = i_16267 + 1;
              i_16267 = G__16269;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3040__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3040__auto__)) {
            return p.call(null, y);
          } else {
            return and__3040__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3040__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3040__auto__)) {
            var and__3040__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3040__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3040__auto____$1;
            }
          } else {
            return and__3040__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__16276__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__16276 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16276__delegate.call(this, x, y, z, args);
        };
        G__16276.cljs$lang$maxFixedArity = 3;
        G__16276.cljs$lang$applyTo = function(arglist__16277) {
          var x = cljs.core.first(arglist__16277);
          arglist__16277 = cljs.core.next(arglist__16277);
          var y = cljs.core.first(arglist__16277);
          arglist__16277 = cljs.core.next(arglist__16277);
          var z = cljs.core.first(arglist__16277);
          var args = cljs.core.rest(arglist__16277);
          return G__16276__delegate(x, y, z, args);
        };
        G__16276.cljs$core$IFn$_invoke$arity$variadic = G__16276__delegate;
        return G__16276;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3040__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3040__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3040__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3040__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3040__auto__)) {
            var and__3040__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3040__auto____$1)) {
              var and__3040__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3040__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3040__auto____$2;
              }
            } else {
              return and__3040__auto____$1;
            }
          } else {
            return and__3040__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3040__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3040__auto__)) {
            var and__3040__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3040__auto____$1)) {
              var and__3040__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3040__auto____$2)) {
                var and__3040__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3040__auto____$3)) {
                  var and__3040__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3040__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3040__auto____$4;
                  }
                } else {
                  return and__3040__auto____$3;
                }
              } else {
                return and__3040__auto____$2;
              }
            } else {
              return and__3040__auto____$1;
            }
          } else {
            return and__3040__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__16278__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16270_SHARP_) {
            var and__3040__auto__ = p1.call(null, p1__16270_SHARP_);
            if (cljs.core.truth_(and__3040__auto__)) {
              return p2.call(null, p1__16270_SHARP_);
            } else {
              return and__3040__auto__;
            }
          }, args));
        };
        var G__16278 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16278__delegate.call(this, x, y, z, args);
        };
        G__16278.cljs$lang$maxFixedArity = 3;
        G__16278.cljs$lang$applyTo = function(arglist__16279) {
          var x = cljs.core.first(arglist__16279);
          arglist__16279 = cljs.core.next(arglist__16279);
          var y = cljs.core.first(arglist__16279);
          arglist__16279 = cljs.core.next(arglist__16279);
          var z = cljs.core.first(arglist__16279);
          var args = cljs.core.rest(arglist__16279);
          return G__16278__delegate(x, y, z, args);
        };
        G__16278.cljs$core$IFn$_invoke$arity$variadic = G__16278__delegate;
        return G__16278;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3040__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3040__auto__)) {
            var and__3040__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3040__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3040__auto____$1;
            }
          } else {
            return and__3040__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3040__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3040__auto__)) {
            var and__3040__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3040__auto____$1)) {
              var and__3040__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3040__auto____$2)) {
                var and__3040__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3040__auto____$3)) {
                  var and__3040__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3040__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3040__auto____$4;
                  }
                } else {
                  return and__3040__auto____$3;
                }
              } else {
                return and__3040__auto____$2;
              }
            } else {
              return and__3040__auto____$1;
            }
          } else {
            return and__3040__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3040__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3040__auto__)) {
            var and__3040__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3040__auto____$1)) {
              var and__3040__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3040__auto____$2)) {
                var and__3040__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3040__auto____$3)) {
                  var and__3040__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3040__auto____$4)) {
                    var and__3040__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3040__auto____$5)) {
                      var and__3040__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3040__auto____$6)) {
                        var and__3040__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3040__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3040__auto____$7;
                        }
                      } else {
                        return and__3040__auto____$6;
                      }
                    } else {
                      return and__3040__auto____$5;
                    }
                  } else {
                    return and__3040__auto____$4;
                  }
                } else {
                  return and__3040__auto____$3;
                }
              } else {
                return and__3040__auto____$2;
              }
            } else {
              return and__3040__auto____$1;
            }
          } else {
            return and__3040__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__16280__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16271_SHARP_) {
            var and__3040__auto__ = p1.call(null, p1__16271_SHARP_);
            if (cljs.core.truth_(and__3040__auto__)) {
              var and__3040__auto____$1 = p2.call(null, p1__16271_SHARP_);
              if (cljs.core.truth_(and__3040__auto____$1)) {
                return p3.call(null, p1__16271_SHARP_);
              } else {
                return and__3040__auto____$1;
              }
            } else {
              return and__3040__auto__;
            }
          }, args));
        };
        var G__16280 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16280__delegate.call(this, x, y, z, args);
        };
        G__16280.cljs$lang$maxFixedArity = 3;
        G__16280.cljs$lang$applyTo = function(arglist__16281) {
          var x = cljs.core.first(arglist__16281);
          arglist__16281 = cljs.core.next(arglist__16281);
          var y = cljs.core.first(arglist__16281);
          arglist__16281 = cljs.core.next(arglist__16281);
          var z = cljs.core.first(arglist__16281);
          var args = cljs.core.rest(arglist__16281);
          return G__16280__delegate(x, y, z, args);
        };
        G__16280.cljs$core$IFn$_invoke$arity$variadic = G__16280__delegate;
        return G__16280;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__16282__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16272_SHARP_) {
                return p1__16272_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16273_SHARP_) {
                var and__3040__auto__ = p1__16273_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3040__auto__)) {
                  return p1__16273_SHARP_.call(null, y);
                } else {
                  return and__3040__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16274_SHARP_) {
                var and__3040__auto__ = p1__16274_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3040__auto__)) {
                  var and__3040__auto____$1 = p1__16274_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3040__auto____$1)) {
                    return p1__16274_SHARP_.call(null, z);
                  } else {
                    return and__3040__auto____$1;
                  }
                } else {
                  return and__3040__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__16283__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__16275_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__16275_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__16283 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16283__delegate.call(this, x, y, z, args);
            };
            G__16283.cljs$lang$maxFixedArity = 3;
            G__16283.cljs$lang$applyTo = function(arglist__16284) {
              var x = cljs.core.first(arglist__16284);
              arglist__16284 = cljs.core.next(arglist__16284);
              var y = cljs.core.first(arglist__16284);
              arglist__16284 = cljs.core.next(arglist__16284);
              var z = cljs.core.first(arglist__16284);
              var args = cljs.core.rest(arglist__16284);
              return G__16283__delegate(x, y, z, args);
            };
            G__16283.cljs$core$IFn$_invoke$arity$variadic = G__16283__delegate;
            return G__16283;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__16282 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16282__delegate.call(this, p1, p2, p3, ps);
    };
    G__16282.cljs$lang$maxFixedArity = 3;
    G__16282.cljs$lang$applyTo = function(arglist__16285) {
      var p1 = cljs.core.first(arglist__16285);
      arglist__16285 = cljs.core.next(arglist__16285);
      var p2 = cljs.core.first(arglist__16285);
      arglist__16285 = cljs.core.next(arglist__16285);
      var p3 = cljs.core.first(arglist__16285);
      var ps = cljs.core.rest(arglist__16285);
      return G__16282__delegate(p1, p2, p3, ps);
    };
    G__16282.cljs$core$IFn$_invoke$arity$variadic = G__16282__delegate;
    return G__16282;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3052__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3052__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3052__auto____$1)) {
            return or__3052__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__16292__delegate = function(x, y, z, args) {
          var or__3052__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3052__auto__)) {
            return or__3052__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__16292 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16292__delegate.call(this, x, y, z, args);
        };
        G__16292.cljs$lang$maxFixedArity = 3;
        G__16292.cljs$lang$applyTo = function(arglist__16293) {
          var x = cljs.core.first(arglist__16293);
          arglist__16293 = cljs.core.next(arglist__16293);
          var y = cljs.core.first(arglist__16293);
          arglist__16293 = cljs.core.next(arglist__16293);
          var z = cljs.core.first(arglist__16293);
          var args = cljs.core.rest(arglist__16293);
          return G__16292__delegate(x, y, z, args);
        };
        G__16292.cljs$core$IFn$_invoke$arity$variadic = G__16292__delegate;
        return G__16292;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3052__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3052__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3052__auto____$1)) {
            return or__3052__auto____$1;
          } else {
            var or__3052__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3052__auto____$2)) {
              return or__3052__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3052__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3052__auto____$1)) {
            return or__3052__auto____$1;
          } else {
            var or__3052__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3052__auto____$2)) {
              return or__3052__auto____$2;
            } else {
              var or__3052__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3052__auto____$3)) {
                return or__3052__auto____$3;
              } else {
                var or__3052__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3052__auto____$4)) {
                  return or__3052__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__16294__delegate = function(x, y, z, args) {
          var or__3052__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3052__auto__)) {
            return or__3052__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3052__auto__) {
              return function(p1__16286_SHARP_) {
                var or__3052__auto____$1 = p1.call(null, p1__16286_SHARP_);
                if (cljs.core.truth_(or__3052__auto____$1)) {
                  return or__3052__auto____$1;
                } else {
                  return p2.call(null, p1__16286_SHARP_);
                }
              };
            }(or__3052__auto__), args);
          }
        };
        var G__16294 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16294__delegate.call(this, x, y, z, args);
        };
        G__16294.cljs$lang$maxFixedArity = 3;
        G__16294.cljs$lang$applyTo = function(arglist__16295) {
          var x = cljs.core.first(arglist__16295);
          arglist__16295 = cljs.core.next(arglist__16295);
          var y = cljs.core.first(arglist__16295);
          arglist__16295 = cljs.core.next(arglist__16295);
          var z = cljs.core.first(arglist__16295);
          var args = cljs.core.rest(arglist__16295);
          return G__16294__delegate(x, y, z, args);
        };
        G__16294.cljs$core$IFn$_invoke$arity$variadic = G__16294__delegate;
        return G__16294;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3052__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3052__auto____$1)) {
            return or__3052__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3052__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3052__auto____$1)) {
            return or__3052__auto____$1;
          } else {
            var or__3052__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3052__auto____$2)) {
              return or__3052__auto____$2;
            } else {
              var or__3052__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3052__auto____$3)) {
                return or__3052__auto____$3;
              } else {
                var or__3052__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3052__auto____$4)) {
                  return or__3052__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3052__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3052__auto____$1)) {
            return or__3052__auto____$1;
          } else {
            var or__3052__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3052__auto____$2)) {
              return or__3052__auto____$2;
            } else {
              var or__3052__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3052__auto____$3)) {
                return or__3052__auto____$3;
              } else {
                var or__3052__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3052__auto____$4)) {
                  return or__3052__auto____$4;
                } else {
                  var or__3052__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3052__auto____$5)) {
                    return or__3052__auto____$5;
                  } else {
                    var or__3052__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3052__auto____$6)) {
                      return or__3052__auto____$6;
                    } else {
                      var or__3052__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3052__auto____$7)) {
                        return or__3052__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__16296__delegate = function(x, y, z, args) {
          var or__3052__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3052__auto__)) {
            return or__3052__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3052__auto__) {
              return function(p1__16287_SHARP_) {
                var or__3052__auto____$1 = p1.call(null, p1__16287_SHARP_);
                if (cljs.core.truth_(or__3052__auto____$1)) {
                  return or__3052__auto____$1;
                } else {
                  var or__3052__auto____$2 = p2.call(null, p1__16287_SHARP_);
                  if (cljs.core.truth_(or__3052__auto____$2)) {
                    return or__3052__auto____$2;
                  } else {
                    return p3.call(null, p1__16287_SHARP_);
                  }
                }
              };
            }(or__3052__auto__), args);
          }
        };
        var G__16296 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16296__delegate.call(this, x, y, z, args);
        };
        G__16296.cljs$lang$maxFixedArity = 3;
        G__16296.cljs$lang$applyTo = function(arglist__16297) {
          var x = cljs.core.first(arglist__16297);
          arglist__16297 = cljs.core.next(arglist__16297);
          var y = cljs.core.first(arglist__16297);
          arglist__16297 = cljs.core.next(arglist__16297);
          var z = cljs.core.first(arglist__16297);
          var args = cljs.core.rest(arglist__16297);
          return G__16296__delegate(x, y, z, args);
        };
        G__16296.cljs$core$IFn$_invoke$arity$variadic = G__16296__delegate;
        return G__16296;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__16298__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16288_SHARP_) {
                return p1__16288_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16289_SHARP_) {
                var or__3052__auto__ = p1__16289_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3052__auto__)) {
                  return or__3052__auto__;
                } else {
                  return p1__16289_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16290_SHARP_) {
                var or__3052__auto__ = p1__16290_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3052__auto__)) {
                  return or__3052__auto__;
                } else {
                  var or__3052__auto____$1 = p1__16290_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3052__auto____$1)) {
                    return or__3052__auto____$1;
                  } else {
                    return p1__16290_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__16299__delegate = function(x, y, z, args) {
              var or__3052__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3052__auto__)) {
                return or__3052__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3052__auto__, ps__$1) {
                  return function(p1__16291_SHARP_) {
                    return cljs.core.some.call(null, p1__16291_SHARP_, args);
                  };
                }(or__3052__auto__, ps__$1), ps__$1);
              }
            };
            var G__16299 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16299__delegate.call(this, x, y, z, args);
            };
            G__16299.cljs$lang$maxFixedArity = 3;
            G__16299.cljs$lang$applyTo = function(arglist__16300) {
              var x = cljs.core.first(arglist__16300);
              arglist__16300 = cljs.core.next(arglist__16300);
              var y = cljs.core.first(arglist__16300);
              arglist__16300 = cljs.core.next(arglist__16300);
              var z = cljs.core.first(arglist__16300);
              var args = cljs.core.rest(arglist__16300);
              return G__16299__delegate(x, y, z, args);
            };
            G__16299.cljs$core$IFn$_invoke$arity$variadic = G__16299__delegate;
            return G__16299;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__16298 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16298__delegate.call(this, p1, p2, p3, ps);
    };
    G__16298.cljs$lang$maxFixedArity = 3;
    G__16298.cljs$lang$applyTo = function(arglist__16301) {
      var p1 = cljs.core.first(arglist__16301);
      arglist__16301 = cljs.core.next(arglist__16301);
      var p2 = cljs.core.first(arglist__16301);
      arglist__16301 = cljs.core.next(arglist__16301);
      var p3 = cljs.core.first(arglist__16301);
      var ps = cljs.core.rest(arglist__16301);
      return G__16298__delegate(p1, p2, p3, ps);
    };
    G__16298.cljs$core$IFn$_invoke$arity$variadic = G__16298__delegate;
    return G__16298;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3908__auto___16303 = size;
          var i_16304 = 0;
          while (true) {
            if (i_16304 < n__3908__auto___16303) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_16304)));
              var G__16305 = i_16304 + 1;
              i_16304 = G__16305;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__16306__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__16302_SHARP_) {
          return cljs.core.apply.call(null, f, p1__16302_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__16306 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16306__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16306.cljs$lang$maxFixedArity = 4;
    G__16306.cljs$lang$applyTo = function(arglist__16307) {
      var f = cljs.core.first(arglist__16307);
      arglist__16307 = cljs.core.next(arglist__16307);
      var c1 = cljs.core.first(arglist__16307);
      arglist__16307 = cljs.core.next(arglist__16307);
      var c2 = cljs.core.first(arglist__16307);
      arglist__16307 = cljs.core.next(arglist__16307);
      var c3 = cljs.core.first(arglist__16307);
      var colls = cljs.core.rest(arglist__16307);
      return G__16306__delegate(f, c1, c2, c3, colls);
    };
    G__16306.cljs$core$IFn$_invoke$arity$variadic = G__16306__delegate;
    return G__16306;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__16308 = n__$1 - 1;
        var G__16309 = cljs.core.rest.call(null, s);
        n__$1 = G__16308;
        coll__$1 = G__16309;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, n, coll);
    };
  }(step), null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__16310 = cljs.core.next.call(null, s);
      var G__16311 = cljs.core.next.call(null, lead);
      s = G__16310;
      lead = G__16311;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3040__auto__ = s;
        if (and__3040__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3040__auto__;
        }
      }())) {
        var G__16312 = pred__$1;
        var G__16313 = cljs.core.rest.call(null, s);
        pred__$1 = G__16312;
        coll__$1 = G__16313;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, pred, coll);
    };
  }(step), null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__16314__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__16314 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16314__delegate.call(this, c1, c2, colls);
    };
    G__16314.cljs$lang$maxFixedArity = 2;
    G__16314.cljs$lang$applyTo = function(arglist__16315) {
      var c1 = cljs.core.first(arglist__16315);
      arglist__16315 = cljs.core.next(arglist__16315);
      var c2 = cljs.core.first(arglist__16315);
      var colls = cljs.core.rest(arglist__16315);
      return G__16314__delegate(c1, c2, colls);
    };
    G__16314.cljs$core$IFn$_invoke$arity$variadic = G__16314__delegate;
    return G__16314;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__16316__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__16316 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16316__delegate.call(this, f, coll, colls);
    };
    G__16316.cljs$lang$maxFixedArity = 2;
    G__16316.cljs$lang$applyTo = function(arglist__16317) {
      var f = cljs.core.first(arglist__16317);
      arglist__16317 = cljs.core.next(arglist__16317);
      var coll = cljs.core.first(arglist__16317);
      var colls = cljs.core.rest(arglist__16317);
      return G__16316__delegate(f, coll, colls);
    };
    G__16316.cljs$core$IFn$_invoke$arity$variadic = G__16316__delegate;
    return G__16316;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__3908__auto___16318 = size;
        var i_16319 = 0;
        while (true) {
          if (i_16319 < n__3908__auto___16318) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_16319)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_16319));
            } else {
            }
            var G__16320 = i_16319 + 1;
            i_16319 = G__16320;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__16321_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__16321_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__16323 = to;
      if (G__16323) {
        var bit__3695__auto__ = G__16323.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__3695__auto__ || G__16323.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__16324__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__16324 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16324__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16324.cljs$lang$maxFixedArity = 4;
    G__16324.cljs$lang$applyTo = function(arglist__16325) {
      var f = cljs.core.first(arglist__16325);
      arglist__16325 = cljs.core.next(arglist__16325);
      var c1 = cljs.core.first(arglist__16325);
      arglist__16325 = cljs.core.next(arglist__16325);
      var c2 = cljs.core.first(arglist__16325);
      arglist__16325 = cljs.core.next(arglist__16325);
      var c3 = cljs.core.first(arglist__16325);
      var colls = cljs.core.rest(arglist__16325);
      return G__16324__delegate(f, c1, c2, c3, colls);
    };
    G__16324.cljs$core$IFn$_invoke$arity$variadic = G__16324__delegate;
    return G__16324;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__16327 = m__$1;
          if (G__16327) {
            var bit__3702__auto__ = G__16327.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__3702__auto__ || G__16327.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__16327.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16327);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16327);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__16328 = sentinel;
            var G__16329 = m__$2;
            var G__16330 = cljs.core.next.call(null, ks__$1);
            sentinel = G__16328;
            m__$1 = G__16329;
            ks__$1 = G__16330;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__16331, v) {
  var vec__16333 = p__16331;
  var k = cljs.core.nth.call(null, vec__16333, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__16333, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__16334, f) {
    var vec__16344 = p__16334;
    var k = cljs.core.nth.call(null, vec__16344, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16344, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__16335, f, a) {
    var vec__16345 = p__16335;
    var k = cljs.core.nth.call(null, vec__16345, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16345, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__16336, f, a, b) {
    var vec__16346 = p__16336;
    var k = cljs.core.nth.call(null, vec__16346, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16346, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__16337, f, a, b, c) {
    var vec__16347 = p__16337;
    var k = cljs.core.nth.call(null, vec__16347, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16347, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__16349__delegate = function(m, p__16338, f, a, b, c, args) {
      var vec__16348 = p__16338;
      var k = cljs.core.nth.call(null, vec__16348, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__16348, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__16349 = function(m, p__16338, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16349__delegate.call(this, m, p__16338, f, a, b, c, args);
    };
    G__16349.cljs$lang$maxFixedArity = 6;
    G__16349.cljs$lang$applyTo = function(arglist__16350) {
      var m = cljs.core.first(arglist__16350);
      arglist__16350 = cljs.core.next(arglist__16350);
      var p__16338 = cljs.core.first(arglist__16350);
      arglist__16350 = cljs.core.next(arglist__16350);
      var f = cljs.core.first(arglist__16350);
      arglist__16350 = cljs.core.next(arglist__16350);
      var a = cljs.core.first(arglist__16350);
      arglist__16350 = cljs.core.next(arglist__16350);
      var b = cljs.core.first(arglist__16350);
      arglist__16350 = cljs.core.next(arglist__16350);
      var c = cljs.core.first(arglist__16350);
      var args = cljs.core.rest(arglist__16350);
      return G__16349__delegate(m, p__16338, f, a, b, c, args);
    };
    G__16349.cljs$core$IFn$_invoke$arity$variadic = G__16349__delegate;
    return G__16349;
  }();
  update_in = function(m, p__16338, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__16338, f);
      case 4:
        return update_in__4.call(this, m, p__16338, f, a);
      case 5:
        return update_in__5.call(this, m, p__16338, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__16338, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__16338, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3622__auto__, writer__3623__auto__, opts__3624__auto__) {
  return cljs.core._write.call(null, writer__3623__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__16351 = ll - 5;
      var G__16352 = r;
      ll = G__16351;
      ret = G__16352;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__16353 = cljs.core.pv_aget.call(null, node, 0);
      var G__16354 = level - 5;
      node = G__16353;
      level = G__16354;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__16355 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__16356 = level - 5;
        node = G__16355;
        level = G__16356;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__16358 = j + 1;
              var G__16359 = init__$2;
              j = G__16358;
              init__$1 = G__16359;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__16360 = i + step_init[0];
        i = G__16360;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__3908__auto___16361 = len;
    var i_16362 = 0;
    while (true) {
      if (i_16362 < n__3908__auto___16361) {
        new_tail[i_16362] = self__.tail[i_16362];
        var G__16363 = i_16362 + 1;
        i_16362 = G__16363;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__16364 = null;
  var G__16364__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16364__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16364 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16364__2.call(this, self__, k);
      case 3:
        return G__16364__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16364;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args16357) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16357)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__16365 = i + 1;
        var G__16366 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__16365;
        out = G__16366;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__16367) {
    var args = cljs.core.seq(arglist__16367);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3359__auto__ = self__.end;
    var y__3360__auto__ = v_pos + 1;
    return x__3359__auto__ > y__3360__auto__ ? x__3359__auto__ : y__3360__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__16369 = null;
  var G__16369__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16369__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16369 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16369__2.call(this, self__, k);
      case 3:
        return G__16369__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16369;
}();
cljs.core.Subvec.prototype.apply = function(self__, args16368) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16368)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__16370 = meta;
      var G__16371 = v.v;
      var G__16372 = v.start + start;
      var G__16373 = v.start + end;
      var G__16374 = __hash;
      meta = G__16370;
      v = G__16371;
      start = G__16372;
      end = G__16373;
      __hash = G__16374;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj16378 = {};
    return obj16378;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__16379 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__16380 = level - 5;
        node = G__16379;
        level = G__16380;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__16382 = null;
  var G__16382__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16382__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16382 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16382__2.call(this, self__, k);
      case 3:
        return G__16382__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16382;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args16381) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16381)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3052__auto__ = self__.front;
    if (cljs.core.truth_(or__3052__auto__)) {
      return or__3052__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3052__auto__ = self__.rear;
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__16383 = i + incr;
        i = G__16383;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__16384 = i + 1;
      var G__16385 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__16384;
      out = G__16385;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj16389 = {};
    return obj16389;
  }();
  var l = ks.length;
  var i_16390 = 0;
  while (true) {
    if (i_16390 < l) {
      var k_16391 = ks[i_16390];
      new_obj[k_16391] = obj[k_16391];
      var G__16392 = i_16390 + 1;
      i_16390 = G__16392;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16395 = cljs.core.rest.call(null, keys__$1);
        var G__16396 = init__$2;
        keys__$1 = G__16395;
        init__$1 = G__16396;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__16393_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16393_SHARP_, self__.strobj[p1__16393_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__16397 = null;
  var G__16397__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16397__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16397 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16397__2.call(this, self__, k);
      case 3:
        return G__16397__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16397;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args16394) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16394)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj16399 = {};
  return obj16399;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.Iterator = function(s) {
  this.s = s;
};
cljs.core.Iterator.cljs$lang$type = true;
cljs.core.Iterator.cljs$lang$ctorStr = "cljs.core/Iterator";
cljs.core.Iterator.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/Iterator");
};
cljs.core.Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_Iterator = function __GT_Iterator(s) {
  return new cljs.core.Iterator(s);
};
cljs.core.iterator = function iterator(coll) {
  return new cljs.core.Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.EntriesIterator.cljs$lang$type = true;
cljs.core.EntriesIterator.cljs$lang$ctorStr = "cljs.core/EntriesIterator";
cljs.core.EntriesIterator.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/EntriesIterator");
};
cljs.core.EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__16400 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__16400, 0, null);
    var v = cljs.core.nth.call(null, vec__16400, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_EntriesIterator = function __GT_EntriesIterator(s) {
  return new cljs.core.EntriesIterator(s);
};
cljs.core.entries_iterator = function entries_iterator(coll) {
  return new cljs.core.EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.SetEntriesIterator.cljs$lang$type = true;
cljs.core.SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/SetEntriesIterator";
cljs.core.SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/SetEntriesIterator");
};
cljs.core.SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_SetEntriesIterator = function __GT_SetEntriesIterator(s) {
  return new cljs.core.SetEntriesIterator(s);
};
cljs.core.set_entries_iterator = function set_entries_iterator(coll) {
  return new cljs.core.SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16401 = i + 2;
          i = G__16401;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16402 = i + 2;
          i = G__16402;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16403 = i + 2;
          i = G__16403;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16404 = i + 2;
          i = G__16404;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16405 = i + 2;
          i = G__16405;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_16406 = 0;
  while (true) {
    if (i_16406 < l) {
      narr[i_16406] = arr[i_16406];
      var G__16407 = i_16406 + 1;
      i_16406 = G__16407;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16409 = cljs.core.seq.call(null, coll);
  var chunk__16410 = null;
  var count__16411 = 0;
  var i__16412 = 0;
  while (true) {
    if (i__16412 < count__16411) {
      var vec__16413 = cljs.core._nth.call(null, chunk__16410, i__16412);
      var k = cljs.core.nth.call(null, vec__16413, 0, null);
      var v = cljs.core.nth.call(null, vec__16413, 1, null);
      f.call(null, v, k);
      var G__16418 = seq__16409;
      var G__16419 = chunk__16410;
      var G__16420 = count__16411;
      var G__16421 = i__16412 + 1;
      seq__16409 = G__16418;
      chunk__16410 = G__16419;
      count__16411 = G__16420;
      i__16412 = G__16421;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16409);
      if (temp__4126__auto__) {
        var seq__16409__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16409__$1)) {
          var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__16409__$1);
          var G__16422 = cljs.core.chunk_rest.call(null, seq__16409__$1);
          var G__16423 = c__3808__auto__;
          var G__16424 = cljs.core.count.call(null, c__3808__auto__);
          var G__16425 = 0;
          seq__16409 = G__16422;
          chunk__16410 = G__16423;
          count__16411 = G__16424;
          i__16412 = G__16425;
          continue;
        } else {
          var vec__16414 = cljs.core.first.call(null, seq__16409__$1);
          var k = cljs.core.nth.call(null, vec__16414, 0, null);
          var v = cljs.core.nth.call(null, vec__16414, 1, null);
          f.call(null, v, k);
          var G__16426 = cljs.core.next.call(null, seq__16409__$1);
          var G__16427 = null;
          var G__16428 = 0;
          var G__16429 = 0;
          seq__16409 = G__16426;
          chunk__16410 = G__16427;
          count__16411 = G__16428;
          i__16412 = G__16429;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16430 = i + 2;
        var G__16431 = init__$2;
        i = G__16430;
        init__$1 = G__16431;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj16416 = {};
    return obj16416;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__16432 = s + 2;
            var G__16433 = d;
            s = G__16432;
            d = G__16433;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__16434 = s + 2;
              var G__16435 = d + 2;
              s = G__16434;
              d = G__16435;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var arr__$1 = function() {
          var G__16417 = cljs.core.aclone.call(null, self__.arr);
          G__16417[idx + 1] = v;
          return G__16417;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16436 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16437 = cljs.core.next.call(null, es);
          ret = G__16436;
          es = G__16437;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__16438 = null;
  var G__16438__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16438__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16438 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16438__2.call(this, self__, k);
      case 3:
        return G__16438__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16438;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args16408) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16408)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16439 = i + 2;
        var G__16440 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__16439;
        ret = G__16440;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__16441_16443 = self__.arr;
      G__16441_16443.pop();
      G__16441_16443.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__16442 = o;
      if (G__16442) {
        var bit__3702__auto__ = G__16442.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__3702__auto__ || G__16442.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16442.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16442);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16442);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__16444 = cljs.core.next.call(null, es);
          var G__16445 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16444;
          tcoll__$2 = G__16445;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__16446 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__16447 = i + 2;
      out = G__16446;
      i = G__16447;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3622__auto__, writer__3623__auto__, opts__3624__auto__) {
  return cljs.core._write.call(null, writer__3623__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__16450 = cljs.core.aclone.call(null, arr);
    G__16450[i] = a;
    return G__16450;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__16451 = cljs.core.aclone.call(null, arr);
    G__16451[i] = a;
    G__16451[j] = b;
    return G__16451;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16452 = i + 2;
        var G__16453 = init__$2;
        i = G__16452;
        init__$1 = G__16453;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_16454 = 0;
        var j_16455 = 0;
        while (true) {
          if (i_16454 < 32) {
            if ((self__.bitmap >>> i_16454 & 1) === 0) {
              var G__16456 = i_16454 + 1;
              var G__16457 = j_16455;
              i_16454 = G__16456;
              j_16455 = G__16457;
              continue;
            } else {
              nodes[i_16454] = !(self__.arr[j_16455] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_16455]), self__.arr[j_16455], self__.arr[j_16455 + 1], added_leaf_QMARK_) : self__.arr[j_16455 + 1];
              var G__16458 = i_16454 + 1;
              var G__16459 = j_16455 + 2;
              i_16454 = G__16458;
              j_16455 = G__16459;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_16460 = 0;
      var j_16461 = 0;
      while (true) {
        if (i_16460 < 32) {
          if ((self__.bitmap >>> i_16460 & 1) === 0) {
            var G__16462 = i_16460 + 1;
            var G__16463 = j_16461;
            i_16460 = G__16462;
            j_16461 = G__16463;
            continue;
          } else {
            nodes[i_16460] = !(self__.arr[j_16461] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_16461]), self__.arr[j_16461], self__.arr[j_16461 + 1], added_leaf_QMARK_) : self__.arr[j_16461 + 1];
            var G__16464 = i_16460 + 1;
            var G__16465 = j_16461 + 2;
            i_16460 = G__16464;
            j_16461 = G__16465;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__16466 = i + 1;
        var G__16467 = j + 2;
        var G__16468 = bitmap | 1 << i;
        i = G__16466;
        j = G__16467;
        bitmap = G__16468;
        continue;
      } else {
        var G__16469 = i + 1;
        var G__16470 = j;
        var G__16471 = bitmap;
        i = G__16469;
        j = G__16470;
        bitmap = G__16471;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__16472 = i + 1;
          var G__16473 = init__$2;
          i = G__16472;
          init__$1 = G__16473;
          continue;
        }
      } else {
        var G__16474 = i + 1;
        var G__16475 = init__$1;
        i = G__16474;
        init__$1 = G__16475;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__16476 = i + 2;
        i = G__16476;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__16477 = j + 2;
                j = G__16477;
                continue;
              }
            } else {
              var G__16478 = j + 2;
              j = G__16478;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__16479 = j + 1;
              j = G__16479;
              continue;
            }
          } else {
            var G__16480 = j + 1;
            j = G__16480;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16482 = cljs.core.seq.call(null, coll);
  var chunk__16483 = null;
  var count__16484 = 0;
  var i__16485 = 0;
  while (true) {
    if (i__16485 < count__16484) {
      var vec__16486 = cljs.core._nth.call(null, chunk__16483, i__16485);
      var k = cljs.core.nth.call(null, vec__16486, 0, null);
      var v = cljs.core.nth.call(null, vec__16486, 1, null);
      f.call(null, v, k);
      var G__16490 = seq__16482;
      var G__16491 = chunk__16483;
      var G__16492 = count__16484;
      var G__16493 = i__16485 + 1;
      seq__16482 = G__16490;
      chunk__16483 = G__16491;
      count__16484 = G__16492;
      i__16485 = G__16493;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16482);
      if (temp__4126__auto__) {
        var seq__16482__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16482__$1)) {
          var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__16482__$1);
          var G__16494 = cljs.core.chunk_rest.call(null, seq__16482__$1);
          var G__16495 = c__3808__auto__;
          var G__16496 = cljs.core.count.call(null, c__3808__auto__);
          var G__16497 = 0;
          seq__16482 = G__16494;
          chunk__16483 = G__16495;
          count__16484 = G__16496;
          i__16485 = G__16497;
          continue;
        } else {
          var vec__16487 = cljs.core.first.call(null, seq__16482__$1);
          var k = cljs.core.nth.call(null, vec__16487, 0, null);
          var v = cljs.core.nth.call(null, vec__16487, 1, null);
          f.call(null, v, k);
          var G__16498 = cljs.core.next.call(null, seq__16482__$1);
          var G__16499 = null;
          var G__16500 = 0;
          var G__16501 = 0;
          seq__16482 = G__16498;
          chunk__16483 = G__16499;
          count__16484 = G__16500;
          i__16485 = G__16501;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj16489 = {};
    return obj16489;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16502 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16503 = cljs.core.next.call(null, es);
          ret = G__16502;
          es = G__16503;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__16504 = null;
  var G__16504__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16504__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16504 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16504__2.call(this, self__, k);
      case 3:
        return G__16504__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16504;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args16481) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16481)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__16505 = i + 1;
      var G__16506 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__16505;
      out = G__16506;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__16507 = o;
      if (G__16507) {
        var bit__3702__auto__ = G__16507.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__3702__auto__ || G__16507.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16507.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16507);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16507);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__16508 = cljs.core.next.call(null, es);
          var G__16509 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16508;
          tcoll__$1 = G__16509;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__16510 = ascending_QMARK_ ? t.left : t.right;
      var G__16511 = cljs.core.conj.call(null, stack__$1, t);
      t = G__16510;
      stack__$1 = G__16511;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__16513 = null;
  var G__16513__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16513__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16513 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16513__2.call(this, self__, k);
      case 3:
        return G__16513__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16513;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args16512) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16512)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__16515 = null;
  var G__16515__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16515__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16515 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16515__2.call(this, self__, k);
      case 3:
        return G__16515__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16515;
}();
cljs.core.RedNode.prototype.apply = function(self__, args16514) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16514)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16517 = cljs.core.seq.call(null, coll);
  var chunk__16518 = null;
  var count__16519 = 0;
  var i__16520 = 0;
  while (true) {
    if (i__16520 < count__16519) {
      var vec__16521 = cljs.core._nth.call(null, chunk__16518, i__16520);
      var k = cljs.core.nth.call(null, vec__16521, 0, null);
      var v = cljs.core.nth.call(null, vec__16521, 1, null);
      f.call(null, v, k);
      var G__16523 = seq__16517;
      var G__16524 = chunk__16518;
      var G__16525 = count__16519;
      var G__16526 = i__16520 + 1;
      seq__16517 = G__16523;
      chunk__16518 = G__16524;
      count__16519 = G__16525;
      i__16520 = G__16526;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16517);
      if (temp__4126__auto__) {
        var seq__16517__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16517__$1)) {
          var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__16517__$1);
          var G__16527 = cljs.core.chunk_rest.call(null, seq__16517__$1);
          var G__16528 = c__3808__auto__;
          var G__16529 = cljs.core.count.call(null, c__3808__auto__);
          var G__16530 = 0;
          seq__16517 = G__16527;
          chunk__16518 = G__16528;
          count__16519 = G__16529;
          i__16520 = G__16530;
          continue;
        } else {
          var vec__16522 = cljs.core.first.call(null, seq__16517__$1);
          var k = cljs.core.nth.call(null, vec__16522, 0, null);
          var v = cljs.core.nth.call(null, vec__16522, 1, null);
          f.call(null, v, k);
          var G__16531 = cljs.core.next.call(null, seq__16517__$1);
          var G__16532 = null;
          var G__16533 = 0;
          var G__16534 = 0;
          seq__16517 = G__16531;
          chunk__16518 = G__16532;
          count__16519 = G__16533;
          i__16520 = G__16534;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__16535 = t.left;
          t = G__16535;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var G__16536 = t.right;
            t = G__16536;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16537 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16538 = cljs.core.next.call(null, es);
          ret = G__16537;
          es = G__16538;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__16539 = null;
  var G__16539__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16539__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16539 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16539__2.call(this, self__, k);
      case 3:
        return G__16539__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16539;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args16516) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16516)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__16540 = cljs.core.conj.call(null, stack, t);
              var G__16541 = t.left;
              stack = G__16540;
              t = G__16541;
              continue;
            } else {
              var G__16542 = stack;
              var G__16543 = t.right;
              stack = G__16542;
              t = G__16543;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              if (c > 0) {
                var G__16544 = cljs.core.conj.call(null, stack, t);
                var G__16545 = t.right;
                stack = G__16544;
                t = G__16545;
                continue;
              } else {
                var G__16546 = stack;
                var G__16547 = t.left;
                stack = G__16546;
                t = G__16547;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__16548 = cljs.core.nnext.call(null, in$);
        var G__16549 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16548;
        out = G__16549;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__16550) {
    var keyvals = cljs.core.seq(arglist__16550);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__16551) {
    var keyvals = cljs.core.seq(arglist__16551);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj16555 = {};
      return obj16555;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__16556 = cljs.core.nnext.call(null, kvs);
        kvs = G__16556;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__16557) {
    var keyvals = cljs.core.seq(arglist__16557);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__16558 = cljs.core.nnext.call(null, in$);
        var G__16559 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16558;
        out = G__16559;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__16560) {
    var keyvals = cljs.core.seq(arglist__16560);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__16561 = cljs.core.nnext.call(null, in$);
        var G__16562 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16561;
        out = G__16562;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__16563) {
    var comparator = cljs.core.first(arglist__16563);
    var keyvals = cljs.core.rest(arglist__16563);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16564 = self__.mseq;
    if (G__16564) {
      var bit__3702__auto__ = G__16564.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3702__auto__ || G__16564.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16564.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16564);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16564);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16565 = self__.mseq;
    if (G__16565) {
      var bit__3702__auto__ = G__16565.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3702__auto__ || G__16565.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16565.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16565);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16565);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16566 = self__.mseq;
    if (G__16566) {
      var bit__3702__auto__ = G__16566.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3702__auto__ || G__16566.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16566.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16566);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16566);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16567 = self__.mseq;
    if (G__16567) {
      var bit__3702__auto__ = G__16567.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3702__auto__ || G__16567.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16567.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16567);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16567);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__16568_SHARP_, p2__16569_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3052__auto__ = p1__16568_SHARP_;
          if (cljs.core.truth_(or__3052__auto__)) {
            return or__3052__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__16569_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__16570) {
    var maps = cljs.core.seq(arglist__16570);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3052__auto__ = m1;
            if (cljs.core.truth_(or__3052__auto__)) {
              return or__3052__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__16571) {
    var f = cljs.core.first(arglist__16571);
    var maps = cljs.core.rest(arglist__16571);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__16572 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__16573 = cljs.core.next.call(null, keys);
      ret = G__16572;
      keys = G__16573;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16576 = cljs.core.seq.call(null, coll);
  var chunk__16577 = null;
  var count__16578 = 0;
  var i__16579 = 0;
  while (true) {
    if (i__16579 < count__16578) {
      var vec__16580 = cljs.core._nth.call(null, chunk__16577, i__16579);
      var k = cljs.core.nth.call(null, vec__16580, 0, null);
      var v = cljs.core.nth.call(null, vec__16580, 1, null);
      f.call(null, v, k);
      var G__16582 = seq__16576;
      var G__16583 = chunk__16577;
      var G__16584 = count__16578;
      var G__16585 = i__16579 + 1;
      seq__16576 = G__16582;
      chunk__16577 = G__16583;
      count__16578 = G__16584;
      i__16579 = G__16585;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16576);
      if (temp__4126__auto__) {
        var seq__16576__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16576__$1)) {
          var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__16576__$1);
          var G__16586 = cljs.core.chunk_rest.call(null, seq__16576__$1);
          var G__16587 = c__3808__auto__;
          var G__16588 = cljs.core.count.call(null, c__3808__auto__);
          var G__16589 = 0;
          seq__16576 = G__16586;
          chunk__16577 = G__16587;
          count__16578 = G__16588;
          i__16579 = G__16589;
          continue;
        } else {
          var vec__16581 = cljs.core.first.call(null, seq__16576__$1);
          var k = cljs.core.nth.call(null, vec__16581, 0, null);
          var v = cljs.core.nth.call(null, vec__16581, 1, null);
          f.call(null, v, k);
          var G__16590 = cljs.core.next.call(null, seq__16576__$1);
          var G__16591 = null;
          var G__16592 = 0;
          var G__16593 = 0;
          seq__16576 = G__16590;
          chunk__16577 = G__16591;
          count__16578 = G__16592;
          i__16579 = G__16593;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16574_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16574_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__16594 = null;
  var G__16594__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16594__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16594 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16594__2.call(this, self__, k);
      case 3:
        return G__16594__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16594;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args16575) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16575)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16595 = i + 1;
        var G__16596 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__16595;
        out = G__16596;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__16597 = i + 1;
        var G__16598 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__16597;
        out = G__16598;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__16600 = null;
  var G__16600__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__16600__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__16600 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16600__2.call(this, self__, k);
      case 3:
        return G__16600__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16600;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args16599) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16599)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16603 = cljs.core.seq.call(null, coll);
  var chunk__16604 = null;
  var count__16605 = 0;
  var i__16606 = 0;
  while (true) {
    if (i__16606 < count__16605) {
      var vec__16607 = cljs.core._nth.call(null, chunk__16604, i__16606);
      var k = cljs.core.nth.call(null, vec__16607, 0, null);
      var v = cljs.core.nth.call(null, vec__16607, 1, null);
      f.call(null, v, k);
      var G__16609 = seq__16603;
      var G__16610 = chunk__16604;
      var G__16611 = count__16605;
      var G__16612 = i__16606 + 1;
      seq__16603 = G__16609;
      chunk__16604 = G__16610;
      count__16605 = G__16611;
      i__16606 = G__16612;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16603);
      if (temp__4126__auto__) {
        var seq__16603__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16603__$1)) {
          var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__16603__$1);
          var G__16613 = cljs.core.chunk_rest.call(null, seq__16603__$1);
          var G__16614 = c__3808__auto__;
          var G__16615 = cljs.core.count.call(null, c__3808__auto__);
          var G__16616 = 0;
          seq__16603 = G__16613;
          chunk__16604 = G__16614;
          count__16605 = G__16615;
          i__16606 = G__16616;
          continue;
        } else {
          var vec__16608 = cljs.core.first.call(null, seq__16603__$1);
          var k = cljs.core.nth.call(null, vec__16608, 0, null);
          var v = cljs.core.nth.call(null, vec__16608, 1, null);
          f.call(null, v, k);
          var G__16617 = cljs.core.next.call(null, seq__16603__$1);
          var G__16618 = null;
          var G__16619 = 0;
          var G__16620 = 0;
          seq__16603 = G__16617;
          chunk__16604 = G__16618;
          count__16605 = G__16619;
          i__16606 = G__16620;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16601_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16601_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__16621 = null;
  var G__16621__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16621__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16621 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16621__2.call(this, self__, k);
      case 3:
        return G__16621__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16621;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args16602) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16602)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__3902__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__3902__auto__.length) {
        var G__16622 = i + 1;
        var G__16623 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__16622;
        res = G__16623;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__16624 = cljs.core._next.call(null, in$__$1);
            var G__16625 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__16624;
            out = G__16625;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__16626__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__16626 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16626__delegate.call(this, keys);
    };
    G__16626.cljs$lang$maxFixedArity = 0;
    G__16626.cljs$lang$applyTo = function(arglist__16627) {
      var keys = cljs.core.seq(arglist__16627);
      return G__16626__delegate(keys);
    };
    G__16626.cljs$core$IFn$_invoke$arity$variadic = G__16626__delegate;
    return G__16626;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__16628) {
    var keys = cljs.core.seq(arglist__16628);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__16629) {
    var comparator = cljs.core.first(arglist__16629);
    var keys = cljs.core.rest(arglist__16629);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(n) {
      return function(v, i) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__16630_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__16630_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__16630_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__16637, seen__$1) {
        while (true) {
          var vec__16638 = p__16637;
          var f = cljs.core.nth.call(null, vec__16638, 0, null);
          var xs__$1 = vec__16638;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__16639 = cljs.core.rest.call(null, s);
              var G__16640 = seen__$1;
              p__16637 = G__16639;
              seen__$1 = G__16640;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__16641 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__16642 = cljs.core.next.call(null, s__$1);
      ret = G__16641;
      s__$1 = G__16642;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__16644 = x;
    if (G__16644) {
      var bit__3695__auto__ = G__16644.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__3695__auto__ || G__16644.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__16645 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__16646 = cljs.core.next.call(null, ks);
      var G__16647 = cljs.core.next.call(null, vs);
      map = G__16645;
      ks = G__16646;
      vs = G__16647;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__16650__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16648_SHARP_, p2__16649_SHARP_) {
        return max_key.call(null, k, p1__16648_SHARP_, p2__16649_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__16650 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16650__delegate.call(this, k, x, y, more);
    };
    G__16650.cljs$lang$maxFixedArity = 3;
    G__16650.cljs$lang$applyTo = function(arglist__16651) {
      var k = cljs.core.first(arglist__16651);
      arglist__16651 = cljs.core.next(arglist__16651);
      var x = cljs.core.first(arglist__16651);
      arglist__16651 = cljs.core.next(arglist__16651);
      var y = cljs.core.first(arglist__16651);
      var more = cljs.core.rest(arglist__16651);
      return G__16650__delegate(k, x, y, more);
    };
    G__16650.cljs$core$IFn$_invoke$arity$variadic = G__16650__delegate;
    return G__16650;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__16654__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16652_SHARP_, p2__16653_SHARP_) {
        return min_key.call(null, k, p1__16652_SHARP_, p2__16653_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__16654 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16654__delegate.call(this, k, x, y, more);
    };
    G__16654.cljs$lang$maxFixedArity = 3;
    G__16654.cljs$lang$applyTo = function(arglist__16655) {
      var k = cljs.core.first(arglist__16655);
      arglist__16655 = cljs.core.next(arglist__16655);
      var x = cljs.core.first(arglist__16655);
      arglist__16655 = cljs.core.next(arglist__16655);
      var y = cljs.core.first(arglist__16655);
      var more = cljs.core.rest(arglist__16655);
      return G__16654__delegate(k, x, y, more);
    };
    G__16654.cljs$core$IFn$_invoke$arity$variadic = G__16654__delegate;
    return G__16654;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16658 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16658, 0, null);
        var s = vec__16658;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16659 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16659, 0, null);
      var s = vec__16659;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16662 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16662, 0, null);
        var s = vec__16662;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16663 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16663, 0, null);
      var s = vec__16663;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
        return function(p1__16664_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__16664_SHARP_));
        };
      }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__16675 = null;
      var G__16675__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__16675__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__16675__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__16675__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__16675__4 = function() {
        var G__16676__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__16676 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16676__delegate.call(this, x, y, z, args);
        };
        G__16676.cljs$lang$maxFixedArity = 3;
        G__16676.cljs$lang$applyTo = function(arglist__16677) {
          var x = cljs.core.first(arglist__16677);
          arglist__16677 = cljs.core.next(arglist__16677);
          var y = cljs.core.first(arglist__16677);
          arglist__16677 = cljs.core.next(arglist__16677);
          var z = cljs.core.first(arglist__16677);
          var args = cljs.core.rest(arglist__16677);
          return G__16676__delegate(x, y, z, args);
        };
        G__16676.cljs$core$IFn$_invoke$arity$variadic = G__16676__delegate;
        return G__16676;
      }();
      G__16675 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16675__0.call(this);
          case 1:
            return G__16675__1.call(this, x);
          case 2:
            return G__16675__2.call(this, x, y);
          case 3:
            return G__16675__3.call(this, x, y, z);
          default:
            return G__16675__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16675.cljs$lang$maxFixedArity = 3;
      G__16675.cljs$lang$applyTo = G__16675__4.cljs$lang$applyTo;
      return G__16675;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__16678 = null;
      var G__16678__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__16678__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__16678__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__16678__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__16678__4 = function() {
        var G__16679__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__16679 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16679__delegate.call(this, x, y, z, args);
        };
        G__16679.cljs$lang$maxFixedArity = 3;
        G__16679.cljs$lang$applyTo = function(arglist__16680) {
          var x = cljs.core.first(arglist__16680);
          arglist__16680 = cljs.core.next(arglist__16680);
          var y = cljs.core.first(arglist__16680);
          arglist__16680 = cljs.core.next(arglist__16680);
          var z = cljs.core.first(arglist__16680);
          var args = cljs.core.rest(arglist__16680);
          return G__16679__delegate(x, y, z, args);
        };
        G__16679.cljs$core$IFn$_invoke$arity$variadic = G__16679__delegate;
        return G__16679;
      }();
      G__16678 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16678__0.call(this);
          case 1:
            return G__16678__1.call(this, x);
          case 2:
            return G__16678__2.call(this, x, y);
          case 3:
            return G__16678__3.call(this, x, y, z);
          default:
            return G__16678__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16678.cljs$lang$maxFixedArity = 3;
      G__16678.cljs$lang$applyTo = G__16678__4.cljs$lang$applyTo;
      return G__16678;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__16681 = null;
      var G__16681__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__16681__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__16681__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__16681__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__16681__4 = function() {
        var G__16682__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__16682 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16682__delegate.call(this, x, y, z, args);
        };
        G__16682.cljs$lang$maxFixedArity = 3;
        G__16682.cljs$lang$applyTo = function(arglist__16683) {
          var x = cljs.core.first(arglist__16683);
          arglist__16683 = cljs.core.next(arglist__16683);
          var y = cljs.core.first(arglist__16683);
          arglist__16683 = cljs.core.next(arglist__16683);
          var z = cljs.core.first(arglist__16683);
          var args = cljs.core.rest(arglist__16683);
          return G__16682__delegate(x, y, z, args);
        };
        G__16682.cljs$core$IFn$_invoke$arity$variadic = G__16682__delegate;
        return G__16682;
      }();
      G__16681 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16681__0.call(this);
          case 1:
            return G__16681__1.call(this, x);
          case 2:
            return G__16681__2.call(this, x, y);
          case 3:
            return G__16681__3.call(this, x, y, z);
          default:
            return G__16681__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16681.cljs$lang$maxFixedArity = 3;
      G__16681.cljs$lang$applyTo = G__16681__4.cljs$lang$applyTo;
      return G__16681;
    }();
  };
  var juxt__4 = function() {
    var G__16684__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__16685 = null;
          var G__16685__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16665_SHARP_, p2__16666_SHARP_) {
                return cljs.core.conj.call(null, p1__16665_SHARP_, p2__16666_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16685__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16667_SHARP_, p2__16668_SHARP_) {
                return cljs.core.conj.call(null, p1__16667_SHARP_, p2__16668_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16685__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16669_SHARP_, p2__16670_SHARP_) {
                return cljs.core.conj.call(null, p1__16669_SHARP_, p2__16670_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16685__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16671_SHARP_, p2__16672_SHARP_) {
                return cljs.core.conj.call(null, p1__16671_SHARP_, p2__16672_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16685__4 = function() {
            var G__16686__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__16673_SHARP_, p2__16674_SHARP_) {
                  return cljs.core.conj.call(null, p1__16673_SHARP_, cljs.core.apply.call(null, p2__16674_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__16686 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16686__delegate.call(this, x, y, z, args);
            };
            G__16686.cljs$lang$maxFixedArity = 3;
            G__16686.cljs$lang$applyTo = function(arglist__16687) {
              var x = cljs.core.first(arglist__16687);
              arglist__16687 = cljs.core.next(arglist__16687);
              var y = cljs.core.first(arglist__16687);
              arglist__16687 = cljs.core.next(arglist__16687);
              var z = cljs.core.first(arglist__16687);
              var args = cljs.core.rest(arglist__16687);
              return G__16686__delegate(x, y, z, args);
            };
            G__16686.cljs$core$IFn$_invoke$arity$variadic = G__16686__delegate;
            return G__16686;
          }();
          G__16685 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__16685__0.call(this);
              case 1:
                return G__16685__1.call(this, x);
              case 2:
                return G__16685__2.call(this, x, y);
              case 3:
                return G__16685__3.call(this, x, y, z);
              default:
                return G__16685__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16685.cljs$lang$maxFixedArity = 3;
          G__16685.cljs$lang$applyTo = G__16685__4.cljs$lang$applyTo;
          return G__16685;
        }();
      }(fs__$1);
    };
    var G__16684 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16684__delegate.call(this, f, g, h, fs);
    };
    G__16684.cljs$lang$maxFixedArity = 3;
    G__16684.cljs$lang$applyTo = function(arglist__16688) {
      var f = cljs.core.first(arglist__16688);
      arglist__16688 = cljs.core.next(arglist__16688);
      var g = cljs.core.first(arglist__16688);
      arglist__16688 = cljs.core.next(arglist__16688);
      var h = cljs.core.first(arglist__16688);
      var fs = cljs.core.rest(arglist__16688);
      return G__16684__delegate(f, g, h, fs);
    };
    G__16684.cljs$core$IFn$_invoke$arity$variadic = G__16684__delegate;
    return G__16684;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__16689 = cljs.core.next.call(null, coll);
        coll = G__16689;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__16690 = n - 1;
        var G__16691 = cljs.core.next.call(null, coll);
        n = G__16690;
        coll = G__16691;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__16693 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__16693, 0, null);
  var flags = cljs.core.nth.call(null, vec__16693, 1, null);
  var pattern = cljs.core.nth.call(null, vec__16693, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_16695 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_16696__$1 = cljs.core.next.call(null, coll);
      var n_16697 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_16696__$1 && (n_16697 == null || !(n_16697 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_16696__$1), writer, opts);
          var G__16698 = cljs.core.next.call(null, coll_16696__$1);
          var G__16699 = n_16697 - 1;
          coll_16696__$1 = G__16698;
          n_16697 = G__16699;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_16696__$1) && n_16697 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_16695;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__16704 = cljs.core.seq.call(null, ss);
    var chunk__16705 = null;
    var count__16706 = 0;
    var i__16707 = 0;
    while (true) {
      if (i__16707 < count__16706) {
        var s = cljs.core._nth.call(null, chunk__16705, i__16707);
        cljs.core._write.call(null, writer, s);
        var G__16708 = seq__16704;
        var G__16709 = chunk__16705;
        var G__16710 = count__16706;
        var G__16711 = i__16707 + 1;
        seq__16704 = G__16708;
        chunk__16705 = G__16709;
        count__16706 = G__16710;
        i__16707 = G__16711;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__16704);
        if (temp__4126__auto__) {
          var seq__16704__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__16704__$1)) {
            var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__16704__$1);
            var G__16712 = cljs.core.chunk_rest.call(null, seq__16704__$1);
            var G__16713 = c__3808__auto__;
            var G__16714 = cljs.core.count.call(null, c__3808__auto__);
            var G__16715 = 0;
            seq__16704 = G__16712;
            chunk__16705 = G__16713;
            count__16706 = G__16714;
            i__16707 = G__16715;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__16704__$1);
            cljs.core._write.call(null, writer, s);
            var G__16716 = cljs.core.next.call(null, seq__16704__$1);
            var G__16717 = null;
            var G__16718 = 0;
            var G__16719 = 0;
            seq__16704 = G__16716;
            chunk__16705 = G__16717;
            count__16706 = G__16718;
            i__16707 = G__16719;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__16720) {
    var writer = cljs.core.first(arglist__16720);
    var ss = cljs.core.rest(arglist__16720);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj16722 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj16722;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        if (cljs.core.truth_(function() {
          var and__3040__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
          if (cljs.core.truth_(and__3040__auto__)) {
            var and__3040__auto____$1 = function() {
              var G__16728 = obj;
              if (G__16728) {
                var bit__3702__auto__ = G__16728.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__3702__auto__ || G__16728.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__16728.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16728);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16728);
              }
            }();
            if (and__3040__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3040__auto____$1;
            }
          } else {
            return and__3040__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__16729 = obj;
              if (G__16729) {
                var bit__3695__auto__ = G__16729.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__3695__auto__ || G__16729.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__16731 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                                ns = G__16731;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__16730 = obj;
                              if (G__16730) {
                                var bit__3702__auto__ = G__16730.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__3702__auto__ || G__16730.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__16730.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16730);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16730);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__16736 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__16737 = null;
  var count__16738 = 0;
  var i__16739 = 0;
  while (true) {
    if (i__16739 < count__16738) {
      var obj = cljs.core._nth.call(null, chunk__16737, i__16739);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__16740 = seq__16736;
      var G__16741 = chunk__16737;
      var G__16742 = count__16738;
      var G__16743 = i__16739 + 1;
      seq__16736 = G__16740;
      chunk__16737 = G__16741;
      count__16738 = G__16742;
      i__16739 = G__16743;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16736);
      if (temp__4126__auto__) {
        var seq__16736__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16736__$1)) {
          var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__16736__$1);
          var G__16744 = cljs.core.chunk_rest.call(null, seq__16736__$1);
          var G__16745 = c__3808__auto__;
          var G__16746 = cljs.core.count.call(null, c__3808__auto__);
          var G__16747 = 0;
          seq__16736 = G__16744;
          chunk__16737 = G__16745;
          count__16738 = G__16746;
          i__16739 = G__16747;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__16736__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__16748 = cljs.core.next.call(null, seq__16736__$1);
          var G__16749 = null;
          var G__16750 = 0;
          var G__16751 = 0;
          seq__16736 = G__16748;
          chunk__16737 = G__16749;
          count__16738 = G__16750;
          i__16739 = G__16751;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__16752) {
    var objs = cljs.core.seq(arglist__16752);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__16753) {
    var objs = cljs.core.seq(arglist__16753);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__16754) {
    var objs = cljs.core.seq(arglist__16754);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__16755) {
    var objs = cljs.core.seq(arglist__16755);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__16756) {
    var objs = cljs.core.seq(arglist__16756);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__16757) {
    var objs = cljs.core.seq(arglist__16757);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__16758) {
    var objs = cljs.core.seq(arglist__16758);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__16759) {
    var objs = cljs.core.seq(arglist__16759);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj16761 = {};
  return obj16761;
}();
cljs.core.IReset = function() {
  var obj16763 = {};
  return obj16763;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3040__auto__ = o;
    if (and__3040__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__3679__auto__ = o == null ? null : o;
    return function() {
      var or__3052__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj16765 = {};
  return obj16765;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3040__auto__ = o;
      if (and__3040__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__3679__auto__ = o == null ? null : o;
      return function() {
        var or__3052__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3040__auto__ = o;
      if (and__3040__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__3679__auto__ = o == null ? null : o;
      return function() {
        var or__3052__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3040__auto__ = o;
      if (and__3040__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__3679__auto__ = o == null ? null : o;
      return function() {
        var or__3052__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3040__auto__ = o;
      if (and__3040__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__3679__auto__ = o == null ? null : o;
      return function() {
        var or__3052__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__16766 = cljs.core.seq.call(null, self__.watches);
  var chunk__16767 = null;
  var count__16768 = 0;
  var i__16769 = 0;
  while (true) {
    if (i__16769 < count__16768) {
      var vec__16770 = cljs.core._nth.call(null, chunk__16767, i__16769);
      var key = cljs.core.nth.call(null, vec__16770, 0, null);
      var f = cljs.core.nth.call(null, vec__16770, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__16772 = seq__16766;
      var G__16773 = chunk__16767;
      var G__16774 = count__16768;
      var G__16775 = i__16769 + 1;
      seq__16766 = G__16772;
      chunk__16767 = G__16773;
      count__16768 = G__16774;
      i__16769 = G__16775;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16766);
      if (temp__4126__auto__) {
        var seq__16766__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16766__$1)) {
          var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__16766__$1);
          var G__16776 = cljs.core.chunk_rest.call(null, seq__16766__$1);
          var G__16777 = c__3808__auto__;
          var G__16778 = cljs.core.count.call(null, c__3808__auto__);
          var G__16779 = 0;
          seq__16766 = G__16776;
          chunk__16767 = G__16777;
          count__16768 = G__16778;
          i__16769 = G__16779;
          continue;
        } else {
          var vec__16771 = cljs.core.first.call(null, seq__16766__$1);
          var key = cljs.core.nth.call(null, vec__16771, 0, null);
          var f = cljs.core.nth.call(null, vec__16771, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__16780 = cljs.core.next.call(null, seq__16766__$1);
          var G__16781 = null;
          var G__16782 = 0;
          var G__16783 = 0;
          seq__16766 = G__16780;
          chunk__16767 = G__16781;
          count__16768 = G__16782;
          i__16769 = G__16783;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__16787__delegate = function(x, p__16784) {
      var map__16786 = p__16784;
      var map__16786__$1 = cljs.core.seq_QMARK_.call(null, map__16786) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16786) : map__16786;
      var validator = cljs.core.get.call(null, map__16786__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__16786__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__16787 = function(x, var_args) {
      var p__16784 = null;
      if (arguments.length > 1) {
        p__16784 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16787__delegate.call(this, x, p__16784);
    };
    G__16787.cljs$lang$maxFixedArity = 1;
    G__16787.cljs$lang$applyTo = function(arglist__16788) {
      var x = cljs.core.first(arglist__16788);
      var p__16784 = cljs.core.rest(arglist__16788);
      return G__16787__delegate(x, p__16784);
    };
    G__16787.cljs$core$IFn$_invoke$arity$variadic = G__16787__delegate;
    return G__16787;
  }();
  atom = function(x, var_args) {
    var p__16784 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__16789__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__16789 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16789__delegate.call(this, a, f, x, y, more);
    };
    G__16789.cljs$lang$maxFixedArity = 4;
    G__16789.cljs$lang$applyTo = function(arglist__16790) {
      var a = cljs.core.first(arglist__16790);
      arglist__16790 = cljs.core.next(arglist__16790);
      var f = cljs.core.first(arglist__16790);
      arglist__16790 = cljs.core.next(arglist__16790);
      var x = cljs.core.first(arglist__16790);
      arglist__16790 = cljs.core.next(arglist__16790);
      var y = cljs.core.first(arglist__16790);
      var more = cljs.core.rest(arglist__16790);
      return G__16789__delegate(a, f, x, y, more);
    };
    G__16789.cljs$core$IFn$_invoke$arity$variadic = G__16789__delegate;
    return G__16789;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__16791) {
    var iref = cljs.core.first(arglist__16791);
    arglist__16791 = cljs.core.next(arglist__16791);
    var f = cljs.core.first(arglist__16791);
    var args = cljs.core.rest(arglist__16791);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj16793 = {};
  return obj16793;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3040__auto__ = x;
    if (and__3040__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__3679__auto__ = x == null ? null : x;
    return function() {
      var or__3052__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3040__auto__ = x;
    if (and__3040__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__3679__auto__ = x == null ? null : x;
    return function() {
      var or__3052__auto__ = cljs.core._key__GT_js[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__16795 = k;
    if (G__16795) {
      var bit__3702__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3052__auto__ = bit__3702__auto__;
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          return G__16795.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__16795.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16795);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16795);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__16809 = x;
      if (G__16809) {
        var bit__3702__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3052__auto__ = bit__3702__auto__;
          if (cljs.core.truth_(or__3052__auto__)) {
            return or__3052__auto__;
          } else {
            return G__16809.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__16809.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16809);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16809);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj16811 = {};
              return obj16811;
            }();
            var seq__16812_16822 = cljs.core.seq.call(null, x);
            var chunk__16813_16823 = null;
            var count__16814_16824 = 0;
            var i__16815_16825 = 0;
            while (true) {
              if (i__16815_16825 < count__16814_16824) {
                var vec__16816_16826 = cljs.core._nth.call(null, chunk__16813_16823, i__16815_16825);
                var k_16827 = cljs.core.nth.call(null, vec__16816_16826, 0, null);
                var v_16828 = cljs.core.nth.call(null, vec__16816_16826, 1, null);
                m[cljs.core.key__GT_js.call(null, k_16827)] = clj__GT_js.call(null, v_16828);
                var G__16829 = seq__16812_16822;
                var G__16830 = chunk__16813_16823;
                var G__16831 = count__16814_16824;
                var G__16832 = i__16815_16825 + 1;
                seq__16812_16822 = G__16829;
                chunk__16813_16823 = G__16830;
                count__16814_16824 = G__16831;
                i__16815_16825 = G__16832;
                continue;
              } else {
                var temp__4126__auto___16833 = cljs.core.seq.call(null, seq__16812_16822);
                if (temp__4126__auto___16833) {
                  var seq__16812_16834__$1 = temp__4126__auto___16833;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__16812_16834__$1)) {
                    var c__3808__auto___16835 = cljs.core.chunk_first.call(null, seq__16812_16834__$1);
                    var G__16836 = cljs.core.chunk_rest.call(null, seq__16812_16834__$1);
                    var G__16837 = c__3808__auto___16835;
                    var G__16838 = cljs.core.count.call(null, c__3808__auto___16835);
                    var G__16839 = 0;
                    seq__16812_16822 = G__16836;
                    chunk__16813_16823 = G__16837;
                    count__16814_16824 = G__16838;
                    i__16815_16825 = G__16839;
                    continue;
                  } else {
                    var vec__16817_16840 = cljs.core.first.call(null, seq__16812_16834__$1);
                    var k_16841 = cljs.core.nth.call(null, vec__16817_16840, 0, null);
                    var v_16842 = cljs.core.nth.call(null, vec__16817_16840, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_16841)] = clj__GT_js.call(null, v_16842);
                    var G__16843 = cljs.core.next.call(null, seq__16812_16834__$1);
                    var G__16844 = null;
                    var G__16845 = 0;
                    var G__16846 = 0;
                    seq__16812_16822 = G__16843;
                    chunk__16813_16823 = G__16844;
                    count__16814_16824 = G__16845;
                    i__16815_16825 = G__16846;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__16818_16847 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__16819_16848 = null;
              var count__16820_16849 = 0;
              var i__16821_16850 = 0;
              while (true) {
                if (i__16821_16850 < count__16820_16849) {
                  var x_16851__$1 = cljs.core._nth.call(null, chunk__16819_16848, i__16821_16850);
                  arr.push(x_16851__$1);
                  var G__16852 = seq__16818_16847;
                  var G__16853 = chunk__16819_16848;
                  var G__16854 = count__16820_16849;
                  var G__16855 = i__16821_16850 + 1;
                  seq__16818_16847 = G__16852;
                  chunk__16819_16848 = G__16853;
                  count__16820_16849 = G__16854;
                  i__16821_16850 = G__16855;
                  continue;
                } else {
                  var temp__4126__auto___16856 = cljs.core.seq.call(null, seq__16818_16847);
                  if (temp__4126__auto___16856) {
                    var seq__16818_16857__$1 = temp__4126__auto___16856;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__16818_16857__$1)) {
                      var c__3808__auto___16858 = cljs.core.chunk_first.call(null, seq__16818_16857__$1);
                      var G__16859 = cljs.core.chunk_rest.call(null, seq__16818_16857__$1);
                      var G__16860 = c__3808__auto___16858;
                      var G__16861 = cljs.core.count.call(null, c__3808__auto___16858);
                      var G__16862 = 0;
                      seq__16818_16847 = G__16859;
                      chunk__16819_16848 = G__16860;
                      count__16820_16849 = G__16861;
                      i__16821_16850 = G__16862;
                      continue;
                    } else {
                      var x_16863__$1 = cljs.core.first.call(null, seq__16818_16857__$1);
                      arr.push(x_16863__$1);
                      var G__16864 = cljs.core.next.call(null, seq__16818_16857__$1);
                      var G__16865 = null;
                      var G__16866 = 0;
                      var G__16867 = 0;
                      seq__16818_16847 = G__16864;
                      chunk__16819_16848 = G__16865;
                      count__16820_16849 = G__16866;
                      i__16821_16850 = G__16867;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj16869 = {};
  return obj16869;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3040__auto__ = x;
    if (and__3040__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__3679__auto__ = x == null ? null : x;
    return function() {
      var or__3052__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__16890__delegate = function(x, opts) {
      if (function() {
        var G__16880 = x;
        if (G__16880) {
          var bit__3702__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3052__auto__ = bit__3702__auto__;
            if (cljs.core.truth_(or__3052__auto__)) {
              return or__3052__auto__;
            } else {
              return G__16880.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__16880.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16880);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16880);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__16881 = opts;
          var map__16881__$1 = cljs.core.seq_QMARK_.call(null, map__16881) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16881) : map__16881;
          var keywordize_keys = cljs.core.get.call(null, map__16881__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__16881, map__16881__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__3777__auto__ = function(map__16881, map__16881__$1, keywordize_keys, keyfn) {
                          return function iter__16886(s__16887) {
                            return new cljs.core.LazySeq(null, function(map__16881, map__16881__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__16887__$1 = s__16887;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__16887__$1);
                                  if (temp__4126__auto__) {
                                    var s__16887__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__16887__$2)) {
                                      var c__3775__auto__ = cljs.core.chunk_first.call(null, s__16887__$2);
                                      var size__3776__auto__ = cljs.core.count.call(null, c__3775__auto__);
                                      var b__16889 = cljs.core.chunk_buffer.call(null, size__3776__auto__);
                                      if (function() {
                                        var i__16888 = 0;
                                        while (true) {
                                          if (i__16888 < size__3776__auto__) {
                                            var k = cljs.core._nth.call(null, c__3775__auto__, i__16888);
                                            cljs.core.chunk_append.call(null, b__16889, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__16891 = i__16888 + 1;
                                            i__16888 = G__16891;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16889), iter__16886.call(null, cljs.core.chunk_rest.call(null, s__16887__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16889), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__16887__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__16886.call(null, cljs.core.rest.call(null, s__16887__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__16881, map__16881__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__16881, map__16881__$1, keywordize_keys, keyfn);
                        return iter__3777__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__16881, map__16881__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__16890 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16890__delegate.call(this, x, opts);
    };
    G__16890.cljs$lang$maxFixedArity = 1;
    G__16890.cljs$lang$applyTo = function(arglist__16892) {
      var x = cljs.core.first(arglist__16892);
      var opts = cljs.core.rest(arglist__16892);
      return G__16890__delegate(x, opts);
    };
    G__16890.cljs$core$IFn$_invoke$arity$variadic = G__16890__delegate;
    return G__16890;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__16893__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__16893 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16893__delegate.call(this, args);
      };
      G__16893.cljs$lang$maxFixedArity = 0;
      G__16893.cljs$lang$applyTo = function(arglist__16894) {
        var args = cljs.core.seq(arglist__16894);
        return G__16893__delegate(args);
      };
      G__16893.cljs$core$IFn$_invoke$arity$variadic = G__16893__delegate;
      return G__16893;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__16895 = ret;
        f = G__16895;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__16896__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__16896 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16896__delegate.call(this, f, args);
    };
    G__16896.cljs$lang$maxFixedArity = 1;
    G__16896.cljs$lang$applyTo = function(arglist__16897) {
      var f = cljs.core.first(arglist__16897);
      var args = cljs.core.rest(arglist__16897);
      return G__16896__delegate(f, args);
    };
    G__16896.cljs$core$IFn$_invoke$arity$variadic = G__16896__delegate;
    return G__16896;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__16898) {
    var f = cljs.core.first(arglist__16898);
    var args = cljs.core.rest(arglist__16898);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3052__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3052__auto__) {
      return or__3052__auto__;
    } else {
      var or__3052__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3052__auto____$1) {
        return or__3052__auto____$1;
      } else {
        var and__3040__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3040__auto__) {
          var and__3040__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3040__auto____$1) {
            var and__3040__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3040__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__16899 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__16900 = i + 1;
                  ret = G__16899;
                  i = G__16900;
                  continue;
                }
                break;
              }
            } else {
              return and__3040__auto____$2;
            }
          } else {
            return and__3040__auto____$1;
          }
        } else {
          return and__3040__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3052__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3052__auto__)) {
      return or__3052__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__16901_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__16901_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__16901_SHARP_), cljs.core.second.call(null, p1__16901_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__16902_SHARP_, p2__16903_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__16902_SHARP_, p2__16903_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3052__auto__ = cljs.core.truth_(function() {
    var and__3040__auto__ = xprefs;
    if (cljs.core.truth_(and__3040__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3040__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3052__auto__)) {
    return or__3052__auto__;
  } else {
    var or__3052__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__16904 = cljs.core.rest.call(null, ps);
          ps = G__16904;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3052__auto____$1)) {
      return or__3052__auto____$1;
    } else {
      var or__3052__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__16905 = cljs.core.rest.call(null, ps);
            ps = G__16905;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3052__auto____$2)) {
        return or__3052__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3052__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3052__auto__)) {
    return or__3052__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__16908) {
    var vec__16909 = p__16908;
    var k = cljs.core.nth.call(null, vec__16909, 0, null);
    var _ = cljs.core.nth.call(null, vec__16909, 1, null);
    var e = vec__16909;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3052__auto__ = be == null;
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj16911 = {};
  return obj16911;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3040__auto__ = mf;
    if (and__3040__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__3679__auto__ = mf == null ? null : mf;
    return function() {
      var or__3052__auto__ = cljs.core._reset[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._reset["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3040__auto__ = mf;
    if (and__3040__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__3679__auto__ = mf == null ? null : mf;
    return function() {
      var or__3052__auto__ = cljs.core._add_method[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._add_method["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3040__auto__ = mf;
    if (and__3040__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__3679__auto__ = mf == null ? null : mf;
    return function() {
      var or__3052__auto__ = cljs.core._remove_method[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._remove_method["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3040__auto__ = mf;
    if (and__3040__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__3679__auto__ = mf == null ? null : mf;
    return function() {
      var or__3052__auto__ = cljs.core._prefer_method[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3040__auto__ = mf;
    if (and__3040__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__3679__auto__ = mf == null ? null : mf;
    return function() {
      var or__3052__auto__ = cljs.core._get_method[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._get_method["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3040__auto__ = mf;
    if (and__3040__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__3679__auto__ = mf == null ? null : mf;
    return function() {
      var or__3052__auto__ = cljs.core._methods[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._methods["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3040__auto__ = mf;
    if (and__3040__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__3679__auto__ = mf == null ? null : mf;
    return function() {
      var or__3052__auto__ = cljs.core._prefers[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core._prefers["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__16913 = null;
  var G__16913__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__16913__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__16913__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__16913__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__16913__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__16913__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__16913__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__16913__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__16913__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__16913__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__16913__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__16913__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__16913__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__16913__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__16913__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__16913__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__16913__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__16913__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__16913__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__16913__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__16913__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__16913 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__16913__2.call(this, self__, a);
      case 3:
        return G__16913__3.call(this, self__, a, b);
      case 4:
        return G__16913__4.call(this, self__, a, b, c);
      case 5:
        return G__16913__5.call(this, self__, a, b, c, d);
      case 6:
        return G__16913__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__16913__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__16913__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__16913__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__16913__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__16913__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__16913__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__16913__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__16913__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__16913__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__16913__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__16913__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__16913__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__16913__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__16913__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__16913__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__16913__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16913;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args16912) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16912)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3622__auto__, writer__3623__auto__, opts__3624__auto__) {
  return cljs.core._write.call(null, writer__3623__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj19646 = {};
  return obj19646;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3040__auto__ = port;
    if (and__3040__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__3679__auto__ = port == null ? null : port;
    return function() {
      var or__3052__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj19648 = {};
  return obj19648;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3040__auto__ = port;
    if (and__3040__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__3679__auto__ = port == null ? null : port;
    return function() {
      var or__3052__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj19650 = {};
  return obj19650;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3040__auto__ = chan;
    if (and__3040__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__3679__auto__ = chan == null ? null : chan;
    return function() {
      var or__3052__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3040__auto__ = chan;
    if (and__3040__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__3679__auto__ = chan == null ? null : chan;
    return function() {
      var or__3052__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj19652 = {};
  return obj19652;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3040__auto__ = h;
    if (and__3040__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__3679__auto__ = h == null ? null : h;
    return function() {
      var or__3052__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3040__auto__ = h;
    if (and__3040__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__3679__auto__ = h == null ? null : h;
    return function() {
      var or__3052__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj19654 = {};
  return obj19654;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3040__auto__ = b;
    if (and__3040__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__3679__auto__ = b == null ? null : b;
    return function() {
      var or__3052__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3040__auto__ = b;
    if (and__3040__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__3679__auto__ = b == null ? null : b;
    return function() {
      var or__3052__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3040__auto__ = b;
    if (and__3040__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__3679__auto__ = b == null ? null : b;
    return function() {
      var or__3052__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj19656 = {};
  return obj19656;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__19657 = cnt + 1;
      cnt = G__19657;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__3908__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__3908__auto__) {
      var v_19658 = this$.pop();
      if (keep_QMARK_.call(null, v_19658)) {
        this$.unshift(v_19658);
      } else {
      }
      var G__19659 = x + 1;
      x = G__19659;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_19660 = 0;
  while (true) {
    var m_19661 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_19661 == null) {
    } else {
      m_19661.call(null);
      if (count_19660 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__19662 = count_19660 + 1;
        count_19660 = G__19662;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3040__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3040__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3040__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t19666 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t19666 = function(val, box, meta19667) {
      this.val = val;
      this.box = box;
      this.meta19667 = meta19667;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t19666.cljs$lang$type = true;
    cljs.core.async.impl.channels.t19666.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t19666";
    cljs.core.async.impl.channels.t19666.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
      return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async.impl.channels/t19666");
    };
    cljs.core.async.impl.channels.t19666.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t19666.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19668) {
      var self__ = this;
      var _19668__$1 = this;
      return self__.meta19667;
    };
    cljs.core.async.impl.channels.t19666.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19668, meta19667__$1) {
      var self__ = this;
      var _19668__$1 = this;
      return new cljs.core.async.impl.channels.t19666(self__.val, self__.box, meta19667__$1);
    };
    cljs.core.async.impl.channels.__GT_t19666 = function __GT_t19666(val__$1, box__$1, meta19667) {
      return new cljs.core.async.impl.channels.t19666(val__$1, box__$1, meta19667);
    };
  }
  return new cljs.core.async.impl.channels.t19666(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3622__auto__, writer__3623__auto__, opts__3624__auto__) {
  return cljs.core._write.call(null, writer__3623__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_19669 = self__.takes.pop();
      if (taker_19669 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_19669)) {
          var take_cb_19670 = cljs.core.async.impl.protocols.commit.call(null, taker_19669);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_19670, taker_19669, this$__$1) {
            return function() {
              return take_cb_19670.call(null, null);
            };
          }(take_cb_19670, taker_19669, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        var putter_19671 = self__.puts.pop();
        if (!(putter_19671 == null)) {
          var put_handler_19672 = putter_19671.handler;
          var val_19673 = putter_19671.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_19672)) {
            var put_cb_19674 = cljs.core.async.impl.protocols.commit.call(null, put_handler_19672);
            var __19675__$1 = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb_19674, __19675__$1, put_handler_19672, val_19673, putter_19671, _, retval, this$__$1) {
              return function() {
                return put_cb_19674.call(null, true);
              };
            }(put_cb_19674, __19675__$1, put_handler_19672, val_19673, putter_19671, _, retval, this$__$1));
            cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val_19673);
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      return retval;
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb, _, put_handler, val, putter, this$__$1) {
              return function() {
                return put_cb.call(null, true);
              };
            }(put_cb, _, put_handler, val, putter, this$__$1));
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t19593 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t19593 = function(f, fn_handler, meta19594) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta19594 = meta19594;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t19593.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t19593.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t19593";
    cljs.core.async.impl.ioc_helpers.t19593.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
      return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async.impl.ioc-helpers/t19593");
    };
    cljs.core.async.impl.ioc_helpers.t19593.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t19593.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t19593.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t19593.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19595) {
      var self__ = this;
      var _19595__$1 = this;
      return self__.meta19594;
    };
    cljs.core.async.impl.ioc_helpers.t19593.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19595, meta19594__$1) {
      var self__ = this;
      var _19595__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t19593(self__.f, self__.fn_handler, meta19594__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t19593 = function __GT_t19593(f__$1, fn_handler__$1, meta19594) {
      return new cljs.core.async.impl.ioc_helpers.t19593(f__$1, fn_handler__$1, meta19594);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t19593(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e19597) {
    if (e19597 instanceof Object) {
      var ex = e19597;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw e19597;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_19600_19602 = state;
    statearr_19600_19602[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_19600_19602[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_19601_19603 = state;
    statearr_19601_19603[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_19601_19603[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_19606_19608 = state;
    statearr_19606_19608[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_19606_19608[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_19607_19609 = state;
    statearr_19607_19609[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_19607_19609[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__19610) {
    var map__19615 = p__19610;
    var map__19615__$1 = cljs.core.seq_QMARK_.call(null, map__19615) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19615) : map__19615;
    var opts = map__19615__$1;
    var statearr_19616_19619 = state;
    statearr_19616_19619[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__19615, map__19615__$1, opts) {
      return function(val) {
        var statearr_19617_19620 = state;
        statearr_19617_19620[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__19615, map__19615__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_19618_19621 = state;
      statearr_19618_19621[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__19610 = null;
    if (arguments.length > 3) {
      p__19610 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__19610);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__19622) {
    var state = cljs.core.first(arglist__19622);
    arglist__19622 = cljs.core.next(arglist__19622);
    var cont_block = cljs.core.first(arglist__19622);
    arglist__19622 = cljs.core.next(arglist__19622);
    var ports = cljs.core.first(arglist__19622);
    var p__19610 = cljs.core.rest(arglist__19622);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__19610);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3638__auto__, k__3639__auto__) {
  var self__ = this;
  var this__3638__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3638__auto____$1, k__3639__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3640__auto__, k19624, else__3641__auto__) {
  var self__ = this;
  var this__3640__auto____$1 = this;
  var G__19626 = k19624 instanceof cljs.core.Keyword ? k19624.fqn : null;
  switch(G__19626) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k19624, else__3641__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3652__auto__, writer__3653__auto__, opts__3654__auto__) {
  var self__ = this;
  var this__3652__auto____$1 = this;
  var pr_pair__3655__auto__ = function(this__3652__auto____$1) {
    return function(keyval__3656__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__3653__auto__, cljs.core.pr_writer, "", " ", "", opts__3654__auto__, keyval__3656__auto__);
    };
  }(this__3652__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__3653__auto__, pr_pair__3655__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__3654__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3636__auto__) {
  var self__ = this;
  var this__3636__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__3632__auto__) {
  var self__ = this;
  var this__3632__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3642__auto__) {
  var self__ = this;
  var this__3642__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3633__auto__) {
  var self__ = this;
  var this__3633__auto____$1 = this;
  var h__3463__auto__ = self__.__hash;
  if (!(h__3463__auto__ == null)) {
    return h__3463__auto__;
  } else {
    var h__3463__auto____$1 = cljs.core.hash_imap.call(null, this__3633__auto____$1);
    self__.__hash = h__3463__auto____$1;
    return h__3463__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3634__auto__, other__3635__auto__) {
  var self__ = this;
  var this__3634__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3040__auto__ = other__3635__auto__;
    if (cljs.core.truth_(and__3040__auto__)) {
      return this__3634__auto____$1.constructor === other__3635__auto__.constructor && cljs.core.equiv_map.call(null, this__3634__auto____$1, other__3635__auto__);
    } else {
      return and__3040__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3647__auto__, k__3648__auto__) {
  var self__ = this;
  var this__3647__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__3648__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3647__auto____$1), self__.__meta), k__3648__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3648__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3645__auto__, k__3646__auto__, G__19623) {
  var self__ = this;
  var this__3645__auto____$1 = this;
  var pred__19627 = cljs.core.keyword_identical_QMARK_;
  var expr__19628 = k__3646__auto__;
  if (cljs.core.truth_(pred__19627.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__19628))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__19623, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19627.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__19628))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__19623, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__19627.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__19628))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__19623, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__19627.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__19628))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__19623, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__19627.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__19628))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__19623, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3646__auto__, G__19623), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3650__auto__) {
  var self__ = this;
  var this__3650__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3637__auto__, G__19623) {
  var self__ = this;
  var this__3637__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__19623, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3643__auto__, entry__3644__auto__) {
  var self__ = this;
  var this__3643__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3644__auto__)) {
    return cljs.core._assoc.call(null, this__3643__auto____$1, cljs.core._nth.call(null, entry__3644__auto__, 0), cljs.core._nth.call(null, entry__3644__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3643__auto____$1, entry__3644__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__3672__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__3672__auto__, writer__3673__auto__) {
  return cljs.core._write.call(null, writer__3673__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__19625) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__19625), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__19625), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__19625), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__19625), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__19625), null, cljs.core.dissoc.call(null, G__19625, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_19632 = state;
  statearr_19632[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_19632;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3040__auto__ = exception;
      if (cljs.core.truth_(and__3040__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3040__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3040__auto__ = exception;
        if (cljs.core.truth_(and__3040__auto__)) {
          var and__3040__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3040__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3040__auto____$1;
          }
        } else {
          return and__3040__auto__;
        }
      }())) {
        var statearr_19638 = state;
        statearr_19638[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_19638[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_19638[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_19638[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_19638;
      } else {
        if (cljs.core.truth_(function() {
          var and__3040__auto__ = exception;
          if (cljs.core.truth_(and__3040__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3040__auto__;
          }
        }())) {
          var statearr_19639_19643 = state;
          statearr_19639_19643[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__19644 = state;
          state = G__19644;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3040__auto__ = exception;
            if (cljs.core.truth_(and__3040__auto__)) {
              var and__3040__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3040__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3040__auto____$1;
              }
            } else {
              return and__3040__auto__;
            }
          }())) {
            var statearr_19640 = state;
            statearr_19640[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_19640[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_19640;
          } else {
            if (cljs.core.truth_(function() {
              var and__3040__auto__ = cljs.core.not.call(null, exception);
              if (and__3040__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3040__auto__;
              }
            }())) {
              var statearr_19641 = state;
              statearr_19641[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_19641[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_19641;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_19642 = state;
                statearr_19642[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_19642[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_19642;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error("Assert failed: No matching clause\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, false)));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__19566 = level + 1;
        level = G__19566;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_19567 = 0;
    while (true) {
      if (i_19567 < arr.length) {
        arr[i_19567] = null;
        var G__19568 = i_19567 + 1;
        i_19567 = G__19568;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__19569 = x_SINGLEQUOTE_;
                x__$1 = G__19569;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__19570 = x__$1;
        var G__19571 = k;
        var G__19572 = level - 1;
        var G__19573 = update;
        x = G__19570;
        k = G__19571;
        level = G__19572;
        update = G__19573;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_19574 = self__.level + 1;
      while (true) {
        if (i_19574 <= new_level + 1) {
          update[i_19574] = self__.header;
          var G__19575 = i_19574 + 1;
          i_19574 = G__19575;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_19576 = 0;
    while (true) {
      if (i_19576 <= self__.level) {
        var links_19577 = update[i_19576].forward;
        if (links_19577[i_19576] === x__$1) {
          links_19577[i_19576] = x__$1.forward[i_19576];
          var G__19578 = i_19576 + 1;
          i_19576 = G__19578;
          continue;
        } else {
          var G__19579 = i_19576 + 1;
          i_19576 = G__19579;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__19580 = x_SINGLEQUOTE_;
              x__$1 = G__19580;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__19581 = nx;
        var G__19582 = level__$1 - 1;
        x = G__19581;
        level__$1 = G__19582;
        continue;
      } else {
        var G__19583 = x;
        var G__19584 = level__$1 - 1;
        x = G__19583;
        level__$1 = G__19584;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__19585 = x_SINGLEQUOTE_;
              x__$1 = G__19585;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__19586 = nx;
        var G__19587 = level__$1 - 1;
        x = G__19586;
        level__$1 = G__19587;
        continue;
      } else {
        var G__19588 = x;
        var G__19589 = level__$1 - 1;
        x = G__19588;
        level__$1 = G__19589;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3052__auto__ = cljs.core.truth_(function() {
    var and__3040__auto__ = me;
    if (cljs.core.truth_(and__3040__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3040__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3052__auto__)) {
    return or__3052__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3052__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3052__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t16917 !== "undefined") {
  } else {
    cljs.core.async.t16917 = function(f, fn_handler, meta16918) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta16918 = meta16918;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16917.cljs$lang$type = true;
    cljs.core.async.t16917.cljs$lang$ctorStr = "cljs.core.async/t16917";
    cljs.core.async.t16917.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
      return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t16917");
    };
    cljs.core.async.t16917.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t16917.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t16917.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t16917.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16919) {
      var self__ = this;
      var _16919__$1 = this;
      return self__.meta16918;
    };
    cljs.core.async.t16917.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16919, meta16918__$1) {
      var self__ = this;
      var _16919__$1 = this;
      return new cljs.core.async.t16917(self__.f, self__.fn_handler, meta16918__$1);
    };
    cljs.core.async.__GT_t16917 = function __GT_t16917(f__$1, fn_handler__$1, meta16918) {
      return new cljs.core.async.t16917(f__$1, fn_handler__$1, meta16918);
    };
  }
  return new cljs.core.async.t16917(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__16921 = buff;
  if (G__16921) {
    var bit__3702__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3052__auto__ = bit__3702__auto__;
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return G__16921.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__16921.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__16921);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__16921);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_16922 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_16922);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_16922, ret) {
          return function() {
            return fn1.call(null, val_16922);
          };
        }(val_16922, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__3908__auto___16923 = n;
  var x_16924 = 0;
  while (true) {
    if (x_16924 < n__3908__auto___16923) {
      a[x_16924] = 0;
      var G__16925 = x_16924 + 1;
      x_16924 = G__16925;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__16926 = i + 1;
      i = G__16926;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t16930 !== "undefined") {
  } else {
    cljs.core.async.t16930 = function(flag, alt_flag, meta16931) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta16931 = meta16931;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16930.cljs$lang$type = true;
    cljs.core.async.t16930.cljs$lang$ctorStr = "cljs.core.async/t16930";
    cljs.core.async.t16930.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
        return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t16930");
      };
    }(flag);
    cljs.core.async.t16930.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t16930.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t16930.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t16930.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_16932) {
        var self__ = this;
        var _16932__$1 = this;
        return self__.meta16931;
      };
    }(flag);
    cljs.core.async.t16930.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_16932, meta16931__$1) {
        var self__ = this;
        var _16932__$1 = this;
        return new cljs.core.async.t16930(self__.flag, self__.alt_flag, meta16931__$1);
      };
    }(flag);
    cljs.core.async.__GT_t16930 = function(flag) {
      return function __GT_t16930(flag__$1, alt_flag__$1, meta16931) {
        return new cljs.core.async.t16930(flag__$1, alt_flag__$1, meta16931);
      };
    }(flag);
  }
  return new cljs.core.async.t16930(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t16936 !== "undefined") {
  } else {
    cljs.core.async.t16936 = function(cb, flag, alt_handler, meta16937) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta16937 = meta16937;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16936.cljs$lang$type = true;
    cljs.core.async.t16936.cljs$lang$ctorStr = "cljs.core.async/t16936";
    cljs.core.async.t16936.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
      return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t16936");
    };
    cljs.core.async.t16936.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t16936.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t16936.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t16936.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16938) {
      var self__ = this;
      var _16938__$1 = this;
      return self__.meta16937;
    };
    cljs.core.async.t16936.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16938, meta16937__$1) {
      var self__ = this;
      var _16938__$1 = this;
      return new cljs.core.async.t16936(self__.cb, self__.flag, self__.alt_handler, meta16937__$1);
    };
    cljs.core.async.__GT_t16936 = function __GT_t16936(cb__$1, flag__$1, alt_handler__$1, meta16937) {
      return new cljs.core.async.t16936(cb__$1, flag__$1, alt_handler__$1, meta16937);
    };
  }
  return new cljs.core.async.t16936(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__16939_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16939_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__16940_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16940_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3052__auto__ = wport;
            if (cljs.core.truth_(or__3052__auto__)) {
              return or__3052__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__16941 = i + 1;
          i = G__16941;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3052__auto__ = ret;
  if (cljs.core.truth_(or__3052__auto__)) {
    return or__3052__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3040__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3040__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3040__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__16942) {
    var map__16944 = p__16942;
    var map__16944__$1 = cljs.core.seq_QMARK_.call(null, map__16944) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16944) : map__16944;
    var opts = map__16944__$1;
    if (null) {
      return null;
    } else {
      throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__16942 = null;
    if (arguments.length > 1) {
      p__16942 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__16942);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__16945) {
    var ports = cljs.core.first(arglist__16945);
    var p__16942 = cljs.core.rest(arglist__16945);
    return alts_BANG___delegate(ports, p__16942);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t16953 !== "undefined") {
  } else {
    cljs.core.async.t16953 = function(ch, f, map_LT_, meta16954) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta16954 = meta16954;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16953.cljs$lang$type = true;
    cljs.core.async.t16953.cljs$lang$ctorStr = "cljs.core.async/t16953";
    cljs.core.async.t16953.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
      return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t16953");
    };
    cljs.core.async.t16953.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t16953.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t16953.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t16953.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t16956 !== "undefined") {
        } else {
          cljs.core.async.t16956 = function(fn1, _, meta16954, ch, f, map_LT_, meta16957) {
            this.fn1 = fn1;
            this._ = _;
            this.meta16954 = meta16954;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta16957 = meta16957;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t16956.cljs$lang$type = true;
          cljs.core.async.t16956.cljs$lang$ctorStr = "cljs.core.async/t16956";
          cljs.core.async.t16956.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
              return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t16956");
            };
          }(___$1);
          cljs.core.async.t16956.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t16956.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t16956.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t16956.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__16946_SHARP_) {
                  return f1.call(null, p1__16946_SHARP_ == null ? null : self__.f.call(null, p1__16946_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t16956.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_16958) {
              var self__ = this;
              var _16958__$1 = this;
              return self__.meta16957;
            };
          }(___$1);
          cljs.core.async.t16956.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_16958, meta16957__$1) {
              var self__ = this;
              var _16958__$1 = this;
              return new cljs.core.async.t16956(self__.fn1, self__._, self__.meta16954, self__.ch, self__.f, self__.map_LT_, meta16957__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t16956 = function(___$1) {
            return function __GT_t16956(fn1__$1, ___$2, meta16954__$1, ch__$2, f__$2, map_LT___$2, meta16957) {
              return new cljs.core.async.t16956(fn1__$1, ___$2, meta16954__$1, ch__$2, f__$2, map_LT___$2, meta16957);
            };
          }(___$1);
        }
        return new cljs.core.async.t16956(fn1, ___$1, self__.meta16954, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3040__auto__ = ret;
        if (cljs.core.truth_(and__3040__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3040__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t16953.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t16953.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t16953.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t16953.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16955) {
      var self__ = this;
      var _16955__$1 = this;
      return self__.meta16954;
    };
    cljs.core.async.t16953.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16955, meta16954__$1) {
      var self__ = this;
      var _16955__$1 = this;
      return new cljs.core.async.t16953(self__.ch, self__.f, self__.map_LT_, meta16954__$1);
    };
    cljs.core.async.__GT_t16953 = function __GT_t16953(ch__$1, f__$1, map_LT___$1, meta16954) {
      return new cljs.core.async.t16953(ch__$1, f__$1, map_LT___$1, meta16954);
    };
  }
  return new cljs.core.async.t16953(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t16962 !== "undefined") {
  } else {
    cljs.core.async.t16962 = function(ch, f, map_GT_, meta16963) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta16963 = meta16963;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16962.cljs$lang$type = true;
    cljs.core.async.t16962.cljs$lang$ctorStr = "cljs.core.async/t16962";
    cljs.core.async.t16962.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
      return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t16962");
    };
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t16962.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16964) {
      var self__ = this;
      var _16964__$1 = this;
      return self__.meta16963;
    };
    cljs.core.async.t16962.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16964, meta16963__$1) {
      var self__ = this;
      var _16964__$1 = this;
      return new cljs.core.async.t16962(self__.ch, self__.f, self__.map_GT_, meta16963__$1);
    };
    cljs.core.async.__GT_t16962 = function __GT_t16962(ch__$1, f__$1, map_GT___$1, meta16963) {
      return new cljs.core.async.t16962(ch__$1, f__$1, map_GT___$1, meta16963);
    };
  }
  return new cljs.core.async.t16962(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t16968 !== "undefined") {
  } else {
    cljs.core.async.t16968 = function(ch, p, filter_GT_, meta16969) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta16969 = meta16969;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16968.cljs$lang$type = true;
    cljs.core.async.t16968.cljs$lang$ctorStr = "cljs.core.async/t16968";
    cljs.core.async.t16968.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
      return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t16968");
    };
    cljs.core.async.t16968.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t16968.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t16968.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t16968.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t16968.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t16968.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t16968.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t16968.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16970) {
      var self__ = this;
      var _16970__$1 = this;
      return self__.meta16969;
    };
    cljs.core.async.t16968.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16970, meta16969__$1) {
      var self__ = this;
      var _16970__$1 = this;
      return new cljs.core.async.t16968(self__.ch, self__.p, self__.filter_GT_, meta16969__$1);
    };
    cljs.core.async.__GT_t16968 = function __GT_t16968(ch__$1, p__$1, filter_GT___$1, meta16969) {
      return new cljs.core.async.t16968(ch__$1, p__$1, filter_GT___$1, meta16969);
    };
  }
  return new cljs.core.async.t16968(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12125__auto___17053 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___17053, out) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___17053, out) {
            return function(state_17032) {
              var state_val_17033 = state_17032[1];
              if (state_val_17033 === 7) {
                var inst_17028 = state_17032[2];
                var state_17032__$1 = state_17032;
                var statearr_17034_17054 = state_17032__$1;
                statearr_17034_17054[2] = inst_17028;
                statearr_17034_17054[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17033 === 1) {
                  var state_17032__$1 = state_17032;
                  var statearr_17035_17055 = state_17032__$1;
                  statearr_17035_17055[2] = null;
                  statearr_17035_17055[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17033 === 4) {
                    var inst_17014 = state_17032[7];
                    var inst_17014__$1 = state_17032[2];
                    var inst_17015 = inst_17014__$1 == null;
                    var state_17032__$1 = function() {
                      var statearr_17036 = state_17032;
                      statearr_17036[7] = inst_17014__$1;
                      return statearr_17036;
                    }();
                    if (cljs.core.truth_(inst_17015)) {
                      var statearr_17037_17056 = state_17032__$1;
                      statearr_17037_17056[1] = 5;
                    } else {
                      var statearr_17038_17057 = state_17032__$1;
                      statearr_17038_17057[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17033 === 6) {
                      var inst_17014 = state_17032[7];
                      var inst_17019 = p.call(null, inst_17014);
                      var state_17032__$1 = state_17032;
                      if (cljs.core.truth_(inst_17019)) {
                        var statearr_17039_17058 = state_17032__$1;
                        statearr_17039_17058[1] = 8;
                      } else {
                        var statearr_17040_17059 = state_17032__$1;
                        statearr_17040_17059[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17033 === 3) {
                        var inst_17030 = state_17032[2];
                        var state_17032__$1 = state_17032;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17032__$1, inst_17030);
                      } else {
                        if (state_val_17033 === 2) {
                          var state_17032__$1 = state_17032;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17032__$1, 4, ch);
                        } else {
                          if (state_val_17033 === 11) {
                            var inst_17022 = state_17032[2];
                            var state_17032__$1 = state_17032;
                            var statearr_17041_17060 = state_17032__$1;
                            statearr_17041_17060[2] = inst_17022;
                            statearr_17041_17060[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17033 === 9) {
                              var state_17032__$1 = state_17032;
                              var statearr_17042_17061 = state_17032__$1;
                              statearr_17042_17061[2] = null;
                              statearr_17042_17061[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17033 === 5) {
                                var inst_17017 = cljs.core.async.close_BANG_.call(null, out);
                                var state_17032__$1 = state_17032;
                                var statearr_17043_17062 = state_17032__$1;
                                statearr_17043_17062[2] = inst_17017;
                                statearr_17043_17062[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17033 === 10) {
                                  var inst_17025 = state_17032[2];
                                  var state_17032__$1 = function() {
                                    var statearr_17044 = state_17032;
                                    statearr_17044[8] = inst_17025;
                                    return statearr_17044;
                                  }();
                                  var statearr_17045_17063 = state_17032__$1;
                                  statearr_17045_17063[2] = null;
                                  statearr_17045_17063[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17033 === 8) {
                                    var inst_17014 = state_17032[7];
                                    var state_17032__$1 = state_17032;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17032__$1, 11, out, inst_17014);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___17053, out);
          return function(switch__12060__auto__, c__12125__auto___17053, out) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_17049 = [null, null, null, null, null, null, null, null, null];
                statearr_17049[0] = state_machine__12061__auto__;
                statearr_17049[1] = 1;
                return statearr_17049;
              };
              var state_machine__12061__auto____1 = function(state_17032) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_17032);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e17050) {
                      if (e17050 instanceof Object) {
                        var ex__12064__auto__ = e17050;
                        var statearr_17051_17064 = state_17032;
                        statearr_17051_17064[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17032);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17050;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17065 = state_17032;
                    state_17032 = G__17065;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_17032) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_17032);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___17053, out);
        }();
        var state__12127__auto__ = function() {
          var statearr_17052 = f__12126__auto__.call(null);
          statearr_17052[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___17053;
          return statearr_17052;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___17053, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__12125__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto__) {
    return function() {
      var f__12126__auto__ = function() {
        var switch__12060__auto__ = function(c__12125__auto__) {
          return function(state_17231) {
            var state_val_17232 = state_17231[1];
            if (state_val_17232 === 7) {
              var inst_17227 = state_17231[2];
              var state_17231__$1 = state_17231;
              var statearr_17233_17274 = state_17231__$1;
              statearr_17233_17274[2] = inst_17227;
              statearr_17233_17274[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17232 === 20) {
                var inst_17197 = state_17231[7];
                var inst_17208 = state_17231[2];
                var inst_17209 = cljs.core.next.call(null, inst_17197);
                var inst_17183 = inst_17209;
                var inst_17184 = null;
                var inst_17185 = 0;
                var inst_17186 = 0;
                var state_17231__$1 = function() {
                  var statearr_17234 = state_17231;
                  statearr_17234[8] = inst_17185;
                  statearr_17234[9] = inst_17186;
                  statearr_17234[10] = inst_17183;
                  statearr_17234[11] = inst_17208;
                  statearr_17234[12] = inst_17184;
                  return statearr_17234;
                }();
                var statearr_17235_17275 = state_17231__$1;
                statearr_17235_17275[2] = null;
                statearr_17235_17275[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17232 === 1) {
                  var state_17231__$1 = state_17231;
                  var statearr_17236_17276 = state_17231__$1;
                  statearr_17236_17276[2] = null;
                  statearr_17236_17276[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17232 === 4) {
                    var inst_17172 = state_17231[13];
                    var inst_17172__$1 = state_17231[2];
                    var inst_17173 = inst_17172__$1 == null;
                    var state_17231__$1 = function() {
                      var statearr_17237 = state_17231;
                      statearr_17237[13] = inst_17172__$1;
                      return statearr_17237;
                    }();
                    if (cljs.core.truth_(inst_17173)) {
                      var statearr_17238_17277 = state_17231__$1;
                      statearr_17238_17277[1] = 5;
                    } else {
                      var statearr_17239_17278 = state_17231__$1;
                      statearr_17239_17278[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17232 === 15) {
                      var state_17231__$1 = state_17231;
                      var statearr_17243_17279 = state_17231__$1;
                      statearr_17243_17279[2] = null;
                      statearr_17243_17279[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17232 === 21) {
                        var state_17231__$1 = state_17231;
                        var statearr_17244_17280 = state_17231__$1;
                        statearr_17244_17280[2] = null;
                        statearr_17244_17280[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17232 === 13) {
                          var inst_17185 = state_17231[8];
                          var inst_17186 = state_17231[9];
                          var inst_17183 = state_17231[10];
                          var inst_17184 = state_17231[12];
                          var inst_17193 = state_17231[2];
                          var inst_17194 = inst_17186 + 1;
                          var tmp17240 = inst_17185;
                          var tmp17241 = inst_17183;
                          var tmp17242 = inst_17184;
                          var inst_17183__$1 = tmp17241;
                          var inst_17184__$1 = tmp17242;
                          var inst_17185__$1 = tmp17240;
                          var inst_17186__$1 = inst_17194;
                          var state_17231__$1 = function() {
                            var statearr_17245 = state_17231;
                            statearr_17245[8] = inst_17185__$1;
                            statearr_17245[9] = inst_17186__$1;
                            statearr_17245[14] = inst_17193;
                            statearr_17245[10] = inst_17183__$1;
                            statearr_17245[12] = inst_17184__$1;
                            return statearr_17245;
                          }();
                          var statearr_17246_17281 = state_17231__$1;
                          statearr_17246_17281[2] = null;
                          statearr_17246_17281[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17232 === 22) {
                            var state_17231__$1 = state_17231;
                            var statearr_17247_17282 = state_17231__$1;
                            statearr_17247_17282[2] = null;
                            statearr_17247_17282[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17232 === 6) {
                              var inst_17172 = state_17231[13];
                              var inst_17181 = f.call(null, inst_17172);
                              var inst_17182 = cljs.core.seq.call(null, inst_17181);
                              var inst_17183 = inst_17182;
                              var inst_17184 = null;
                              var inst_17185 = 0;
                              var inst_17186 = 0;
                              var state_17231__$1 = function() {
                                var statearr_17248 = state_17231;
                                statearr_17248[8] = inst_17185;
                                statearr_17248[9] = inst_17186;
                                statearr_17248[10] = inst_17183;
                                statearr_17248[12] = inst_17184;
                                return statearr_17248;
                              }();
                              var statearr_17249_17283 = state_17231__$1;
                              statearr_17249_17283[2] = null;
                              statearr_17249_17283[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17232 === 17) {
                                var inst_17197 = state_17231[7];
                                var inst_17201 = cljs.core.chunk_first.call(null, inst_17197);
                                var inst_17202 = cljs.core.chunk_rest.call(null, inst_17197);
                                var inst_17203 = cljs.core.count.call(null, inst_17201);
                                var inst_17183 = inst_17202;
                                var inst_17184 = inst_17201;
                                var inst_17185 = inst_17203;
                                var inst_17186 = 0;
                                var state_17231__$1 = function() {
                                  var statearr_17250 = state_17231;
                                  statearr_17250[8] = inst_17185;
                                  statearr_17250[9] = inst_17186;
                                  statearr_17250[10] = inst_17183;
                                  statearr_17250[12] = inst_17184;
                                  return statearr_17250;
                                }();
                                var statearr_17251_17284 = state_17231__$1;
                                statearr_17251_17284[2] = null;
                                statearr_17251_17284[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17232 === 3) {
                                  var inst_17229 = state_17231[2];
                                  var state_17231__$1 = state_17231;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17231__$1, inst_17229);
                                } else {
                                  if (state_val_17232 === 12) {
                                    var inst_17217 = state_17231[2];
                                    var state_17231__$1 = state_17231;
                                    var statearr_17252_17285 = state_17231__$1;
                                    statearr_17252_17285[2] = inst_17217;
                                    statearr_17252_17285[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17232 === 2) {
                                      var state_17231__$1 = state_17231;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17231__$1, 4, in$);
                                    } else {
                                      if (state_val_17232 === 23) {
                                        var inst_17225 = state_17231[2];
                                        var state_17231__$1 = state_17231;
                                        var statearr_17253_17286 = state_17231__$1;
                                        statearr_17253_17286[2] = inst_17225;
                                        statearr_17253_17286[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17232 === 19) {
                                          var inst_17212 = state_17231[2];
                                          var state_17231__$1 = state_17231;
                                          var statearr_17254_17287 = state_17231__$1;
                                          statearr_17254_17287[2] = inst_17212;
                                          statearr_17254_17287[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_17232 === 11) {
                                            var inst_17197 = state_17231[7];
                                            var inst_17183 = state_17231[10];
                                            var inst_17197__$1 = cljs.core.seq.call(null, inst_17183);
                                            var state_17231__$1 = function() {
                                              var statearr_17255 = state_17231;
                                              statearr_17255[7] = inst_17197__$1;
                                              return statearr_17255;
                                            }();
                                            if (inst_17197__$1) {
                                              var statearr_17256_17288 = state_17231__$1;
                                              statearr_17256_17288[1] = 14;
                                            } else {
                                              var statearr_17257_17289 = state_17231__$1;
                                              statearr_17257_17289[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_17232 === 9) {
                                              var inst_17219 = state_17231[2];
                                              var inst_17220 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_17231__$1 = function() {
                                                var statearr_17258 = state_17231;
                                                statearr_17258[15] = inst_17219;
                                                return statearr_17258;
                                              }();
                                              if (cljs.core.truth_(inst_17220)) {
                                                var statearr_17259_17290 = state_17231__$1;
                                                statearr_17259_17290[1] = 21;
                                              } else {
                                                var statearr_17260_17291 = state_17231__$1;
                                                statearr_17260_17291[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_17232 === 5) {
                                                var inst_17175 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_17231__$1 = state_17231;
                                                var statearr_17261_17292 = state_17231__$1;
                                                statearr_17261_17292[2] = inst_17175;
                                                statearr_17261_17292[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_17232 === 14) {
                                                  var inst_17197 = state_17231[7];
                                                  var inst_17199 = cljs.core.chunked_seq_QMARK_.call(null, inst_17197);
                                                  var state_17231__$1 = state_17231;
                                                  if (inst_17199) {
                                                    var statearr_17262_17293 = state_17231__$1;
                                                    statearr_17262_17293[1] = 17;
                                                  } else {
                                                    var statearr_17263_17294 = state_17231__$1;
                                                    statearr_17263_17294[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_17232 === 16) {
                                                    var inst_17215 = state_17231[2];
                                                    var state_17231__$1 = state_17231;
                                                    var statearr_17264_17295 = state_17231__$1;
                                                    statearr_17264_17295[2] = inst_17215;
                                                    statearr_17264_17295[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_17232 === 10) {
                                                      var inst_17186 = state_17231[9];
                                                      var inst_17184 = state_17231[12];
                                                      var inst_17191 = cljs.core._nth.call(null, inst_17184, inst_17186);
                                                      var state_17231__$1 = state_17231;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17231__$1, 13, out, inst_17191);
                                                    } else {
                                                      if (state_val_17232 === 18) {
                                                        var inst_17197 = state_17231[7];
                                                        var inst_17206 = cljs.core.first.call(null, inst_17197);
                                                        var state_17231__$1 = state_17231;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17231__$1, 20, out, inst_17206);
                                                      } else {
                                                        if (state_val_17232 === 8) {
                                                          var inst_17185 = state_17231[8];
                                                          var inst_17186 = state_17231[9];
                                                          var inst_17188 = inst_17186 < inst_17185;
                                                          var inst_17189 = inst_17188;
                                                          var state_17231__$1 = state_17231;
                                                          if (cljs.core.truth_(inst_17189)) {
                                                            var statearr_17265_17296 = state_17231__$1;
                                                            statearr_17265_17296[1] = 10;
                                                          } else {
                                                            var statearr_17266_17297 = state_17231__$1;
                                                            statearr_17266_17297[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12125__auto__);
        return function(switch__12060__auto__, c__12125__auto__) {
          return function() {
            var state_machine__12061__auto__ = null;
            var state_machine__12061__auto____0 = function() {
              var statearr_17270 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17270[0] = state_machine__12061__auto__;
              statearr_17270[1] = 1;
              return statearr_17270;
            };
            var state_machine__12061__auto____1 = function(state_17231) {
              while (true) {
                var ret_value__12062__auto__ = function() {
                  try {
                    while (true) {
                      var result__12063__auto__ = switch__12060__auto__.call(null, state_17231);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12063__auto__;
                      }
                      break;
                    }
                  } catch (e17271) {
                    if (e17271 instanceof Object) {
                      var ex__12064__auto__ = e17271;
                      var statearr_17272_17298 = state_17231;
                      statearr_17272_17298[5] = ex__12064__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17231);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e17271;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17299 = state_17231;
                  state_17231 = G__17299;
                  continue;
                } else {
                  return ret_value__12062__auto__;
                }
                break;
              }
            };
            state_machine__12061__auto__ = function(state_17231) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12061__auto____0.call(this);
                case 1:
                  return state_machine__12061__auto____1.call(this, state_17231);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
            return state_machine__12061__auto__;
          }();
        }(switch__12060__auto__, c__12125__auto__);
      }();
      var state__12127__auto__ = function() {
        var statearr_17273 = f__12126__auto__.call(null);
        statearr_17273[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto__;
        return statearr_17273;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
    };
  }(c__12125__auto__));
  return c__12125__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__12125__auto___17394 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___17394) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___17394) {
            return function(state_17370) {
              var state_val_17371 = state_17370[1];
              if (state_val_17371 === 7) {
                var inst_17366 = state_17370[2];
                var state_17370__$1 = state_17370;
                var statearr_17372_17395 = state_17370__$1;
                statearr_17372_17395[2] = inst_17366;
                statearr_17372_17395[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17371 === 1) {
                  var state_17370__$1 = state_17370;
                  var statearr_17373_17396 = state_17370__$1;
                  statearr_17373_17396[2] = null;
                  statearr_17373_17396[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17371 === 4) {
                    var inst_17349 = state_17370[7];
                    var inst_17349__$1 = state_17370[2];
                    var inst_17350 = inst_17349__$1 == null;
                    var state_17370__$1 = function() {
                      var statearr_17374 = state_17370;
                      statearr_17374[7] = inst_17349__$1;
                      return statearr_17374;
                    }();
                    if (cljs.core.truth_(inst_17350)) {
                      var statearr_17375_17397 = state_17370__$1;
                      statearr_17375_17397[1] = 5;
                    } else {
                      var statearr_17376_17398 = state_17370__$1;
                      statearr_17376_17398[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17371 === 13) {
                      var state_17370__$1 = state_17370;
                      var statearr_17377_17399 = state_17370__$1;
                      statearr_17377_17399[2] = null;
                      statearr_17377_17399[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17371 === 6) {
                        var inst_17349 = state_17370[7];
                        var state_17370__$1 = state_17370;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17370__$1, 11, to, inst_17349);
                      } else {
                        if (state_val_17371 === 3) {
                          var inst_17368 = state_17370[2];
                          var state_17370__$1 = state_17370;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17370__$1, inst_17368);
                        } else {
                          if (state_val_17371 === 12) {
                            var state_17370__$1 = state_17370;
                            var statearr_17378_17400 = state_17370__$1;
                            statearr_17378_17400[2] = null;
                            statearr_17378_17400[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17371 === 2) {
                              var state_17370__$1 = state_17370;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17370__$1, 4, from);
                            } else {
                              if (state_val_17371 === 11) {
                                var inst_17359 = state_17370[2];
                                var state_17370__$1 = state_17370;
                                if (cljs.core.truth_(inst_17359)) {
                                  var statearr_17379_17401 = state_17370__$1;
                                  statearr_17379_17401[1] = 12;
                                } else {
                                  var statearr_17380_17402 = state_17370__$1;
                                  statearr_17380_17402[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17371 === 9) {
                                  var state_17370__$1 = state_17370;
                                  var statearr_17381_17403 = state_17370__$1;
                                  statearr_17381_17403[2] = null;
                                  statearr_17381_17403[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17371 === 5) {
                                    var state_17370__$1 = state_17370;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_17382_17404 = state_17370__$1;
                                      statearr_17382_17404[1] = 8;
                                    } else {
                                      var statearr_17383_17405 = state_17370__$1;
                                      statearr_17383_17405[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17371 === 14) {
                                      var inst_17364 = state_17370[2];
                                      var state_17370__$1 = state_17370;
                                      var statearr_17384_17406 = state_17370__$1;
                                      statearr_17384_17406[2] = inst_17364;
                                      statearr_17384_17406[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17371 === 10) {
                                        var inst_17356 = state_17370[2];
                                        var state_17370__$1 = state_17370;
                                        var statearr_17385_17407 = state_17370__$1;
                                        statearr_17385_17407[2] = inst_17356;
                                        statearr_17385_17407[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17371 === 8) {
                                          var inst_17353 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_17370__$1 = state_17370;
                                          var statearr_17386_17408 = state_17370__$1;
                                          statearr_17386_17408[2] = inst_17353;
                                          statearr_17386_17408[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___17394);
          return function(switch__12060__auto__, c__12125__auto___17394) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_17390 = [null, null, null, null, null, null, null, null];
                statearr_17390[0] = state_machine__12061__auto__;
                statearr_17390[1] = 1;
                return statearr_17390;
              };
              var state_machine__12061__auto____1 = function(state_17370) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_17370);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e17391) {
                      if (e17391 instanceof Object) {
                        var ex__12064__auto__ = e17391;
                        var statearr_17392_17409 = state_17370;
                        statearr_17392_17409[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17370);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17391;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17410 = state_17370;
                    state_17370 = G__17410;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_17370) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_17370);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___17394);
        }();
        var state__12127__auto__ = function() {
          var statearr_17393 = f__12126__auto__.call(null);
          statearr_17393[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___17394;
          return statearr_17393;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___17394));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__12125__auto___17511 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___17511, tc, fc) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___17511, tc, fc) {
            return function(state_17486) {
              var state_val_17487 = state_17486[1];
              if (state_val_17487 === 7) {
                var inst_17482 = state_17486[2];
                var state_17486__$1 = state_17486;
                var statearr_17488_17512 = state_17486__$1;
                statearr_17488_17512[2] = inst_17482;
                statearr_17488_17512[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17487 === 1) {
                  var state_17486__$1 = state_17486;
                  var statearr_17489_17513 = state_17486__$1;
                  statearr_17489_17513[2] = null;
                  statearr_17489_17513[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17487 === 4) {
                    var inst_17463 = state_17486[7];
                    var inst_17463__$1 = state_17486[2];
                    var inst_17464 = inst_17463__$1 == null;
                    var state_17486__$1 = function() {
                      var statearr_17490 = state_17486;
                      statearr_17490[7] = inst_17463__$1;
                      return statearr_17490;
                    }();
                    if (cljs.core.truth_(inst_17464)) {
                      var statearr_17491_17514 = state_17486__$1;
                      statearr_17491_17514[1] = 5;
                    } else {
                      var statearr_17492_17515 = state_17486__$1;
                      statearr_17492_17515[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17487 === 13) {
                      var state_17486__$1 = state_17486;
                      var statearr_17493_17516 = state_17486__$1;
                      statearr_17493_17516[2] = null;
                      statearr_17493_17516[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17487 === 6) {
                        var inst_17463 = state_17486[7];
                        var inst_17469 = p.call(null, inst_17463);
                        var state_17486__$1 = state_17486;
                        if (cljs.core.truth_(inst_17469)) {
                          var statearr_17494_17517 = state_17486__$1;
                          statearr_17494_17517[1] = 9;
                        } else {
                          var statearr_17495_17518 = state_17486__$1;
                          statearr_17495_17518[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17487 === 3) {
                          var inst_17484 = state_17486[2];
                          var state_17486__$1 = state_17486;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17486__$1, inst_17484);
                        } else {
                          if (state_val_17487 === 12) {
                            var state_17486__$1 = state_17486;
                            var statearr_17496_17519 = state_17486__$1;
                            statearr_17496_17519[2] = null;
                            statearr_17496_17519[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17487 === 2) {
                              var state_17486__$1 = state_17486;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17486__$1, 4, ch);
                            } else {
                              if (state_val_17487 === 11) {
                                var inst_17463 = state_17486[7];
                                var inst_17473 = state_17486[2];
                                var state_17486__$1 = state_17486;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17486__$1, 8, inst_17473, inst_17463);
                              } else {
                                if (state_val_17487 === 9) {
                                  var state_17486__$1 = state_17486;
                                  var statearr_17497_17520 = state_17486__$1;
                                  statearr_17497_17520[2] = tc;
                                  statearr_17497_17520[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17487 === 5) {
                                    var inst_17466 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_17467 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_17486__$1 = function() {
                                      var statearr_17498 = state_17486;
                                      statearr_17498[8] = inst_17466;
                                      return statearr_17498;
                                    }();
                                    var statearr_17499_17521 = state_17486__$1;
                                    statearr_17499_17521[2] = inst_17467;
                                    statearr_17499_17521[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17487 === 14) {
                                      var inst_17480 = state_17486[2];
                                      var state_17486__$1 = state_17486;
                                      var statearr_17500_17522 = state_17486__$1;
                                      statearr_17500_17522[2] = inst_17480;
                                      statearr_17500_17522[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17487 === 10) {
                                        var state_17486__$1 = state_17486;
                                        var statearr_17501_17523 = state_17486__$1;
                                        statearr_17501_17523[2] = fc;
                                        statearr_17501_17523[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17487 === 8) {
                                          var inst_17475 = state_17486[2];
                                          var state_17486__$1 = state_17486;
                                          if (cljs.core.truth_(inst_17475)) {
                                            var statearr_17502_17524 = state_17486__$1;
                                            statearr_17502_17524[1] = 12;
                                          } else {
                                            var statearr_17503_17525 = state_17486__$1;
                                            statearr_17503_17525[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___17511, tc, fc);
          return function(switch__12060__auto__, c__12125__auto___17511, tc, fc) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_17507 = [null, null, null, null, null, null, null, null, null];
                statearr_17507[0] = state_machine__12061__auto__;
                statearr_17507[1] = 1;
                return statearr_17507;
              };
              var state_machine__12061__auto____1 = function(state_17486) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_17486);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e17508) {
                      if (e17508 instanceof Object) {
                        var ex__12064__auto__ = e17508;
                        var statearr_17509_17526 = state_17486;
                        statearr_17509_17526[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17486);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17508;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17527 = state_17486;
                    state_17486 = G__17527;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_17486) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_17486);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___17511, tc, fc);
        }();
        var state__12127__auto__ = function() {
          var statearr_17510 = f__12126__auto__.call(null);
          statearr_17510[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___17511;
          return statearr_17510;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___17511, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__12125__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto__) {
    return function() {
      var f__12126__auto__ = function() {
        var switch__12060__auto__ = function(c__12125__auto__) {
          return function(state_17574) {
            var state_val_17575 = state_17574[1];
            if (state_val_17575 === 7) {
              var inst_17570 = state_17574[2];
              var state_17574__$1 = state_17574;
              var statearr_17576_17592 = state_17574__$1;
              statearr_17576_17592[2] = inst_17570;
              statearr_17576_17592[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17575 === 6) {
                var inst_17563 = state_17574[7];
                var inst_17560 = state_17574[8];
                var inst_17567 = f.call(null, inst_17560, inst_17563);
                var inst_17560__$1 = inst_17567;
                var state_17574__$1 = function() {
                  var statearr_17577 = state_17574;
                  statearr_17577[8] = inst_17560__$1;
                  return statearr_17577;
                }();
                var statearr_17578_17593 = state_17574__$1;
                statearr_17578_17593[2] = null;
                statearr_17578_17593[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17575 === 5) {
                  var inst_17560 = state_17574[8];
                  var state_17574__$1 = state_17574;
                  var statearr_17579_17594 = state_17574__$1;
                  statearr_17579_17594[2] = inst_17560;
                  statearr_17579_17594[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17575 === 4) {
                    var inst_17563 = state_17574[7];
                    var inst_17563__$1 = state_17574[2];
                    var inst_17564 = inst_17563__$1 == null;
                    var state_17574__$1 = function() {
                      var statearr_17580 = state_17574;
                      statearr_17580[7] = inst_17563__$1;
                      return statearr_17580;
                    }();
                    if (cljs.core.truth_(inst_17564)) {
                      var statearr_17581_17595 = state_17574__$1;
                      statearr_17581_17595[1] = 5;
                    } else {
                      var statearr_17582_17596 = state_17574__$1;
                      statearr_17582_17596[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17575 === 3) {
                      var inst_17572 = state_17574[2];
                      var state_17574__$1 = state_17574;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17574__$1, inst_17572);
                    } else {
                      if (state_val_17575 === 2) {
                        var state_17574__$1 = state_17574;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17574__$1, 4, ch);
                      } else {
                        if (state_val_17575 === 1) {
                          var inst_17560 = init;
                          var state_17574__$1 = function() {
                            var statearr_17583 = state_17574;
                            statearr_17583[8] = inst_17560;
                            return statearr_17583;
                          }();
                          var statearr_17584_17597 = state_17574__$1;
                          statearr_17584_17597[2] = null;
                          statearr_17584_17597[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12125__auto__);
        return function(switch__12060__auto__, c__12125__auto__) {
          return function() {
            var state_machine__12061__auto__ = null;
            var state_machine__12061__auto____0 = function() {
              var statearr_17588 = [null, null, null, null, null, null, null, null, null];
              statearr_17588[0] = state_machine__12061__auto__;
              statearr_17588[1] = 1;
              return statearr_17588;
            };
            var state_machine__12061__auto____1 = function(state_17574) {
              while (true) {
                var ret_value__12062__auto__ = function() {
                  try {
                    while (true) {
                      var result__12063__auto__ = switch__12060__auto__.call(null, state_17574);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12063__auto__;
                      }
                      break;
                    }
                  } catch (e17589) {
                    if (e17589 instanceof Object) {
                      var ex__12064__auto__ = e17589;
                      var statearr_17590_17598 = state_17574;
                      statearr_17590_17598[5] = ex__12064__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17574);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e17589;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17599 = state_17574;
                  state_17574 = G__17599;
                  continue;
                } else {
                  return ret_value__12062__auto__;
                }
                break;
              }
            };
            state_machine__12061__auto__ = function(state_17574) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12061__auto____0.call(this);
                case 1:
                  return state_machine__12061__auto____1.call(this, state_17574);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
            return state_machine__12061__auto__;
          }();
        }(switch__12060__auto__, c__12125__auto__);
      }();
      var state__12127__auto__ = function() {
        var statearr_17591 = f__12126__auto__.call(null);
        statearr_17591[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto__;
        return statearr_17591;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
    };
  }(c__12125__auto__));
  return c__12125__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__12125__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto__) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto__) {
            return function(state_17673) {
              var state_val_17674 = state_17673[1];
              if (state_val_17674 === 7) {
                var inst_17655 = state_17673[2];
                var state_17673__$1 = state_17673;
                var statearr_17675_17698 = state_17673__$1;
                statearr_17675_17698[2] = inst_17655;
                statearr_17675_17698[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17674 === 1) {
                  var inst_17649 = cljs.core.seq.call(null, coll);
                  var inst_17650 = inst_17649;
                  var state_17673__$1 = function() {
                    var statearr_17676 = state_17673;
                    statearr_17676[7] = inst_17650;
                    return statearr_17676;
                  }();
                  var statearr_17677_17699 = state_17673__$1;
                  statearr_17677_17699[2] = null;
                  statearr_17677_17699[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17674 === 4) {
                    var inst_17650 = state_17673[7];
                    var inst_17653 = cljs.core.first.call(null, inst_17650);
                    var state_17673__$1 = state_17673;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17673__$1, 7, ch, inst_17653);
                  } else {
                    if (state_val_17674 === 13) {
                      var inst_17667 = state_17673[2];
                      var state_17673__$1 = state_17673;
                      var statearr_17678_17700 = state_17673__$1;
                      statearr_17678_17700[2] = inst_17667;
                      statearr_17678_17700[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17674 === 6) {
                        var inst_17658 = state_17673[2];
                        var state_17673__$1 = state_17673;
                        if (cljs.core.truth_(inst_17658)) {
                          var statearr_17679_17701 = state_17673__$1;
                          statearr_17679_17701[1] = 8;
                        } else {
                          var statearr_17680_17702 = state_17673__$1;
                          statearr_17680_17702[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17674 === 3) {
                          var inst_17671 = state_17673[2];
                          var state_17673__$1 = state_17673;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17673__$1, inst_17671);
                        } else {
                          if (state_val_17674 === 12) {
                            var state_17673__$1 = state_17673;
                            var statearr_17681_17703 = state_17673__$1;
                            statearr_17681_17703[2] = null;
                            statearr_17681_17703[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17674 === 2) {
                              var inst_17650 = state_17673[7];
                              var state_17673__$1 = state_17673;
                              if (cljs.core.truth_(inst_17650)) {
                                var statearr_17682_17704 = state_17673__$1;
                                statearr_17682_17704[1] = 4;
                              } else {
                                var statearr_17683_17705 = state_17673__$1;
                                statearr_17683_17705[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17674 === 11) {
                                var inst_17664 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_17673__$1 = state_17673;
                                var statearr_17684_17706 = state_17673__$1;
                                statearr_17684_17706[2] = inst_17664;
                                statearr_17684_17706[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17674 === 9) {
                                  var state_17673__$1 = state_17673;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_17685_17707 = state_17673__$1;
                                    statearr_17685_17707[1] = 11;
                                  } else {
                                    var statearr_17686_17708 = state_17673__$1;
                                    statearr_17686_17708[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17674 === 5) {
                                    var inst_17650 = state_17673[7];
                                    var state_17673__$1 = state_17673;
                                    var statearr_17687_17709 = state_17673__$1;
                                    statearr_17687_17709[2] = inst_17650;
                                    statearr_17687_17709[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17674 === 10) {
                                      var inst_17669 = state_17673[2];
                                      var state_17673__$1 = state_17673;
                                      var statearr_17688_17710 = state_17673__$1;
                                      statearr_17688_17710[2] = inst_17669;
                                      statearr_17688_17710[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17674 === 8) {
                                        var inst_17650 = state_17673[7];
                                        var inst_17660 = cljs.core.next.call(null, inst_17650);
                                        var inst_17650__$1 = inst_17660;
                                        var state_17673__$1 = function() {
                                          var statearr_17689 = state_17673;
                                          statearr_17689[7] = inst_17650__$1;
                                          return statearr_17689;
                                        }();
                                        var statearr_17690_17711 = state_17673__$1;
                                        statearr_17690_17711[2] = null;
                                        statearr_17690_17711[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto__);
          return function(switch__12060__auto__, c__12125__auto__) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_17694 = [null, null, null, null, null, null, null, null];
                statearr_17694[0] = state_machine__12061__auto__;
                statearr_17694[1] = 1;
                return statearr_17694;
              };
              var state_machine__12061__auto____1 = function(state_17673) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_17673);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e17695) {
                      if (e17695 instanceof Object) {
                        var ex__12064__auto__ = e17695;
                        var statearr_17696_17712 = state_17673;
                        statearr_17696_17712[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17673);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17695;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17713 = state_17673;
                    state_17673 = G__17713;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_17673) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_17673);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto__);
        }();
        var state__12127__auto__ = function() {
          var statearr_17697 = f__12126__auto__.call(null);
          statearr_17697[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto__;
          return statearr_17697;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto__));
    return c__12125__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj17715 = {};
  return obj17715;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3040__auto__ = _;
    if (and__3040__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__3679__auto__ = _ == null ? null : _;
    return function() {
      var or__3052__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj17717 = {};
  return obj17717;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3040__auto__ = m;
    if (and__3040__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__3679__auto__ = m == null ? null : m;
    return function() {
      var or__3052__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3040__auto__ = m;
    if (and__3040__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__3679__auto__ = m == null ? null : m;
    return function() {
      var or__3052__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3040__auto__ = m;
    if (and__3040__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__3679__auto__ = m == null ? null : m;
    return function() {
      var or__3052__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t17939 !== "undefined") {
    } else {
      cljs.core.async.t17939 = function(cs, ch, mult, meta17940) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta17940 = meta17940;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t17939.cljs$lang$type = true;
      cljs.core.async.t17939.cljs$lang$ctorStr = "cljs.core.async/t17939";
      cljs.core.async.t17939.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
          return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t17939");
        };
      }(cs);
      cljs.core.async.t17939.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t17939.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t17939.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t17939.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t17939.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t17939.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t17939.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_17941) {
          var self__ = this;
          var _17941__$1 = this;
          return self__.meta17940;
        };
      }(cs);
      cljs.core.async.t17939.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_17941, meta17940__$1) {
          var self__ = this;
          var _17941__$1 = this;
          return new cljs.core.async.t17939(self__.cs, self__.ch, self__.mult, meta17940__$1);
        };
      }(cs);
      cljs.core.async.__GT_t17939 = function(cs) {
        return function __GT_t17939(cs__$1, ch__$1, mult__$1, meta17940) {
          return new cljs.core.async.t17939(cs__$1, ch__$1, mult__$1, meta17940);
        };
      }(cs);
    }
    return new cljs.core.async.t17939(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__12125__auto___18160 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___18160, cs, m, dchan, dctr, done) {
    return function() {
      var f__12126__auto__ = function() {
        var switch__12060__auto__ = function(c__12125__auto___18160, cs, m, dchan, dctr, done) {
          return function(state_18072) {
            var state_val_18073 = state_18072[1];
            if (state_val_18073 === 7) {
              var inst_18068 = state_18072[2];
              var state_18072__$1 = state_18072;
              var statearr_18074_18161 = state_18072__$1;
              statearr_18074_18161[2] = inst_18068;
              statearr_18074_18161[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18073 === 20) {
                var inst_17973 = state_18072[7];
                var inst_17983 = cljs.core.first.call(null, inst_17973);
                var inst_17984 = cljs.core.nth.call(null, inst_17983, 0, null);
                var inst_17985 = cljs.core.nth.call(null, inst_17983, 1, null);
                var state_18072__$1 = function() {
                  var statearr_18075 = state_18072;
                  statearr_18075[8] = inst_17984;
                  return statearr_18075;
                }();
                if (cljs.core.truth_(inst_17985)) {
                  var statearr_18076_18162 = state_18072__$1;
                  statearr_18076_18162[1] = 22;
                } else {
                  var statearr_18077_18163 = state_18072__$1;
                  statearr_18077_18163[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18073 === 27) {
                  var inst_18013 = state_18072[9];
                  var inst_18015 = state_18072[10];
                  var inst_18020 = state_18072[11];
                  var inst_17944 = state_18072[12];
                  var inst_18020__$1 = cljs.core._nth.call(null, inst_18013, inst_18015);
                  var inst_18021 = cljs.core.async.put_BANG_.call(null, inst_18020__$1, inst_17944, done);
                  var state_18072__$1 = function() {
                    var statearr_18078 = state_18072;
                    statearr_18078[11] = inst_18020__$1;
                    return statearr_18078;
                  }();
                  if (cljs.core.truth_(inst_18021)) {
                    var statearr_18079_18164 = state_18072__$1;
                    statearr_18079_18164[1] = 30;
                  } else {
                    var statearr_18080_18165 = state_18072__$1;
                    statearr_18080_18165[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18073 === 1) {
                    var state_18072__$1 = state_18072;
                    var statearr_18081_18166 = state_18072__$1;
                    statearr_18081_18166[2] = null;
                    statearr_18081_18166[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18073 === 24) {
                      var inst_17973 = state_18072[7];
                      var inst_17990 = state_18072[2];
                      var inst_17991 = cljs.core.next.call(null, inst_17973);
                      var inst_17953 = inst_17991;
                      var inst_17954 = null;
                      var inst_17955 = 0;
                      var inst_17956 = 0;
                      var state_18072__$1 = function() {
                        var statearr_18082 = state_18072;
                        statearr_18082[13] = inst_17954;
                        statearr_18082[14] = inst_17990;
                        statearr_18082[15] = inst_17953;
                        statearr_18082[16] = inst_17955;
                        statearr_18082[17] = inst_17956;
                        return statearr_18082;
                      }();
                      var statearr_18083_18167 = state_18072__$1;
                      statearr_18083_18167[2] = null;
                      statearr_18083_18167[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18073 === 39) {
                        var state_18072__$1 = state_18072;
                        var statearr_18087_18168 = state_18072__$1;
                        statearr_18087_18168[2] = null;
                        statearr_18087_18168[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18073 === 4) {
                          var inst_17944 = state_18072[12];
                          var inst_17944__$1 = state_18072[2];
                          var inst_17945 = inst_17944__$1 == null;
                          var state_18072__$1 = function() {
                            var statearr_18088 = state_18072;
                            statearr_18088[12] = inst_17944__$1;
                            return statearr_18088;
                          }();
                          if (cljs.core.truth_(inst_17945)) {
                            var statearr_18089_18169 = state_18072__$1;
                            statearr_18089_18169[1] = 5;
                          } else {
                            var statearr_18090_18170 = state_18072__$1;
                            statearr_18090_18170[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18073 === 15) {
                            var inst_17954 = state_18072[13];
                            var inst_17953 = state_18072[15];
                            var inst_17955 = state_18072[16];
                            var inst_17956 = state_18072[17];
                            var inst_17969 = state_18072[2];
                            var inst_17970 = inst_17956 + 1;
                            var tmp18084 = inst_17954;
                            var tmp18085 = inst_17953;
                            var tmp18086 = inst_17955;
                            var inst_17953__$1 = tmp18085;
                            var inst_17954__$1 = tmp18084;
                            var inst_17955__$1 = tmp18086;
                            var inst_17956__$1 = inst_17970;
                            var state_18072__$1 = function() {
                              var statearr_18091 = state_18072;
                              statearr_18091[13] = inst_17954__$1;
                              statearr_18091[18] = inst_17969;
                              statearr_18091[15] = inst_17953__$1;
                              statearr_18091[16] = inst_17955__$1;
                              statearr_18091[17] = inst_17956__$1;
                              return statearr_18091;
                            }();
                            var statearr_18092_18171 = state_18072__$1;
                            statearr_18092_18171[2] = null;
                            statearr_18092_18171[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18073 === 21) {
                              var inst_17994 = state_18072[2];
                              var state_18072__$1 = state_18072;
                              var statearr_18096_18172 = state_18072__$1;
                              statearr_18096_18172[2] = inst_17994;
                              statearr_18096_18172[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18073 === 31) {
                                var inst_18020 = state_18072[11];
                                var inst_18024 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_18025 = cljs.core.async.untap_STAR_.call(null, m, inst_18020);
                                var state_18072__$1 = function() {
                                  var statearr_18097 = state_18072;
                                  statearr_18097[19] = inst_18024;
                                  return statearr_18097;
                                }();
                                var statearr_18098_18173 = state_18072__$1;
                                statearr_18098_18173[2] = inst_18025;
                                statearr_18098_18173[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18073 === 32) {
                                  var inst_18012 = state_18072[20];
                                  var inst_18013 = state_18072[9];
                                  var inst_18015 = state_18072[10];
                                  var inst_18014 = state_18072[21];
                                  var inst_18027 = state_18072[2];
                                  var inst_18028 = inst_18015 + 1;
                                  var tmp18093 = inst_18012;
                                  var tmp18094 = inst_18013;
                                  var tmp18095 = inst_18014;
                                  var inst_18012__$1 = tmp18093;
                                  var inst_18013__$1 = tmp18094;
                                  var inst_18014__$1 = tmp18095;
                                  var inst_18015__$1 = inst_18028;
                                  var state_18072__$1 = function() {
                                    var statearr_18099 = state_18072;
                                    statearr_18099[20] = inst_18012__$1;
                                    statearr_18099[9] = inst_18013__$1;
                                    statearr_18099[10] = inst_18015__$1;
                                    statearr_18099[21] = inst_18014__$1;
                                    statearr_18099[22] = inst_18027;
                                    return statearr_18099;
                                  }();
                                  var statearr_18100_18174 = state_18072__$1;
                                  statearr_18100_18174[2] = null;
                                  statearr_18100_18174[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18073 === 40) {
                                    var inst_18040 = state_18072[23];
                                    var inst_18044 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_18045 = cljs.core.async.untap_STAR_.call(null, m, inst_18040);
                                    var state_18072__$1 = function() {
                                      var statearr_18101 = state_18072;
                                      statearr_18101[24] = inst_18044;
                                      return statearr_18101;
                                    }();
                                    var statearr_18102_18175 = state_18072__$1;
                                    statearr_18102_18175[2] = inst_18045;
                                    statearr_18102_18175[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18073 === 33) {
                                      var inst_18031 = state_18072[25];
                                      var inst_18033 = cljs.core.chunked_seq_QMARK_.call(null, inst_18031);
                                      var state_18072__$1 = state_18072;
                                      if (inst_18033) {
                                        var statearr_18103_18176 = state_18072__$1;
                                        statearr_18103_18176[1] = 36;
                                      } else {
                                        var statearr_18104_18177 = state_18072__$1;
                                        statearr_18104_18177[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18073 === 13) {
                                        var inst_17963 = state_18072[26];
                                        var inst_17966 = cljs.core.async.close_BANG_.call(null, inst_17963);
                                        var state_18072__$1 = state_18072;
                                        var statearr_18105_18178 = state_18072__$1;
                                        statearr_18105_18178[2] = inst_17966;
                                        statearr_18105_18178[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18073 === 22) {
                                          var inst_17984 = state_18072[8];
                                          var inst_17987 = cljs.core.async.close_BANG_.call(null, inst_17984);
                                          var state_18072__$1 = state_18072;
                                          var statearr_18106_18179 = state_18072__$1;
                                          statearr_18106_18179[2] = inst_17987;
                                          statearr_18106_18179[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18073 === 36) {
                                            var inst_18031 = state_18072[25];
                                            var inst_18035 = cljs.core.chunk_first.call(null, inst_18031);
                                            var inst_18036 = cljs.core.chunk_rest.call(null, inst_18031);
                                            var inst_18037 = cljs.core.count.call(null, inst_18035);
                                            var inst_18012 = inst_18036;
                                            var inst_18013 = inst_18035;
                                            var inst_18014 = inst_18037;
                                            var inst_18015 = 0;
                                            var state_18072__$1 = function() {
                                              var statearr_18107 = state_18072;
                                              statearr_18107[20] = inst_18012;
                                              statearr_18107[9] = inst_18013;
                                              statearr_18107[10] = inst_18015;
                                              statearr_18107[21] = inst_18014;
                                              return statearr_18107;
                                            }();
                                            var statearr_18108_18180 = state_18072__$1;
                                            statearr_18108_18180[2] = null;
                                            statearr_18108_18180[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18073 === 41) {
                                              var inst_18031 = state_18072[25];
                                              var inst_18047 = state_18072[2];
                                              var inst_18048 = cljs.core.next.call(null, inst_18031);
                                              var inst_18012 = inst_18048;
                                              var inst_18013 = null;
                                              var inst_18014 = 0;
                                              var inst_18015 = 0;
                                              var state_18072__$1 = function() {
                                                var statearr_18109 = state_18072;
                                                statearr_18109[27] = inst_18047;
                                                statearr_18109[20] = inst_18012;
                                                statearr_18109[9] = inst_18013;
                                                statearr_18109[10] = inst_18015;
                                                statearr_18109[21] = inst_18014;
                                                return statearr_18109;
                                              }();
                                              var statearr_18110_18181 = state_18072__$1;
                                              statearr_18110_18181[2] = null;
                                              statearr_18110_18181[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18073 === 43) {
                                                var state_18072__$1 = state_18072;
                                                var statearr_18111_18182 = state_18072__$1;
                                                statearr_18111_18182[2] = null;
                                                statearr_18111_18182[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18073 === 29) {
                                                  var inst_18056 = state_18072[2];
                                                  var state_18072__$1 = state_18072;
                                                  var statearr_18112_18183 = state_18072__$1;
                                                  statearr_18112_18183[2] = inst_18056;
                                                  statearr_18112_18183[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18073 === 44) {
                                                    var inst_18065 = state_18072[2];
                                                    var state_18072__$1 = function() {
                                                      var statearr_18113 = state_18072;
                                                      statearr_18113[28] = inst_18065;
                                                      return statearr_18113;
                                                    }();
                                                    var statearr_18114_18184 = state_18072__$1;
                                                    statearr_18114_18184[2] = null;
                                                    statearr_18114_18184[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18073 === 6) {
                                                      var inst_18004 = state_18072[29];
                                                      var inst_18003 = cljs.core.deref.call(null, cs);
                                                      var inst_18004__$1 = cljs.core.keys.call(null, inst_18003);
                                                      var inst_18005 = cljs.core.count.call(null, inst_18004__$1);
                                                      var inst_18006 = cljs.core.reset_BANG_.call(null, dctr, inst_18005);
                                                      var inst_18011 = cljs.core.seq.call(null, inst_18004__$1);
                                                      var inst_18012 = inst_18011;
                                                      var inst_18013 = null;
                                                      var inst_18014 = 0;
                                                      var inst_18015 = 0;
                                                      var state_18072__$1 = function() {
                                                        var statearr_18115 = state_18072;
                                                        statearr_18115[20] = inst_18012;
                                                        statearr_18115[9] = inst_18013;
                                                        statearr_18115[10] = inst_18015;
                                                        statearr_18115[21] = inst_18014;
                                                        statearr_18115[29] = inst_18004__$1;
                                                        statearr_18115[30] = inst_18006;
                                                        return statearr_18115;
                                                      }();
                                                      var statearr_18116_18185 = state_18072__$1;
                                                      statearr_18116_18185[2] = null;
                                                      statearr_18116_18185[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18073 === 28) {
                                                        var inst_18031 = state_18072[25];
                                                        var inst_18012 = state_18072[20];
                                                        var inst_18031__$1 = cljs.core.seq.call(null, inst_18012);
                                                        var state_18072__$1 = function() {
                                                          var statearr_18117 = state_18072;
                                                          statearr_18117[25] = inst_18031__$1;
                                                          return statearr_18117;
                                                        }();
                                                        if (inst_18031__$1) {
                                                          var statearr_18118_18186 = state_18072__$1;
                                                          statearr_18118_18186[1] = 33;
                                                        } else {
                                                          var statearr_18119_18187 = state_18072__$1;
                                                          statearr_18119_18187[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18073 === 25) {
                                                          var inst_18015 = state_18072[10];
                                                          var inst_18014 = state_18072[21];
                                                          var inst_18017 = inst_18015 < inst_18014;
                                                          var inst_18018 = inst_18017;
                                                          var state_18072__$1 = state_18072;
                                                          if (cljs.core.truth_(inst_18018)) {
                                                            var statearr_18120_18188 = state_18072__$1;
                                                            statearr_18120_18188[1] = 27;
                                                          } else {
                                                            var statearr_18121_18189 = state_18072__$1;
                                                            statearr_18121_18189[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18073 === 34) {
                                                            var state_18072__$1 = state_18072;
                                                            var statearr_18122_18190 = state_18072__$1;
                                                            statearr_18122_18190[2] = null;
                                                            statearr_18122_18190[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18073 === 17) {
                                                              var state_18072__$1 = state_18072;
                                                              var statearr_18123_18191 = state_18072__$1;
                                                              statearr_18123_18191[2] = null;
                                                              statearr_18123_18191[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18073 === 3) {
                                                                var inst_18070 = state_18072[2];
                                                                var state_18072__$1 = state_18072;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18072__$1, inst_18070);
                                                              } else {
                                                                if (state_val_18073 === 12) {
                                                                  var inst_17999 = state_18072[2];
                                                                  var state_18072__$1 = state_18072;
                                                                  var statearr_18124_18192 = state_18072__$1;
                                                                  statearr_18124_18192[2] = inst_17999;
                                                                  statearr_18124_18192[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_18073 === 2) {
                                                                    var state_18072__$1 = state_18072;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18072__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_18073 === 23) {
                                                                      var state_18072__$1 = state_18072;
                                                                      var statearr_18125_18193 = state_18072__$1;
                                                                      statearr_18125_18193[2] = null;
                                                                      statearr_18125_18193[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_18073 === 35) {
                                                                        var inst_18054 = state_18072[2];
                                                                        var state_18072__$1 = state_18072;
                                                                        var statearr_18126_18194 = state_18072__$1;
                                                                        statearr_18126_18194[2] = inst_18054;
                                                                        statearr_18126_18194[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_18073 === 19) {
                                                                          var inst_17973 = state_18072[7];
                                                                          var inst_17977 = cljs.core.chunk_first.call(null, inst_17973);
                                                                          var inst_17978 = cljs.core.chunk_rest.call(null, inst_17973);
                                                                          var inst_17979 = cljs.core.count.call(null, inst_17977);
                                                                          var inst_17953 = inst_17978;
                                                                          var inst_17954 = inst_17977;
                                                                          var inst_17955 = inst_17979;
                                                                          var inst_17956 = 0;
                                                                          var state_18072__$1 = function() {
                                                                            var statearr_18127 = state_18072;
                                                                            statearr_18127[13] = inst_17954;
                                                                            statearr_18127[15] = inst_17953;
                                                                            statearr_18127[16] = inst_17955;
                                                                            statearr_18127[17] = inst_17956;
                                                                            return statearr_18127;
                                                                          }();
                                                                          var statearr_18128_18195 = state_18072__$1;
                                                                          statearr_18128_18195[2] = null;
                                                                          statearr_18128_18195[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_18073 === 11) {
                                                                            var inst_17973 = state_18072[7];
                                                                            var inst_17953 = state_18072[15];
                                                                            var inst_17973__$1 = cljs.core.seq.call(null, inst_17953);
                                                                            var state_18072__$1 = function() {
                                                                              var statearr_18129 = state_18072;
                                                                              statearr_18129[7] = inst_17973__$1;
                                                                              return statearr_18129;
                                                                            }();
                                                                            if (inst_17973__$1) {
                                                                              var statearr_18130_18196 = state_18072__$1;
                                                                              statearr_18130_18196[1] = 16;
                                                                            } else {
                                                                              var statearr_18131_18197 = state_18072__$1;
                                                                              statearr_18131_18197[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_18073 === 9) {
                                                                              var inst_18001 = state_18072[2];
                                                                              var state_18072__$1 = state_18072;
                                                                              var statearr_18132_18198 = state_18072__$1;
                                                                              statearr_18132_18198[2] = inst_18001;
                                                                              statearr_18132_18198[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_18073 === 5) {
                                                                                var inst_17951 = cljs.core.deref.call(null, cs);
                                                                                var inst_17952 = cljs.core.seq.call(null, inst_17951);
                                                                                var inst_17953 = inst_17952;
                                                                                var inst_17954 = null;
                                                                                var inst_17955 = 0;
                                                                                var inst_17956 = 0;
                                                                                var state_18072__$1 = function() {
                                                                                  var statearr_18133 = state_18072;
                                                                                  statearr_18133[13] = inst_17954;
                                                                                  statearr_18133[15] = inst_17953;
                                                                                  statearr_18133[16] = inst_17955;
                                                                                  statearr_18133[17] = inst_17956;
                                                                                  return statearr_18133;
                                                                                }();
                                                                                var statearr_18134_18199 = state_18072__$1;
                                                                                statearr_18134_18199[2] = null;
                                                                                statearr_18134_18199[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_18073 === 14) {
                                                                                  var state_18072__$1 = state_18072;
                                                                                  var statearr_18135_18200 = state_18072__$1;
                                                                                  statearr_18135_18200[2] = null;
                                                                                  statearr_18135_18200[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_18073 === 45) {
                                                                                    var inst_18062 = state_18072[2];
                                                                                    var state_18072__$1 = state_18072;
                                                                                    var statearr_18136_18201 = state_18072__$1;
                                                                                    statearr_18136_18201[2] = inst_18062;
                                                                                    statearr_18136_18201[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_18073 === 26) {
                                                                                      var inst_18004 = state_18072[29];
                                                                                      var inst_18058 = state_18072[2];
                                                                                      var inst_18059 = cljs.core.seq.call(null, inst_18004);
                                                                                      var state_18072__$1 = function() {
                                                                                        var statearr_18137 = state_18072;
                                                                                        statearr_18137[31] = inst_18058;
                                                                                        return statearr_18137;
                                                                                      }();
                                                                                      if (inst_18059) {
                                                                                        var statearr_18138_18202 = state_18072__$1;
                                                                                        statearr_18138_18202[1] = 42;
                                                                                      } else {
                                                                                        var statearr_18139_18203 = state_18072__$1;
                                                                                        statearr_18139_18203[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_18073 === 16) {
                                                                                        var inst_17973 = state_18072[7];
                                                                                        var inst_17975 = cljs.core.chunked_seq_QMARK_.call(null, inst_17973);
                                                                                        var state_18072__$1 = state_18072;
                                                                                        if (inst_17975) {
                                                                                          var statearr_18140_18204 = state_18072__$1;
                                                                                          statearr_18140_18204[1] = 19;
                                                                                        } else {
                                                                                          var statearr_18141_18205 = state_18072__$1;
                                                                                          statearr_18141_18205[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_18073 === 38) {
                                                                                          var inst_18051 = state_18072[2];
                                                                                          var state_18072__$1 = state_18072;
                                                                                          var statearr_18142_18206 = state_18072__$1;
                                                                                          statearr_18142_18206[2] = inst_18051;
                                                                                          statearr_18142_18206[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_18073 === 30) {
                                                                                            var state_18072__$1 = state_18072;
                                                                                            var statearr_18143_18207 = state_18072__$1;
                                                                                            statearr_18143_18207[2] = null;
                                                                                            statearr_18143_18207[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_18073 === 10) {
                                                                                              var inst_17954 = state_18072[13];
                                                                                              var inst_17956 = state_18072[17];
                                                                                              var inst_17962 = cljs.core._nth.call(null, inst_17954, inst_17956);
                                                                                              var inst_17963 = cljs.core.nth.call(null, inst_17962, 0, null);
                                                                                              var inst_17964 = cljs.core.nth.call(null, inst_17962, 1, null);
                                                                                              var state_18072__$1 = function() {
                                                                                                var statearr_18144 = state_18072;
                                                                                                statearr_18144[26] = inst_17963;
                                                                                                return statearr_18144;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_17964)) {
                                                                                                var statearr_18145_18208 = state_18072__$1;
                                                                                                statearr_18145_18208[1] = 13;
                                                                                              } else {
                                                                                                var statearr_18146_18209 = state_18072__$1;
                                                                                                statearr_18146_18209[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_18073 === 18) {
                                                                                                var inst_17997 = state_18072[2];
                                                                                                var state_18072__$1 = state_18072;
                                                                                                var statearr_18147_18210 = state_18072__$1;
                                                                                                statearr_18147_18210[2] = inst_17997;
                                                                                                statearr_18147_18210[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_18073 === 42) {
                                                                                                  var state_18072__$1 = state_18072;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18072__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_18073 === 37) {
                                                                                                    var inst_18031 = state_18072[25];
                                                                                                    var inst_18040 = state_18072[23];
                                                                                                    var inst_17944 = state_18072[12];
                                                                                                    var inst_18040__$1 = cljs.core.first.call(null, inst_18031);
                                                                                                    var inst_18041 = cljs.core.async.put_BANG_.call(null, inst_18040__$1, inst_17944, done);
                                                                                                    var state_18072__$1 = function() {
                                                                                                      var statearr_18148 = state_18072;
                                                                                                      statearr_18148[23] = inst_18040__$1;
                                                                                                      return statearr_18148;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_18041)) {
                                                                                                      var statearr_18149_18211 = state_18072__$1;
                                                                                                      statearr_18149_18211[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_18150_18212 = state_18072__$1;
                                                                                                      statearr_18150_18212[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_18073 === 8) {
                                                                                                      var inst_17955 = state_18072[16];
                                                                                                      var inst_17956 = state_18072[17];
                                                                                                      var inst_17958 = inst_17956 < inst_17955;
                                                                                                      var inst_17959 = inst_17958;
                                                                                                      var state_18072__$1 = state_18072;
                                                                                                      if (cljs.core.truth_(inst_17959)) {
                                                                                                        var statearr_18151_18213 = state_18072__$1;
                                                                                                        statearr_18151_18213[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_18152_18214 = state_18072__$1;
                                                                                                        statearr_18152_18214[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12125__auto___18160, cs, m, dchan, dctr, done);
        return function(switch__12060__auto__, c__12125__auto___18160, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__12061__auto__ = null;
            var state_machine__12061__auto____0 = function() {
              var statearr_18156 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18156[0] = state_machine__12061__auto__;
              statearr_18156[1] = 1;
              return statearr_18156;
            };
            var state_machine__12061__auto____1 = function(state_18072) {
              while (true) {
                var ret_value__12062__auto__ = function() {
                  try {
                    while (true) {
                      var result__12063__auto__ = switch__12060__auto__.call(null, state_18072);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12063__auto__;
                      }
                      break;
                    }
                  } catch (e18157) {
                    if (e18157 instanceof Object) {
                      var ex__12064__auto__ = e18157;
                      var statearr_18158_18215 = state_18072;
                      statearr_18158_18215[5] = ex__12064__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18072);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e18157;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18216 = state_18072;
                  state_18072 = G__18216;
                  continue;
                } else {
                  return ret_value__12062__auto__;
                }
                break;
              }
            };
            state_machine__12061__auto__ = function(state_18072) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12061__auto____0.call(this);
                case 1:
                  return state_machine__12061__auto____1.call(this, state_18072);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
            return state_machine__12061__auto__;
          }();
        }(switch__12060__auto__, c__12125__auto___18160, cs, m, dchan, dctr, done);
      }();
      var state__12127__auto__ = function() {
        var statearr_18159 = f__12126__auto__.call(null);
        statearr_18159[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___18160;
        return statearr_18159;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
    };
  }(c__12125__auto___18160, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj18218 = {};
  return obj18218;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3040__auto__ = m;
    if (and__3040__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__3679__auto__ = m == null ? null : m;
    return function() {
      var or__3052__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3040__auto__ = m;
    if (and__3040__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__3679__auto__ = m == null ? null : m;
    return function() {
      var or__3052__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3040__auto__ = m;
    if (and__3040__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__3679__auto__ = m == null ? null : m;
    return function() {
      var or__3052__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3040__auto__ = m;
    if (and__3040__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__3679__auto__ = m == null ? null : m;
    return function() {
      var or__3052__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3040__auto__ = m;
    if (and__3040__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__3679__auto__ = m == null ? null : m;
    return function() {
      var or__3052__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t18338 !== "undefined") {
    } else {
      cljs.core.async.t18338 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta18339) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta18339 = meta18339;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t18338.cljs$lang$type = true;
      cljs.core.async.t18338.cljs$lang$ctorStr = "cljs.core.async/t18338";
      cljs.core.async.t18338.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
          return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t18338");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18338.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t18338.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18338.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18338.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18338.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18338.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18338.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t18338.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18338.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18340) {
          var self__ = this;
          var _18340__$1 = this;
          return self__.meta18339;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18338.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18340, meta18339__$1) {
          var self__ = this;
          var _18340__$1 = this;
          return new cljs.core.async.t18338(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta18339__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t18338 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t18338(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18339) {
          return new cljs.core.async.t18338(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18339);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t18338(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__12125__auto___18457 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___18457, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__12126__auto__ = function() {
        var switch__12060__auto__ = function(c__12125__auto___18457, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_18410) {
            var state_val_18411 = state_18410[1];
            if (state_val_18411 === 7) {
              var inst_18354 = state_18410[7];
              var inst_18359 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18354);
              var state_18410__$1 = state_18410;
              var statearr_18412_18458 = state_18410__$1;
              statearr_18412_18458[2] = inst_18359;
              statearr_18412_18458[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18411 === 20) {
                var inst_18369 = state_18410[8];
                var state_18410__$1 = state_18410;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18410__$1, 23, out, inst_18369);
              } else {
                if (state_val_18411 === 1) {
                  var inst_18344 = state_18410[9];
                  var inst_18344__$1 = calc_state.call(null);
                  var inst_18345 = cljs.core.seq_QMARK_.call(null, inst_18344__$1);
                  var state_18410__$1 = function() {
                    var statearr_18413 = state_18410;
                    statearr_18413[9] = inst_18344__$1;
                    return statearr_18413;
                  }();
                  if (inst_18345) {
                    var statearr_18414_18459 = state_18410__$1;
                    statearr_18414_18459[1] = 2;
                  } else {
                    var statearr_18415_18460 = state_18410__$1;
                    statearr_18415_18460[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18411 === 24) {
                    var inst_18362 = state_18410[10];
                    var inst_18354 = inst_18362;
                    var state_18410__$1 = function() {
                      var statearr_18416 = state_18410;
                      statearr_18416[7] = inst_18354;
                      return statearr_18416;
                    }();
                    var statearr_18417_18461 = state_18410__$1;
                    statearr_18417_18461[2] = null;
                    statearr_18417_18461[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18411 === 4) {
                      var inst_18344 = state_18410[9];
                      var inst_18350 = state_18410[2];
                      var inst_18351 = cljs.core.get.call(null, inst_18350, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_18352 = cljs.core.get.call(null, inst_18350, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_18353 = cljs.core.get.call(null, inst_18350, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_18354 = inst_18344;
                      var state_18410__$1 = function() {
                        var statearr_18418 = state_18410;
                        statearr_18418[11] = inst_18353;
                        statearr_18418[7] = inst_18354;
                        statearr_18418[12] = inst_18351;
                        statearr_18418[13] = inst_18352;
                        return statearr_18418;
                      }();
                      var statearr_18419_18462 = state_18410__$1;
                      statearr_18419_18462[2] = null;
                      statearr_18419_18462[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18411 === 15) {
                        var state_18410__$1 = state_18410;
                        var statearr_18420_18463 = state_18410__$1;
                        statearr_18420_18463[2] = null;
                        statearr_18420_18463[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18411 === 21) {
                          var inst_18362 = state_18410[10];
                          var inst_18354 = inst_18362;
                          var state_18410__$1 = function() {
                            var statearr_18421 = state_18410;
                            statearr_18421[7] = inst_18354;
                            return statearr_18421;
                          }();
                          var statearr_18422_18464 = state_18410__$1;
                          statearr_18422_18464[2] = null;
                          statearr_18422_18464[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18411 === 13) {
                            var inst_18406 = state_18410[2];
                            var state_18410__$1 = state_18410;
                            var statearr_18423_18465 = state_18410__$1;
                            statearr_18423_18465[2] = inst_18406;
                            statearr_18423_18465[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18411 === 22) {
                              var inst_18404 = state_18410[2];
                              var state_18410__$1 = state_18410;
                              var statearr_18424_18466 = state_18410__$1;
                              statearr_18424_18466[2] = inst_18404;
                              statearr_18424_18466[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18411 === 6) {
                                var inst_18408 = state_18410[2];
                                var state_18410__$1 = state_18410;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18410__$1, inst_18408);
                              } else {
                                if (state_val_18411 === 25) {
                                  var state_18410__$1 = state_18410;
                                  var statearr_18425_18467 = state_18410__$1;
                                  statearr_18425_18467[2] = null;
                                  statearr_18425_18467[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18411 === 17) {
                                    var inst_18384 = state_18410[14];
                                    var state_18410__$1 = state_18410;
                                    var statearr_18426_18468 = state_18410__$1;
                                    statearr_18426_18468[2] = inst_18384;
                                    statearr_18426_18468[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18411 === 3) {
                                      var inst_18344 = state_18410[9];
                                      var state_18410__$1 = state_18410;
                                      var statearr_18427_18469 = state_18410__$1;
                                      statearr_18427_18469[2] = inst_18344;
                                      statearr_18427_18469[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18411 === 12) {
                                        var inst_18370 = state_18410[15];
                                        var inst_18365 = state_18410[16];
                                        var inst_18384 = state_18410[14];
                                        var inst_18384__$1 = inst_18365.call(null, inst_18370);
                                        var state_18410__$1 = function() {
                                          var statearr_18428 = state_18410;
                                          statearr_18428[14] = inst_18384__$1;
                                          return statearr_18428;
                                        }();
                                        if (cljs.core.truth_(inst_18384__$1)) {
                                          var statearr_18429_18470 = state_18410__$1;
                                          statearr_18429_18470[1] = 17;
                                        } else {
                                          var statearr_18430_18471 = state_18410__$1;
                                          statearr_18430_18471[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18411 === 2) {
                                          var inst_18344 = state_18410[9];
                                          var inst_18347 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18344);
                                          var state_18410__$1 = state_18410;
                                          var statearr_18431_18472 = state_18410__$1;
                                          statearr_18431_18472[2] = inst_18347;
                                          statearr_18431_18472[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18411 === 23) {
                                            var inst_18395 = state_18410[2];
                                            var state_18410__$1 = state_18410;
                                            if (cljs.core.truth_(inst_18395)) {
                                              var statearr_18432_18473 = state_18410__$1;
                                              statearr_18432_18473[1] = 24;
                                            } else {
                                              var statearr_18433_18474 = state_18410__$1;
                                              statearr_18433_18474[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18411 === 19) {
                                              var inst_18392 = state_18410[2];
                                              var state_18410__$1 = state_18410;
                                              if (cljs.core.truth_(inst_18392)) {
                                                var statearr_18434_18475 = state_18410__$1;
                                                statearr_18434_18475[1] = 20;
                                              } else {
                                                var statearr_18435_18476 = state_18410__$1;
                                                statearr_18435_18476[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18411 === 11) {
                                                var inst_18369 = state_18410[8];
                                                var inst_18375 = inst_18369 == null;
                                                var state_18410__$1 = state_18410;
                                                if (cljs.core.truth_(inst_18375)) {
                                                  var statearr_18436_18477 = state_18410__$1;
                                                  statearr_18436_18477[1] = 14;
                                                } else {
                                                  var statearr_18437_18478 = state_18410__$1;
                                                  statearr_18437_18478[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18411 === 9) {
                                                  var inst_18362 = state_18410[10];
                                                  var inst_18362__$1 = state_18410[2];
                                                  var inst_18363 = cljs.core.get.call(null, inst_18362__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_18364 = cljs.core.get.call(null, inst_18362__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_18365 = cljs.core.get.call(null, inst_18362__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_18410__$1 = function() {
                                                    var statearr_18438 = state_18410;
                                                    statearr_18438[17] = inst_18364;
                                                    statearr_18438[16] = inst_18365;
                                                    statearr_18438[10] = inst_18362__$1;
                                                    return statearr_18438;
                                                  }();
                                                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_18410__$1, 10, inst_18363);
                                                } else {
                                                  if (state_val_18411 === 5) {
                                                    var inst_18354 = state_18410[7];
                                                    var inst_18357 = cljs.core.seq_QMARK_.call(null, inst_18354);
                                                    var state_18410__$1 = state_18410;
                                                    if (inst_18357) {
                                                      var statearr_18439_18479 = state_18410__$1;
                                                      statearr_18439_18479[1] = 7;
                                                    } else {
                                                      var statearr_18440_18480 = state_18410__$1;
                                                      statearr_18440_18480[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18411 === 14) {
                                                      var inst_18370 = state_18410[15];
                                                      var inst_18377 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_18370);
                                                      var state_18410__$1 = state_18410;
                                                      var statearr_18441_18481 = state_18410__$1;
                                                      statearr_18441_18481[2] = inst_18377;
                                                      statearr_18441_18481[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18411 === 26) {
                                                        var inst_18400 = state_18410[2];
                                                        var state_18410__$1 = state_18410;
                                                        var statearr_18442_18482 = state_18410__$1;
                                                        statearr_18442_18482[2] = inst_18400;
                                                        statearr_18442_18482[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18411 === 16) {
                                                          var inst_18380 = state_18410[2];
                                                          var inst_18381 = calc_state.call(null);
                                                          var inst_18354 = inst_18381;
                                                          var state_18410__$1 = function() {
                                                            var statearr_18443 = state_18410;
                                                            statearr_18443[18] = inst_18380;
                                                            statearr_18443[7] = inst_18354;
                                                            return statearr_18443;
                                                          }();
                                                          var statearr_18444_18483 = state_18410__$1;
                                                          statearr_18444_18483[2] = null;
                                                          statearr_18444_18483[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18411 === 10) {
                                                            var inst_18370 = state_18410[15];
                                                            var inst_18369 = state_18410[8];
                                                            var inst_18368 = state_18410[2];
                                                            var inst_18369__$1 = cljs.core.nth.call(null, inst_18368, 0, null);
                                                            var inst_18370__$1 = cljs.core.nth.call(null, inst_18368, 1, null);
                                                            var inst_18371 = inst_18369__$1 == null;
                                                            var inst_18372 = cljs.core._EQ_.call(null, inst_18370__$1, change);
                                                            var inst_18373 = inst_18371 || inst_18372;
                                                            var state_18410__$1 = function() {
                                                              var statearr_18445 = state_18410;
                                                              statearr_18445[15] = inst_18370__$1;
                                                              statearr_18445[8] = inst_18369__$1;
                                                              return statearr_18445;
                                                            }();
                                                            if (cljs.core.truth_(inst_18373)) {
                                                              var statearr_18446_18484 = state_18410__$1;
                                                              statearr_18446_18484[1] = 11;
                                                            } else {
                                                              var statearr_18447_18485 = state_18410__$1;
                                                              statearr_18447_18485[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18411 === 18) {
                                                              var inst_18364 = state_18410[17];
                                                              var inst_18370 = state_18410[15];
                                                              var inst_18365 = state_18410[16];
                                                              var inst_18387 = cljs.core.empty_QMARK_.call(null, inst_18365);
                                                              var inst_18388 = inst_18364.call(null, inst_18370);
                                                              var inst_18389 = cljs.core.not.call(null, inst_18388);
                                                              var inst_18390 = inst_18387 && inst_18389;
                                                              var state_18410__$1 = state_18410;
                                                              var statearr_18448_18486 = state_18410__$1;
                                                              statearr_18448_18486[2] = inst_18390;
                                                              statearr_18448_18486[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18411 === 8) {
                                                                var inst_18354 = state_18410[7];
                                                                var state_18410__$1 = state_18410;
                                                                var statearr_18449_18487 = state_18410__$1;
                                                                statearr_18449_18487[2] = inst_18354;
                                                                statearr_18449_18487[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12125__auto___18457, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__12060__auto__, c__12125__auto___18457, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__12061__auto__ = null;
            var state_machine__12061__auto____0 = function() {
              var statearr_18453 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18453[0] = state_machine__12061__auto__;
              statearr_18453[1] = 1;
              return statearr_18453;
            };
            var state_machine__12061__auto____1 = function(state_18410) {
              while (true) {
                var ret_value__12062__auto__ = function() {
                  try {
                    while (true) {
                      var result__12063__auto__ = switch__12060__auto__.call(null, state_18410);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12063__auto__;
                      }
                      break;
                    }
                  } catch (e18454) {
                    if (e18454 instanceof Object) {
                      var ex__12064__auto__ = e18454;
                      var statearr_18455_18488 = state_18410;
                      statearr_18455_18488[5] = ex__12064__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18410);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e18454;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18489 = state_18410;
                  state_18410 = G__18489;
                  continue;
                } else {
                  return ret_value__12062__auto__;
                }
                break;
              }
            };
            state_machine__12061__auto__ = function(state_18410) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12061__auto____0.call(this);
                case 1:
                  return state_machine__12061__auto____1.call(this, state_18410);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
            return state_machine__12061__auto__;
          }();
        }(switch__12060__auto__, c__12125__auto___18457, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__12127__auto__ = function() {
        var statearr_18456 = f__12126__auto__.call(null);
        statearr_18456[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___18457;
        return statearr_18456;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
    };
  }(c__12125__auto___18457, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj18491 = {};
  return obj18491;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3040__auto__ = p;
    if (and__3040__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__3679__auto__ = p == null ? null : p;
    return function() {
      var or__3052__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3040__auto__ = p;
    if (and__3040__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__3679__auto__ = p == null ? null : p;
    return function() {
      var or__3052__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3040__auto__ = p;
      if (and__3040__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__3679__auto__ = p == null ? null : p;
      return function() {
        var or__3052__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3040__auto__ = p;
      if (and__3040__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3040__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__3679__auto__ = p == null ? null : p;
      return function() {
        var or__3052__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3679__auto__)];
        if (or__3052__auto__) {
          return or__3052__auto__;
        } else {
          var or__3052__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3052__auto____$1) {
            return or__3052__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3052__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3052__auto__, mults) {
            return function(p1__18492_SHARP_) {
              if (cljs.core.truth_(p1__18492_SHARP_.call(null, topic))) {
                return p1__18492_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__18492_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3052__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t18615 !== "undefined") {
      } else {
        cljs.core.async.t18615 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta18616) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta18616 = meta18616;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t18615.cljs$lang$type = true;
        cljs.core.async.t18615.cljs$lang$ctorStr = "cljs.core.async/t18615";
        cljs.core.async.t18615.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
            return cljs.core._write.call(null, writer__3620__auto__, "cljs.core.async/t18615");
          };
        }(mults, ensure_mult);
        cljs.core.async.t18615.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t18615.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18615.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t18615.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18615.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18615.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t18615.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18615.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_18617) {
            var self__ = this;
            var _18617__$1 = this;
            return self__.meta18616;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18615.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_18617, meta18616__$1) {
            var self__ = this;
            var _18617__$1 = this;
            return new cljs.core.async.t18615(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta18616__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t18615 = function(mults, ensure_mult) {
          return function __GT_t18615(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18616) {
            return new cljs.core.async.t18615(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18616);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t18615(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__12125__auto___18737 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___18737, mults, ensure_mult, p) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___18737, mults, ensure_mult, p) {
            return function(state_18689) {
              var state_val_18690 = state_18689[1];
              if (state_val_18690 === 7) {
                var inst_18685 = state_18689[2];
                var state_18689__$1 = state_18689;
                var statearr_18691_18738 = state_18689__$1;
                statearr_18691_18738[2] = inst_18685;
                statearr_18691_18738[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18690 === 20) {
                  var state_18689__$1 = state_18689;
                  var statearr_18692_18739 = state_18689__$1;
                  statearr_18692_18739[2] = null;
                  statearr_18692_18739[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18690 === 1) {
                    var state_18689__$1 = state_18689;
                    var statearr_18693_18740 = state_18689__$1;
                    statearr_18693_18740[2] = null;
                    statearr_18693_18740[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18690 === 24) {
                      var inst_18668 = state_18689[7];
                      var inst_18677 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_18668);
                      var state_18689__$1 = state_18689;
                      var statearr_18694_18741 = state_18689__$1;
                      statearr_18694_18741[2] = inst_18677;
                      statearr_18694_18741[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18690 === 4) {
                        var inst_18620 = state_18689[8];
                        var inst_18620__$1 = state_18689[2];
                        var inst_18621 = inst_18620__$1 == null;
                        var state_18689__$1 = function() {
                          var statearr_18695 = state_18689;
                          statearr_18695[8] = inst_18620__$1;
                          return statearr_18695;
                        }();
                        if (cljs.core.truth_(inst_18621)) {
                          var statearr_18696_18742 = state_18689__$1;
                          statearr_18696_18742[1] = 5;
                        } else {
                          var statearr_18697_18743 = state_18689__$1;
                          statearr_18697_18743[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18690 === 15) {
                          var inst_18662 = state_18689[2];
                          var state_18689__$1 = state_18689;
                          var statearr_18698_18744 = state_18689__$1;
                          statearr_18698_18744[2] = inst_18662;
                          statearr_18698_18744[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18690 === 21) {
                            var inst_18682 = state_18689[2];
                            var state_18689__$1 = function() {
                              var statearr_18699 = state_18689;
                              statearr_18699[9] = inst_18682;
                              return statearr_18699;
                            }();
                            var statearr_18700_18745 = state_18689__$1;
                            statearr_18700_18745[2] = null;
                            statearr_18700_18745[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18690 === 13) {
                              var inst_18644 = state_18689[10];
                              var inst_18646 = cljs.core.chunked_seq_QMARK_.call(null, inst_18644);
                              var state_18689__$1 = state_18689;
                              if (inst_18646) {
                                var statearr_18701_18746 = state_18689__$1;
                                statearr_18701_18746[1] = 16;
                              } else {
                                var statearr_18702_18747 = state_18689__$1;
                                statearr_18702_18747[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18690 === 22) {
                                var inst_18674 = state_18689[2];
                                var state_18689__$1 = state_18689;
                                if (cljs.core.truth_(inst_18674)) {
                                  var statearr_18703_18748 = state_18689__$1;
                                  statearr_18703_18748[1] = 23;
                                } else {
                                  var statearr_18704_18749 = state_18689__$1;
                                  statearr_18704_18749[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18690 === 6) {
                                  var inst_18670 = state_18689[11];
                                  var inst_18620 = state_18689[8];
                                  var inst_18668 = state_18689[7];
                                  var inst_18668__$1 = topic_fn.call(null, inst_18620);
                                  var inst_18669 = cljs.core.deref.call(null, mults);
                                  var inst_18670__$1 = cljs.core.get.call(null, inst_18669, inst_18668__$1);
                                  var state_18689__$1 = function() {
                                    var statearr_18705 = state_18689;
                                    statearr_18705[11] = inst_18670__$1;
                                    statearr_18705[7] = inst_18668__$1;
                                    return statearr_18705;
                                  }();
                                  if (cljs.core.truth_(inst_18670__$1)) {
                                    var statearr_18706_18750 = state_18689__$1;
                                    statearr_18706_18750[1] = 19;
                                  } else {
                                    var statearr_18707_18751 = state_18689__$1;
                                    statearr_18707_18751[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18690 === 25) {
                                    var inst_18679 = state_18689[2];
                                    var state_18689__$1 = state_18689;
                                    var statearr_18708_18752 = state_18689__$1;
                                    statearr_18708_18752[2] = inst_18679;
                                    statearr_18708_18752[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18690 === 17) {
                                      var inst_18644 = state_18689[10];
                                      var inst_18653 = cljs.core.first.call(null, inst_18644);
                                      var inst_18654 = cljs.core.async.muxch_STAR_.call(null, inst_18653);
                                      var inst_18655 = cljs.core.async.close_BANG_.call(null, inst_18654);
                                      var inst_18656 = cljs.core.next.call(null, inst_18644);
                                      var inst_18630 = inst_18656;
                                      var inst_18631 = null;
                                      var inst_18632 = 0;
                                      var inst_18633 = 0;
                                      var state_18689__$1 = function() {
                                        var statearr_18709 = state_18689;
                                        statearr_18709[12] = inst_18633;
                                        statearr_18709[13] = inst_18655;
                                        statearr_18709[14] = inst_18631;
                                        statearr_18709[15] = inst_18632;
                                        statearr_18709[16] = inst_18630;
                                        return statearr_18709;
                                      }();
                                      var statearr_18710_18753 = state_18689__$1;
                                      statearr_18710_18753[2] = null;
                                      statearr_18710_18753[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18690 === 3) {
                                        var inst_18687 = state_18689[2];
                                        var state_18689__$1 = state_18689;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18689__$1, inst_18687);
                                      } else {
                                        if (state_val_18690 === 12) {
                                          var inst_18664 = state_18689[2];
                                          var state_18689__$1 = state_18689;
                                          var statearr_18711_18754 = state_18689__$1;
                                          statearr_18711_18754[2] = inst_18664;
                                          statearr_18711_18754[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18690 === 2) {
                                            var state_18689__$1 = state_18689;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18689__$1, 4, ch);
                                          } else {
                                            if (state_val_18690 === 23) {
                                              var state_18689__$1 = state_18689;
                                              var statearr_18712_18755 = state_18689__$1;
                                              statearr_18712_18755[2] = null;
                                              statearr_18712_18755[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18690 === 19) {
                                                var inst_18670 = state_18689[11];
                                                var inst_18620 = state_18689[8];
                                                var inst_18672 = cljs.core.async.muxch_STAR_.call(null, inst_18670);
                                                var state_18689__$1 = state_18689;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18689__$1, 22, inst_18672, inst_18620);
                                              } else {
                                                if (state_val_18690 === 11) {
                                                  var inst_18644 = state_18689[10];
                                                  var inst_18630 = state_18689[16];
                                                  var inst_18644__$1 = cljs.core.seq.call(null, inst_18630);
                                                  var state_18689__$1 = function() {
                                                    var statearr_18713 = state_18689;
                                                    statearr_18713[10] = inst_18644__$1;
                                                    return statearr_18713;
                                                  }();
                                                  if (inst_18644__$1) {
                                                    var statearr_18714_18756 = state_18689__$1;
                                                    statearr_18714_18756[1] = 13;
                                                  } else {
                                                    var statearr_18715_18757 = state_18689__$1;
                                                    statearr_18715_18757[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18690 === 9) {
                                                    var inst_18666 = state_18689[2];
                                                    var state_18689__$1 = state_18689;
                                                    var statearr_18716_18758 = state_18689__$1;
                                                    statearr_18716_18758[2] = inst_18666;
                                                    statearr_18716_18758[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18690 === 5) {
                                                      var inst_18627 = cljs.core.deref.call(null, mults);
                                                      var inst_18628 = cljs.core.vals.call(null, inst_18627);
                                                      var inst_18629 = cljs.core.seq.call(null, inst_18628);
                                                      var inst_18630 = inst_18629;
                                                      var inst_18631 = null;
                                                      var inst_18632 = 0;
                                                      var inst_18633 = 0;
                                                      var state_18689__$1 = function() {
                                                        var statearr_18717 = state_18689;
                                                        statearr_18717[12] = inst_18633;
                                                        statearr_18717[14] = inst_18631;
                                                        statearr_18717[15] = inst_18632;
                                                        statearr_18717[16] = inst_18630;
                                                        return statearr_18717;
                                                      }();
                                                      var statearr_18718_18759 = state_18689__$1;
                                                      statearr_18718_18759[2] = null;
                                                      statearr_18718_18759[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18690 === 14) {
                                                        var state_18689__$1 = state_18689;
                                                        var statearr_18722_18760 = state_18689__$1;
                                                        statearr_18722_18760[2] = null;
                                                        statearr_18722_18760[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18690 === 16) {
                                                          var inst_18644 = state_18689[10];
                                                          var inst_18648 = cljs.core.chunk_first.call(null, inst_18644);
                                                          var inst_18649 = cljs.core.chunk_rest.call(null, inst_18644);
                                                          var inst_18650 = cljs.core.count.call(null, inst_18648);
                                                          var inst_18630 = inst_18649;
                                                          var inst_18631 = inst_18648;
                                                          var inst_18632 = inst_18650;
                                                          var inst_18633 = 0;
                                                          var state_18689__$1 = function() {
                                                            var statearr_18723 = state_18689;
                                                            statearr_18723[12] = inst_18633;
                                                            statearr_18723[14] = inst_18631;
                                                            statearr_18723[15] = inst_18632;
                                                            statearr_18723[16] = inst_18630;
                                                            return statearr_18723;
                                                          }();
                                                          var statearr_18724_18761 = state_18689__$1;
                                                          statearr_18724_18761[2] = null;
                                                          statearr_18724_18761[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18690 === 10) {
                                                            var inst_18633 = state_18689[12];
                                                            var inst_18631 = state_18689[14];
                                                            var inst_18632 = state_18689[15];
                                                            var inst_18630 = state_18689[16];
                                                            var inst_18638 = cljs.core._nth.call(null, inst_18631, inst_18633);
                                                            var inst_18639 = cljs.core.async.muxch_STAR_.call(null, inst_18638);
                                                            var inst_18640 = cljs.core.async.close_BANG_.call(null, inst_18639);
                                                            var inst_18641 = inst_18633 + 1;
                                                            var tmp18719 = inst_18631;
                                                            var tmp18720 = inst_18632;
                                                            var tmp18721 = inst_18630;
                                                            var inst_18630__$1 = tmp18721;
                                                            var inst_18631__$1 = tmp18719;
                                                            var inst_18632__$1 = tmp18720;
                                                            var inst_18633__$1 = inst_18641;
                                                            var state_18689__$1 = function() {
                                                              var statearr_18725 = state_18689;
                                                              statearr_18725[12] = inst_18633__$1;
                                                              statearr_18725[17] = inst_18640;
                                                              statearr_18725[14] = inst_18631__$1;
                                                              statearr_18725[15] = inst_18632__$1;
                                                              statearr_18725[16] = inst_18630__$1;
                                                              return statearr_18725;
                                                            }();
                                                            var statearr_18726_18762 = state_18689__$1;
                                                            statearr_18726_18762[2] = null;
                                                            statearr_18726_18762[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18690 === 18) {
                                                              var inst_18659 = state_18689[2];
                                                              var state_18689__$1 = state_18689;
                                                              var statearr_18727_18763 = state_18689__$1;
                                                              statearr_18727_18763[2] = inst_18659;
                                                              statearr_18727_18763[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18690 === 8) {
                                                                var inst_18633 = state_18689[12];
                                                                var inst_18632 = state_18689[15];
                                                                var inst_18635 = inst_18633 < inst_18632;
                                                                var inst_18636 = inst_18635;
                                                                var state_18689__$1 = state_18689;
                                                                if (cljs.core.truth_(inst_18636)) {
                                                                  var statearr_18728_18764 = state_18689__$1;
                                                                  statearr_18728_18764[1] = 10;
                                                                } else {
                                                                  var statearr_18729_18765 = state_18689__$1;
                                                                  statearr_18729_18765[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___18737, mults, ensure_mult, p);
          return function(switch__12060__auto__, c__12125__auto___18737, mults, ensure_mult, p) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_18733 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18733[0] = state_machine__12061__auto__;
                statearr_18733[1] = 1;
                return statearr_18733;
              };
              var state_machine__12061__auto____1 = function(state_18689) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_18689);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e18734) {
                      if (e18734 instanceof Object) {
                        var ex__12064__auto__ = e18734;
                        var statearr_18735_18766 = state_18689;
                        statearr_18735_18766[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18689);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e18734;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__18767 = state_18689;
                    state_18689 = G__18767;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_18689) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_18689);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___18737, mults, ensure_mult, p);
        }();
        var state__12127__auto__ = function() {
          var statearr_18736 = f__12126__auto__.call(null);
          statearr_18736[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___18737;
          return statearr_18736;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___18737, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__12125__auto___18904 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___18904, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___18904, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_18874) {
              var state_val_18875 = state_18874[1];
              if (state_val_18875 === 7) {
                var state_18874__$1 = state_18874;
                var statearr_18876_18905 = state_18874__$1;
                statearr_18876_18905[2] = null;
                statearr_18876_18905[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18875 === 1) {
                  var state_18874__$1 = state_18874;
                  var statearr_18877_18906 = state_18874__$1;
                  statearr_18877_18906[2] = null;
                  statearr_18877_18906[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18875 === 4) {
                    var inst_18838 = state_18874[7];
                    var inst_18840 = inst_18838 < cnt;
                    var state_18874__$1 = state_18874;
                    if (cljs.core.truth_(inst_18840)) {
                      var statearr_18878_18907 = state_18874__$1;
                      statearr_18878_18907[1] = 6;
                    } else {
                      var statearr_18879_18908 = state_18874__$1;
                      statearr_18879_18908[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18875 === 15) {
                      var inst_18870 = state_18874[2];
                      var state_18874__$1 = state_18874;
                      var statearr_18880_18909 = state_18874__$1;
                      statearr_18880_18909[2] = inst_18870;
                      statearr_18880_18909[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18875 === 13) {
                        var inst_18863 = cljs.core.async.close_BANG_.call(null, out);
                        var state_18874__$1 = state_18874;
                        var statearr_18881_18910 = state_18874__$1;
                        statearr_18881_18910[2] = inst_18863;
                        statearr_18881_18910[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18875 === 6) {
                          var state_18874__$1 = state_18874;
                          var statearr_18882_18911 = state_18874__$1;
                          statearr_18882_18911[2] = null;
                          statearr_18882_18911[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18875 === 3) {
                            var inst_18872 = state_18874[2];
                            var state_18874__$1 = state_18874;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18874__$1, inst_18872);
                          } else {
                            if (state_val_18875 === 12) {
                              var inst_18860 = state_18874[8];
                              var inst_18860__$1 = state_18874[2];
                              var inst_18861 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_18860__$1);
                              var state_18874__$1 = function() {
                                var statearr_18883 = state_18874;
                                statearr_18883[8] = inst_18860__$1;
                                return statearr_18883;
                              }();
                              if (cljs.core.truth_(inst_18861)) {
                                var statearr_18884_18912 = state_18874__$1;
                                statearr_18884_18912[1] = 13;
                              } else {
                                var statearr_18885_18913 = state_18874__$1;
                                statearr_18885_18913[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18875 === 2) {
                                var inst_18837 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_18838 = 0;
                                var state_18874__$1 = function() {
                                  var statearr_18886 = state_18874;
                                  statearr_18886[7] = inst_18838;
                                  statearr_18886[9] = inst_18837;
                                  return statearr_18886;
                                }();
                                var statearr_18887_18914 = state_18874__$1;
                                statearr_18887_18914[2] = null;
                                statearr_18887_18914[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18875 === 11) {
                                  var inst_18838 = state_18874[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_18874, 10, Object, null, 9);
                                  var inst_18847 = chs__$1.call(null, inst_18838);
                                  var inst_18848 = done.call(null, inst_18838);
                                  var inst_18849 = cljs.core.async.take_BANG_.call(null, inst_18847, inst_18848);
                                  var state_18874__$1 = state_18874;
                                  var statearr_18888_18915 = state_18874__$1;
                                  statearr_18888_18915[2] = inst_18849;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18874__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18875 === 9) {
                                    var inst_18838 = state_18874[7];
                                    var inst_18851 = state_18874[2];
                                    var inst_18852 = inst_18838 + 1;
                                    var inst_18838__$1 = inst_18852;
                                    var state_18874__$1 = function() {
                                      var statearr_18889 = state_18874;
                                      statearr_18889[10] = inst_18851;
                                      statearr_18889[7] = inst_18838__$1;
                                      return statearr_18889;
                                    }();
                                    var statearr_18890_18916 = state_18874__$1;
                                    statearr_18890_18916[2] = null;
                                    statearr_18890_18916[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18875 === 5) {
                                      var inst_18858 = state_18874[2];
                                      var state_18874__$1 = function() {
                                        var statearr_18891 = state_18874;
                                        statearr_18891[11] = inst_18858;
                                        return statearr_18891;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18874__$1, 12, dchan);
                                    } else {
                                      if (state_val_18875 === 14) {
                                        var inst_18860 = state_18874[8];
                                        var inst_18865 = cljs.core.apply.call(null, f, inst_18860);
                                        var state_18874__$1 = state_18874;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18874__$1, 16, out, inst_18865);
                                      } else {
                                        if (state_val_18875 === 16) {
                                          var inst_18867 = state_18874[2];
                                          var state_18874__$1 = function() {
                                            var statearr_18892 = state_18874;
                                            statearr_18892[12] = inst_18867;
                                            return statearr_18892;
                                          }();
                                          var statearr_18893_18917 = state_18874__$1;
                                          statearr_18893_18917[2] = null;
                                          statearr_18893_18917[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18875 === 10) {
                                            var inst_18842 = state_18874[2];
                                            var inst_18843 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_18874__$1 = function() {
                                              var statearr_18894 = state_18874;
                                              statearr_18894[13] = inst_18842;
                                              return statearr_18894;
                                            }();
                                            var statearr_18895_18918 = state_18874__$1;
                                            statearr_18895_18918[2] = inst_18843;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18874__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18875 === 8) {
                                              var inst_18856 = state_18874[2];
                                              var state_18874__$1 = state_18874;
                                              var statearr_18896_18919 = state_18874__$1;
                                              statearr_18896_18919[2] = inst_18856;
                                              statearr_18896_18919[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___18904, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__12060__auto__, c__12125__auto___18904, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_18900 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18900[0] = state_machine__12061__auto__;
                statearr_18900[1] = 1;
                return statearr_18900;
              };
              var state_machine__12061__auto____1 = function(state_18874) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_18874);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e18901) {
                      if (e18901 instanceof Object) {
                        var ex__12064__auto__ = e18901;
                        var statearr_18902_18920 = state_18874;
                        statearr_18902_18920[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18874);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e18901;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__18921 = state_18874;
                    state_18874 = G__18921;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_18874) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_18874);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___18904, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__12127__auto__ = function() {
          var statearr_18903 = f__12126__auto__.call(null);
          statearr_18903[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___18904;
          return statearr_18903;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___18904, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12125__auto___19029 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___19029, out) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___19029, out) {
            return function(state_19005) {
              var state_val_19006 = state_19005[1];
              if (state_val_19006 === 7) {
                var inst_18984 = state_19005[7];
                var inst_18985 = state_19005[8];
                var inst_18984__$1 = state_19005[2];
                var inst_18985__$1 = cljs.core.nth.call(null, inst_18984__$1, 0, null);
                var inst_18986 = cljs.core.nth.call(null, inst_18984__$1, 1, null);
                var inst_18987 = inst_18985__$1 == null;
                var state_19005__$1 = function() {
                  var statearr_19007 = state_19005;
                  statearr_19007[7] = inst_18984__$1;
                  statearr_19007[8] = inst_18985__$1;
                  statearr_19007[9] = inst_18986;
                  return statearr_19007;
                }();
                if (cljs.core.truth_(inst_18987)) {
                  var statearr_19008_19030 = state_19005__$1;
                  statearr_19008_19030[1] = 8;
                } else {
                  var statearr_19009_19031 = state_19005__$1;
                  statearr_19009_19031[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19006 === 1) {
                  var inst_18976 = cljs.core.vec.call(null, chs);
                  var inst_18977 = inst_18976;
                  var state_19005__$1 = function() {
                    var statearr_19010 = state_19005;
                    statearr_19010[10] = inst_18977;
                    return statearr_19010;
                  }();
                  var statearr_19011_19032 = state_19005__$1;
                  statearr_19011_19032[2] = null;
                  statearr_19011_19032[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19006 === 4) {
                    var inst_18977 = state_19005[10];
                    var state_19005__$1 = state_19005;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_19005__$1, 7, inst_18977);
                  } else {
                    if (state_val_19006 === 6) {
                      var inst_19001 = state_19005[2];
                      var state_19005__$1 = state_19005;
                      var statearr_19012_19033 = state_19005__$1;
                      statearr_19012_19033[2] = inst_19001;
                      statearr_19012_19033[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19006 === 3) {
                        var inst_19003 = state_19005[2];
                        var state_19005__$1 = state_19005;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19005__$1, inst_19003);
                      } else {
                        if (state_val_19006 === 2) {
                          var inst_18977 = state_19005[10];
                          var inst_18979 = cljs.core.count.call(null, inst_18977);
                          var inst_18980 = inst_18979 > 0;
                          var state_19005__$1 = state_19005;
                          if (cljs.core.truth_(inst_18980)) {
                            var statearr_19014_19034 = state_19005__$1;
                            statearr_19014_19034[1] = 4;
                          } else {
                            var statearr_19015_19035 = state_19005__$1;
                            statearr_19015_19035[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19006 === 11) {
                            var inst_18977 = state_19005[10];
                            var inst_18994 = state_19005[2];
                            var tmp19013 = inst_18977;
                            var inst_18977__$1 = tmp19013;
                            var state_19005__$1 = function() {
                              var statearr_19016 = state_19005;
                              statearr_19016[10] = inst_18977__$1;
                              statearr_19016[11] = inst_18994;
                              return statearr_19016;
                            }();
                            var statearr_19017_19036 = state_19005__$1;
                            statearr_19017_19036[2] = null;
                            statearr_19017_19036[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19006 === 9) {
                              var inst_18985 = state_19005[8];
                              var state_19005__$1 = state_19005;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19005__$1, 11, out, inst_18985);
                            } else {
                              if (state_val_19006 === 5) {
                                var inst_18999 = cljs.core.async.close_BANG_.call(null, out);
                                var state_19005__$1 = state_19005;
                                var statearr_19018_19037 = state_19005__$1;
                                statearr_19018_19037[2] = inst_18999;
                                statearr_19018_19037[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19006 === 10) {
                                  var inst_18997 = state_19005[2];
                                  var state_19005__$1 = state_19005;
                                  var statearr_19019_19038 = state_19005__$1;
                                  statearr_19019_19038[2] = inst_18997;
                                  statearr_19019_19038[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19006 === 8) {
                                    var inst_18984 = state_19005[7];
                                    var inst_18985 = state_19005[8];
                                    var inst_18977 = state_19005[10];
                                    var inst_18986 = state_19005[9];
                                    var inst_18989 = function() {
                                      var c = inst_18986;
                                      var v = inst_18985;
                                      var vec__18982 = inst_18984;
                                      var cs = inst_18977;
                                      return function(c, v, vec__18982, cs, inst_18984, inst_18985, inst_18977, inst_18986, state_val_19006, c__12125__auto___19029, out) {
                                        return function(p1__18922_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__18922_SHARP_);
                                        };
                                      }(c, v, vec__18982, cs, inst_18984, inst_18985, inst_18977, inst_18986, state_val_19006, c__12125__auto___19029, out);
                                    }();
                                    var inst_18990 = cljs.core.filterv.call(null, inst_18989, inst_18977);
                                    var inst_18977__$1 = inst_18990;
                                    var state_19005__$1 = function() {
                                      var statearr_19020 = state_19005;
                                      statearr_19020[10] = inst_18977__$1;
                                      return statearr_19020;
                                    }();
                                    var statearr_19021_19039 = state_19005__$1;
                                    statearr_19021_19039[2] = null;
                                    statearr_19021_19039[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___19029, out);
          return function(switch__12060__auto__, c__12125__auto___19029, out) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_19025 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19025[0] = state_machine__12061__auto__;
                statearr_19025[1] = 1;
                return statearr_19025;
              };
              var state_machine__12061__auto____1 = function(state_19005) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_19005);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e19026) {
                      if (e19026 instanceof Object) {
                        var ex__12064__auto__ = e19026;
                        var statearr_19027_19040 = state_19005;
                        statearr_19027_19040[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19005);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19026;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19041 = state_19005;
                    state_19005 = G__19041;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_19005) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_19005);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___19029, out);
        }();
        var state__12127__auto__ = function() {
          var statearr_19028 = f__12126__auto__.call(null);
          statearr_19028[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___19029;
          return statearr_19028;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___19029, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12125__auto___19134 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___19134, out) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___19134, out) {
            return function(state_19111) {
              var state_val_19112 = state_19111[1];
              if (state_val_19112 === 7) {
                var inst_19093 = state_19111[7];
                var inst_19093__$1 = state_19111[2];
                var inst_19094 = inst_19093__$1 == null;
                var inst_19095 = cljs.core.not.call(null, inst_19094);
                var state_19111__$1 = function() {
                  var statearr_19113 = state_19111;
                  statearr_19113[7] = inst_19093__$1;
                  return statearr_19113;
                }();
                if (inst_19095) {
                  var statearr_19114_19135 = state_19111__$1;
                  statearr_19114_19135[1] = 8;
                } else {
                  var statearr_19115_19136 = state_19111__$1;
                  statearr_19115_19136[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19112 === 1) {
                  var inst_19088 = 0;
                  var state_19111__$1 = function() {
                    var statearr_19116 = state_19111;
                    statearr_19116[8] = inst_19088;
                    return statearr_19116;
                  }();
                  var statearr_19117_19137 = state_19111__$1;
                  statearr_19117_19137[2] = null;
                  statearr_19117_19137[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19112 === 4) {
                    var state_19111__$1 = state_19111;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19111__$1, 7, ch);
                  } else {
                    if (state_val_19112 === 6) {
                      var inst_19106 = state_19111[2];
                      var state_19111__$1 = state_19111;
                      var statearr_19118_19138 = state_19111__$1;
                      statearr_19118_19138[2] = inst_19106;
                      statearr_19118_19138[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19112 === 3) {
                        var inst_19108 = state_19111[2];
                        var inst_19109 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19111__$1 = function() {
                          var statearr_19119 = state_19111;
                          statearr_19119[9] = inst_19108;
                          return statearr_19119;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19111__$1, inst_19109);
                      } else {
                        if (state_val_19112 === 2) {
                          var inst_19088 = state_19111[8];
                          var inst_19090 = inst_19088 < n;
                          var state_19111__$1 = state_19111;
                          if (cljs.core.truth_(inst_19090)) {
                            var statearr_19120_19139 = state_19111__$1;
                            statearr_19120_19139[1] = 4;
                          } else {
                            var statearr_19121_19140 = state_19111__$1;
                            statearr_19121_19140[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19112 === 11) {
                            var inst_19088 = state_19111[8];
                            var inst_19098 = state_19111[2];
                            var inst_19099 = inst_19088 + 1;
                            var inst_19088__$1 = inst_19099;
                            var state_19111__$1 = function() {
                              var statearr_19122 = state_19111;
                              statearr_19122[10] = inst_19098;
                              statearr_19122[8] = inst_19088__$1;
                              return statearr_19122;
                            }();
                            var statearr_19123_19141 = state_19111__$1;
                            statearr_19123_19141[2] = null;
                            statearr_19123_19141[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19112 === 9) {
                              var state_19111__$1 = state_19111;
                              var statearr_19124_19142 = state_19111__$1;
                              statearr_19124_19142[2] = null;
                              statearr_19124_19142[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19112 === 5) {
                                var state_19111__$1 = state_19111;
                                var statearr_19125_19143 = state_19111__$1;
                                statearr_19125_19143[2] = null;
                                statearr_19125_19143[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19112 === 10) {
                                  var inst_19103 = state_19111[2];
                                  var state_19111__$1 = state_19111;
                                  var statearr_19126_19144 = state_19111__$1;
                                  statearr_19126_19144[2] = inst_19103;
                                  statearr_19126_19144[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19112 === 8) {
                                    var inst_19093 = state_19111[7];
                                    var state_19111__$1 = state_19111;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19111__$1, 11, out, inst_19093);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___19134, out);
          return function(switch__12060__auto__, c__12125__auto___19134, out) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_19130 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19130[0] = state_machine__12061__auto__;
                statearr_19130[1] = 1;
                return statearr_19130;
              };
              var state_machine__12061__auto____1 = function(state_19111) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_19111);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e19131) {
                      if (e19131 instanceof Object) {
                        var ex__12064__auto__ = e19131;
                        var statearr_19132_19145 = state_19111;
                        statearr_19132_19145[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19111);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19131;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19146 = state_19111;
                    state_19111 = G__19146;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_19111) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_19111);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___19134, out);
        }();
        var state__12127__auto__ = function() {
          var statearr_19133 = f__12126__auto__.call(null);
          statearr_19133[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___19134;
          return statearr_19133;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___19134, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12125__auto___19243 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___19243, out) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___19243, out) {
            return function(state_19218) {
              var state_val_19219 = state_19218[1];
              if (state_val_19219 === 7) {
                var inst_19213 = state_19218[2];
                var state_19218__$1 = state_19218;
                var statearr_19220_19244 = state_19218__$1;
                statearr_19220_19244[2] = inst_19213;
                statearr_19220_19244[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19219 === 1) {
                  var inst_19195 = null;
                  var state_19218__$1 = function() {
                    var statearr_19221 = state_19218;
                    statearr_19221[7] = inst_19195;
                    return statearr_19221;
                  }();
                  var statearr_19222_19245 = state_19218__$1;
                  statearr_19222_19245[2] = null;
                  statearr_19222_19245[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19219 === 4) {
                    var inst_19198 = state_19218[8];
                    var inst_19198__$1 = state_19218[2];
                    var inst_19199 = inst_19198__$1 == null;
                    var inst_19200 = cljs.core.not.call(null, inst_19199);
                    var state_19218__$1 = function() {
                      var statearr_19223 = state_19218;
                      statearr_19223[8] = inst_19198__$1;
                      return statearr_19223;
                    }();
                    if (inst_19200) {
                      var statearr_19224_19246 = state_19218__$1;
                      statearr_19224_19246[1] = 5;
                    } else {
                      var statearr_19225_19247 = state_19218__$1;
                      statearr_19225_19247[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19219 === 6) {
                      var state_19218__$1 = state_19218;
                      var statearr_19226_19248 = state_19218__$1;
                      statearr_19226_19248[2] = null;
                      statearr_19226_19248[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19219 === 3) {
                        var inst_19215 = state_19218[2];
                        var inst_19216 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19218__$1 = function() {
                          var statearr_19227 = state_19218;
                          statearr_19227[9] = inst_19215;
                          return statearr_19227;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19218__$1, inst_19216);
                      } else {
                        if (state_val_19219 === 2) {
                          var state_19218__$1 = state_19218;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19218__$1, 4, ch);
                        } else {
                          if (state_val_19219 === 11) {
                            var inst_19198 = state_19218[8];
                            var inst_19207 = state_19218[2];
                            var inst_19195 = inst_19198;
                            var state_19218__$1 = function() {
                              var statearr_19228 = state_19218;
                              statearr_19228[7] = inst_19195;
                              statearr_19228[10] = inst_19207;
                              return statearr_19228;
                            }();
                            var statearr_19229_19249 = state_19218__$1;
                            statearr_19229_19249[2] = null;
                            statearr_19229_19249[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19219 === 9) {
                              var inst_19198 = state_19218[8];
                              var state_19218__$1 = state_19218;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19218__$1, 11, out, inst_19198);
                            } else {
                              if (state_val_19219 === 5) {
                                var inst_19195 = state_19218[7];
                                var inst_19198 = state_19218[8];
                                var inst_19202 = cljs.core._EQ_.call(null, inst_19198, inst_19195);
                                var state_19218__$1 = state_19218;
                                if (inst_19202) {
                                  var statearr_19231_19250 = state_19218__$1;
                                  statearr_19231_19250[1] = 8;
                                } else {
                                  var statearr_19232_19251 = state_19218__$1;
                                  statearr_19232_19251[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19219 === 10) {
                                  var inst_19210 = state_19218[2];
                                  var state_19218__$1 = state_19218;
                                  var statearr_19233_19252 = state_19218__$1;
                                  statearr_19233_19252[2] = inst_19210;
                                  statearr_19233_19252[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19219 === 8) {
                                    var inst_19195 = state_19218[7];
                                    var tmp19230 = inst_19195;
                                    var inst_19195__$1 = tmp19230;
                                    var state_19218__$1 = function() {
                                      var statearr_19234 = state_19218;
                                      statearr_19234[7] = inst_19195__$1;
                                      return statearr_19234;
                                    }();
                                    var statearr_19235_19253 = state_19218__$1;
                                    statearr_19235_19253[2] = null;
                                    statearr_19235_19253[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___19243, out);
          return function(switch__12060__auto__, c__12125__auto___19243, out) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_19239 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19239[0] = state_machine__12061__auto__;
                statearr_19239[1] = 1;
                return statearr_19239;
              };
              var state_machine__12061__auto____1 = function(state_19218) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_19218);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e19240) {
                      if (e19240 instanceof Object) {
                        var ex__12064__auto__ = e19240;
                        var statearr_19241_19254 = state_19218;
                        statearr_19241_19254[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19218);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19240;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19255 = state_19218;
                    state_19218 = G__19255;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_19218) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_19218);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___19243, out);
        }();
        var state__12127__auto__ = function() {
          var statearr_19242 = f__12126__auto__.call(null);
          statearr_19242[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___19243;
          return statearr_19242;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___19243, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12125__auto___19390 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___19390, out) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___19390, out) {
            return function(state_19360) {
              var state_val_19361 = state_19360[1];
              if (state_val_19361 === 7) {
                var inst_19356 = state_19360[2];
                var state_19360__$1 = state_19360;
                var statearr_19362_19391 = state_19360__$1;
                statearr_19362_19391[2] = inst_19356;
                statearr_19362_19391[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19361 === 1) {
                  var inst_19323 = new Array(n);
                  var inst_19324 = inst_19323;
                  var inst_19325 = 0;
                  var state_19360__$1 = function() {
                    var statearr_19363 = state_19360;
                    statearr_19363[7] = inst_19324;
                    statearr_19363[8] = inst_19325;
                    return statearr_19363;
                  }();
                  var statearr_19364_19392 = state_19360__$1;
                  statearr_19364_19392[2] = null;
                  statearr_19364_19392[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19361 === 4) {
                    var inst_19328 = state_19360[9];
                    var inst_19328__$1 = state_19360[2];
                    var inst_19329 = inst_19328__$1 == null;
                    var inst_19330 = cljs.core.not.call(null, inst_19329);
                    var state_19360__$1 = function() {
                      var statearr_19365 = state_19360;
                      statearr_19365[9] = inst_19328__$1;
                      return statearr_19365;
                    }();
                    if (inst_19330) {
                      var statearr_19366_19393 = state_19360__$1;
                      statearr_19366_19393[1] = 5;
                    } else {
                      var statearr_19367_19394 = state_19360__$1;
                      statearr_19367_19394[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19361 === 15) {
                      var inst_19350 = state_19360[2];
                      var state_19360__$1 = state_19360;
                      var statearr_19368_19395 = state_19360__$1;
                      statearr_19368_19395[2] = inst_19350;
                      statearr_19368_19395[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19361 === 13) {
                        var state_19360__$1 = state_19360;
                        var statearr_19369_19396 = state_19360__$1;
                        statearr_19369_19396[2] = null;
                        statearr_19369_19396[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19361 === 6) {
                          var inst_19325 = state_19360[8];
                          var inst_19346 = inst_19325 > 0;
                          var state_19360__$1 = state_19360;
                          if (cljs.core.truth_(inst_19346)) {
                            var statearr_19370_19397 = state_19360__$1;
                            statearr_19370_19397[1] = 12;
                          } else {
                            var statearr_19371_19398 = state_19360__$1;
                            statearr_19371_19398[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19361 === 3) {
                            var inst_19358 = state_19360[2];
                            var state_19360__$1 = state_19360;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19360__$1, inst_19358);
                          } else {
                            if (state_val_19361 === 12) {
                              var inst_19324 = state_19360[7];
                              var inst_19348 = cljs.core.vec.call(null, inst_19324);
                              var state_19360__$1 = state_19360;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19360__$1, 15, out, inst_19348);
                            } else {
                              if (state_val_19361 === 2) {
                                var state_19360__$1 = state_19360;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19360__$1, 4, ch);
                              } else {
                                if (state_val_19361 === 11) {
                                  var inst_19340 = state_19360[2];
                                  var inst_19341 = new Array(n);
                                  var inst_19324 = inst_19341;
                                  var inst_19325 = 0;
                                  var state_19360__$1 = function() {
                                    var statearr_19372 = state_19360;
                                    statearr_19372[10] = inst_19340;
                                    statearr_19372[7] = inst_19324;
                                    statearr_19372[8] = inst_19325;
                                    return statearr_19372;
                                  }();
                                  var statearr_19373_19399 = state_19360__$1;
                                  statearr_19373_19399[2] = null;
                                  statearr_19373_19399[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19361 === 9) {
                                    var inst_19324 = state_19360[7];
                                    var inst_19338 = cljs.core.vec.call(null, inst_19324);
                                    var state_19360__$1 = state_19360;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19360__$1, 11, out, inst_19338);
                                  } else {
                                    if (state_val_19361 === 5) {
                                      var inst_19333 = state_19360[11];
                                      var inst_19324 = state_19360[7];
                                      var inst_19325 = state_19360[8];
                                      var inst_19328 = state_19360[9];
                                      var inst_19332 = inst_19324[inst_19325] = inst_19328;
                                      var inst_19333__$1 = inst_19325 + 1;
                                      var inst_19334 = inst_19333__$1 < n;
                                      var state_19360__$1 = function() {
                                        var statearr_19374 = state_19360;
                                        statearr_19374[11] = inst_19333__$1;
                                        statearr_19374[12] = inst_19332;
                                        return statearr_19374;
                                      }();
                                      if (cljs.core.truth_(inst_19334)) {
                                        var statearr_19375_19400 = state_19360__$1;
                                        statearr_19375_19400[1] = 8;
                                      } else {
                                        var statearr_19376_19401 = state_19360__$1;
                                        statearr_19376_19401[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19361 === 14) {
                                        var inst_19353 = state_19360[2];
                                        var inst_19354 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_19360__$1 = function() {
                                          var statearr_19378 = state_19360;
                                          statearr_19378[13] = inst_19353;
                                          return statearr_19378;
                                        }();
                                        var statearr_19379_19402 = state_19360__$1;
                                        statearr_19379_19402[2] = inst_19354;
                                        statearr_19379_19402[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19361 === 10) {
                                          var inst_19344 = state_19360[2];
                                          var state_19360__$1 = state_19360;
                                          var statearr_19380_19403 = state_19360__$1;
                                          statearr_19380_19403[2] = inst_19344;
                                          statearr_19380_19403[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19361 === 8) {
                                            var inst_19333 = state_19360[11];
                                            var inst_19324 = state_19360[7];
                                            var tmp19377 = inst_19324;
                                            var inst_19324__$1 = tmp19377;
                                            var inst_19325 = inst_19333;
                                            var state_19360__$1 = function() {
                                              var statearr_19381 = state_19360;
                                              statearr_19381[7] = inst_19324__$1;
                                              statearr_19381[8] = inst_19325;
                                              return statearr_19381;
                                            }();
                                            var statearr_19382_19404 = state_19360__$1;
                                            statearr_19382_19404[2] = null;
                                            statearr_19382_19404[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___19390, out);
          return function(switch__12060__auto__, c__12125__auto___19390, out) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_19386 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19386[0] = state_machine__12061__auto__;
                statearr_19386[1] = 1;
                return statearr_19386;
              };
              var state_machine__12061__auto____1 = function(state_19360) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_19360);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e19387) {
                      if (e19387 instanceof Object) {
                        var ex__12064__auto__ = e19387;
                        var statearr_19388_19405 = state_19360;
                        statearr_19388_19405[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19360);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19387;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19406 = state_19360;
                    state_19360 = G__19406;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_19360) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_19360);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___19390, out);
        }();
        var state__12127__auto__ = function() {
          var statearr_19389 = f__12126__auto__.call(null);
          statearr_19389[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___19390;
          return statearr_19389;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___19390, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12125__auto___19549 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___19549, out) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___19549, out) {
            return function(state_19519) {
              var state_val_19520 = state_19519[1];
              if (state_val_19520 === 7) {
                var inst_19515 = state_19519[2];
                var state_19519__$1 = state_19519;
                var statearr_19521_19550 = state_19519__$1;
                statearr_19521_19550[2] = inst_19515;
                statearr_19521_19550[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19520 === 1) {
                  var inst_19478 = [];
                  var inst_19479 = inst_19478;
                  var inst_19480 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_19519__$1 = function() {
                    var statearr_19522 = state_19519;
                    statearr_19522[7] = inst_19480;
                    statearr_19522[8] = inst_19479;
                    return statearr_19522;
                  }();
                  var statearr_19523_19551 = state_19519__$1;
                  statearr_19523_19551[2] = null;
                  statearr_19523_19551[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19520 === 4) {
                    var inst_19483 = state_19519[9];
                    var inst_19483__$1 = state_19519[2];
                    var inst_19484 = inst_19483__$1 == null;
                    var inst_19485 = cljs.core.not.call(null, inst_19484);
                    var state_19519__$1 = function() {
                      var statearr_19524 = state_19519;
                      statearr_19524[9] = inst_19483__$1;
                      return statearr_19524;
                    }();
                    if (inst_19485) {
                      var statearr_19525_19552 = state_19519__$1;
                      statearr_19525_19552[1] = 5;
                    } else {
                      var statearr_19526_19553 = state_19519__$1;
                      statearr_19526_19553[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19520 === 15) {
                      var inst_19509 = state_19519[2];
                      var state_19519__$1 = state_19519;
                      var statearr_19527_19554 = state_19519__$1;
                      statearr_19527_19554[2] = inst_19509;
                      statearr_19527_19554[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19520 === 13) {
                        var state_19519__$1 = state_19519;
                        var statearr_19528_19555 = state_19519__$1;
                        statearr_19528_19555[2] = null;
                        statearr_19528_19555[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19520 === 6) {
                          var inst_19479 = state_19519[8];
                          var inst_19504 = inst_19479.length;
                          var inst_19505 = inst_19504 > 0;
                          var state_19519__$1 = state_19519;
                          if (cljs.core.truth_(inst_19505)) {
                            var statearr_19529_19556 = state_19519__$1;
                            statearr_19529_19556[1] = 12;
                          } else {
                            var statearr_19530_19557 = state_19519__$1;
                            statearr_19530_19557[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19520 === 3) {
                            var inst_19517 = state_19519[2];
                            var state_19519__$1 = state_19519;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19519__$1, inst_19517);
                          } else {
                            if (state_val_19520 === 12) {
                              var inst_19479 = state_19519[8];
                              var inst_19507 = cljs.core.vec.call(null, inst_19479);
                              var state_19519__$1 = state_19519;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19519__$1, 15, out, inst_19507);
                            } else {
                              if (state_val_19520 === 2) {
                                var state_19519__$1 = state_19519;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19519__$1, 4, ch);
                              } else {
                                if (state_val_19520 === 11) {
                                  var inst_19483 = state_19519[9];
                                  var inst_19487 = state_19519[10];
                                  var inst_19497 = state_19519[2];
                                  var inst_19498 = [];
                                  var inst_19499 = inst_19498.push(inst_19483);
                                  var inst_19479 = inst_19498;
                                  var inst_19480 = inst_19487;
                                  var state_19519__$1 = function() {
                                    var statearr_19531 = state_19519;
                                    statearr_19531[11] = inst_19497;
                                    statearr_19531[12] = inst_19499;
                                    statearr_19531[7] = inst_19480;
                                    statearr_19531[8] = inst_19479;
                                    return statearr_19531;
                                  }();
                                  var statearr_19532_19558 = state_19519__$1;
                                  statearr_19532_19558[2] = null;
                                  statearr_19532_19558[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19520 === 9) {
                                    var inst_19479 = state_19519[8];
                                    var inst_19495 = cljs.core.vec.call(null, inst_19479);
                                    var state_19519__$1 = state_19519;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19519__$1, 11, out, inst_19495);
                                  } else {
                                    if (state_val_19520 === 5) {
                                      var inst_19480 = state_19519[7];
                                      var inst_19483 = state_19519[9];
                                      var inst_19487 = state_19519[10];
                                      var inst_19487__$1 = f.call(null, inst_19483);
                                      var inst_19488 = cljs.core._EQ_.call(null, inst_19487__$1, inst_19480);
                                      var inst_19489 = cljs.core.keyword_identical_QMARK_.call(null, inst_19480, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_19490 = inst_19488 || inst_19489;
                                      var state_19519__$1 = function() {
                                        var statearr_19533 = state_19519;
                                        statearr_19533[10] = inst_19487__$1;
                                        return statearr_19533;
                                      }();
                                      if (cljs.core.truth_(inst_19490)) {
                                        var statearr_19534_19559 = state_19519__$1;
                                        statearr_19534_19559[1] = 8;
                                      } else {
                                        var statearr_19535_19560 = state_19519__$1;
                                        statearr_19535_19560[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19520 === 14) {
                                        var inst_19512 = state_19519[2];
                                        var inst_19513 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_19519__$1 = function() {
                                          var statearr_19537 = state_19519;
                                          statearr_19537[13] = inst_19512;
                                          return statearr_19537;
                                        }();
                                        var statearr_19538_19561 = state_19519__$1;
                                        statearr_19538_19561[2] = inst_19513;
                                        statearr_19538_19561[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19520 === 10) {
                                          var inst_19502 = state_19519[2];
                                          var state_19519__$1 = state_19519;
                                          var statearr_19539_19562 = state_19519__$1;
                                          statearr_19539_19562[2] = inst_19502;
                                          statearr_19539_19562[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19520 === 8) {
                                            var inst_19483 = state_19519[9];
                                            var inst_19487 = state_19519[10];
                                            var inst_19479 = state_19519[8];
                                            var inst_19492 = inst_19479.push(inst_19483);
                                            var tmp19536 = inst_19479;
                                            var inst_19479__$1 = tmp19536;
                                            var inst_19480 = inst_19487;
                                            var state_19519__$1 = function() {
                                              var statearr_19540 = state_19519;
                                              statearr_19540[14] = inst_19492;
                                              statearr_19540[7] = inst_19480;
                                              statearr_19540[8] = inst_19479__$1;
                                              return statearr_19540;
                                            }();
                                            var statearr_19541_19563 = state_19519__$1;
                                            statearr_19541_19563[2] = null;
                                            statearr_19541_19563[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___19549, out);
          return function(switch__12060__auto__, c__12125__auto___19549, out) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_19545 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19545[0] = state_machine__12061__auto__;
                statearr_19545[1] = 1;
                return statearr_19545;
              };
              var state_machine__12061__auto____1 = function(state_19519) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_19519);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e19546) {
                      if (e19546 instanceof Object) {
                        var ex__12064__auto__ = e19546;
                        var statearr_19547_19564 = state_19519;
                        statearr_19547_19564[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19519);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19546;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19565 = state_19519;
                    state_19519 = G__19565;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_19519) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_19519);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___19549, out);
        }();
        var state__12127__auto__ = function() {
          var statearr_19548 = f__12126__auto__.call(null);
          statearr_19548[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___19549;
          return statearr_19548;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___19549, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("clidget.widget");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
clidget.widget._STAR_context_STAR_ = null;
clidget.widget.get_widget_key = function get_widget_key(system, keys_binding) {
  return cljs.core.select_keys.call(null, system, cljs.core.map.call(null, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325), keys_binding));
};
clidget.widget.resolve_state = function resolve_state(system, keys_binding) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__3777__auto__ = function iter__15643(s__15644) {
      return new cljs.core.LazySeq(null, function() {
        var s__15644__$1 = s__15644;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__15644__$1);
          if (temp__4126__auto__) {
            var s__15644__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__15644__$2)) {
              var c__3775__auto__ = cljs.core.chunk_first.call(null, s__15644__$2);
              var size__3776__auto__ = cljs.core.count.call(null, c__3775__auto__);
              var b__15646 = cljs.core.chunk_buffer.call(null, size__3776__auto__);
              if (function() {
                var i__15645 = 0;
                while (true) {
                  if (i__15645 < size__3776__auto__) {
                    var map__15651 = cljs.core._nth.call(null, c__3775__auto__, i__15645);
                    var map__15651__$1 = cljs.core.seq_QMARK_.call(null, map__15651) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15651) : map__15651;
                    var atom_key = cljs.core.get.call(null, map__15651__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
                    var val_key = cljs.core.get.call(null, map__15651__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
                    cljs.core.chunk_append.call(null, b__15646, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [val_key, function() {
                      var or__3052__auto__ = cljs.core.get.call(null, system, val_key);
                      if (cljs.core.truth_(or__3052__auto__)) {
                        return or__3052__auto__;
                      } else {
                        var G__15652 = atom_key;
                        var G__15652__$1 = G__15652 == null ? null : cljs.core.get.call(null, system, G__15652);
                        var G__15652__$2 = G__15652__$1 == null ? null : cljs.core.deref.call(null, G__15652__$1);
                        return G__15652__$2;
                      }
                    }()], null));
                    var G__15655 = i__15645 + 1;
                    i__15645 = G__15655;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15646), iter__15643.call(null, cljs.core.chunk_rest.call(null, s__15644__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15646), null);
              }
            } else {
              var map__15653 = cljs.core.first.call(null, s__15644__$2);
              var map__15653__$1 = cljs.core.seq_QMARK_.call(null, map__15653) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15653) : map__15653;
              var atom_key = cljs.core.get.call(null, map__15653__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
              var val_key = cljs.core.get.call(null, map__15653__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [val_key, function() {
                var or__3052__auto__ = cljs.core.get.call(null, system, val_key);
                if (cljs.core.truth_(or__3052__auto__)) {
                  return or__3052__auto__;
                } else {
                  var G__15654 = atom_key;
                  var G__15654__$1 = G__15654 == null ? null : cljs.core.get.call(null, system, G__15654);
                  var G__15654__$2 = G__15654__$1 == null ? null : cljs.core.deref.call(null, G__15654__$1);
                  return G__15654__$2;
                }
              }()], null), iter__15643.call(null, cljs.core.rest.call(null, s__15644__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__3777__auto__.call(null, keys_binding);
  }());
};
clidget.widget.get_cached_widget = function get_cached_widget(p__15656, widget_key) {
  var map__15658 = p__15656;
  var map__15658__$1 = cljs.core.seq_QMARK_.call(null, map__15658) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15658) : map__15658;
  var _BANG_to_cache = cljs.core.get.call(null, map__15658__$1, new cljs.core.Keyword(null, "!to-cache", "!to-cache", 1995196812));
  var from_cache = cljs.core.get.call(null, map__15658__$1, new cljs.core.Keyword(null, "from-cache", "from-cache", 223356736));
  if (cljs.core.truth_(from_cache)) {
    var cached_widget = cljs.core.get.call(null, from_cache, widget_key);
    if (cljs.core.truth_(function() {
      var and__3040__auto__ = cached_widget;
      if (cljs.core.truth_(and__3040__auto__)) {
        return _BANG_to_cache;
      } else {
        return and__3040__auto__;
      }
    }())) {
      cljs.core.swap_BANG_.call(null, _BANG_to_cache, cljs.core.assoc, widget_key, cached_widget);
      return cached_widget;
    } else {
      return null;
    }
  } else {
    return null;
  }
};
clidget.widget.cache_widget_BANG_ = function cache_widget_BANG_(widget, _BANG_widget_cache, widget_key) {
  if (cljs.core.truth_(_BANG_widget_cache)) {
    return cljs.core.swap_BANG_.call(null, _BANG_widget_cache, cljs.core.assoc, widget_key, widget);
  } else {
    return null;
  }
};
clidget.widget.init_locals = function init_locals(system, locals_binding) {
  return cljs.core.reduce.call(null, function(system__$1, p__15661) {
    var vec__15662 = p__15661;
    var atom_key = cljs.core.nth.call(null, vec__15662, 0, null);
    var init_fn = cljs.core.nth.call(null, vec__15662, 1, null);
    return cljs.core.assoc.call(null, system__$1, atom_key, init_fn.call(null));
  }, system, locals_binding);
};
clidget.widget.add_watches = function add_watches(system, keys_binding, render_ch) {
  var seq__15671 = cljs.core.seq.call(null, keys_binding);
  var chunk__15672 = null;
  var count__15673 = 0;
  var i__15674 = 0;
  while (true) {
    if (i__15674 < count__15673) {
      var map__15675 = cljs.core._nth.call(null, chunk__15672, i__15674);
      var map__15675__$1 = cljs.core.seq_QMARK_.call(null, map__15675) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15675) : map__15675;
      var atom_key = cljs.core.get.call(null, map__15675__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
      var val_key = cljs.core.get.call(null, map__15675__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
      var temp__4126__auto___15679 = function() {
        var G__15676 = atom_key;
        var G__15676__$1 = G__15676 == null ? null : cljs.core.get.call(null, system, G__15676);
        return G__15676__$1;
      }();
      if (cljs.core.truth_(temp__4126__auto___15679)) {
        var watched_atom_15680 = temp__4126__auto___15679;
        cljs.core.add_watch.call(null, watched_atom_15680, cljs.core.gensym.call(null, "clidget"), function(seq__15671, chunk__15672, count__15673, i__15674, watched_atom_15680, temp__4126__auto___15679, map__15675, map__15675__$1, atom_key, val_key) {
          return function(_, ___$1, ___$2, new_value) {
            return cljs.core.async.put_BANG_.call(null, render_ch, cljs.core.assoc.call(null, system, val_key, new_value));
          };
        }(seq__15671, chunk__15672, count__15673, i__15674, watched_atom_15680, temp__4126__auto___15679, map__15675, map__15675__$1, atom_key, val_key));
      } else {
      }
      var G__15681 = seq__15671;
      var G__15682 = chunk__15672;
      var G__15683 = count__15673;
      var G__15684 = i__15674 + 1;
      seq__15671 = G__15681;
      chunk__15672 = G__15682;
      count__15673 = G__15683;
      i__15674 = G__15684;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__15671);
      if (temp__4126__auto__) {
        var seq__15671__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15671__$1)) {
          var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__15671__$1);
          var G__15685 = cljs.core.chunk_rest.call(null, seq__15671__$1);
          var G__15686 = c__3808__auto__;
          var G__15687 = cljs.core.count.call(null, c__3808__auto__);
          var G__15688 = 0;
          seq__15671 = G__15685;
          chunk__15672 = G__15686;
          count__15673 = G__15687;
          i__15674 = G__15688;
          continue;
        } else {
          var map__15677 = cljs.core.first.call(null, seq__15671__$1);
          var map__15677__$1 = cljs.core.seq_QMARK_.call(null, map__15677) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15677) : map__15677;
          var atom_key = cljs.core.get.call(null, map__15677__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
          var val_key = cljs.core.get.call(null, map__15677__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
          var temp__4126__auto___15689__$1 = function() {
            var G__15678 = atom_key;
            var G__15678__$1 = G__15678 == null ? null : cljs.core.get.call(null, system, G__15678);
            return G__15678__$1;
          }();
          if (cljs.core.truth_(temp__4126__auto___15689__$1)) {
            var watched_atom_15690 = temp__4126__auto___15689__$1;
            cljs.core.add_watch.call(null, watched_atom_15690, cljs.core.gensym.call(null, "clidget"), function(seq__15671, chunk__15672, count__15673, i__15674, watched_atom_15690, temp__4126__auto___15689__$1, map__15677, map__15677__$1, atom_key, val_key, seq__15671__$1, temp__4126__auto__) {
              return function(_, ___$1, ___$2, new_value) {
                return cljs.core.async.put_BANG_.call(null, render_ch, cljs.core.assoc.call(null, system, val_key, new_value));
              };
            }(seq__15671, chunk__15672, count__15673, i__15674, watched_atom_15690, temp__4126__auto___15689__$1, map__15677, map__15677__$1, atom_key, val_key, seq__15671__$1, temp__4126__auto__));
          } else {
          }
          var G__15691 = cljs.core.next.call(null, seq__15671__$1);
          var G__15692 = null;
          var G__15693 = 0;
          var G__15694 = 0;
          seq__15671 = G__15691;
          chunk__15672 = G__15692;
          count__15673 = G__15693;
          i__15674 = G__15694;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
clidget.widget.make_render_ch = function make_render_ch(render_widget_BANG_) {
  var ch = cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 1));
  var c__12125__auto___15753 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___15753, ch) {
    return function() {
      var f__12126__auto__ = function() {
        var switch__12060__auto__ = function(c__12125__auto___15753, ch) {
          return function(state_15736) {
            var state_val_15737 = state_15736[1];
            if (state_val_15737 === 7) {
              var inst_15732 = state_15736[2];
              var state_15736__$1 = state_15736;
              var statearr_15738_15754 = state_15736__$1;
              statearr_15738_15754[2] = inst_15732;
              statearr_15738_15754[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15737 === 6) {
                var state_15736__$1 = state_15736;
                var statearr_15739_15755 = state_15736__$1;
                statearr_15739_15755[2] = null;
                statearr_15739_15755[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15737 === 5) {
                  var inst_15726 = state_15736[7];
                  var inst_15728 = render_widget_BANG_.call(null, inst_15726);
                  var state_15736__$1 = function() {
                    var statearr_15740 = state_15736;
                    statearr_15740[8] = inst_15728;
                    return statearr_15740;
                  }();
                  var statearr_15741_15756 = state_15736__$1;
                  statearr_15741_15756[2] = null;
                  statearr_15741_15756[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15737 === 4) {
                    var inst_15726 = state_15736[7];
                    var inst_15726__$1 = state_15736[2];
                    var state_15736__$1 = function() {
                      var statearr_15742 = state_15736;
                      statearr_15742[7] = inst_15726__$1;
                      return statearr_15742;
                    }();
                    if (cljs.core.truth_(inst_15726__$1)) {
                      var statearr_15743_15757 = state_15736__$1;
                      statearr_15743_15757[1] = 5;
                    } else {
                      var statearr_15744_15758 = state_15736__$1;
                      statearr_15744_15758[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15737 === 3) {
                      var inst_15734 = state_15736[2];
                      var state_15736__$1 = state_15736;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15736__$1, inst_15734);
                    } else {
                      if (state_val_15737 === 2) {
                        var state_15736__$1 = state_15736;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15736__$1, 4, ch);
                      } else {
                        if (state_val_15737 === 1) {
                          var state_15736__$1 = state_15736;
                          var statearr_15745_15759 = state_15736__$1;
                          statearr_15745_15759[2] = null;
                          statearr_15745_15759[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12125__auto___15753, ch);
        return function(switch__12060__auto__, c__12125__auto___15753, ch) {
          return function() {
            var state_machine__12061__auto__ = null;
            var state_machine__12061__auto____0 = function() {
              var statearr_15749 = [null, null, null, null, null, null, null, null, null];
              statearr_15749[0] = state_machine__12061__auto__;
              statearr_15749[1] = 1;
              return statearr_15749;
            };
            var state_machine__12061__auto____1 = function(state_15736) {
              while (true) {
                var ret_value__12062__auto__ = function() {
                  try {
                    while (true) {
                      var result__12063__auto__ = switch__12060__auto__.call(null, state_15736);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12063__auto__;
                      }
                      break;
                    }
                  } catch (e15750) {
                    if (e15750 instanceof Object) {
                      var ex__12064__auto__ = e15750;
                      var statearr_15751_15760 = state_15736;
                      statearr_15751_15760[5] = ex__12064__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15736);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e15750;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15761 = state_15736;
                  state_15736 = G__15761;
                  continue;
                } else {
                  return ret_value__12062__auto__;
                }
                break;
              }
            };
            state_machine__12061__auto__ = function(state_15736) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12061__auto____0.call(this);
                case 1:
                  return state_machine__12061__auto____1.call(this, state_15736);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
            return state_machine__12061__auto__;
          }();
        }(switch__12060__auto__, c__12125__auto___15753, ch);
      }();
      var state__12127__auto__ = function() {
        var statearr_15752 = f__12126__auto__.call(null);
        statearr_15752[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___15753;
        return statearr_15752;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
    };
  }(c__12125__auto___15753, ch));
  return ch;
};
clidget.widget.re_render_widget = function re_render_widget(p__15763, widget_key, system, keys_binding, render_widget_fn) {
  var map__15768 = p__15763;
  var map__15768__$1 = cljs.core.seq_QMARK_.call(null, map__15768) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15768) : map__15768;
  var _BANG_parent_widget_cache = cljs.core.get.call(null, map__15768__$1, new cljs.core.Keyword(null, "!to-cache", "!to-cache", 1995196812));
  var _BANG_widget = cljs.core.atom.call(null, null);
  var _BANG_widget_cache = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var render_widget_BANG_ = function(_BANG_widget, _BANG_widget_cache, map__15768, map__15768__$1, _BANG_parent_widget_cache) {
    return function(system__$1) {
      var G__15769 = function() {
        var from_cache__10463__auto__ = cljs.core.deref.call(null, _BANG_widget_cache);
        var _STAR_context_STAR_15770 = clidget.widget._STAR_context_STAR_;
        try {
          clidget.widget._STAR_context_STAR_ = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "from-cache", "from-cache", 223356736), from_cache__10463__auto__, new cljs.core.Keyword(null, "!to-cache", "!to-cache", 1995196812), function() {
            var G__15771 = _BANG_widget_cache;
            cljs.core.reset_BANG_.call(null, G__15771, cljs.core.PersistentArrayMap.EMPTY);
            return G__15771;
          }()], null);
          return render_widget_fn.call(null, cljs.core.dissoc.call(null, cljs.core.merge.call(null, system__$1, clidget.widget.resolve_state.call(null, system__$1, keys_binding)), new cljs.core.Keyword("clidget", "widget-key", "clidget/widget-key", -879111104), new cljs.core.Keyword("clidget", "widget-type", "clidget/widget-type", 981736725)));
        } finally {
          clidget.widget._STAR_context_STAR_ = _STAR_context_STAR_15770;
        }
      }();
      clidget.widget.cache_widget_BANG_.call(null, G__15769, _BANG_parent_widget_cache, widget_key);
      (function(G__15769, _BANG_widget, _BANG_widget_cache, map__15768, map__15768__$1, _BANG_parent_widget_cache) {
        return function(p1__15762_SHARP_) {
          var temp__4126__auto__ = cljs.core.deref.call(null, _BANG_widget);
          if (cljs.core.truth_(temp__4126__auto__)) {
            var current_widget = temp__4126__auto__;
            return current_widget.parentNode.replaceChild(p1__15762_SHARP_, current_widget);
          } else {
            return null;
          }
        };
      })(G__15769, _BANG_widget, _BANG_widget_cache, map__15768, map__15768__$1, _BANG_parent_widget_cache).call(null, G__15769);
      cljs.core.reset_BANG_.call(null, _BANG_widget, G__15769);
      return G__15769;
    };
  }(_BANG_widget, _BANG_widget_cache, map__15768, map__15768__$1, _BANG_parent_widget_cache);
  var render_ch = clidget.widget.make_render_ch.call(null, render_widget_BANG_);
  clidget.widget.add_watches.call(null, system, keys_binding, render_ch);
  return cljs.core.reset_BANG_.call(null, _BANG_widget, render_widget_BANG_.call(null, system));
};
clidget.widget.updated_widget = function updated_widget(system, keys_binding, locals_binding, render_widget_fn) {
  var widget_key = clidget.widget.get_widget_key.call(null, system, keys_binding);
  var or__3052__auto__ = clidget.widget.get_cached_widget.call(null, clidget.widget._STAR_context_STAR_, widget_key);
  if (cljs.core.truth_(or__3052__auto__)) {
    return or__3052__auto__;
  } else {
    return clidget.widget.re_render_widget.call(null, clidget.widget._STAR_context_STAR_, widget_key, clidget.widget.init_locals.call(null, system, locals_binding), keys_binding, render_widget_fn);
  }
};
goog.provide("chord.channels");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async");
chord.channels.read_from_ws_BANG_ = function read_from_ws_BANG_(ws, ch) {
  return ws.onmessage = function(ev) {
    var message = ev.data;
    return cljs.core.async.put_BANG_.call(null, ch, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message", "message", -406056002), message], null));
  };
};
chord.channels.write_to_ws_BANG_ = function write_to_ws_BANG_(ws, ch) {
  var c__12125__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto__) {
    return function() {
      var f__12126__auto__ = function() {
        var switch__12060__auto__ = function(c__12125__auto__) {
          return function(state_21006) {
            var state_val_21007 = state_21006[1];
            if (state_val_21007 === 7) {
              var inst_21002 = state_21006[2];
              var state_21006__$1 = state_21006;
              var statearr_21008_21023 = state_21006__$1;
              statearr_21008_21023[2] = inst_21002;
              statearr_21008_21023[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21007 === 6) {
                var state_21006__$1 = state_21006;
                var statearr_21009_21024 = state_21006__$1;
                statearr_21009_21024[2] = null;
                statearr_21009_21024[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21007 === 5) {
                  var inst_20996 = state_21006[7];
                  var inst_20998 = ws.send(inst_20996);
                  var state_21006__$1 = function() {
                    var statearr_21010 = state_21006;
                    statearr_21010[8] = inst_20998;
                    return statearr_21010;
                  }();
                  var statearr_21011_21025 = state_21006__$1;
                  statearr_21011_21025[2] = null;
                  statearr_21011_21025[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21007 === 4) {
                    var inst_20996 = state_21006[7];
                    var inst_20996__$1 = state_21006[2];
                    var state_21006__$1 = function() {
                      var statearr_21012 = state_21006;
                      statearr_21012[7] = inst_20996__$1;
                      return statearr_21012;
                    }();
                    if (cljs.core.truth_(inst_20996__$1)) {
                      var statearr_21013_21026 = state_21006__$1;
                      statearr_21013_21026[1] = 5;
                    } else {
                      var statearr_21014_21027 = state_21006__$1;
                      statearr_21014_21027[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21007 === 3) {
                      var inst_21004 = state_21006[2];
                      var state_21006__$1 = state_21006;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21006__$1, inst_21004);
                    } else {
                      if (state_val_21007 === 2) {
                        var state_21006__$1 = state_21006;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21006__$1, 4, ch);
                      } else {
                        if (state_val_21007 === 1) {
                          var state_21006__$1 = state_21006;
                          var statearr_21015_21028 = state_21006__$1;
                          statearr_21015_21028[2] = null;
                          statearr_21015_21028[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12125__auto__);
        return function(switch__12060__auto__, c__12125__auto__) {
          return function() {
            var state_machine__12061__auto__ = null;
            var state_machine__12061__auto____0 = function() {
              var statearr_21019 = [null, null, null, null, null, null, null, null, null];
              statearr_21019[0] = state_machine__12061__auto__;
              statearr_21019[1] = 1;
              return statearr_21019;
            };
            var state_machine__12061__auto____1 = function(state_21006) {
              while (true) {
                var ret_value__12062__auto__ = function() {
                  try {
                    while (true) {
                      var result__12063__auto__ = switch__12060__auto__.call(null, state_21006);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12063__auto__;
                      }
                      break;
                    }
                  } catch (e21020) {
                    if (e21020 instanceof Object) {
                      var ex__12064__auto__ = e21020;
                      var statearr_21021_21029 = state_21006;
                      statearr_21021_21029[5] = ex__12064__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21006);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e21020;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21030 = state_21006;
                  state_21006 = G__21030;
                  continue;
                } else {
                  return ret_value__12062__auto__;
                }
                break;
              }
            };
            state_machine__12061__auto__ = function(state_21006) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12061__auto____0.call(this);
                case 1:
                  return state_machine__12061__auto____1.call(this, state_21006);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
            return state_machine__12061__auto__;
          }();
        }(switch__12060__auto__, c__12125__auto__);
      }();
      var state__12127__auto__ = function() {
        var statearr_21022 = f__12126__auto__.call(null);
        statearr_21022[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto__;
        return statearr_21022;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
    };
  }(c__12125__auto__));
  return c__12125__auto__;
};
chord.channels.bidi_ch = function() {
  var bidi_ch__delegate = function(read_ch, write_ch, p__21031) {
    var vec__21037 = p__21031;
    var map__21038 = cljs.core.nth.call(null, vec__21037, 0, null);
    var map__21038__$1 = cljs.core.seq_QMARK_.call(null, map__21038) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21038) : map__21038;
    var on_close = cljs.core.get.call(null, map__21038__$1, new cljs.core.Keyword(null, "on-close", "on-close", -761178394));
    if (typeof chord.channels.t21039 !== "undefined") {
    } else {
      chord.channels.t21039 = function(on_close, map__21038, vec__21037, p__21031, write_ch, read_ch, bidi_ch, meta21040) {
        this.on_close = on_close;
        this.map__21038 = map__21038;
        this.vec__21037 = vec__21037;
        this.p__21031 = p__21031;
        this.write_ch = write_ch;
        this.read_ch = read_ch;
        this.bidi_ch = bidi_ch;
        this.meta21040 = meta21040;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      chord.channels.t21039.cljs$lang$type = true;
      chord.channels.t21039.cljs$lang$ctorStr = "chord.channels/t21039";
      chord.channels.t21039.cljs$lang$ctorPrWriter = function(vec__21037, map__21038, map__21038__$1, on_close) {
        return function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
          return cljs.core._write.call(null, writer__3620__auto__, "chord.channels/t21039");
        };
      }(vec__21037, map__21038, map__21038__$1, on_close);
      chord.channels.t21039.prototype.cljs$core$async$impl$protocols$Channel$ = true;
      chord.channels.t21039.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(vec__21037, map__21038, map__21038__$1, on_close) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.async.impl.protocols.close_BANG_.call(null, self__.read_ch);
          cljs.core.async.impl.protocols.close_BANG_.call(null, self__.write_ch);
          if (cljs.core.truth_(self__.on_close)) {
            return self__.on_close.call(null);
          } else {
            return null;
          }
        };
      }(vec__21037, map__21038, map__21038__$1, on_close);
      chord.channels.t21039.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
      chord.channels.t21039.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(vec__21037, map__21038, map__21038__$1, on_close) {
        return function(_, msg, handler) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.write_ch, msg, handler);
        };
      }(vec__21037, map__21038, map__21038__$1, on_close);
      chord.channels.t21039.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
      chord.channels.t21039.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(vec__21037, map__21038, map__21038__$1, on_close) {
        return function(_, handler) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.read_ch, handler);
        };
      }(vec__21037, map__21038, map__21038__$1, on_close);
      chord.channels.t21039.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__21037, map__21038, map__21038__$1, on_close) {
        return function(_21041) {
          var self__ = this;
          var _21041__$1 = this;
          return self__.meta21040;
        };
      }(vec__21037, map__21038, map__21038__$1, on_close);
      chord.channels.t21039.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__21037, map__21038, map__21038__$1, on_close) {
        return function(_21041, meta21040__$1) {
          var self__ = this;
          var _21041__$1 = this;
          return new chord.channels.t21039(self__.on_close, self__.map__21038, self__.vec__21037, self__.p__21031, self__.write_ch, self__.read_ch, self__.bidi_ch, meta21040__$1);
        };
      }(vec__21037, map__21038, map__21038__$1, on_close);
      chord.channels.__GT_t21039 = function(vec__21037, map__21038, map__21038__$1, on_close) {
        return function __GT_t21039(on_close__$1, map__21038__$2, vec__21037__$1, p__21031__$1, write_ch__$1, read_ch__$1, bidi_ch__$1, meta21040) {
          return new chord.channels.t21039(on_close__$1, map__21038__$2, vec__21037__$1, p__21031__$1, write_ch__$1, read_ch__$1, bidi_ch__$1, meta21040);
        };
      }(vec__21037, map__21038, map__21038__$1, on_close);
    }
    return new chord.channels.t21039(on_close, map__21038__$1, vec__21037, p__21031, write_ch, read_ch, bidi_ch, null);
  };
  var bidi_ch = function(read_ch, write_ch, var_args) {
    var p__21031 = null;
    if (arguments.length > 2) {
      p__21031 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return bidi_ch__delegate.call(this, read_ch, write_ch, p__21031);
  };
  bidi_ch.cljs$lang$maxFixedArity = 2;
  bidi_ch.cljs$lang$applyTo = function(arglist__21042) {
    var read_ch = cljs.core.first(arglist__21042);
    arglist__21042 = cljs.core.next(arglist__21042);
    var write_ch = cljs.core.first(arglist__21042);
    var p__21031 = cljs.core.rest(arglist__21042);
    return bidi_ch__delegate(read_ch, write_ch, p__21031);
  };
  bidi_ch.cljs$core$IFn$_invoke$arity$variadic = bidi_ch__delegate;
  return bidi_ch;
}();
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj21044 = {};
  return obj21044;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3040__auto__ = reader;
    if (and__3040__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__3679__auto__ = reader == null ? null : reader;
    return function() {
      var or__3052__auto__ = cljs.reader.read_char[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.reader.read_char["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3040__auto__ = reader;
    if (and__3040__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__3679__auto__ = reader == null ? null : reader;
    return function() {
      var or__3052__auto__ = cljs.reader.unread[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.reader.unread["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
  return cljs.core._write.call(null, writer__3620__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3052__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3052__auto__)) {
    return or__3052__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__21045) {
    var rdr = cljs.core.first(arglist__21045);
    var msg = cljs.core.rest(arglist__21045);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3040__auto__ = !(ch === "#");
  if (and__3040__auto__) {
    var and__3040__auto____$1 = !(ch === "'");
    if (and__3040__auto____$1) {
      var and__3040__auto____$2 = !(ch === ":");
      if (and__3040__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3040__auto____$2;
      }
    } else {
      return and__3040__auto____$1;
    }
  } else {
    return and__3040__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__21046 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__21047 = cljs.reader.read_char.call(null, rdr);
      sb = G__21046;
      ch = G__21047;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var zero = groups[2];
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : new cljs.core.Keyword(null, "else", "else", -1508377146) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__21048 = cljs.reader.read_char.call(null, rdr);
      ch = G__21048;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__21049 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__21049;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__21050 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__21050;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3052__auto__ = ch == null;
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3052__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__21051 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__21052 = cljs.reader.read_char.call(null, reader);
      buffer = G__21051;
      ch = G__21052;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__21053 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__21054 = cljs.reader.read_char.call(null, reader);
        buffer = G__21053;
        ch = G__21054;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", -1987822328)) {
            var G__21055 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__21056 = cljs.reader.read_char.call(null, reader);
            buffer = G__21055;
            ch = G__21056;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__21061 = function() {
            var G__21059 = buffer;
            G__21059.append(nch);
            return G__21059;
          }();
          var G__21062 = cljs.reader.read_char.call(null, reader);
          buffer = G__21061;
          ch = G__21062;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var G__21063 = function() {
              var G__21060 = buffer;
              G__21060.append(ch);
              return G__21060;
            }();
            var G__21064 = cljs.reader.read_char.call(null, reader);
            buffer = G__21063;
            ch = G__21064;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__21066 = o;
    if (G__21066) {
      var bit__3702__auto__ = G__21066.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__3702__auto__ || G__21066.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__21066.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__21066);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__21066);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__21067 = reader;
        var G__21068 = eof_is_error;
        var G__21069 = sentinel;
        var G__21070 = is_recursive;
        reader = G__21067;
        eof_is_error = G__21068;
        sentinel = G__21069;
        is_recursive = G__21070;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__21071 = cljs.reader.read_comment.call(null, reader, ch);
          var G__21072 = eof_is_error;
          var G__21073 = sentinel;
          var G__21074 = is_recursive;
          reader = G__21071;
          eof_is_error = G__21072;
          sentinel = G__21073;
          is_recursive = G__21074;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", -1508377146) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__21075 = reader;
              var G__21076 = eof_is_error;
              var G__21077 = sentinel;
              var G__21078 = is_recursive;
              reader = G__21075;
              eof_is_error = G__21076;
              sentinel = G__21077;
              is_recursive = G__21078;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__21079 = b.append("0");
            b = G__21079;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__21081 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__21081, 0, null);
  var years = cljs.core.nth.call(null, vec__21081, 1, null);
  var months = cljs.core.nth.call(null, vec__21081, 2, null);
  var days = cljs.core.nth.call(null, vec__21081, 3, null);
  var hours = cljs.core.nth.call(null, vec__21081, 4, null);
  var minutes = cljs.core.nth.call(null, vec__21081, 5, null);
  var seconds = cljs.core.nth.call(null, vec__21081, 6, null);
  var fraction = cljs.core.nth.call(null, vec__21081, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__21081, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__21081, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__21081, 10, null);
  var v = vec__21081;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3052__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3052__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3052__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3052__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3052__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3052__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3052__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3052__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__21083 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__21083, 0, null);
    var months = cljs.core.nth.call(null, vec__21083, 1, null);
    var days = cljs.core.nth.call(null, vec__21083, 2, null);
    var hours = cljs.core.nth.call(null, vec__21083, 3, null);
    var minutes = cljs.core.nth.call(null, vec__21083, 4, null);
    var seconds = cljs.core.nth.call(null, vec__21083, 5, null);
    var ms = cljs.core.nth.call(null, vec__21083, 6, null);
    var offset = cljs.core.nth.call(null, vec__21083, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__21096_21108 = cljs.core.seq.call(null, form);
    var chunk__21097_21109 = null;
    var count__21098_21110 = 0;
    var i__21099_21111 = 0;
    while (true) {
      if (i__21099_21111 < count__21098_21110) {
        var x_21112 = cljs.core._nth.call(null, chunk__21097_21109, i__21099_21111);
        arr.push(x_21112);
        var G__21113 = seq__21096_21108;
        var G__21114 = chunk__21097_21109;
        var G__21115 = count__21098_21110;
        var G__21116 = i__21099_21111 + 1;
        seq__21096_21108 = G__21113;
        chunk__21097_21109 = G__21114;
        count__21098_21110 = G__21115;
        i__21099_21111 = G__21116;
        continue;
      } else {
        var temp__4126__auto___21117 = cljs.core.seq.call(null, seq__21096_21108);
        if (temp__4126__auto___21117) {
          var seq__21096_21118__$1 = temp__4126__auto___21117;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21096_21118__$1)) {
            var c__3808__auto___21119 = cljs.core.chunk_first.call(null, seq__21096_21118__$1);
            var G__21120 = cljs.core.chunk_rest.call(null, seq__21096_21118__$1);
            var G__21121 = c__3808__auto___21119;
            var G__21122 = cljs.core.count.call(null, c__3808__auto___21119);
            var G__21123 = 0;
            seq__21096_21108 = G__21120;
            chunk__21097_21109 = G__21121;
            count__21098_21110 = G__21122;
            i__21099_21111 = G__21123;
            continue;
          } else {
            var x_21124 = cljs.core.first.call(null, seq__21096_21118__$1);
            arr.push(x_21124);
            var G__21125 = cljs.core.next.call(null, seq__21096_21118__$1);
            var G__21126 = null;
            var G__21127 = 0;
            var G__21128 = 0;
            seq__21096_21108 = G__21125;
            chunk__21097_21109 = G__21126;
            count__21098_21110 = G__21127;
            i__21099_21111 = G__21128;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj21101 = {};
        return obj21101;
      }();
      var seq__21102_21129 = cljs.core.seq.call(null, form);
      var chunk__21103_21130 = null;
      var count__21104_21131 = 0;
      var i__21105_21132 = 0;
      while (true) {
        if (i__21105_21132 < count__21104_21131) {
          var vec__21106_21133 = cljs.core._nth.call(null, chunk__21103_21130, i__21105_21132);
          var k_21134 = cljs.core.nth.call(null, vec__21106_21133, 0, null);
          var v_21135 = cljs.core.nth.call(null, vec__21106_21133, 1, null);
          obj[cljs.core.name.call(null, k_21134)] = v_21135;
          var G__21136 = seq__21102_21129;
          var G__21137 = chunk__21103_21130;
          var G__21138 = count__21104_21131;
          var G__21139 = i__21105_21132 + 1;
          seq__21102_21129 = G__21136;
          chunk__21103_21130 = G__21137;
          count__21104_21131 = G__21138;
          i__21105_21132 = G__21139;
          continue;
        } else {
          var temp__4126__auto___21140 = cljs.core.seq.call(null, seq__21102_21129);
          if (temp__4126__auto___21140) {
            var seq__21102_21141__$1 = temp__4126__auto___21140;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__21102_21141__$1)) {
              var c__3808__auto___21142 = cljs.core.chunk_first.call(null, seq__21102_21141__$1);
              var G__21143 = cljs.core.chunk_rest.call(null, seq__21102_21141__$1);
              var G__21144 = c__3808__auto___21142;
              var G__21145 = cljs.core.count.call(null, c__3808__auto___21142);
              var G__21146 = 0;
              seq__21102_21129 = G__21143;
              chunk__21103_21130 = G__21144;
              count__21104_21131 = G__21145;
              i__21105_21132 = G__21146;
              continue;
            } else {
              var vec__21107_21147 = cljs.core.first.call(null, seq__21102_21141__$1);
              var k_21148 = cljs.core.nth.call(null, vec__21107_21147, 0, null);
              var v_21149 = cljs.core.nth.call(null, vec__21107_21147, 1, null);
              obj[cljs.core.name.call(null, k_21148)] = v_21149;
              var G__21150 = cljs.core.next.call(null, seq__21102_21141__$1);
              var G__21151 = null;
              var G__21152 = 0;
              var G__21153 = 0;
              seq__21102_21129 = G__21150;
              chunk__21103_21130 = G__21151;
              count__21104_21131 = G__21152;
              i__21105_21132 = G__21153;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__20959) {
    var vec__20960 = p__20959;
    var k = cljs.core.nth.call(null, vec__20960, 0, null);
    var v = cljs.core.nth.call(null, vec__20960, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__20963) {
    var vec__20964 = p__20963;
    var k = cljs.core.nth.call(null, vec__20964, 0, null);
    var v = cljs.core.nth.call(null, vec__20964, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("chord.format");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
chord.format.try_read = function try_read(read_fn) {
  return function(p__20949) {
    var map__20950 = p__20949;
    var map__20950__$1 = cljs.core.seq_QMARK_.call(null, map__20950) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20950) : map__20950;
    var data = map__20950__$1;
    var message = cljs.core.get.call(null, map__20950__$1, new cljs.core.Keyword(null, "message", "message", -406056002));
    var error = cljs.core.get.call(null, map__20950__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
    if (cljs.core.truth_(error)) {
      return data;
    } else {
      try {
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message", "message", -406056002), read_fn.call(null, message)], null);
      } catch (e20951) {
        if (e20951 instanceof Error) {
          var e = e20951;
          return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "invalid-format", "invalid-format", -72676108), new cljs.core.Keyword(null, "cause", "cause", 231901252), e, new cljs.core.Keyword(null, "invalid-msg", "invalid-msg", -1474361625), message], null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            throw e20951;
          } else {
            return null;
          }
        }
      }
    }
  };
};
chord.format.wrap_format = function() {
  var method_table__3918__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__3919__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__3920__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__3921__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__3922__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("wrap-format", function(method_table__3918__auto__, prefer_table__3919__auto__, method_cache__3920__auto__, cached_hierarchy__3921__auto__, hierarchy__3922__auto__) {
    return function(chs, format) {
      return format;
    };
  }(method_table__3918__auto__, prefer_table__3919__auto__, method_cache__3920__auto__, cached_hierarchy__3921__auto__, hierarchy__3922__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__3922__auto__, method_table__3918__auto__, prefer_table__3919__auto__, method_cache__3920__auto__, cached_hierarchy__3921__auto__);
}();
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "edn", "edn", 1317840885), function(p__20952, _) {
  var map__20953 = p__20952;
  var map__20953__$1 = cljs.core.seq_QMARK_.call(null, map__20953) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20953) : map__20953;
  var write_ch = cljs.core.get.call(null, map__20953__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
  var read_ch = cljs.core.get.call(null, map__20953__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), cljs.core.async.map_LT_.call(null, chord.format.try_read.call(null, cljs.reader.read_string), read_ch), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), cljs.core.async.map_GT_.call(null, cljs.core.pr_str, write_ch)], null);
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "json", "json", 1279968570), function(p__20954, _) {
  var map__20955 = p__20954;
  var map__20955__$1 = cljs.core.seq_QMARK_.call(null, map__20955) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20955) : map__20955;
  var write_ch = cljs.core.get.call(null, map__20955__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
  var read_ch = cljs.core.get.call(null, map__20955__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), cljs.core.async.map_LT_.call(null, chord.format.try_read.call(null, cljs.core.comp.call(null, cljs.core.js__GT_clj, JSON.parse)), read_ch), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), cljs.core.async.map_GT_.call(null, cljs.core.comp.call(null, JSON.stringify, cljs.core.clj__GT_js), write_ch)], null);
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "json-kw", "json-kw", 341203175), function(chs, _) {
  return cljs.core.update_in.call(null, chord.format.wrap_format.call(null, chs, new cljs.core.Keyword(null, "json", "json", 1279968570)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414)], null), function(p1__20956_SHARP_) {
    return cljs.core.async.map_LT_.call(null, clojure.walk.keywordize_keys, p1__20956_SHARP_);
  });
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "str", "str", 1089608819), function(chs, _) {
  return chs;
});
cljs.core._add_method.call(null, chord.format.wrap_format, null, function(chs, _) {
  return chord.format.wrap_format.call(null, chs, new cljs.core.Keyword(null, "edn", "edn", 1317840885));
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "default", "default", -1987822328), function(chs, format) {
  throw "ERROR: Invalid Chord channel format: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(format);
});
goog.provide("chord.client");
goog.require("cljs.core");
goog.require("chord.channels");
goog.require("cljs.core.async");
goog.require("chord.format");
goog.require("chord.format");
goog.require("chord.channels");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
chord.client.on_close = function() {
  var on_close__delegate = function(ws, read_ch, write_ch, p__20529) {
    var vec__20602 = p__20529;
    var err_meta_channel = cljs.core.nth.call(null, vec__20602, 0, null);
    return ws.onclose = function(vec__20602, err_meta_channel) {
      return function(ev) {
        var c__12125__auto__ = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto__, vec__20602, err_meta_channel) {
          return function() {
            var f__12126__auto__ = function() {
              var switch__12060__auto__ = function(c__12125__auto__, vec__20602, err_meta_channel) {
                return function(state_20641) {
                  var state_val_20642 = state_20641[1];
                  if (state_val_20642 === 7) {
                    var inst_20637 = state_20641[2];
                    var inst_20638 = cljs.core.async.close_BANG_.call(null, read_ch);
                    var inst_20639 = cljs.core.async.close_BANG_.call(null, write_ch);
                    var state_20641__$1 = function() {
                      var statearr_20643 = state_20641;
                      statearr_20643[7] = inst_20637;
                      statearr_20643[8] = inst_20638;
                      return statearr_20643;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20641__$1, inst_20639);
                  } else {
                    if (state_val_20642 === 1) {
                      var inst_20603 = state_20641[9];
                      var inst_20603__$1 = ws.error_seen;
                      var state_20641__$1 = function() {
                        var statearr_20644 = state_20641;
                        statearr_20644[9] = inst_20603__$1;
                        return statearr_20644;
                      }();
                      if (cljs.core.truth_(inst_20603__$1)) {
                        var statearr_20645_20674 = state_20641__$1;
                        statearr_20645_20674[1] = 2;
                      } else {
                        var statearr_20646_20675 = state_20641__$1;
                        statearr_20646_20675[1] = 3;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20642 === 4) {
                        var inst_20609 = state_20641[2];
                        var state_20641__$1 = state_20641;
                        if (cljs.core.truth_(inst_20609)) {
                          var statearr_20647_20676 = state_20641__$1;
                          statearr_20647_20676[1] = 5;
                        } else {
                          var statearr_20648_20677 = state_20641__$1;
                          statearr_20648_20677[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20642 === 6) {
                          var state_20641__$1 = state_20641;
                          var statearr_20649_20678 = state_20641__$1;
                          statearr_20649_20678[2] = null;
                          statearr_20649_20678[1] = 7;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20642 === 3) {
                            var inst_20606 = ev.wasClean;
                            var inst_20607 = cljs.core.not.call(null, inst_20606);
                            var state_20641__$1 = state_20641;
                            var statearr_20650_20679 = state_20641__$1;
                            statearr_20650_20679[2] = inst_20607;
                            statearr_20650_20679[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20642 === 12) {
                              var inst_20634 = state_20641[2];
                              var state_20641__$1 = state_20641;
                              var statearr_20651_20680 = state_20641__$1;
                              statearr_20651_20680[2] = inst_20634;
                              statearr_20651_20680[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20642 === 2) {
                                var inst_20603 = state_20641[9];
                                var state_20641__$1 = state_20641;
                                var statearr_20652_20681 = state_20641__$1;
                                statearr_20652_20681[2] = inst_20603;
                                statearr_20652_20681[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20642 === 11) {
                                  var inst_20629 = state_20641[2];
                                  var state_20641__$1 = state_20641;
                                  var statearr_20653_20682 = state_20641__$1;
                                  statearr_20653_20682[2] = inst_20629;
                                  statearr_20653_20682[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20642 === 9) {
                                    var state_20641__$1 = state_20641;
                                    var statearr_20654_20683 = state_20641__$1;
                                    statearr_20654_20683[2] = null;
                                    statearr_20654_20683[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20642 === 5) {
                                      var inst_20611 = [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "wasClean", "wasClean", -1404940601)];
                                      var inst_20612 = ev.reason;
                                      var inst_20613 = ev.code;
                                      var inst_20614 = ev.wasClean;
                                      var inst_20615 = [inst_20612, inst_20613, inst_20614];
                                      var inst_20616 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_20611, inst_20615);
                                      var state_20641__$1 = function() {
                                        var statearr_20655 = state_20641;
                                        statearr_20655[10] = inst_20616;
                                        return statearr_20655;
                                      }();
                                      if (cljs.core.truth_(err_meta_channel)) {
                                        var statearr_20656_20684 = state_20641__$1;
                                        statearr_20656_20684[1] = 8;
                                      } else {
                                        var statearr_20657_20685 = state_20641__$1;
                                        statearr_20657_20685[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20642 === 10) {
                                        var inst_20616 = state_20641[10];
                                        var inst_20632 = state_20641[2];
                                        var state_20641__$1 = function() {
                                          var statearr_20658 = state_20641;
                                          statearr_20658[11] = inst_20632;
                                          return statearr_20658;
                                        }();
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20641__$1, 12, read_ch, inst_20616);
                                      } else {
                                        if (state_val_20642 === 8) {
                                          var inst_20603 = state_20641[9];
                                          var inst_20616 = state_20641[10];
                                          var inst_20621 = cljs.core.async.chan.call(null, 1);
                                          var inst_20622 = function() {
                                            var c__12125__auto____$1 = inst_20621;
                                            var error_desc = inst_20616;
                                            var error_seen_QMARK_ = inst_20603;
                                            return function(c__12125__auto____$1, error_desc, error_seen_QMARK_, inst_20603, inst_20616, inst_20621, state_val_20642, c__12125__auto__, vec__20602, err_meta_channel) {
                                              return function() {
                                                var f__12126__auto__ = function() {
                                                  var switch__12060__auto__ = function(c__12125__auto____$1, error_desc, error_seen_QMARK_, inst_20603, inst_20616, inst_20621, state_val_20642, c__12125__auto__, vec__20602, err_meta_channel) {
                                                    return function(state_20619) {
                                                      var state_val_20620 = state_20619[1];
                                                      if (state_val_20620 === 1) {
                                                        var state_20619__$1 = state_20619;
                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20619__$1, error_desc);
                                                      } else {
                                                        return null;
                                                      }
                                                    };
                                                  }(c__12125__auto____$1, error_desc, error_seen_QMARK_, inst_20603, inst_20616, inst_20621, state_val_20642, c__12125__auto__, vec__20602, err_meta_channel);
                                                  return function(switch__12060__auto__, c__12125__auto____$1, error_desc, error_seen_QMARK_, inst_20603, inst_20616, inst_20621, state_val_20642, c__12125__auto__, vec__20602, err_meta_channel) {
                                                    return function() {
                                                      var state_machine__12061__auto__ = null;
                                                      var state_machine__12061__auto____0 = function() {
                                                        var statearr_20662 = [null, null, null, null, null, null, null];
                                                        statearr_20662[0] = state_machine__12061__auto__;
                                                        statearr_20662[1] = 1;
                                                        return statearr_20662;
                                                      };
                                                      var state_machine__12061__auto____1 = function(state_20619) {
                                                        while (true) {
                                                          var ret_value__12062__auto__ = function() {
                                                            try {
                                                              while (true) {
                                                                var result__12063__auto__ = switch__12060__auto__.call(null, state_20619);
                                                                if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                                  continue;
                                                                } else {
                                                                  return result__12063__auto__;
                                                                }
                                                                break;
                                                              }
                                                            } catch (e20663) {
                                                              if (e20663 instanceof Object) {
                                                                var ex__12064__auto__ = e20663;
                                                                var statearr_20664_20686 = state_20619;
                                                                statearr_20664_20686[5] = ex__12064__auto__;
                                                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20619);
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                                                  throw e20663;
                                                                } else {
                                                                  return null;
                                                                }
                                                              }
                                                            }
                                                          }();
                                                          if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                            var G__20687 = state_20619;
                                                            state_20619 = G__20687;
                                                            continue;
                                                          } else {
                                                            return ret_value__12062__auto__;
                                                          }
                                                          break;
                                                        }
                                                      };
                                                      state_machine__12061__auto__ = function(state_20619) {
                                                        switch(arguments.length) {
                                                          case 0:
                                                            return state_machine__12061__auto____0.call(this);
                                                          case 1:
                                                            return state_machine__12061__auto____1.call(this, state_20619);
                                                        }
                                                        throw new Error("Invalid arity: " + arguments.length);
                                                      };
                                                      state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
                                                      state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
                                                      return state_machine__12061__auto__;
                                                    }();
                                                  }(switch__12060__auto__, c__12125__auto____$1, error_desc, error_seen_QMARK_, inst_20603, inst_20616, inst_20621, state_val_20642, c__12125__auto__, vec__20602, err_meta_channel);
                                                }();
                                                var state__12127__auto__ = function() {
                                                  var statearr_20665 = f__12126__auto__.call(null);
                                                  statearr_20665[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto____$1;
                                                  return statearr_20665;
                                                }();
                                                return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
                                              };
                                            }(c__12125__auto____$1, error_desc, error_seen_QMARK_, inst_20603, inst_20616, inst_20621, state_val_20642, c__12125__auto__, vec__20602, err_meta_channel);
                                          }();
                                          var inst_20623 = cljs.core.async.impl.dispatch.run.call(null, inst_20622);
                                          var inst_20625 = cljs.core.async.chan.call(null);
                                          var inst_20626 = cljs.core.async.close_BANG_.call(null, inst_20625);
                                          var inst_20627 = chord.channels.bidi_ch.call(null, inst_20621, inst_20625);
                                          var state_20641__$1 = function() {
                                            var statearr_20666 = state_20641;
                                            statearr_20666[12] = inst_20626;
                                            statearr_20666[13] = inst_20623;
                                            return statearr_20666;
                                          }();
                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20641__$1, 11, err_meta_channel, inst_20627);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                };
              }(c__12125__auto__, vec__20602, err_meta_channel);
              return function(switch__12060__auto__, c__12125__auto__, vec__20602, err_meta_channel) {
                return function() {
                  var state_machine__12061__auto__ = null;
                  var state_machine__12061__auto____0 = function() {
                    var statearr_20670 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                    statearr_20670[0] = state_machine__12061__auto__;
                    statearr_20670[1] = 1;
                    return statearr_20670;
                  };
                  var state_machine__12061__auto____1 = function(state_20641) {
                    while (true) {
                      var ret_value__12062__auto__ = function() {
                        try {
                          while (true) {
                            var result__12063__auto__ = switch__12060__auto__.call(null, state_20641);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__12063__auto__;
                            }
                            break;
                          }
                        } catch (e20671) {
                          if (e20671 instanceof Object) {
                            var ex__12064__auto__ = e20671;
                            var statearr_20672_20688 = state_20641;
                            statearr_20672_20688[5] = ex__12064__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20641);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                              throw e20671;
                            } else {
                              return null;
                            }
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__20689 = state_20641;
                        state_20641 = G__20689;
                        continue;
                      } else {
                        return ret_value__12062__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__12061__auto__ = function(state_20641) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__12061__auto____0.call(this);
                      case 1:
                        return state_machine__12061__auto____1.call(this, state_20641);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
                  state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
                  return state_machine__12061__auto__;
                }();
              }(switch__12060__auto__, c__12125__auto__, vec__20602, err_meta_channel);
            }();
            var state__12127__auto__ = function() {
              var statearr_20673 = f__12126__auto__.call(null);
              statearr_20673[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto__;
              return statearr_20673;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
          };
        }(c__12125__auto__, vec__20602, err_meta_channel));
        return c__12125__auto__;
      };
    }(vec__20602, err_meta_channel);
  };
  var on_close = function(ws, read_ch, write_ch, var_args) {
    var p__20529 = null;
    if (arguments.length > 3) {
      p__20529 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return on_close__delegate.call(this, ws, read_ch, write_ch, p__20529);
  };
  on_close.cljs$lang$maxFixedArity = 3;
  on_close.cljs$lang$applyTo = function(arglist__20690) {
    var ws = cljs.core.first(arglist__20690);
    arglist__20690 = cljs.core.next(arglist__20690);
    var read_ch = cljs.core.first(arglist__20690);
    arglist__20690 = cljs.core.next(arglist__20690);
    var write_ch = cljs.core.first(arglist__20690);
    var p__20529 = cljs.core.rest(arglist__20690);
    return on_close__delegate(ws, read_ch, write_ch, p__20529);
  };
  on_close.cljs$core$IFn$_invoke$arity$variadic = on_close__delegate;
  return on_close;
}();
chord.client.make_open_ch = function make_open_ch(ws, read_ch, write_ch, v) {
  var ch = cljs.core.async.chan.call(null);
  chord.client.on_close.call(null, ws, read_ch, write_ch, ch);
  ws.onopen = function(ch) {
    return function() {
      var c__12125__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto__, ch) {
        return function() {
          var f__12126__auto__ = function() {
            var switch__12060__auto__ = function(c__12125__auto__, ch) {
              return function(state_20709) {
                var state_val_20710 = state_20709[1];
                if (state_val_20710 === 2) {
                  var inst_20706 = state_20709[2];
                  var inst_20707 = cljs.core.async.close_BANG_.call(null, ch);
                  var state_20709__$1 = function() {
                    var statearr_20711 = state_20709;
                    statearr_20711[7] = inst_20706;
                    return statearr_20711;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20709__$1, inst_20707);
                } else {
                  if (state_val_20710 === 1) {
                    var state_20709__$1 = state_20709;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20709__$1, 2, ch, v);
                  } else {
                    return null;
                  }
                }
              };
            }(c__12125__auto__, ch);
            return function(switch__12060__auto__, c__12125__auto__, ch) {
              return function() {
                var state_machine__12061__auto__ = null;
                var state_machine__12061__auto____0 = function() {
                  var statearr_20715 = [null, null, null, null, null, null, null, null];
                  statearr_20715[0] = state_machine__12061__auto__;
                  statearr_20715[1] = 1;
                  return statearr_20715;
                };
                var state_machine__12061__auto____1 = function(state_20709) {
                  while (true) {
                    var ret_value__12062__auto__ = function() {
                      try {
                        while (true) {
                          var result__12063__auto__ = switch__12060__auto__.call(null, state_20709);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__12063__auto__;
                          }
                          break;
                        }
                      } catch (e20716) {
                        if (e20716 instanceof Object) {
                          var ex__12064__auto__ = e20716;
                          var statearr_20717_20719 = state_20709;
                          statearr_20717_20719[5] = ex__12064__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20709);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                            throw e20716;
                          } else {
                            return null;
                          }
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__20720 = state_20709;
                      state_20709 = G__20720;
                      continue;
                    } else {
                      return ret_value__12062__auto__;
                    }
                    break;
                  }
                };
                state_machine__12061__auto__ = function(state_20709) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__12061__auto____0.call(this);
                    case 1:
                      return state_machine__12061__auto____1.call(this, state_20709);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
                state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
                return state_machine__12061__auto__;
              }();
            }(switch__12060__auto__, c__12125__auto__, ch);
          }();
          var state__12127__auto__ = function() {
            var statearr_20718 = f__12126__auto__.call(null);
            statearr_20718[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto__;
            return statearr_20718;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
        };
      }(c__12125__auto__, ch));
      return c__12125__auto__;
    };
  }(ch);
  return ch;
};
chord.client.close_event__GT_maybe_error = function close_event__GT_maybe_error(ev) {
  if (cljs.core.truth_(ev.wasClean)) {
    return null;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reason", "reason", -2070751759), ev.reason, new cljs.core.Keyword(null, "code", "code", 1586293142), ev.code], null);
  }
};
chord.client.ws_ch = function() {
  var ws_ch__delegate = function(ws_url, p__20723) {
    var vec__20822 = p__20723;
    var map__20823 = cljs.core.nth.call(null, vec__20822, 0, null);
    var map__20823__$1 = cljs.core.seq_QMARK_.call(null, map__20823) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20823) : map__20823;
    var format = cljs.core.get.call(null, map__20823__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
    var write_ch = cljs.core.get.call(null, map__20823__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
    var read_ch = cljs.core.get.call(null, map__20823__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
    var web_socket = new WebSocket(ws_url);
    var map__20824 = chord.format.wrap_format.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), function() {
      var or__3052__auto__ = read_ch;
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return cljs.core.async.chan.call(null);
      }
    }(), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), function() {
      var or__3052__auto__ = write_ch;
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return cljs.core.async.chan.call(null);
      }
    }()], null), format);
    var map__20824__$1 = cljs.core.seq_QMARK_.call(null, map__20824) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20824) : map__20824;
    var write_ch__$1 = cljs.core.get.call(null, map__20824__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
    var read_ch__$1 = cljs.core.get.call(null, map__20824__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
    var open_ch = cljs.core.async.chan.call(null);
    var close_ch = cljs.core.async.chan.call(null);
    web_socket.binaryType = "arraybuffer";
    chord.channels.read_from_ws_BANG_.call(null, web_socket, read_ch__$1);
    chord.channels.write_to_ws_BANG_.call(null, web_socket, write_ch__$1);
    web_socket.onopen = function(web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch) {
      return function(p1__20721_SHARP_) {
        return cljs.core.async.put_BANG_.call(null, open_ch, p1__20721_SHARP_);
      };
    }(web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch);
    web_socket.onclose = function(web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch) {
      return function(p1__20722_SHARP_) {
        return cljs.core.async.put_BANG_.call(null, close_ch, p1__20722_SHARP_);
      };
    }(web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch);
    var ws_chan = chord.channels.bidi_ch.call(null, read_ch__$1, write_ch__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-close", "on-close", -761178394), function(web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch) {
      return function() {
        return web_socket.close();
      };
    }(web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch)], null));
    var initial_ch = cljs.core.async.chan.call(null);
    var c__12125__auto___20920 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto___20920, ws_chan, initial_ch, web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch) {
      return function() {
        var f__12126__auto__ = function() {
          var switch__12060__auto__ = function(c__12125__auto___20920, ws_chan, initial_ch, web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch) {
            return function(state_20883) {
              var state_val_20884 = state_20883[1];
              if (state_val_20884 === 7) {
                var inst_20879 = state_20883[2];
                var state_20883__$1 = state_20883;
                var statearr_20885_20921 = state_20883__$1;
                statearr_20885_20921[2] = inst_20879;
                statearr_20885_20921[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20884 === 20) {
                  var state_20883__$1 = state_20883;
                  var statearr_20886_20922 = state_20883__$1;
                  statearr_20886_20922[2] = null;
                  statearr_20886_20922[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20884 === 1) {
                    var inst_20825 = false;
                    var state_20883__$1 = function() {
                      var statearr_20887 = state_20883;
                      statearr_20887[7] = inst_20825;
                      return statearr_20887;
                    }();
                    var statearr_20888_20923 = state_20883__$1;
                    statearr_20888_20923[2] = null;
                    statearr_20888_20923[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20884 === 4) {
                      var inst_20837 = state_20883[8];
                      var inst_20835 = state_20883[9];
                      var inst_20835__$1 = state_20883[2];
                      var inst_20836 = cljs.core.nth.call(null, inst_20835__$1, 0, null);
                      var inst_20837__$1 = cljs.core.nth.call(null, inst_20835__$1, 1, null);
                      var inst_20838 = cljs.core._EQ_.call(null, inst_20837__$1, open_ch);
                      var state_20883__$1 = function() {
                        var statearr_20889 = state_20883;
                        statearr_20889[8] = inst_20837__$1;
                        statearr_20889[10] = inst_20836;
                        statearr_20889[9] = inst_20835__$1;
                        return statearr_20889;
                      }();
                      if (inst_20838) {
                        var statearr_20890_20924 = state_20883__$1;
                        statearr_20890_20924[1] = 5;
                      } else {
                        var statearr_20891_20925 = state_20883__$1;
                        statearr_20891_20925[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20884 === 15) {
                        var inst_20864 = state_20883[2];
                        var state_20883__$1 = state_20883;
                        var statearr_20892_20926 = state_20883__$1;
                        statearr_20892_20926[2] = inst_20864;
                        statearr_20892_20926[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20884 === 21) {
                          var inst_20875 = state_20883[2];
                          var state_20883__$1 = state_20883;
                          var statearr_20893_20927 = state_20883__$1;
                          statearr_20893_20927[2] = inst_20875;
                          statearr_20893_20927[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20884 === 13) {
                            var state_20883__$1 = state_20883;
                            var statearr_20894_20928 = state_20883__$1;
                            statearr_20894_20928[2] = null;
                            statearr_20894_20928[1] = 14;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20884 === 6) {
                              var inst_20837 = state_20883[8];
                              var inst_20850 = cljs.core._EQ_.call(null, inst_20837, close_ch);
                              var state_20883__$1 = state_20883;
                              if (inst_20850) {
                                var statearr_20895_20929 = state_20883__$1;
                                statearr_20895_20929[1] = 9;
                              } else {
                                var statearr_20896_20930 = state_20883__$1;
                                statearr_20896_20930[1] = 10;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20884 === 17) {
                                var state_20883__$1 = state_20883;
                                var statearr_20897_20931 = state_20883__$1;
                                statearr_20897_20931[2] = initial_ch;
                                statearr_20897_20931[1] = 18;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20884 === 3) {
                                  var inst_20881 = state_20883[2];
                                  var state_20883__$1 = state_20883;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20883__$1, inst_20881);
                                } else {
                                  if (state_val_20884 === 12) {
                                    var inst_20825 = state_20883[7];
                                    var state_20883__$1 = state_20883;
                                    if (cljs.core.truth_(inst_20825)) {
                                      var statearr_20898_20932 = state_20883__$1;
                                      statearr_20898_20932[1] = 16;
                                    } else {
                                      var statearr_20899_20933 = state_20883__$1;
                                      statearr_20899_20933[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20884 === 2) {
                                      var inst_20832 = [open_ch, close_ch];
                                      var inst_20833 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_20832, null);
                                      var state_20883__$1 = state_20883;
                                      return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_20883__$1, 4, inst_20833);
                                    } else {
                                      if (state_val_20884 === 19) {
                                        var inst_20836 = state_20883[10];
                                        var state_20883__$1 = state_20883;
                                        var statearr_20900_20934 = state_20883__$1;
                                        statearr_20900_20934[2] = inst_20836;
                                        statearr_20900_20934[1] = 21;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_20884 === 11) {
                                          var inst_20877 = state_20883[2];
                                          var state_20883__$1 = state_20883;
                                          var statearr_20901_20935 = state_20883__$1;
                                          statearr_20901_20935[2] = inst_20877;
                                          statearr_20901_20935[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20884 === 9) {
                                            var inst_20854 = state_20883[11];
                                            var inst_20835 = state_20883[9];
                                            var inst_20853 = cljs.core.nth.call(null, inst_20835, 0, null);
                                            var inst_20854__$1 = chord.client.close_event__GT_maybe_error.call(null, inst_20853);
                                            var state_20883__$1 = function() {
                                              var statearr_20902 = state_20883;
                                              statearr_20902[11] = inst_20854__$1;
                                              return statearr_20902;
                                            }();
                                            if (cljs.core.truth_(inst_20854__$1)) {
                                              var statearr_20903_20936 = state_20883__$1;
                                              statearr_20903_20936[1] = 12;
                                            } else {
                                              var statearr_20904_20937 = state_20883__$1;
                                              statearr_20904_20937[1] = 13;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_20884 === 5) {
                                              var inst_20835 = state_20883[9];
                                              var inst_20841 = cljs.core.nth.call(null, inst_20835, 0, null);
                                              var inst_20842 = [new cljs.core.Keyword(null, "ws-channel", "ws-channel", 1643892174)];
                                              var inst_20843 = [ws_chan];
                                              var inst_20844 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_20842, inst_20843);
                                              var state_20883__$1 = function() {
                                                var statearr_20905 = state_20883;
                                                statearr_20905[12] = inst_20841;
                                                return statearr_20905;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20883__$1, 8, initial_ch, inst_20844);
                                            } else {
                                              if (state_val_20884 === 14) {
                                                var inst_20867 = state_20883[2];
                                                var inst_20868 = cljs.core.async.close_BANG_.call(null, ws_chan);
                                                var inst_20869 = cljs.core.async.close_BANG_.call(null, initial_ch);
                                                var state_20883__$1 = function() {
                                                  var statearr_20906 = state_20883;
                                                  statearr_20906[13] = inst_20867;
                                                  statearr_20906[14] = inst_20868;
                                                  return statearr_20906;
                                                }();
                                                var statearr_20907_20938 = state_20883__$1;
                                                statearr_20907_20938[2] = inst_20869;
                                                statearr_20907_20938[1] = 11;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_20884 === 16) {
                                                  var state_20883__$1 = state_20883;
                                                  var statearr_20908_20939 = state_20883__$1;
                                                  statearr_20908_20939[2] = read_ch__$1;
                                                  statearr_20908_20939[1] = 18;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_20884 === 10) {
                                                    var inst_20837 = state_20883[8];
                                                    var inst_20871 = cljs.core._EQ_.call(null, inst_20837, new cljs.core.Keyword(null, "default", "default", -1987822328));
                                                    var state_20883__$1 = state_20883;
                                                    if (inst_20871) {
                                                      var statearr_20909_20940 = state_20883__$1;
                                                      statearr_20909_20940[1] = 19;
                                                    } else {
                                                      var statearr_20910_20941 = state_20883__$1;
                                                      statearr_20910_20941[1] = 20;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_20884 === 18) {
                                                      var inst_20854 = state_20883[11];
                                                      var inst_20859 = state_20883[2];
                                                      var inst_20860 = [new cljs.core.Keyword(null, "error", "error", -978969032)];
                                                      var inst_20861 = [inst_20854];
                                                      var inst_20862 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_20860, inst_20861);
                                                      var state_20883__$1 = state_20883;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20883__$1, 15, inst_20859, inst_20862);
                                                    } else {
                                                      if (state_val_20884 === 8) {
                                                        var inst_20846 = state_20883[2];
                                                        var inst_20847 = cljs.core.async.close_BANG_.call(null, initial_ch);
                                                        var inst_20825 = true;
                                                        var state_20883__$1 = function() {
                                                          var statearr_20911 = state_20883;
                                                          statearr_20911[15] = inst_20846;
                                                          statearr_20911[7] = inst_20825;
                                                          statearr_20911[16] = inst_20847;
                                                          return statearr_20911;
                                                        }();
                                                        var statearr_20912_20942 = state_20883__$1;
                                                        statearr_20912_20942[2] = null;
                                                        statearr_20912_20942[1] = 2;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        return null;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12125__auto___20920, ws_chan, initial_ch, web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch);
          return function(switch__12060__auto__, c__12125__auto___20920, ws_chan, initial_ch, web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch) {
            return function() {
              var state_machine__12061__auto__ = null;
              var state_machine__12061__auto____0 = function() {
                var statearr_20916 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20916[0] = state_machine__12061__auto__;
                statearr_20916[1] = 1;
                return statearr_20916;
              };
              var state_machine__12061__auto____1 = function(state_20883) {
                while (true) {
                  var ret_value__12062__auto__ = function() {
                    try {
                      while (true) {
                        var result__12063__auto__ = switch__12060__auto__.call(null, state_20883);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12063__auto__;
                        }
                        break;
                      }
                    } catch (e20917) {
                      if (e20917 instanceof Object) {
                        var ex__12064__auto__ = e20917;
                        var statearr_20918_20943 = state_20883;
                        statearr_20918_20943[5] = ex__12064__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20883);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e20917;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20944 = state_20883;
                    state_20883 = G__20944;
                    continue;
                  } else {
                    return ret_value__12062__auto__;
                  }
                  break;
                }
              };
              state_machine__12061__auto__ = function(state_20883) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12061__auto____0.call(this);
                  case 1:
                    return state_machine__12061__auto____1.call(this, state_20883);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
              state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
              return state_machine__12061__auto__;
            }();
          }(switch__12060__auto__, c__12125__auto___20920, ws_chan, initial_ch, web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch);
        }();
        var state__12127__auto__ = function() {
          var statearr_20919 = f__12126__auto__.call(null);
          statearr_20919[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto___20920;
          return statearr_20919;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
      };
    }(c__12125__auto___20920, ws_chan, initial_ch, web_socket, map__20824, map__20824__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20822, map__20823, map__20823__$1, format, write_ch, read_ch));
    return initial_ch;
  };
  var ws_ch = function(ws_url, var_args) {
    var p__20723 = null;
    if (arguments.length > 1) {
      p__20723 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ws_ch__delegate.call(this, ws_url, p__20723);
  };
  ws_ch.cljs$lang$maxFixedArity = 1;
  ws_ch.cljs$lang$applyTo = function(arglist__20945) {
    var ws_url = cljs.core.first(arglist__20945);
    var p__20723 = cljs.core.rest(arglist__20945);
    return ws_ch__delegate(ws_url, p__20723);
  };
  ws_ch.cljs$core$IFn$_invoke$arity$variadic = ws_ch__delegate;
  return ws_ch;
}();
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__20071 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__20071;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__20075 = cljs.core._EQ_;
    var expr__20076 = limit;
    if (cljs.core.truth_(pred__20075.call(null, 1, expr__20076))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__20075.call(null, 2, expr__20076))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__20078 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__20079 = limit__$1 - 1;
            var G__20080 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__20078;
            limit__$1 = G__20079;
            parts = G__20080;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__20081 = index - 1;
        index = G__20081;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___20082 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___20082)) {
        var replacement_20083 = temp__4124__auto___20082;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_20083));
      } else {
        buffer.append(ch);
      }
      var G__20084 = index + 1;
      index = G__20084;
      continue;
    }
    break;
  }
};
goog.provide("dommy.attrs");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.attrs.class_match_QMARK_ = function class_match_QMARK_(class_name, class$, idx) {
  var and__3040__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__3040__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__3040__auto__;
  }
};
dommy.attrs.class_index = function class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.attrs.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__20088 = i + class$.length;
        start_from = G__20088;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.attrs.has_class_QMARK_ = function has_class_QMARK_(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4124__auto__ = elem__$1.classList;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var class_list = temp__4124__auto__;
    return class_list.contains(class$__$1);
  } else {
    var temp__4126__auto__ = elem__$1.className;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var class_name = temp__4126__auto__;
      var temp__4126__auto____$1 = dommy.attrs.class_index.call(null, class_name, class$__$1);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var i = temp__4126__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.attrs.add_class_BANG_ = function() {
  var add_class_BANG_ = null;
  var add_class_BANG___2 = function(elem, classes) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var classes__$1 = clojure.string.trim.call(null, cljs.core.name.call(null, classes));
    if (cljs.core.seq.call(null, classes__$1)) {
      var temp__4124__auto___20113 = elem__$1.classList;
      if (cljs.core.truth_(temp__4124__auto___20113)) {
        var class_list_20114 = temp__4124__auto___20113;
        var seq__20101_20115 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__20102_20116 = null;
        var count__20103_20117 = 0;
        var i__20104_20118 = 0;
        while (true) {
          if (i__20104_20118 < count__20103_20117) {
            var class_20119 = cljs.core._nth.call(null, chunk__20102_20116, i__20104_20118);
            class_list_20114.add(class_20119);
            var G__20120 = seq__20101_20115;
            var G__20121 = chunk__20102_20116;
            var G__20122 = count__20103_20117;
            var G__20123 = i__20104_20118 + 1;
            seq__20101_20115 = G__20120;
            chunk__20102_20116 = G__20121;
            count__20103_20117 = G__20122;
            i__20104_20118 = G__20123;
            continue;
          } else {
            var temp__4126__auto___20124 = cljs.core.seq.call(null, seq__20101_20115);
            if (temp__4126__auto___20124) {
              var seq__20101_20125__$1 = temp__4126__auto___20124;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20101_20125__$1)) {
                var c__3808__auto___20126 = cljs.core.chunk_first.call(null, seq__20101_20125__$1);
                var G__20127 = cljs.core.chunk_rest.call(null, seq__20101_20125__$1);
                var G__20128 = c__3808__auto___20126;
                var G__20129 = cljs.core.count.call(null, c__3808__auto___20126);
                var G__20130 = 0;
                seq__20101_20115 = G__20127;
                chunk__20102_20116 = G__20128;
                count__20103_20117 = G__20129;
                i__20104_20118 = G__20130;
                continue;
              } else {
                var class_20131 = cljs.core.first.call(null, seq__20101_20125__$1);
                class_list_20114.add(class_20131);
                var G__20132 = cljs.core.next.call(null, seq__20101_20125__$1);
                var G__20133 = null;
                var G__20134 = 0;
                var G__20135 = 0;
                seq__20101_20115 = G__20132;
                chunk__20102_20116 = G__20133;
                count__20103_20117 = G__20134;
                i__20104_20118 = G__20135;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        var class_name_20136 = elem__$1.className;
        var seq__20105_20137 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__20106_20138 = null;
        var count__20107_20139 = 0;
        var i__20108_20140 = 0;
        while (true) {
          if (i__20108_20140 < count__20107_20139) {
            var class_20141 = cljs.core._nth.call(null, chunk__20106_20138, i__20108_20140);
            if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_20136, class_20141))) {
            } else {
              elem__$1.className = class_name_20136 === "" ? class_20141 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_20136) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_20141);
            }
            var G__20142 = seq__20105_20137;
            var G__20143 = chunk__20106_20138;
            var G__20144 = count__20107_20139;
            var G__20145 = i__20108_20140 + 1;
            seq__20105_20137 = G__20142;
            chunk__20106_20138 = G__20143;
            count__20107_20139 = G__20144;
            i__20108_20140 = G__20145;
            continue;
          } else {
            var temp__4126__auto___20146 = cljs.core.seq.call(null, seq__20105_20137);
            if (temp__4126__auto___20146) {
              var seq__20105_20147__$1 = temp__4126__auto___20146;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20105_20147__$1)) {
                var c__3808__auto___20148 = cljs.core.chunk_first.call(null, seq__20105_20147__$1);
                var G__20149 = cljs.core.chunk_rest.call(null, seq__20105_20147__$1);
                var G__20150 = c__3808__auto___20148;
                var G__20151 = cljs.core.count.call(null, c__3808__auto___20148);
                var G__20152 = 0;
                seq__20105_20137 = G__20149;
                chunk__20106_20138 = G__20150;
                count__20107_20139 = G__20151;
                i__20108_20140 = G__20152;
                continue;
              } else {
                var class_20153 = cljs.core.first.call(null, seq__20105_20147__$1);
                if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_20136, class_20153))) {
                } else {
                  elem__$1.className = class_name_20136 === "" ? class_20153 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_20136) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_20153);
                }
                var G__20154 = cljs.core.next.call(null, seq__20105_20147__$1);
                var G__20155 = null;
                var G__20156 = 0;
                var G__20157 = 0;
                seq__20105_20137 = G__20154;
                chunk__20106_20138 = G__20155;
                count__20107_20139 = G__20156;
                i__20108_20140 = G__20157;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
    } else {
    }
    return elem__$1;
  };
  var add_class_BANG___3 = function() {
    var G__20158__delegate = function(elem, classes, more_classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20109_20159 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
      var chunk__20110_20160 = null;
      var count__20111_20161 = 0;
      var i__20112_20162 = 0;
      while (true) {
        if (i__20112_20162 < count__20111_20161) {
          var c_20163 = cljs.core._nth.call(null, chunk__20110_20160, i__20112_20162);
          add_class_BANG_.call(null, elem__$1, c_20163);
          var G__20164 = seq__20109_20159;
          var G__20165 = chunk__20110_20160;
          var G__20166 = count__20111_20161;
          var G__20167 = i__20112_20162 + 1;
          seq__20109_20159 = G__20164;
          chunk__20110_20160 = G__20165;
          count__20111_20161 = G__20166;
          i__20112_20162 = G__20167;
          continue;
        } else {
          var temp__4126__auto___20168 = cljs.core.seq.call(null, seq__20109_20159);
          if (temp__4126__auto___20168) {
            var seq__20109_20169__$1 = temp__4126__auto___20168;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20109_20169__$1)) {
              var c__3808__auto___20170 = cljs.core.chunk_first.call(null, seq__20109_20169__$1);
              var G__20171 = cljs.core.chunk_rest.call(null, seq__20109_20169__$1);
              var G__20172 = c__3808__auto___20170;
              var G__20173 = cljs.core.count.call(null, c__3808__auto___20170);
              var G__20174 = 0;
              seq__20109_20159 = G__20171;
              chunk__20110_20160 = G__20172;
              count__20111_20161 = G__20173;
              i__20112_20162 = G__20174;
              continue;
            } else {
              var c_20175 = cljs.core.first.call(null, seq__20109_20169__$1);
              add_class_BANG_.call(null, elem__$1, c_20175);
              var G__20176 = cljs.core.next.call(null, seq__20109_20169__$1);
              var G__20177 = null;
              var G__20178 = 0;
              var G__20179 = 0;
              seq__20109_20159 = G__20176;
              chunk__20110_20160 = G__20177;
              count__20111_20161 = G__20178;
              i__20112_20162 = G__20179;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__20158 = function(elem, classes, var_args) {
      var more_classes = null;
      if (arguments.length > 2) {
        more_classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20158__delegate.call(this, elem, classes, more_classes);
    };
    G__20158.cljs$lang$maxFixedArity = 2;
    G__20158.cljs$lang$applyTo = function(arglist__20180) {
      var elem = cljs.core.first(arglist__20180);
      arglist__20180 = cljs.core.next(arglist__20180);
      var classes = cljs.core.first(arglist__20180);
      var more_classes = cljs.core.rest(arglist__20180);
      return G__20158__delegate(elem, classes, more_classes);
    };
    G__20158.cljs$core$IFn$_invoke$arity$variadic = G__20158__delegate;
    return G__20158;
  }();
  add_class_BANG_ = function(elem, classes, var_args) {
    var more_classes = var_args;
    switch(arguments.length) {
      case 2:
        return add_class_BANG___2.call(this, elem, classes);
      default:
        return add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, classes, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_class_BANG_.cljs$lang$maxFixedArity = 2;
  add_class_BANG_.cljs$lang$applyTo = add_class_BANG___3.cljs$lang$applyTo;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = add_class_BANG___2;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return add_class_BANG_;
}();
dommy.attrs.remove_class_str = function remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4124__auto__ = dommy.attrs.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var i = temp__4124__auto__;
      var G__20181 = function() {
        var end = i + class$.length;
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(end < class_len ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substring(0, i)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substr(end + 1)) : class_name.substring(0, i - 1));
      }();
      class_name = G__20181;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_ = function() {
  var remove_class_BANG_ = null;
  var remove_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___20190 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___20190)) {
      var class_list_20191 = temp__4124__auto___20190;
      class_list_20191.remove(class$__$1);
    } else {
      var class_name_20192 = elem__$1.className;
      var new_class_name_20193 = dommy.attrs.remove_class_str.call(null, class_name_20192, class$__$1);
      if (class_name_20192 === new_class_name_20193) {
      } else {
        elem__$1.className = new_class_name_20193;
      }
    }
    return elem__$1;
  };
  var remove_class_BANG___3 = function() {
    var G__20194__delegate = function(elem, class$, classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20186 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
      var chunk__20187 = null;
      var count__20188 = 0;
      var i__20189 = 0;
      while (true) {
        if (i__20189 < count__20188) {
          var c = cljs.core._nth.call(null, chunk__20187, i__20189);
          remove_class_BANG_.call(null, elem__$1, c);
          var G__20195 = seq__20186;
          var G__20196 = chunk__20187;
          var G__20197 = count__20188;
          var G__20198 = i__20189 + 1;
          seq__20186 = G__20195;
          chunk__20187 = G__20196;
          count__20188 = G__20197;
          i__20189 = G__20198;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__20186);
          if (temp__4126__auto__) {
            var seq__20186__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20186__$1)) {
              var c__3808__auto__ = cljs.core.chunk_first.call(null, seq__20186__$1);
              var G__20199 = cljs.core.chunk_rest.call(null, seq__20186__$1);
              var G__20200 = c__3808__auto__;
              var G__20201 = cljs.core.count.call(null, c__3808__auto__);
              var G__20202 = 0;
              seq__20186 = G__20199;
              chunk__20187 = G__20200;
              count__20188 = G__20201;
              i__20189 = G__20202;
              continue;
            } else {
              var c = cljs.core.first.call(null, seq__20186__$1);
              remove_class_BANG_.call(null, elem__$1, c);
              var G__20203 = cljs.core.next.call(null, seq__20186__$1);
              var G__20204 = null;
              var G__20205 = 0;
              var G__20206 = 0;
              seq__20186 = G__20203;
              chunk__20187 = G__20204;
              count__20188 = G__20205;
              i__20189 = G__20206;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
    var G__20194 = function(elem, class$, var_args) {
      var classes = null;
      if (arguments.length > 2) {
        classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20194__delegate.call(this, elem, class$, classes);
    };
    G__20194.cljs$lang$maxFixedArity = 2;
    G__20194.cljs$lang$applyTo = function(arglist__20207) {
      var elem = cljs.core.first(arglist__20207);
      arglist__20207 = cljs.core.next(arglist__20207);
      var class$ = cljs.core.first(arglist__20207);
      var classes = cljs.core.rest(arglist__20207);
      return G__20194__delegate(elem, class$, classes);
    };
    G__20194.cljs$core$IFn$_invoke$arity$variadic = G__20194__delegate;
    return G__20194;
  }();
  remove_class_BANG_ = function(elem, class$, var_args) {
    var classes = var_args;
    switch(arguments.length) {
      case 2:
        return remove_class_BANG___2.call(this, elem, class$);
      default:
        return remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, class$, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_class_BANG_.cljs$lang$maxFixedArity = 2;
  remove_class_BANG_.cljs$lang$applyTo = remove_class_BANG___3.cljs$lang$applyTo;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_class_BANG___2;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_class_BANG_;
}();
dommy.attrs.toggle_class_BANG_ = function() {
  var toggle_class_BANG_ = null;
  var toggle_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___20208 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___20208)) {
      var class_list_20209 = temp__4124__auto___20208;
      class_list_20209.toggle(class$__$1);
    } else {
      toggle_class_BANG_.call(null, elem__$1, class$__$1, !dommy.attrs.has_class_QMARK_.call(null, elem__$1, class$__$1));
    }
    return elem__$1;
  };
  var toggle_class_BANG___3 = function(elem, class$, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      dommy.attrs.add_class_BANG_.call(null, elem__$1, class$);
    } else {
      dommy.attrs.remove_class_BANG_.call(null, elem__$1, class$);
    }
    return elem__$1;
  };
  toggle_class_BANG_ = function(elem, class$, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_class_BANG___2.call(this, elem, class$);
      case 3:
        return toggle_class_BANG___3.call(this, elem, class$, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_class_BANG___2;
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_class_BANG___3;
  return toggle_class_BANG_;
}();
dommy.attrs.style_str = function style_str(x) {
  if (typeof x === "string") {
    return x;
  } else {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, function(p__20212) {
      var vec__20213 = p__20212;
      var k = cljs.core.nth.call(null, vec__20213, 0, null);
      var v = cljs.core.nth.call(null, vec__20213, 1, null);
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, k)) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, v)) + ";";
    }, x));
  }
};
dommy.attrs.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var style = elem__$1.style;
    var seq__20220_20226 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__20221_20227 = null;
    var count__20222_20228 = 0;
    var i__20223_20229 = 0;
    while (true) {
      if (i__20223_20229 < count__20222_20228) {
        var vec__20224_20230 = cljs.core._nth.call(null, chunk__20221_20227, i__20223_20229);
        var k_20231 = cljs.core.nth.call(null, vec__20224_20230, 0, null);
        var v_20232 = cljs.core.nth.call(null, vec__20224_20230, 1, null);
        style[cljs.core.name.call(null, k_20231)] = v_20232;
        var G__20233 = seq__20220_20226;
        var G__20234 = chunk__20221_20227;
        var G__20235 = count__20222_20228;
        var G__20236 = i__20223_20229 + 1;
        seq__20220_20226 = G__20233;
        chunk__20221_20227 = G__20234;
        count__20222_20228 = G__20235;
        i__20223_20229 = G__20236;
        continue;
      } else {
        var temp__4126__auto___20237 = cljs.core.seq.call(null, seq__20220_20226);
        if (temp__4126__auto___20237) {
          var seq__20220_20238__$1 = temp__4126__auto___20237;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20220_20238__$1)) {
            var c__3808__auto___20239 = cljs.core.chunk_first.call(null, seq__20220_20238__$1);
            var G__20240 = cljs.core.chunk_rest.call(null, seq__20220_20238__$1);
            var G__20241 = c__3808__auto___20239;
            var G__20242 = cljs.core.count.call(null, c__3808__auto___20239);
            var G__20243 = 0;
            seq__20220_20226 = G__20240;
            chunk__20221_20227 = G__20241;
            count__20222_20228 = G__20242;
            i__20223_20229 = G__20243;
            continue;
          } else {
            var vec__20225_20244 = cljs.core.first.call(null, seq__20220_20238__$1);
            var k_20245 = cljs.core.nth.call(null, vec__20225_20244, 0, null);
            var v_20246 = cljs.core.nth.call(null, vec__20225_20244, 1, null);
            style[cljs.core.name.call(null, k_20245)] = v_20246;
            var G__20247 = cljs.core.next.call(null, seq__20220_20238__$1);
            var G__20248 = null;
            var G__20249 = 0;
            var G__20250 = 0;
            seq__20220_20226 = G__20247;
            chunk__20221_20227 = G__20248;
            count__20222_20228 = G__20249;
            i__20223_20229 = G__20250;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_style_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_style_BANG___delegate.call(this, elem, kvs);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 1;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__20251) {
    var elem = cljs.core.first(arglist__20251);
    var kvs = cljs.core.rest(arglist__20251);
    return set_style_BANG___delegate(elem, kvs);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
dommy.attrs.style = function style(elem, k) {
  if (cljs.core.truth_(k)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "k", "k", -505765866, null))));
  }
  return window.getComputedStyle(dommy.template.__GT_node_like.call(null, elem))[cljs.core.name.call(null, k)];
};
dommy.attrs.set_px_BANG_ = function() {
  var set_px_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var seq__20258_20264 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__20259_20265 = null;
    var count__20260_20266 = 0;
    var i__20261_20267 = 0;
    while (true) {
      if (i__20261_20267 < count__20260_20266) {
        var vec__20262_20268 = cljs.core._nth.call(null, chunk__20259_20265, i__20261_20267);
        var k_20269 = cljs.core.nth.call(null, vec__20262_20268, 0, null);
        var v_20270 = cljs.core.nth.call(null, vec__20262_20268, 1, null);
        dommy.attrs.set_style_BANG_.call(null, elem__$1, k_20269, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_20270) + "px");
        var G__20271 = seq__20258_20264;
        var G__20272 = chunk__20259_20265;
        var G__20273 = count__20260_20266;
        var G__20274 = i__20261_20267 + 1;
        seq__20258_20264 = G__20271;
        chunk__20259_20265 = G__20272;
        count__20260_20266 = G__20273;
        i__20261_20267 = G__20274;
        continue;
      } else {
        var temp__4126__auto___20275 = cljs.core.seq.call(null, seq__20258_20264);
        if (temp__4126__auto___20275) {
          var seq__20258_20276__$1 = temp__4126__auto___20275;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20258_20276__$1)) {
            var c__3808__auto___20277 = cljs.core.chunk_first.call(null, seq__20258_20276__$1);
            var G__20278 = cljs.core.chunk_rest.call(null, seq__20258_20276__$1);
            var G__20279 = c__3808__auto___20277;
            var G__20280 = cljs.core.count.call(null, c__3808__auto___20277);
            var G__20281 = 0;
            seq__20258_20264 = G__20278;
            chunk__20259_20265 = G__20279;
            count__20260_20266 = G__20280;
            i__20261_20267 = G__20281;
            continue;
          } else {
            var vec__20263_20282 = cljs.core.first.call(null, seq__20258_20276__$1);
            var k_20283 = cljs.core.nth.call(null, vec__20263_20282, 0, null);
            var v_20284 = cljs.core.nth.call(null, vec__20263_20282, 1, null);
            dommy.attrs.set_style_BANG_.call(null, elem__$1, k_20283, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_20284) + "px");
            var G__20285 = cljs.core.next.call(null, seq__20258_20276__$1);
            var G__20286 = null;
            var G__20287 = 0;
            var G__20288 = 0;
            seq__20258_20264 = G__20285;
            chunk__20259_20265 = G__20286;
            count__20260_20266 = G__20287;
            i__20261_20267 = G__20288;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_px_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_px_BANG___delegate.call(this, elem, kvs);
  };
  set_px_BANG_.cljs$lang$maxFixedArity = 1;
  set_px_BANG_.cljs$lang$applyTo = function(arglist__20289) {
    var elem = cljs.core.first(arglist__20289);
    var kvs = cljs.core.rest(arglist__20289);
    return set_px_BANG___delegate(elem, kvs);
  };
  set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_px_BANG___delegate;
  return set_px_BANG_;
}();
dommy.attrs.px = function px(elem, k) {
  var pixels = dommy.attrs.style.call(null, dommy.template.__GT_node_like.call(null, elem), k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_ = function() {
  var set_attr_BANG_ = null;
  var set_attr_BANG___2 = function(elem, k) {
    return set_attr_BANG_.call(null, dommy.template.__GT_node_like.call(null, elem), k, "true");
  };
  var set_attr_BANG___3 = function(elem, k, v) {
    if (cljs.core.truth_(v)) {
      if (cljs.core.fn_QMARK_.call(null, v)) {
        var G__20298 = dommy.template.__GT_node_like.call(null, elem);
        G__20298[cljs.core.name.call(null, k)] = v;
        return G__20298;
      } else {
        var G__20299 = dommy.template.__GT_node_like.call(null, elem);
        G__20299.setAttribute(cljs.core.name.call(null, k), k === new cljs.core.Keyword(null, "style", "style", -496642736) ? dommy.attrs.style_str.call(null, v) : v);
        return G__20299;
      }
    } else {
      return null;
    }
  };
  var set_attr_BANG___4 = function() {
    var G__20306__delegate = function(elem, k, v, kvs) {
      if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null))))));
      }
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20300_20307 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
      var chunk__20301_20308 = null;
      var count__20302_20309 = 0;
      var i__20303_20310 = 0;
      while (true) {
        if (i__20303_20310 < count__20302_20309) {
          var vec__20304_20311 = cljs.core._nth.call(null, chunk__20301_20308, i__20303_20310);
          var k_20312__$1 = cljs.core.nth.call(null, vec__20304_20311, 0, null);
          var v_20313__$1 = cljs.core.nth.call(null, vec__20304_20311, 1, null);
          set_attr_BANG_.call(null, elem__$1, k_20312__$1, v_20313__$1);
          var G__20314 = seq__20300_20307;
          var G__20315 = chunk__20301_20308;
          var G__20316 = count__20302_20309;
          var G__20317 = i__20303_20310 + 1;
          seq__20300_20307 = G__20314;
          chunk__20301_20308 = G__20315;
          count__20302_20309 = G__20316;
          i__20303_20310 = G__20317;
          continue;
        } else {
          var temp__4126__auto___20318 = cljs.core.seq.call(null, seq__20300_20307);
          if (temp__4126__auto___20318) {
            var seq__20300_20319__$1 = temp__4126__auto___20318;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20300_20319__$1)) {
              var c__3808__auto___20320 = cljs.core.chunk_first.call(null, seq__20300_20319__$1);
              var G__20321 = cljs.core.chunk_rest.call(null, seq__20300_20319__$1);
              var G__20322 = c__3808__auto___20320;
              var G__20323 = cljs.core.count.call(null, c__3808__auto___20320);
              var G__20324 = 0;
              seq__20300_20307 = G__20321;
              chunk__20301_20308 = G__20322;
              count__20302_20309 = G__20323;
              i__20303_20310 = G__20324;
              continue;
            } else {
              var vec__20305_20325 = cljs.core.first.call(null, seq__20300_20319__$1);
              var k_20326__$1 = cljs.core.nth.call(null, vec__20305_20325, 0, null);
              var v_20327__$1 = cljs.core.nth.call(null, vec__20305_20325, 1, null);
              set_attr_BANG_.call(null, elem__$1, k_20326__$1, v_20327__$1);
              var G__20328 = cljs.core.next.call(null, seq__20300_20319__$1);
              var G__20329 = null;
              var G__20330 = 0;
              var G__20331 = 0;
              seq__20300_20307 = G__20328;
              chunk__20301_20308 = G__20329;
              count__20302_20309 = G__20330;
              i__20303_20310 = G__20331;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__20306 = function(elem, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20306__delegate.call(this, elem, k, v, kvs);
    };
    G__20306.cljs$lang$maxFixedArity = 3;
    G__20306.cljs$lang$applyTo = function(arglist__20332) {
      var elem = cljs.core.first(arglist__20332);
      arglist__20332 = cljs.core.next(arglist__20332);
      var k = cljs.core.first(arglist__20332);
      arglist__20332 = cljs.core.next(arglist__20332);
      var v = cljs.core.first(arglist__20332);
      var kvs = cljs.core.rest(arglist__20332);
      return G__20306__delegate(elem, k, v, kvs);
    };
    G__20306.cljs$core$IFn$_invoke$arity$variadic = G__20306__delegate;
    return G__20306;
  }();
  set_attr_BANG_ = function(elem, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 2:
        return set_attr_BANG___2.call(this, elem, k);
      case 3:
        return set_attr_BANG___3.call(this, elem, k, v);
      default:
        return set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic(elem, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 3;
  set_attr_BANG_.cljs$lang$applyTo = set_attr_BANG___4.cljs$lang$applyTo;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_attr_BANG___2;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_attr_BANG___3;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return set_attr_BANG_;
}();
dommy.attrs.remove_attr_BANG_ = function() {
  var remove_attr_BANG_ = null;
  var remove_attr_BANG___2 = function(elem, k) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), null, new cljs.core.Keyword(null, "classes", "classes", 2037804510), null], null), null)).call(null, k))) {
      elem__$1.className = "";
    } else {
      elem__$1.removeAttribute(cljs.core.name.call(null, k));
    }
    return elem__$1;
  };
  var remove_attr_BANG___3 = function() {
    var G__20341__delegate = function(elem, k, ks) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20337_20342 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
      var chunk__20338_20343 = null;
      var count__20339_20344 = 0;
      var i__20340_20345 = 0;
      while (true) {
        if (i__20340_20345 < count__20339_20344) {
          var k_20346__$1 = cljs.core._nth.call(null, chunk__20338_20343, i__20340_20345);
          remove_attr_BANG_.call(null, elem__$1, k_20346__$1);
          var G__20347 = seq__20337_20342;
          var G__20348 = chunk__20338_20343;
          var G__20349 = count__20339_20344;
          var G__20350 = i__20340_20345 + 1;
          seq__20337_20342 = G__20347;
          chunk__20338_20343 = G__20348;
          count__20339_20344 = G__20349;
          i__20340_20345 = G__20350;
          continue;
        } else {
          var temp__4126__auto___20351 = cljs.core.seq.call(null, seq__20337_20342);
          if (temp__4126__auto___20351) {
            var seq__20337_20352__$1 = temp__4126__auto___20351;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20337_20352__$1)) {
              var c__3808__auto___20353 = cljs.core.chunk_first.call(null, seq__20337_20352__$1);
              var G__20354 = cljs.core.chunk_rest.call(null, seq__20337_20352__$1);
              var G__20355 = c__3808__auto___20353;
              var G__20356 = cljs.core.count.call(null, c__3808__auto___20353);
              var G__20357 = 0;
              seq__20337_20342 = G__20354;
              chunk__20338_20343 = G__20355;
              count__20339_20344 = G__20356;
              i__20340_20345 = G__20357;
              continue;
            } else {
              var k_20358__$1 = cljs.core.first.call(null, seq__20337_20352__$1);
              remove_attr_BANG_.call(null, elem__$1, k_20358__$1);
              var G__20359 = cljs.core.next.call(null, seq__20337_20352__$1);
              var G__20360 = null;
              var G__20361 = 0;
              var G__20362 = 0;
              seq__20337_20342 = G__20359;
              chunk__20338_20343 = G__20360;
              count__20339_20344 = G__20361;
              i__20340_20345 = G__20362;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__20341 = function(elem, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20341__delegate.call(this, elem, k, ks);
    };
    G__20341.cljs$lang$maxFixedArity = 2;
    G__20341.cljs$lang$applyTo = function(arglist__20363) {
      var elem = cljs.core.first(arglist__20363);
      arglist__20363 = cljs.core.next(arglist__20363);
      var k = cljs.core.first(arglist__20363);
      var ks = cljs.core.rest(arglist__20363);
      return G__20341__delegate(elem, k, ks);
    };
    G__20341.cljs$core$IFn$_invoke$arity$variadic = G__20341__delegate;
    return G__20341;
  }();
  remove_attr_BANG_ = function(elem, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return remove_attr_BANG___2.call(this, elem, k);
      default:
        return remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
  remove_attr_BANG_.cljs$lang$applyTo = remove_attr_BANG___3.cljs$lang$applyTo;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_attr_BANG___2;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_attr_BANG_;
}();
dommy.attrs.attr = function attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return dommy.template.__GT_node_like.call(null, elem).getAttribute(cljs.core.name.call(null, k));
  } else {
    return null;
  }
};
dommy.attrs.toggle_attr_BANG_ = function() {
  var toggle_attr_BANG_ = null;
  var toggle_attr_BANG___2 = function(elem, k) {
    return toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.attrs.attr.call(null, elem, k)));
  };
  var toggle_attr_BANG___3 = function(elem, k, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      return dommy.attrs.set_attr_BANG_.call(null, elem__$1, k);
    } else {
      return dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k);
    }
  };
  toggle_attr_BANG_ = function(elem, k, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_attr_BANG___2.call(this, elem, k);
      case 3:
        return toggle_attr_BANG___3.call(this, elem, k, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_attr_BANG___2;
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_attr_BANG___3;
  return toggle_attr_BANG_;
}();
dommy.attrs.hidden_QMARK_ = function hidden_QMARK_(elem) {
  return "none" === dommy.template.__GT_node_like.call(null, elem).style.display;
};
dommy.attrs.toggle_BANG_ = function() {
  var toggle_BANG_ = null;
  var toggle_BANG___1 = function(elem) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    toggle_BANG_.call(null, elem__$1, dommy.attrs.hidden_QMARK_.call(null, elem__$1));
    return elem__$1;
  };
  var toggle_BANG___2 = function(elem, show_QMARK_) {
    var G__20365 = dommy.template.__GT_node_like.call(null, elem);
    G__20365.style.display = show_QMARK_ ? "" : "none";
    return G__20365;
  };
  toggle_BANG_ = function(elem, show_QMARK_) {
    switch(arguments.length) {
      case 1:
        return toggle_BANG___1.call(this, elem);
      case 2:
        return toggle_BANG___2.call(this, elem, show_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = toggle_BANG___1;
  toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_BANG___2;
  return toggle_BANG_;
}();
dommy.attrs.hide_BANG_ = function hide_BANG_(elem) {
  var G__20367 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__20367, false);
  return G__20367;
};
dommy.attrs.show_BANG_ = function show_BANG_(elem) {
  var G__20369 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__20369, true);
  return G__20369;
};
dommy.attrs.bounding_client_rect = function bounding_client_rect(elem) {
  return cljs.core.js__GT_clj.call(null, function() {
    var G__20371 = dommy.template.__GT_node_like.call(null, elem).getBoundingClientRect();
    G__20371["constructor"] = Object;
    return G__20371;
  }(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
};
dommy.attrs.scroll_into_view = function scroll_into_view(elem, align_with_top_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var top = (new cljs.core.Keyword(null, "top", "top", -1856271961)).cljs$core$IFn$_invoke$arity$1(dommy.attrs.bounding_client_rect.call(null, elem__$1));
  if (window.innerHeight < top + elem__$1.offsetHeight) {
    return elem__$1.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
goog.provide("dommy.template");
goog.require("cljs.core");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.template._PLUS_svg_ns_PLUS_ = "http://www.w3.org/2000/svg";
dommy.template._PLUS_svg_tags_PLUS_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["svg", null, "line", null], null), null);
dommy.template.PElement = function() {
  var obj20373 = {};
  return obj20373;
}();
dommy.template._elem = function _elem(this$) {
  if (function() {
    var and__3040__auto__ = this$;
    if (and__3040__auto__) {
      return this$.dommy$template$PElement$_elem$arity$1;
    } else {
      return and__3040__auto__;
    }
  }()) {
    return this$.dommy$template$PElement$_elem$arity$1(this$);
  } else {
    var x__3679__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3052__auto__ = dommy.template._elem[goog.typeOf(x__3679__auto__)];
      if (or__3052__auto__) {
        return or__3052__auto__;
      } else {
        var or__3052__auto____$1 = dommy.template._elem["_"];
        if (or__3052__auto____$1) {
          return or__3052__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PElement.-elem", this$);
        }
      }
    }().call(null, this$);
  }
};
dommy.template.next_css_index = function next_css_index(s, start_idx) {
  var id_idx = s.indexOf("#", start_idx);
  var class_idx = s.indexOf(".", start_idx);
  var idx = Math.min(id_idx, class_idx);
  if (idx < 0) {
    return Math.max(id_idx, class_idx);
  } else {
    return idx;
  }
};
dommy.template.base_element = function base_element(node_key) {
  var node_str = cljs.core.name.call(null, node_key);
  var base_idx = dommy.template.next_css_index.call(null, node_str, 0);
  var tag = base_idx > 0 ? node_str.substring(0, base_idx) : base_idx === 0 ? "div" : new cljs.core.Keyword(null, "else", "else", -1508377146) ? node_str : null;
  var node = cljs.core.truth_(dommy.template._PLUS_svg_tags_PLUS_.call(null, tag)) ? document.createElementNS(dommy.template._PLUS_svg_ns_PLUS_, tag) : document.createElement(tag);
  if (base_idx >= 0) {
    var str_20376 = node_str.substring(base_idx);
    while (true) {
      var next_idx_20377 = dommy.template.next_css_index.call(null, str_20376, 1);
      var frag_20378 = next_idx_20377 >= 0 ? str_20376.substring(0, next_idx_20377) : str_20376;
      var G__20375_20379 = frag_20378.charAt(0);
      switch(G__20375_20379) {
        case ".":
          dommy.attrs.add_class_BANG_.call(null, node, frag_20378.substring(1));
          break;
        case "#":
          node.setAttribute("id", frag_20378.substring(1));
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(frag_20378.charAt(0)));;
      }
      if (next_idx_20377 >= 0) {
        var G__20381 = str_20376.substring(next_idx_20377);
        str_20376 = G__20381;
        continue;
      } else {
      }
      break;
    }
  } else {
  }
  return node;
};
dommy.template.throw_unable_to_make_node = function throw_unable_to_make_node(node_data) {
  throw "Don't know how to make node from: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, node_data));
};
dommy.template.__GT_document_fragment = function() {
  var __GT_document_fragment = null;
  var __GT_document_fragment__1 = function(data) {
    return __GT_document_fragment.call(null, document.createDocumentFragment(), data);
  };
  var __GT_document_fragment__2 = function(result_frag, data) {
    if (function() {
      var G__20387 = data;
      if (G__20387) {
        var bit__3702__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3052__auto__ = bit__3702__auto__;
          if (cljs.core.truth_(or__3052__auto__)) {
            return or__3052__auto__;
          } else {
            return G__20387.dommy$template$PElement$;
          }
        }())) {
          return true;
        } else {
          if (!G__20387.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20387);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20387);
      }
    }()) {
      result_frag.appendChild(dommy.template._elem.call(null, data));
      return result_frag;
    } else {
      if (cljs.core.seq_QMARK_.call(null, data)) {
        var seq__20388_20392 = cljs.core.seq.call(null, data);
        var chunk__20389_20393 = null;
        var count__20390_20394 = 0;
        var i__20391_20395 = 0;
        while (true) {
          if (i__20391_20395 < count__20390_20394) {
            var child_20396 = cljs.core._nth.call(null, chunk__20389_20393, i__20391_20395);
            __GT_document_fragment.call(null, result_frag, child_20396);
            var G__20397 = seq__20388_20392;
            var G__20398 = chunk__20389_20393;
            var G__20399 = count__20390_20394;
            var G__20400 = i__20391_20395 + 1;
            seq__20388_20392 = G__20397;
            chunk__20389_20393 = G__20398;
            count__20390_20394 = G__20399;
            i__20391_20395 = G__20400;
            continue;
          } else {
            var temp__4126__auto___20401 = cljs.core.seq.call(null, seq__20388_20392);
            if (temp__4126__auto___20401) {
              var seq__20388_20402__$1 = temp__4126__auto___20401;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20388_20402__$1)) {
                var c__3808__auto___20403 = cljs.core.chunk_first.call(null, seq__20388_20402__$1);
                var G__20404 = cljs.core.chunk_rest.call(null, seq__20388_20402__$1);
                var G__20405 = c__3808__auto___20403;
                var G__20406 = cljs.core.count.call(null, c__3808__auto___20403);
                var G__20407 = 0;
                seq__20388_20392 = G__20404;
                chunk__20389_20393 = G__20405;
                count__20390_20394 = G__20406;
                i__20391_20395 = G__20407;
                continue;
              } else {
                var child_20408 = cljs.core.first.call(null, seq__20388_20402__$1);
                __GT_document_fragment.call(null, result_frag, child_20408);
                var G__20409 = cljs.core.next.call(null, seq__20388_20402__$1);
                var G__20410 = null;
                var G__20411 = 0;
                var G__20412 = 0;
                seq__20388_20392 = G__20409;
                chunk__20389_20393 = G__20410;
                count__20390_20394 = G__20411;
                i__20391_20395 = G__20412;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return result_frag;
      } else {
        if (data == null) {
          return result_frag;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return dommy.template.throw_unable_to_make_node.call(null, data);
          } else {
            return null;
          }
        }
      }
    }
  };
  __GT_document_fragment = function(result_frag, data) {
    switch(arguments.length) {
      case 1:
        return __GT_document_fragment__1.call(this, result_frag);
      case 2:
        return __GT_document_fragment__2.call(this, result_frag, data);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$1 = __GT_document_fragment__1;
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$2 = __GT_document_fragment__2;
  return __GT_document_fragment;
}();
dommy.template.__GT_node_like = function __GT_node_like(data) {
  if (function() {
    var G__20414 = data;
    if (G__20414) {
      var bit__3702__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3052__auto__ = bit__3702__auto__;
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          return G__20414.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__20414.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20414);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20414);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.__GT_document_fragment.call(null, data);
  }
};
dommy.template.compound_element = function compound_element(p__20415) {
  var vec__20435 = p__20415;
  var tag_name = cljs.core.nth.call(null, vec__20435, 0, null);
  var maybe_attrs = cljs.core.nth.call(null, vec__20435, 1, null);
  var children = cljs.core.nthnext.call(null, vec__20435, 2);
  var n = dommy.template.base_element.call(null, tag_name);
  var attrs = cljs.core.map_QMARK_.call(null, maybe_attrs) && !function() {
    var G__20437 = maybe_attrs;
    if (G__20437) {
      var bit__3702__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3052__auto__ = bit__3702__auto__;
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          return G__20437.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__20437.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20437);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20437);
    }
  }() ? maybe_attrs : null;
  var children__$1 = cljs.core.truth_(attrs) ? children : cljs.core.cons.call(null, maybe_attrs, children);
  var seq__20438_20454 = cljs.core.seq.call(null, attrs);
  var chunk__20439_20455 = null;
  var count__20440_20456 = 0;
  var i__20441_20457 = 0;
  while (true) {
    if (i__20441_20457 < count__20440_20456) {
      var vec__20442_20458 = cljs.core._nth.call(null, chunk__20439_20455, i__20441_20457);
      var k_20459 = cljs.core.nth.call(null, vec__20442_20458, 0, null);
      var v_20460 = cljs.core.nth.call(null, vec__20442_20458, 1, null);
      var G__20443_20461 = k_20459 instanceof cljs.core.Keyword ? k_20459.fqn : null;
      switch(G__20443_20461) {
        case "classes":
          var seq__20444_20463 = cljs.core.seq.call(null, v_20460);
          var chunk__20445_20464 = null;
          var count__20446_20465 = 0;
          var i__20447_20466 = 0;
          while (true) {
            if (i__20447_20466 < count__20446_20465) {
              var c_20467 = cljs.core._nth.call(null, chunk__20445_20464, i__20447_20466);
              dommy.attrs.add_class_BANG_.call(null, n, c_20467);
              var G__20468 = seq__20444_20463;
              var G__20469 = chunk__20445_20464;
              var G__20470 = count__20446_20465;
              var G__20471 = i__20447_20466 + 1;
              seq__20444_20463 = G__20468;
              chunk__20445_20464 = G__20469;
              count__20446_20465 = G__20470;
              i__20447_20466 = G__20471;
              continue;
            } else {
              var temp__4126__auto___20472 = cljs.core.seq.call(null, seq__20444_20463);
              if (temp__4126__auto___20472) {
                var seq__20444_20473__$1 = temp__4126__auto___20472;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__20444_20473__$1)) {
                  var c__3808__auto___20474 = cljs.core.chunk_first.call(null, seq__20444_20473__$1);
                  var G__20475 = cljs.core.chunk_rest.call(null, seq__20444_20473__$1);
                  var G__20476 = c__3808__auto___20474;
                  var G__20477 = cljs.core.count.call(null, c__3808__auto___20474);
                  var G__20478 = 0;
                  seq__20444_20463 = G__20475;
                  chunk__20445_20464 = G__20476;
                  count__20446_20465 = G__20477;
                  i__20447_20466 = G__20478;
                  continue;
                } else {
                  var c_20479 = cljs.core.first.call(null, seq__20444_20473__$1);
                  dommy.attrs.add_class_BANG_.call(null, n, c_20479);
                  var G__20480 = cljs.core.next.call(null, seq__20444_20473__$1);
                  var G__20481 = null;
                  var G__20482 = 0;
                  var G__20483 = 0;
                  seq__20444_20463 = G__20480;
                  chunk__20445_20464 = G__20481;
                  count__20446_20465 = G__20482;
                  i__20447_20466 = G__20483;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          break;
        case "class":
          dommy.attrs.add_class_BANG_.call(null, n, v_20460);
          break;
        default:
          dommy.attrs.set_attr_BANG_.call(null, n, k_20459, v_20460);
      }
      var G__20484 = seq__20438_20454;
      var G__20485 = chunk__20439_20455;
      var G__20486 = count__20440_20456;
      var G__20487 = i__20441_20457 + 1;
      seq__20438_20454 = G__20484;
      chunk__20439_20455 = G__20485;
      count__20440_20456 = G__20486;
      i__20441_20457 = G__20487;
      continue;
    } else {
      var temp__4126__auto___20488 = cljs.core.seq.call(null, seq__20438_20454);
      if (temp__4126__auto___20488) {
        var seq__20438_20489__$1 = temp__4126__auto___20488;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__20438_20489__$1)) {
          var c__3808__auto___20490 = cljs.core.chunk_first.call(null, seq__20438_20489__$1);
          var G__20491 = cljs.core.chunk_rest.call(null, seq__20438_20489__$1);
          var G__20492 = c__3808__auto___20490;
          var G__20493 = cljs.core.count.call(null, c__3808__auto___20490);
          var G__20494 = 0;
          seq__20438_20454 = G__20491;
          chunk__20439_20455 = G__20492;
          count__20440_20456 = G__20493;
          i__20441_20457 = G__20494;
          continue;
        } else {
          var vec__20448_20495 = cljs.core.first.call(null, seq__20438_20489__$1);
          var k_20496 = cljs.core.nth.call(null, vec__20448_20495, 0, null);
          var v_20497 = cljs.core.nth.call(null, vec__20448_20495, 1, null);
          var G__20449_20498 = k_20496 instanceof cljs.core.Keyword ? k_20496.fqn : null;
          switch(G__20449_20498) {
            case "classes":
              var seq__20450_20500 = cljs.core.seq.call(null, v_20497);
              var chunk__20451_20501 = null;
              var count__20452_20502 = 0;
              var i__20453_20503 = 0;
              while (true) {
                if (i__20453_20503 < count__20452_20502) {
                  var c_20504 = cljs.core._nth.call(null, chunk__20451_20501, i__20453_20503);
                  dommy.attrs.add_class_BANG_.call(null, n, c_20504);
                  var G__20505 = seq__20450_20500;
                  var G__20506 = chunk__20451_20501;
                  var G__20507 = count__20452_20502;
                  var G__20508 = i__20453_20503 + 1;
                  seq__20450_20500 = G__20505;
                  chunk__20451_20501 = G__20506;
                  count__20452_20502 = G__20507;
                  i__20453_20503 = G__20508;
                  continue;
                } else {
                  var temp__4126__auto___20509__$1 = cljs.core.seq.call(null, seq__20450_20500);
                  if (temp__4126__auto___20509__$1) {
                    var seq__20450_20510__$1 = temp__4126__auto___20509__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__20450_20510__$1)) {
                      var c__3808__auto___20511 = cljs.core.chunk_first.call(null, seq__20450_20510__$1);
                      var G__20512 = cljs.core.chunk_rest.call(null, seq__20450_20510__$1);
                      var G__20513 = c__3808__auto___20511;
                      var G__20514 = cljs.core.count.call(null, c__3808__auto___20511);
                      var G__20515 = 0;
                      seq__20450_20500 = G__20512;
                      chunk__20451_20501 = G__20513;
                      count__20452_20502 = G__20514;
                      i__20453_20503 = G__20515;
                      continue;
                    } else {
                      var c_20516 = cljs.core.first.call(null, seq__20450_20510__$1);
                      dommy.attrs.add_class_BANG_.call(null, n, c_20516);
                      var G__20517 = cljs.core.next.call(null, seq__20450_20510__$1);
                      var G__20518 = null;
                      var G__20519 = 0;
                      var G__20520 = 0;
                      seq__20450_20500 = G__20517;
                      chunk__20451_20501 = G__20518;
                      count__20452_20502 = G__20519;
                      i__20453_20503 = G__20520;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              break;
            case "class":
              dommy.attrs.add_class_BANG_.call(null, n, v_20497);
              break;
            default:
              dommy.attrs.set_attr_BANG_.call(null, n, k_20496, v_20497);
          }
          var G__20521 = cljs.core.next.call(null, seq__20438_20489__$1);
          var G__20522 = null;
          var G__20523 = 0;
          var G__20524 = 0;
          seq__20438_20454 = G__20521;
          chunk__20439_20455 = G__20522;
          count__20440_20456 = G__20523;
          i__20441_20457 = G__20524;
          continue;
        }
      } else {
      }
    }
    break;
  }
  n.appendChild(dommy.template.__GT_node_like.call(null, children__$1));
  return n;
};
dommy.template.PElement["string"] = true;
dommy.template._elem["string"] = function(this$) {
  if (this$ instanceof cljs.core.Keyword) {
    return dommy.template.base_element.call(null, this$);
  } else {
    return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
  }
};
dommy.template.PElement["number"] = true;
dommy.template._elem["number"] = function(this$) {
  return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
};
cljs.core.PersistentVector.prototype.dommy$template$PElement$ = true;
cljs.core.PersistentVector.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return dommy.template.compound_element.call(null, this$__$1);
};
SVGElement.prototype.dommy$template$PElement$ = true;
SVGElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Document.prototype.dommy$template$PElement$ = true;
Document.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Text.prototype.dommy$template$PElement$ = true;
Text.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
DocumentFragment.prototype.dommy$template$PElement$ = true;
DocumentFragment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
HTMLElement.prototype.dommy$template$PElement$ = true;
HTMLElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
try {
  Window.prototype.dommy$template$PElement$ = true;
  Window.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} catch (e20525) {
  if (e20525 instanceof ReferenceError) {
    var __20526 = e20525;
    console.log("PElement: js/Window not defined by browser, skipping it... (running on phantomjs?)");
  } else {
    if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
      throw e20525;
    } else {
    }
  }
}
dommy.template.node = function node(data) {
  if (function() {
    var G__20528 = data;
    if (G__20528) {
      var bit__3702__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3052__auto__ = bit__3702__auto__;
        if (cljs.core.truth_(or__3052__auto__)) {
          return or__3052__auto__;
        } else {
          return G__20528.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__20528.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20528);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20528);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.throw_unable_to_make_node.call(null, data);
  }
};
dommy.template.html__GT_nodes = function html__GT_nodes(html) {
  var parent = document.createElement("div");
  parent.insertAdjacentHTML("beforeend", html);
  return cljs.core.seq.call(null, Array.prototype.slice.call(parent.childNodes));
};
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dissoc_in(m, p__20085) {
  var vec__20087 = p__20085;
  var k = cljs.core.nth.call(null, vec__20087, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__20087, 1);
  if (cljs.core.truth_(m)) {
    var temp__4124__auto__ = function() {
      var and__3040__auto__ = ks;
      if (and__3040__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3040__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var res = temp__4124__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function __GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("dommy.template");
goog.require("dommy.template");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("dommy.utils");
goog.require("dommy.utils");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.core.has_class_QMARK_ = dommy.attrs.has_class_QMARK_;
dommy.core.add_class_BANG_ = dommy.attrs.add_class_BANG_;
dommy.core.remove_class_BANG_ = dommy.attrs.remove_class_BANG_;
dommy.core.toggle_class_BANG_ = dommy.attrs.toggle_class_BANG_;
dommy.core.set_attr_BANG_ = dommy.attrs.set_attr_BANG_;
dommy.core.set_style_BANG_ = dommy.attrs.set_style_BANG_;
dommy.core.set_px_BANG_ = dommy.attrs.set_px_BANG_;
dommy.core.px = dommy.attrs.px;
dommy.core.style_str = dommy.attrs.style_str;
dommy.core.style = dommy.attrs.style;
dommy.core.remove_attr_BANG_ = dommy.attrs.remove_attr_BANG_;
dommy.core.toggle_attr_BANG_ = dommy.attrs.toggle_attr_BANG_;
dommy.core.attr = dommy.attrs.attr;
dommy.core.hidden_QMARK_ = dommy.attrs.hidden_QMARK_;
dommy.core.toggle_BANG_ = dommy.attrs.toggle_BANG_;
dommy.core.hide_BANG_ = dommy.attrs.hide_BANG_;
dommy.core.show_BANG_ = dommy.attrs.show_BANG_;
dommy.core.bounding_client_rect = dommy.attrs.bounding_client_rect;
dommy.core.scroll_into_view = dommy.attrs.scroll_into_view;
dommy.core.dissoc_in = dommy.utils.dissoc_in;
dommy.core.__GT_Array = dommy.utils.__GT_Array;
dommy.core.set_html_BANG_ = function set_html_BANG_(elem, html) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.innerHTML = html;
  return elem__$1;
};
dommy.core.html = function html(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML;
};
dommy.core.set_text_BANG_ = function set_text_BANG_(elem, text) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var prop = cljs.core.truth_(elem__$1.textContent) ? "textContent" : "innerText";
  elem__$1[prop] = text;
  return elem__$1;
};
dommy.core.text = function text(elem) {
  var or__3052__auto__ = elem.textContent;
  if (cljs.core.truth_(or__3052__auto__)) {
    return or__3052__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.value = function value(elem) {
  return dommy.template.__GT_node_like.call(null, elem).value;
};
dommy.core.set_value_BANG_ = function set_value_BANG_(elem, value) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.value = value;
  return elem__$1;
};
dommy.core.append_BANG_ = function() {
  var append_BANG_ = null;
  var append_BANG___2 = function(parent, child) {
    var G__19681 = dommy.template.__GT_node_like.call(null, parent);
    G__19681.appendChild(dommy.template.__GT_node_like.call(null, child));
    return G__19681;
  };
  var append_BANG___3 = function() {
    var G__19686__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__19682_19687 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__19683_19688 = null;
      var count__19684_19689 = 0;
      var i__19685_19690 = 0;
      while (true) {
        if (i__19685_19690 < count__19684_19689) {
          var c_19691 = cljs.core._nth.call(null, chunk__19683_19688, i__19685_19690);
          append_BANG_.call(null, parent__$1, c_19691);
          var G__19692 = seq__19682_19687;
          var G__19693 = chunk__19683_19688;
          var G__19694 = count__19684_19689;
          var G__19695 = i__19685_19690 + 1;
          seq__19682_19687 = G__19692;
          chunk__19683_19688 = G__19693;
          count__19684_19689 = G__19694;
          i__19685_19690 = G__19695;
          continue;
        } else {
          var temp__4126__auto___19696 = cljs.core.seq.call(null, seq__19682_19687);
          if (temp__4126__auto___19696) {
            var seq__19682_19697__$1 = temp__4126__auto___19696;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19682_19697__$1)) {
              var c__3808__auto___19698 = cljs.core.chunk_first.call(null, seq__19682_19697__$1);
              var G__19699 = cljs.core.chunk_rest.call(null, seq__19682_19697__$1);
              var G__19700 = c__3808__auto___19698;
              var G__19701 = cljs.core.count.call(null, c__3808__auto___19698);
              var G__19702 = 0;
              seq__19682_19687 = G__19699;
              chunk__19683_19688 = G__19700;
              count__19684_19689 = G__19701;
              i__19685_19690 = G__19702;
              continue;
            } else {
              var c_19703 = cljs.core.first.call(null, seq__19682_19697__$1);
              append_BANG_.call(null, parent__$1, c_19703);
              var G__19704 = cljs.core.next.call(null, seq__19682_19697__$1);
              var G__19705 = null;
              var G__19706 = 0;
              var G__19707 = 0;
              seq__19682_19687 = G__19704;
              chunk__19683_19688 = G__19705;
              count__19684_19689 = G__19706;
              i__19685_19690 = G__19707;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__19686 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19686__delegate.call(this, parent, child, more_children);
    };
    G__19686.cljs$lang$maxFixedArity = 2;
    G__19686.cljs$lang$applyTo = function(arglist__19708) {
      var parent = cljs.core.first(arglist__19708);
      arglist__19708 = cljs.core.next(arglist__19708);
      var child = cljs.core.first(arglist__19708);
      var more_children = cljs.core.rest(arglist__19708);
      return G__19686__delegate(parent, child, more_children);
    };
    G__19686.cljs$core$IFn$_invoke$arity$variadic = G__19686__delegate;
    return G__19686;
  }();
  append_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return append_BANG___2.call(this, parent, child);
      default:
        return append_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  append_BANG_.cljs$lang$maxFixedArity = 2;
  append_BANG_.cljs$lang$applyTo = append_BANG___3.cljs$lang$applyTo;
  append_BANG_.cljs$core$IFn$_invoke$arity$2 = append_BANG___2;
  append_BANG_.cljs$core$IFn$_invoke$arity$variadic = append_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return append_BANG_;
}();
dommy.core.prepend_BANG_ = function() {
  var prepend_BANG_ = null;
  var prepend_BANG___2 = function(parent, child) {
    var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
    return parent__$1.insertBefore(dommy.template.__GT_node_like.call(null, child), parent__$1.firstChild);
  };
  var prepend_BANG___3 = function() {
    var G__19717__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__19713_19718 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__19714_19719 = null;
      var count__19715_19720 = 0;
      var i__19716_19721 = 0;
      while (true) {
        if (i__19716_19721 < count__19715_19720) {
          var c_19722 = cljs.core._nth.call(null, chunk__19714_19719, i__19716_19721);
          prepend_BANG_.call(null, parent__$1, c_19722);
          var G__19723 = seq__19713_19718;
          var G__19724 = chunk__19714_19719;
          var G__19725 = count__19715_19720;
          var G__19726 = i__19716_19721 + 1;
          seq__19713_19718 = G__19723;
          chunk__19714_19719 = G__19724;
          count__19715_19720 = G__19725;
          i__19716_19721 = G__19726;
          continue;
        } else {
          var temp__4126__auto___19727 = cljs.core.seq.call(null, seq__19713_19718);
          if (temp__4126__auto___19727) {
            var seq__19713_19728__$1 = temp__4126__auto___19727;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19713_19728__$1)) {
              var c__3808__auto___19729 = cljs.core.chunk_first.call(null, seq__19713_19728__$1);
              var G__19730 = cljs.core.chunk_rest.call(null, seq__19713_19728__$1);
              var G__19731 = c__3808__auto___19729;
              var G__19732 = cljs.core.count.call(null, c__3808__auto___19729);
              var G__19733 = 0;
              seq__19713_19718 = G__19730;
              chunk__19714_19719 = G__19731;
              count__19715_19720 = G__19732;
              i__19716_19721 = G__19733;
              continue;
            } else {
              var c_19734 = cljs.core.first.call(null, seq__19713_19728__$1);
              prepend_BANG_.call(null, parent__$1, c_19734);
              var G__19735 = cljs.core.next.call(null, seq__19713_19728__$1);
              var G__19736 = null;
              var G__19737 = 0;
              var G__19738 = 0;
              seq__19713_19718 = G__19735;
              chunk__19714_19719 = G__19736;
              count__19715_19720 = G__19737;
              i__19716_19721 = G__19738;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__19717 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19717__delegate.call(this, parent, child, more_children);
    };
    G__19717.cljs$lang$maxFixedArity = 2;
    G__19717.cljs$lang$applyTo = function(arglist__19739) {
      var parent = cljs.core.first(arglist__19739);
      arglist__19739 = cljs.core.next(arglist__19739);
      var child = cljs.core.first(arglist__19739);
      var more_children = cljs.core.rest(arglist__19739);
      return G__19717__delegate(parent, child, more_children);
    };
    G__19717.cljs$core$IFn$_invoke$arity$variadic = G__19717__delegate;
    return G__19717;
  }();
  prepend_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return prepend_BANG___2.call(this, parent, child);
      default:
        return prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prepend_BANG_.cljs$lang$maxFixedArity = 2;
  prepend_BANG_.cljs$lang$applyTo = prepend_BANG___3.cljs$lang$applyTo;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = prepend_BANG___2;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return prepend_BANG_;
}();
dommy.core.insert_before_BANG_ = function insert_before_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  if (cljs.core.truth_(other__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", -1418255893, null), new cljs.core.Symbol(null, "other", "other", -1658642225, null)))));
  }
  other__$1.parentNode.insertBefore(actual_node, other__$1);
  return actual_node;
};
dommy.core.insert_after_BANG_ = function insert_after_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  var parent = other__$1.parentNode;
  var temp__4124__auto___19740 = other__$1.nextSibling;
  if (cljs.core.truth_(temp__4124__auto___19740)) {
    var next_19741 = temp__4124__auto___19740;
    parent.insertBefore(actual_node, next_19741);
  } else {
    parent.appendChild(actual_node);
  }
  return actual_node;
};
dommy.core.replace_BANG_ = function replace_BANG_(elem, new$) {
  var new$__$1 = dommy.template.__GT_node_like.call(null, new$);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_(elem__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", -1418255893, null), new cljs.core.Symbol(null, "elem", "elem", -2035804713, null)))));
  }
  elem__$1.parentNode.replaceChild(new$__$1, elem__$1);
  return new$__$1;
};
dommy.core.replace_contents_BANG_ = function replace_contents_BANG_(parent, node_like) {
  var G__19743 = dommy.template.__GT_node_like.call(null, parent);
  G__19743.innerHTML = "";
  dommy.core.append_BANG_.call(null, G__19743, node_like);
  return G__19743;
};
dommy.core.remove_BANG_ = function remove_BANG_(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var G__19745 = elem__$1.parentNode;
  G__19745.removeChild(elem__$1);
  return G__19745;
};
dommy.core.clear_BANG_ = function clear_BANG_(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML = "";
};
dommy.core.selector = function selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.selector_map = function selector_map(template, key_selectors_map) {
  var container = dommy.template.__GT_node_like.call(null, template);
  if (!cljs.core.contains_QMARK_.call(null, key_selectors_map, new cljs.core.Keyword(null, "container", "container", -1736937707))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "key-selectors-map", "key-selectors-map", 1212911103, null), new cljs.core.Keyword(null, "container", "container", -1736937707))))));
  }
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "container", "container", -1736937707), container], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(container) {
    return function(p__19751) {
      var vec__19752 = p__19751;
      var k = cljs.core.nth.call(null, vec__19752, 0, null);
      var v = cljs.core.nth.call(null, vec__19752, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.truth_((new cljs.core.Keyword(null, "live", "live", -1610148039)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v))) ? function() {
        if (typeof dommy.core.t19753 !== "undefined") {
        } else {
          dommy.core.t19753 = function(v, k, vec__19752, p__19751, container, key_selectors_map, template, selector_map, meta19754) {
            this.v = v;
            this.k = k;
            this.vec__19752 = vec__19752;
            this.p__19751 = p__19751;
            this.container = container;
            this.key_selectors_map = key_selectors_map;
            this.template = template;
            this.selector_map = selector_map;
            this.meta19754 = meta19754;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 425984;
          };
          dommy.core.t19753.cljs$lang$type = true;
          dommy.core.t19753.cljs$lang$ctorStr = "dommy.core/t19753";
          dommy.core.t19753.cljs$lang$ctorPrWriter = function(vec__19752, k, v, container) {
            return function(this__3619__auto__, writer__3620__auto__, opt__3621__auto__) {
              return cljs.core._write.call(null, writer__3620__auto__, "dommy.core/t19753");
            };
          }(vec__19752, k, v, container);
          dommy.core.t19753.prototype.cljs$core$IDeref$_deref$arity$1 = function(vec__19752, k, v, container) {
            return function(this$) {
              var self__ = this;
              var this$__$1 = this;
              return dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, self__.container).querySelectorAll(dommy.core.selector.call(null, self__.v)));
            };
          }(vec__19752, k, v, container);
          dommy.core.t19753.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__19752, k, v, container) {
            return function(_19755) {
              var self__ = this;
              var _19755__$1 = this;
              return self__.meta19754;
            };
          }(vec__19752, k, v, container);
          dommy.core.t19753.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__19752, k, v, container) {
            return function(_19755, meta19754__$1) {
              var self__ = this;
              var _19755__$1 = this;
              return new dommy.core.t19753(self__.v, self__.k, self__.vec__19752, self__.p__19751, self__.container, self__.key_selectors_map, self__.template, self__.selector_map, meta19754__$1);
            };
          }(vec__19752, k, v, container);
          dommy.core.__GT_t19753 = function(vec__19752, k, v, container) {
            return function __GT_t19753(v__$1, k__$1, vec__19752__$1, p__19751__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta19754) {
              return new dommy.core.t19753(v__$1, k__$1, vec__19752__$1, p__19751__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta19754);
            };
          }(vec__19752, k, v, container);
        }
        return new dommy.core.t19753(v, k, vec__19752, p__19751, container, key_selectors_map, template, selector_map, null);
      }() : dommy.template.__GT_node_like.call(null, container).querySelector(dommy.core.selector.call(null, v))], null);
    };
  }(container), key_selectors_map)));
};
dommy.core.ancestor_nodes = function ancestor_nodes(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, function(p1__19756_SHARP_) {
    return p1__19756_SHARP_.parentNode;
  }, dommy.template.__GT_node_like.call(null, elem)));
};
dommy.core.matches_pred = function() {
  var matches_pred = null;
  var matches_pred__1 = function(selector) {
    return matches_pred.call(null, document, selector);
  };
  var matches_pred__2 = function(base, selector) {
    var matches = dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, dommy.template.__GT_node_like.call(null, base)).querySelectorAll(dommy.core.selector.call(null, selector)));
    return function(matches) {
      return function(elem) {
        return matches.indexOf(elem) >= 0;
      };
    }(matches);
  };
  matches_pred = function(base, selector) {
    switch(arguments.length) {
      case 1:
        return matches_pred__1.call(this, base);
      case 2:
        return matches_pred__2.call(this, base, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  matches_pred.cljs$core$IFn$_invoke$arity$1 = matches_pred__1;
  matches_pred.cljs$core$IFn$_invoke$arity$2 = matches_pred__2;
  return matches_pred;
}();
dommy.core.closest = function() {
  var closest = null;
  var closest__2 = function(elem, selector) {
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, selector), dommy.core.ancestor_nodes.call(null, dommy.template.__GT_node_like.call(null, elem))));
  };
  var closest__3 = function(base, elem, selector) {
    var base__$1 = dommy.template.__GT_node_like.call(null, base);
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base__$1, selector), cljs.core.take_while.call(null, function(base__$1, elem__$1) {
      return function(p1__19757_SHARP_) {
        return!(p1__19757_SHARP_ === base__$1);
      };
    }(base__$1, elem__$1), dommy.core.ancestor_nodes.call(null, elem__$1))));
  };
  closest = function(base, elem, selector) {
    switch(arguments.length) {
      case 2:
        return closest__2.call(this, base, elem);
      case 3:
        return closest__3.call(this, base, elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  closest.cljs$core$IFn$_invoke$arity$2 = closest__2;
  closest.cljs$core$IFn$_invoke$arity$3 = closest__3;
  return closest;
}();
dommy.core.descendant_QMARK_ = function descendant_QMARK_(descendant, ancestor) {
  var descendant__$1 = dommy.template.__GT_node_like.call(null, descendant);
  var ancestor__$1 = dommy.template.__GT_node_like.call(null, ancestor);
  if (cljs.core.truth_(ancestor__$1.contains)) {
    return ancestor__$1.contains(descendant__$1);
  } else {
    if (cljs.core.truth_(ancestor__$1.compareDocumentPosition)) {
      return(ancestor__$1.compareDocumentPosition(descendant__$1) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__19758) {
  var vec__19759 = p__19758;
  var special_mouse_event = cljs.core.nth.call(null, vec__19759, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__19759, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(vec__19759, special_mouse_event, real_mouse_event) {
    return function(f) {
      return function(vec__19759, special_mouse_event, real_mouse_event) {
        return function(event) {
          var related_target = event.relatedTarget;
          var listener_target = function() {
            var or__3052__auto__ = event.selectedTarget;
            if (cljs.core.truth_(or__3052__auto__)) {
              return or__3052__auto__;
            } else {
              return event.currentTarget;
            }
          }();
          if (cljs.core.truth_(function() {
            var and__3040__auto__ = related_target;
            if (cljs.core.truth_(and__3040__auto__)) {
              return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
            } else {
              return and__3040__auto__;
            }
          }())) {
            return null;
          } else {
            return f.call(null, event);
          }
        };
      }(vec__19759, special_mouse_event, real_mouse_event);
    };
  }(vec__19759, special_mouse_event, real_mouse_event)], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560), new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580), new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890)], null)));
dommy.core.live_listener = function live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, dommy.template.__GT_node_like.call(null, elem), event.target, selector);
    if (cljs.core.truth_(function() {
      var and__3040__auto__ = selected_target;
      if (cljs.core.truth_(and__3040__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", -1529784218)));
      } else {
        return and__3040__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function event_listeners(elem) {
  var or__3052__auto__ = dommy.template.__GT_node_like.call(null, elem).dommyEventListeners;
  if (cljs.core.truth_(or__3052__auto__)) {
    return or__3052__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function() {
  var update_event_listeners_BANG___delegate = function(elem, f, args) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
  };
  var update_event_listeners_BANG_ = function(elem, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return update_event_listeners_BANG___delegate.call(this, elem, f, args);
  };
  update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
  update_event_listeners_BANG_.cljs$lang$applyTo = function(arglist__19760) {
    var elem = cljs.core.first(arglist__19760);
    arglist__19760 = cljs.core.next(arglist__19760);
    var f = cljs.core.first(arglist__19760);
    var args = cljs.core.rest(arglist__19760);
    return update_event_listeners_BANG___delegate(elem, f, args);
  };
  update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = update_event_listeners_BANG___delegate;
  return update_event_listeners_BANG_;
}();
dommy.core.elem_and_selector = function elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, function(p1__19761_SHARP_) {
      return dommy.template.__GT_node_like.call(null, cljs.core.first.call(null, p1__19761_SHARP_));
    }, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [dommy.template.__GT_node_like.call(null, elem_sel), null], null);
  }
};
dommy.core.listen_BANG_ = function() {
  var listen_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null))))));
    }
    var vec__19785_19808 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_19809 = cljs.core.nth.call(null, vec__19785_19808, 0, null);
    var selector_19810 = cljs.core.nth.call(null, vec__19785_19808, 1, null);
    var seq__19786_19811 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__19793_19812 = null;
    var count__19794_19813 = 0;
    var i__19795_19814 = 0;
    while (true) {
      if (i__19795_19814 < count__19794_19813) {
        var vec__19802_19815 = cljs.core._nth.call(null, chunk__19793_19812, i__19795_19814);
        var orig_type_19816 = cljs.core.nth.call(null, vec__19802_19815, 0, null);
        var f_19817 = cljs.core.nth.call(null, vec__19802_19815, 1, null);
        var seq__19796_19818 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19816, new cljs.core.PersistentArrayMap.fromArray([orig_type_19816, cljs.core.identity], true, false)));
        var chunk__19798_19819 = null;
        var count__19799_19820 = 0;
        var i__19800_19821 = 0;
        while (true) {
          if (i__19800_19821 < count__19799_19820) {
            var vec__19803_19822 = cljs.core._nth.call(null, chunk__19798_19819, i__19800_19821);
            var actual_type_19823 = cljs.core.nth.call(null, vec__19803_19822, 0, null);
            var factory_19824 = cljs.core.nth.call(null, vec__19803_19822, 1, null);
            var canonical_f_19825 = (cljs.core.truth_(selector_19810) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19809, selector_19810) : cljs.core.identity).call(null, factory_19824.call(null, f_19817));
            dommy.core.update_event_listeners_BANG_.call(null, elem_19809, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19810, actual_type_19823, f_19817], null), canonical_f_19825);
            if (cljs.core.truth_(elem_19809.addEventListener)) {
              elem_19809.addEventListener(cljs.core.name.call(null, actual_type_19823), canonical_f_19825);
            } else {
              elem_19809.attachEvent(cljs.core.name.call(null, actual_type_19823), canonical_f_19825);
            }
            var G__19826 = seq__19796_19818;
            var G__19827 = chunk__19798_19819;
            var G__19828 = count__19799_19820;
            var G__19829 = i__19800_19821 + 1;
            seq__19796_19818 = G__19826;
            chunk__19798_19819 = G__19827;
            count__19799_19820 = G__19828;
            i__19800_19821 = G__19829;
            continue;
          } else {
            var temp__4126__auto___19830 = cljs.core.seq.call(null, seq__19796_19818);
            if (temp__4126__auto___19830) {
              var seq__19796_19831__$1 = temp__4126__auto___19830;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19796_19831__$1)) {
                var c__3808__auto___19832 = cljs.core.chunk_first.call(null, seq__19796_19831__$1);
                var G__19833 = cljs.core.chunk_rest.call(null, seq__19796_19831__$1);
                var G__19834 = c__3808__auto___19832;
                var G__19835 = cljs.core.count.call(null, c__3808__auto___19832);
                var G__19836 = 0;
                seq__19796_19818 = G__19833;
                chunk__19798_19819 = G__19834;
                count__19799_19820 = G__19835;
                i__19800_19821 = G__19836;
                continue;
              } else {
                var vec__19804_19837 = cljs.core.first.call(null, seq__19796_19831__$1);
                var actual_type_19838 = cljs.core.nth.call(null, vec__19804_19837, 0, null);
                var factory_19839 = cljs.core.nth.call(null, vec__19804_19837, 1, null);
                var canonical_f_19840 = (cljs.core.truth_(selector_19810) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19809, selector_19810) : cljs.core.identity).call(null, factory_19839.call(null, f_19817));
                dommy.core.update_event_listeners_BANG_.call(null, elem_19809, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19810, actual_type_19838, f_19817], null), canonical_f_19840);
                if (cljs.core.truth_(elem_19809.addEventListener)) {
                  elem_19809.addEventListener(cljs.core.name.call(null, actual_type_19838), canonical_f_19840);
                } else {
                  elem_19809.attachEvent(cljs.core.name.call(null, actual_type_19838), canonical_f_19840);
                }
                var G__19841 = cljs.core.next.call(null, seq__19796_19831__$1);
                var G__19842 = null;
                var G__19843 = 0;
                var G__19844 = 0;
                seq__19796_19818 = G__19841;
                chunk__19798_19819 = G__19842;
                count__19799_19820 = G__19843;
                i__19800_19821 = G__19844;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__19845 = seq__19786_19811;
        var G__19846 = chunk__19793_19812;
        var G__19847 = count__19794_19813;
        var G__19848 = i__19795_19814 + 1;
        seq__19786_19811 = G__19845;
        chunk__19793_19812 = G__19846;
        count__19794_19813 = G__19847;
        i__19795_19814 = G__19848;
        continue;
      } else {
        var temp__4126__auto___19849 = cljs.core.seq.call(null, seq__19786_19811);
        if (temp__4126__auto___19849) {
          var seq__19786_19850__$1 = temp__4126__auto___19849;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19786_19850__$1)) {
            var c__3808__auto___19851 = cljs.core.chunk_first.call(null, seq__19786_19850__$1);
            var G__19852 = cljs.core.chunk_rest.call(null, seq__19786_19850__$1);
            var G__19853 = c__3808__auto___19851;
            var G__19854 = cljs.core.count.call(null, c__3808__auto___19851);
            var G__19855 = 0;
            seq__19786_19811 = G__19852;
            chunk__19793_19812 = G__19853;
            count__19794_19813 = G__19854;
            i__19795_19814 = G__19855;
            continue;
          } else {
            var vec__19805_19856 = cljs.core.first.call(null, seq__19786_19850__$1);
            var orig_type_19857 = cljs.core.nth.call(null, vec__19805_19856, 0, null);
            var f_19858 = cljs.core.nth.call(null, vec__19805_19856, 1, null);
            var seq__19787_19859 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19857, new cljs.core.PersistentArrayMap.fromArray([orig_type_19857, cljs.core.identity], true, false)));
            var chunk__19789_19860 = null;
            var count__19790_19861 = 0;
            var i__19791_19862 = 0;
            while (true) {
              if (i__19791_19862 < count__19790_19861) {
                var vec__19806_19863 = cljs.core._nth.call(null, chunk__19789_19860, i__19791_19862);
                var actual_type_19864 = cljs.core.nth.call(null, vec__19806_19863, 0, null);
                var factory_19865 = cljs.core.nth.call(null, vec__19806_19863, 1, null);
                var canonical_f_19866 = (cljs.core.truth_(selector_19810) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19809, selector_19810) : cljs.core.identity).call(null, factory_19865.call(null, f_19858));
                dommy.core.update_event_listeners_BANG_.call(null, elem_19809, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19810, actual_type_19864, f_19858], null), canonical_f_19866);
                if (cljs.core.truth_(elem_19809.addEventListener)) {
                  elem_19809.addEventListener(cljs.core.name.call(null, actual_type_19864), canonical_f_19866);
                } else {
                  elem_19809.attachEvent(cljs.core.name.call(null, actual_type_19864), canonical_f_19866);
                }
                var G__19867 = seq__19787_19859;
                var G__19868 = chunk__19789_19860;
                var G__19869 = count__19790_19861;
                var G__19870 = i__19791_19862 + 1;
                seq__19787_19859 = G__19867;
                chunk__19789_19860 = G__19868;
                count__19790_19861 = G__19869;
                i__19791_19862 = G__19870;
                continue;
              } else {
                var temp__4126__auto___19871__$1 = cljs.core.seq.call(null, seq__19787_19859);
                if (temp__4126__auto___19871__$1) {
                  var seq__19787_19872__$1 = temp__4126__auto___19871__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__19787_19872__$1)) {
                    var c__3808__auto___19873 = cljs.core.chunk_first.call(null, seq__19787_19872__$1);
                    var G__19874 = cljs.core.chunk_rest.call(null, seq__19787_19872__$1);
                    var G__19875 = c__3808__auto___19873;
                    var G__19876 = cljs.core.count.call(null, c__3808__auto___19873);
                    var G__19877 = 0;
                    seq__19787_19859 = G__19874;
                    chunk__19789_19860 = G__19875;
                    count__19790_19861 = G__19876;
                    i__19791_19862 = G__19877;
                    continue;
                  } else {
                    var vec__19807_19878 = cljs.core.first.call(null, seq__19787_19872__$1);
                    var actual_type_19879 = cljs.core.nth.call(null, vec__19807_19878, 0, null);
                    var factory_19880 = cljs.core.nth.call(null, vec__19807_19878, 1, null);
                    var canonical_f_19881 = (cljs.core.truth_(selector_19810) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19809, selector_19810) : cljs.core.identity).call(null, factory_19880.call(null, f_19858));
                    dommy.core.update_event_listeners_BANG_.call(null, elem_19809, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19810, actual_type_19879, f_19858], null), canonical_f_19881);
                    if (cljs.core.truth_(elem_19809.addEventListener)) {
                      elem_19809.addEventListener(cljs.core.name.call(null, actual_type_19879), canonical_f_19881);
                    } else {
                      elem_19809.attachEvent(cljs.core.name.call(null, actual_type_19879), canonical_f_19881);
                    }
                    var G__19882 = cljs.core.next.call(null, seq__19787_19872__$1);
                    var G__19883 = null;
                    var G__19884 = 0;
                    var G__19885 = 0;
                    seq__19787_19859 = G__19882;
                    chunk__19789_19860 = G__19883;
                    count__19790_19861 = G__19884;
                    i__19791_19862 = G__19885;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__19886 = cljs.core.next.call(null, seq__19786_19850__$1);
            var G__19887 = null;
            var G__19888 = 0;
            var G__19889 = 0;
            seq__19786_19811 = G__19886;
            chunk__19793_19812 = G__19887;
            count__19794_19813 = G__19888;
            i__19795_19814 = G__19889;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_BANG_.cljs$lang$maxFixedArity = 1;
  listen_BANG_.cljs$lang$applyTo = function(arglist__19890) {
    var elem_sel = cljs.core.first(arglist__19890);
    var type_fs = cljs.core.rest(arglist__19890);
    return listen_BANG___delegate(elem_sel, type_fs);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_BANG___delegate;
  return listen_BANG_;
}();
dommy.core.unlisten_BANG_ = function() {
  var unlisten_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null))))));
    }
    var vec__19914_19937 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_19938 = cljs.core.nth.call(null, vec__19914_19937, 0, null);
    var selector_19939 = cljs.core.nth.call(null, vec__19914_19937, 1, null);
    var seq__19915_19940 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__19922_19941 = null;
    var count__19923_19942 = 0;
    var i__19924_19943 = 0;
    while (true) {
      if (i__19924_19943 < count__19923_19942) {
        var vec__19931_19944 = cljs.core._nth.call(null, chunk__19922_19941, i__19924_19943);
        var orig_type_19945 = cljs.core.nth.call(null, vec__19931_19944, 0, null);
        var f_19946 = cljs.core.nth.call(null, vec__19931_19944, 1, null);
        var seq__19925_19947 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19945, new cljs.core.PersistentArrayMap.fromArray([orig_type_19945, cljs.core.identity], true, false)));
        var chunk__19927_19948 = null;
        var count__19928_19949 = 0;
        var i__19929_19950 = 0;
        while (true) {
          if (i__19929_19950 < count__19928_19949) {
            var vec__19932_19951 = cljs.core._nth.call(null, chunk__19927_19948, i__19929_19950);
            var actual_type_19952 = cljs.core.nth.call(null, vec__19932_19951, 0, null);
            var __19953 = cljs.core.nth.call(null, vec__19932_19951, 1, null);
            var keys_19954 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19939, actual_type_19952, f_19946], null);
            var canonical_f_19955 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19938), keys_19954);
            dommy.core.update_event_listeners_BANG_.call(null, elem_19938, dommy.utils.dissoc_in, keys_19954);
            if (cljs.core.truth_(elem_19938.removeEventListener)) {
              elem_19938.removeEventListener(cljs.core.name.call(null, actual_type_19952), canonical_f_19955);
            } else {
              elem_19938.detachEvent(cljs.core.name.call(null, actual_type_19952), canonical_f_19955);
            }
            var G__19956 = seq__19925_19947;
            var G__19957 = chunk__19927_19948;
            var G__19958 = count__19928_19949;
            var G__19959 = i__19929_19950 + 1;
            seq__19925_19947 = G__19956;
            chunk__19927_19948 = G__19957;
            count__19928_19949 = G__19958;
            i__19929_19950 = G__19959;
            continue;
          } else {
            var temp__4126__auto___19960 = cljs.core.seq.call(null, seq__19925_19947);
            if (temp__4126__auto___19960) {
              var seq__19925_19961__$1 = temp__4126__auto___19960;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19925_19961__$1)) {
                var c__3808__auto___19962 = cljs.core.chunk_first.call(null, seq__19925_19961__$1);
                var G__19963 = cljs.core.chunk_rest.call(null, seq__19925_19961__$1);
                var G__19964 = c__3808__auto___19962;
                var G__19965 = cljs.core.count.call(null, c__3808__auto___19962);
                var G__19966 = 0;
                seq__19925_19947 = G__19963;
                chunk__19927_19948 = G__19964;
                count__19928_19949 = G__19965;
                i__19929_19950 = G__19966;
                continue;
              } else {
                var vec__19933_19967 = cljs.core.first.call(null, seq__19925_19961__$1);
                var actual_type_19968 = cljs.core.nth.call(null, vec__19933_19967, 0, null);
                var __19969 = cljs.core.nth.call(null, vec__19933_19967, 1, null);
                var keys_19970 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19939, actual_type_19968, f_19946], null);
                var canonical_f_19971 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19938), keys_19970);
                dommy.core.update_event_listeners_BANG_.call(null, elem_19938, dommy.utils.dissoc_in, keys_19970);
                if (cljs.core.truth_(elem_19938.removeEventListener)) {
                  elem_19938.removeEventListener(cljs.core.name.call(null, actual_type_19968), canonical_f_19971);
                } else {
                  elem_19938.detachEvent(cljs.core.name.call(null, actual_type_19968), canonical_f_19971);
                }
                var G__19972 = cljs.core.next.call(null, seq__19925_19961__$1);
                var G__19973 = null;
                var G__19974 = 0;
                var G__19975 = 0;
                seq__19925_19947 = G__19972;
                chunk__19927_19948 = G__19973;
                count__19928_19949 = G__19974;
                i__19929_19950 = G__19975;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__19976 = seq__19915_19940;
        var G__19977 = chunk__19922_19941;
        var G__19978 = count__19923_19942;
        var G__19979 = i__19924_19943 + 1;
        seq__19915_19940 = G__19976;
        chunk__19922_19941 = G__19977;
        count__19923_19942 = G__19978;
        i__19924_19943 = G__19979;
        continue;
      } else {
        var temp__4126__auto___19980 = cljs.core.seq.call(null, seq__19915_19940);
        if (temp__4126__auto___19980) {
          var seq__19915_19981__$1 = temp__4126__auto___19980;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19915_19981__$1)) {
            var c__3808__auto___19982 = cljs.core.chunk_first.call(null, seq__19915_19981__$1);
            var G__19983 = cljs.core.chunk_rest.call(null, seq__19915_19981__$1);
            var G__19984 = c__3808__auto___19982;
            var G__19985 = cljs.core.count.call(null, c__3808__auto___19982);
            var G__19986 = 0;
            seq__19915_19940 = G__19983;
            chunk__19922_19941 = G__19984;
            count__19923_19942 = G__19985;
            i__19924_19943 = G__19986;
            continue;
          } else {
            var vec__19934_19987 = cljs.core.first.call(null, seq__19915_19981__$1);
            var orig_type_19988 = cljs.core.nth.call(null, vec__19934_19987, 0, null);
            var f_19989 = cljs.core.nth.call(null, vec__19934_19987, 1, null);
            var seq__19916_19990 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19988, new cljs.core.PersistentArrayMap.fromArray([orig_type_19988, cljs.core.identity], true, false)));
            var chunk__19918_19991 = null;
            var count__19919_19992 = 0;
            var i__19920_19993 = 0;
            while (true) {
              if (i__19920_19993 < count__19919_19992) {
                var vec__19935_19994 = cljs.core._nth.call(null, chunk__19918_19991, i__19920_19993);
                var actual_type_19995 = cljs.core.nth.call(null, vec__19935_19994, 0, null);
                var __19996 = cljs.core.nth.call(null, vec__19935_19994, 1, null);
                var keys_19997 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19939, actual_type_19995, f_19989], null);
                var canonical_f_19998 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19938), keys_19997);
                dommy.core.update_event_listeners_BANG_.call(null, elem_19938, dommy.utils.dissoc_in, keys_19997);
                if (cljs.core.truth_(elem_19938.removeEventListener)) {
                  elem_19938.removeEventListener(cljs.core.name.call(null, actual_type_19995), canonical_f_19998);
                } else {
                  elem_19938.detachEvent(cljs.core.name.call(null, actual_type_19995), canonical_f_19998);
                }
                var G__19999 = seq__19916_19990;
                var G__20000 = chunk__19918_19991;
                var G__20001 = count__19919_19992;
                var G__20002 = i__19920_19993 + 1;
                seq__19916_19990 = G__19999;
                chunk__19918_19991 = G__20000;
                count__19919_19992 = G__20001;
                i__19920_19993 = G__20002;
                continue;
              } else {
                var temp__4126__auto___20003__$1 = cljs.core.seq.call(null, seq__19916_19990);
                if (temp__4126__auto___20003__$1) {
                  var seq__19916_20004__$1 = temp__4126__auto___20003__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__19916_20004__$1)) {
                    var c__3808__auto___20005 = cljs.core.chunk_first.call(null, seq__19916_20004__$1);
                    var G__20006 = cljs.core.chunk_rest.call(null, seq__19916_20004__$1);
                    var G__20007 = c__3808__auto___20005;
                    var G__20008 = cljs.core.count.call(null, c__3808__auto___20005);
                    var G__20009 = 0;
                    seq__19916_19990 = G__20006;
                    chunk__19918_19991 = G__20007;
                    count__19919_19992 = G__20008;
                    i__19920_19993 = G__20009;
                    continue;
                  } else {
                    var vec__19936_20010 = cljs.core.first.call(null, seq__19916_20004__$1);
                    var actual_type_20011 = cljs.core.nth.call(null, vec__19936_20010, 0, null);
                    var __20012 = cljs.core.nth.call(null, vec__19936_20010, 1, null);
                    var keys_20013 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19939, actual_type_20011, f_19989], null);
                    var canonical_f_20014 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19938), keys_20013);
                    dommy.core.update_event_listeners_BANG_.call(null, elem_19938, dommy.utils.dissoc_in, keys_20013);
                    if (cljs.core.truth_(elem_19938.removeEventListener)) {
                      elem_19938.removeEventListener(cljs.core.name.call(null, actual_type_20011), canonical_f_20014);
                    } else {
                      elem_19938.detachEvent(cljs.core.name.call(null, actual_type_20011), canonical_f_20014);
                    }
                    var G__20015 = cljs.core.next.call(null, seq__19916_20004__$1);
                    var G__20016 = null;
                    var G__20017 = 0;
                    var G__20018 = 0;
                    seq__19916_19990 = G__20015;
                    chunk__19918_19991 = G__20016;
                    count__19919_19992 = G__20017;
                    i__19920_19993 = G__20018;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__20019 = cljs.core.next.call(null, seq__19915_19981__$1);
            var G__20020 = null;
            var G__20021 = 0;
            var G__20022 = 0;
            seq__19915_19940 = G__20019;
            chunk__19922_19941 = G__20020;
            count__19923_19942 = G__20021;
            i__19924_19943 = G__20022;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var unlisten_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return unlisten_BANG___delegate.call(this, elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$lang$maxFixedArity = 1;
  unlisten_BANG_.cljs$lang$applyTo = function(arglist__20023) {
    var elem_sel = cljs.core.first(arglist__20023);
    var type_fs = cljs.core.rest(arglist__20023);
    return unlisten_BANG___delegate(elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = unlisten_BANG___delegate;
  return unlisten_BANG_;
}();
dommy.core.listen_once_BANG_ = function() {
  var listen_once_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null))))));
    }
    var vec__20031_20038 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_20039 = cljs.core.nth.call(null, vec__20031_20038, 0, null);
    var selector_20040 = cljs.core.nth.call(null, vec__20031_20038, 1, null);
    var seq__20032_20041 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__20033_20042 = null;
    var count__20034_20043 = 0;
    var i__20035_20044 = 0;
    while (true) {
      if (i__20035_20044 < count__20034_20043) {
        var vec__20036_20045 = cljs.core._nth.call(null, chunk__20033_20042, i__20035_20044);
        var type_20046 = cljs.core.nth.call(null, vec__20036_20045, 0, null);
        var f_20047 = cljs.core.nth.call(null, vec__20036_20045, 1, null);
        dommy.core.listen_BANG_.call(null, elem_sel, type_20046, function(seq__20032_20041, chunk__20033_20042, count__20034_20043, i__20035_20044, vec__20036_20045, type_20046, f_20047, vec__20031_20038, elem_20039, selector_20040) {
          return function this_fn(e) {
            dommy.core.unlisten_BANG_.call(null, elem_sel, type_20046, this_fn);
            return f_20047.call(null, e);
          };
        }(seq__20032_20041, chunk__20033_20042, count__20034_20043, i__20035_20044, vec__20036_20045, type_20046, f_20047, vec__20031_20038, elem_20039, selector_20040));
        var G__20048 = seq__20032_20041;
        var G__20049 = chunk__20033_20042;
        var G__20050 = count__20034_20043;
        var G__20051 = i__20035_20044 + 1;
        seq__20032_20041 = G__20048;
        chunk__20033_20042 = G__20049;
        count__20034_20043 = G__20050;
        i__20035_20044 = G__20051;
        continue;
      } else {
        var temp__4126__auto___20052 = cljs.core.seq.call(null, seq__20032_20041);
        if (temp__4126__auto___20052) {
          var seq__20032_20053__$1 = temp__4126__auto___20052;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20032_20053__$1)) {
            var c__3808__auto___20054 = cljs.core.chunk_first.call(null, seq__20032_20053__$1);
            var G__20055 = cljs.core.chunk_rest.call(null, seq__20032_20053__$1);
            var G__20056 = c__3808__auto___20054;
            var G__20057 = cljs.core.count.call(null, c__3808__auto___20054);
            var G__20058 = 0;
            seq__20032_20041 = G__20055;
            chunk__20033_20042 = G__20056;
            count__20034_20043 = G__20057;
            i__20035_20044 = G__20058;
            continue;
          } else {
            var vec__20037_20059 = cljs.core.first.call(null, seq__20032_20053__$1);
            var type_20060 = cljs.core.nth.call(null, vec__20037_20059, 0, null);
            var f_20061 = cljs.core.nth.call(null, vec__20037_20059, 1, null);
            dommy.core.listen_BANG_.call(null, elem_sel, type_20060, function(seq__20032_20041, chunk__20033_20042, count__20034_20043, i__20035_20044, vec__20037_20059, type_20060, f_20061, seq__20032_20053__$1, temp__4126__auto___20052, vec__20031_20038, elem_20039, selector_20040) {
              return function this_fn(e) {
                dommy.core.unlisten_BANG_.call(null, elem_sel, type_20060, this_fn);
                return f_20061.call(null, e);
              };
            }(seq__20032_20041, chunk__20033_20042, count__20034_20043, i__20035_20044, vec__20037_20059, type_20060, f_20061, seq__20032_20053__$1, temp__4126__auto___20052, vec__20031_20038, elem_20039, selector_20040));
            var G__20062 = cljs.core.next.call(null, seq__20032_20053__$1);
            var G__20063 = null;
            var G__20064 = 0;
            var G__20065 = 0;
            seq__20032_20041 = G__20062;
            chunk__20033_20042 = G__20063;
            count__20034_20043 = G__20064;
            i__20035_20044 = G__20065;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_once_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_once_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$lang$maxFixedArity = 1;
  listen_once_BANG_.cljs$lang$applyTo = function(arglist__20066) {
    var elem_sel = cljs.core.first(arglist__20066);
    var type_fs = cljs.core.rest(arglist__20066);
    return listen_once_BANG___delegate(elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_once_BANG___delegate;
  return listen_once_BANG_;
}();
dommy.core.fire_BANG_ = function() {
  var fire_BANG___delegate = function(node, event_type, p__20067) {
    var vec__20069 = p__20067;
    var update_event_BANG_ = cljs.core.nth.call(null, vec__20069, 0, null);
    if (dommy.core.descendant_QMARK_.call(null, node, document.documentElement)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "descendant?", "descendant?", -1027057938, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol("js", "document.documentElement", "js/document.documentElement", 1597931428, null)))));
    }
    var update_event_BANG___$1 = function() {
      var or__3052__auto__ = update_event_BANG_;
      if (cljs.core.truth_(or__3052__auto__)) {
        return or__3052__auto__;
      } else {
        return cljs.core.identity;
      }
    }();
    if (cljs.core.truth_(document.createEvent)) {
      var event = document.createEvent("Event");
      event.initEvent(cljs.core.name.call(null, event_type), true, true);
      return node.dispatchEvent(update_event_BANG___$1.call(null, event));
    } else {
      return node.fireEvent("on" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, event_type)), update_event_BANG___$1.call(null, document.createEventObject()));
    }
  };
  var fire_BANG_ = function(node, event_type, var_args) {
    var p__20067 = null;
    if (arguments.length > 2) {
      p__20067 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return fire_BANG___delegate.call(this, node, event_type, p__20067);
  };
  fire_BANG_.cljs$lang$maxFixedArity = 2;
  fire_BANG_.cljs$lang$applyTo = function(arglist__20070) {
    var node = cljs.core.first(arglist__20070);
    arglist__20070 = cljs.core.next(arglist__20070);
    var event_type = cljs.core.first(arglist__20070);
    var p__20067 = cljs.core.rest(arglist__20070);
    return fire_BANG___delegate(node, event_type, p__20067);
  };
  fire_BANG_.cljs$core$IFn$_invoke$arity$variadic = fire_BANG___delegate;
  return fire_BANG_;
}();
goog.provide("muzak.event_handlers");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("clidget.widget");
goog.require("dommy.core");
goog.require("dommy.core");
goog.require("cljs.core.async");
muzak.event_handlers.page_body = function page_body(_BANG_events, new_event_ch) {
  var dom16234 = document.createElement("div");
  if ("btn-grp") {
    dom16234.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16234.className) + " btn-grp").trim();
  } else {
  }
  if ("buttons-checkbox") {
    dom16234.setAttribute("data-toggle", "buttons-checkbox");
  } else {
  }
  dom16234.appendChild(function() {
    var dom16235 = document.createElement("h1");
    dom16235.appendChild(document.createTextNode("Million Song Search"));
    return dom16235;
  }());
  dom16234.appendChild(function() {
    var dom16236 = document.createElement("p");
    dom16236.appendChild(document.createTextNode("Select Filters:"));
    return dom16236;
  }());
  dom16234.appendChild(function() {
    var dom16237 = document.createElement("p");
    dom16237.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.bpm_button.call(null, new_event_ch)));
    dom16237.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.filt1_button.call(null, new_event_ch)));
    dom16237.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.filt2_button.call(null, new_event_ch)));
    dom16237.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.pop_button.call(null, new_event_ch)));
    return dom16237;
  }());
  dom16234.appendChild(function() {
    var dom16238 = document.createElement("h2");
    dom16238.appendChild(document.createTextNode("Bubble Chart"));
    return dom16238;
  }());
  dom16234.appendChild(function() {
    var dom16239 = document.createElement("p");
    dom16239.appendChild(document.createTextNode("Sort By:"));
    return dom16239;
  }());
  dom16234.appendChild(function() {
    var dom16240 = document.createElement("p");
    dom16240.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.popularity_button.call(null, new_event_ch)));
    dom16240.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.hottness_button.call(null, new_event_ch)));
    dom16240.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.tempo_button.call(null, new_event_ch)));
    dom16240.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.dance_ability_button.call(null, new_event_ch)));
    return dom16240;
  }());
  return dom16234;
};
muzak.event_handlers.example_function = function example_function() {
  return null;
};
muzak.event_handlers.bpm_button = function bpm_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler.call(null, function() {
    var dom16242 = document.createElement("input");
    if ("button") {
      dom16242.setAttribute("type", "button");
    } else {
    }
    if ("btn") {
      dom16242.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16242.className) + " btn").trim();
    } else {
    }
    if ("BPM") {
      dom16242.setAttribute("value", "BPM");
    } else {
    }
    return dom16242;
  }(), new_event_ch, "BPM");
};
muzak.event_handlers.filt1_button = function filt1_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler.call(null, function() {
    var dom16244 = document.createElement("input");
    if ("button") {
      dom16244.setAttribute("type", "button");
    } else {
    }
    if ("btn") {
      dom16244.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16244.className) + " btn").trim();
    } else {
    }
    if ("FILT1") {
      dom16244.setAttribute("value", "FILT1");
    } else {
    }
    return dom16244;
  }(), new_event_ch, "FILT1");
};
muzak.event_handlers.filt2_button = function filt2_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler.call(null, function() {
    var dom16246 = document.createElement("input");
    if ("button") {
      dom16246.setAttribute("type", "button");
    } else {
    }
    if ("btn") {
      dom16246.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16246.className) + " btn").trim();
    } else {
    }
    if ("FILT2") {
      dom16246.setAttribute("value", "FILT2");
    } else {
    }
    return dom16246;
  }(), new_event_ch, "FILT2");
};
muzak.event_handlers.pop_button = function pop_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler.call(null, function() {
    var dom16248 = document.createElement("input");
    if ("button") {
      dom16248.setAttribute("type", "button");
    } else {
    }
    if ("btn") {
      dom16248.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16248.className) + " btn").trim();
    } else {
    }
    if ("Pop") {
      dom16248.setAttribute("value", "Pop");
    } else {
    }
    return dom16248;
  }(), new_event_ch, "Pop");
};
muzak.event_handlers.popularity_button = function popularity_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler.call(null, function() {
    var dom16250 = document.createElement("input");
    if ("button") {
      dom16250.setAttribute("type", "button");
    } else {
    }
    if ("btn") {
      dom16250.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16250.className) + " btn").trim();
    } else {
    }
    if ("Popularity") {
      dom16250.setAttribute("value", "Popularity");
    } else {
    }
    return dom16250;
  }(), new_event_ch, "Popularity");
};
muzak.event_handlers.hottness_button = function hottness_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler.call(null, function() {
    var dom16252 = document.createElement("input");
    if ("button") {
      dom16252.setAttribute("type", "button");
    } else {
    }
    if ("btn") {
      dom16252.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16252.className) + " btn").trim();
    } else {
    }
    if ("Hottness") {
      dom16252.setAttribute("value", "Hottness");
    } else {
    }
    return dom16252;
  }(), new_event_ch, "Hottness");
};
muzak.event_handlers.tempo_button = function tempo_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler.call(null, function() {
    var dom16254 = document.createElement("input");
    if ("button") {
      dom16254.setAttribute("type", "button");
    } else {
    }
    if ("btn") {
      dom16254.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16254.className) + " btn").trim();
    } else {
    }
    if ("Tempo") {
      dom16254.setAttribute("value", "Tempo");
    } else {
    }
    return dom16254;
  }(), new_event_ch, "Tempo");
};
muzak.event_handlers.dance_ability_button = function dance_ability_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler.call(null, function() {
    var dom16256 = document.createElement("input");
    if ("button") {
      dom16256.setAttribute("type", "button");
    } else {
    }
    if ("btn") {
      dom16256.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16256.className) + " btn").trim();
    } else {
    }
    if ("Dance-ability") {
      dom16256.setAttribute("value", "Dance-ability");
    } else {
    }
    return dom16256;
  }(), new_event_ch, "Dance-ability");
};
muzak.event_handlers.with_click_handler = function with_click_handler($button, new_event_ch, name) {
  return dommy.core.listen_BANG_.call(null, $button, new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
    muzak.event_handlers.msg = cljs.core.PersistentHashMap.fromArrays.call(null, [new cljs.core.Keyword(null, "event", "event", 301435442), new cljs.core.Keyword(null, "data", "data", -232669377)], ["parse", name]);
    return cljs.core.async.put_BANG_.call(null, new_event_ch, muzak.event_handlers.msg);
  });
};
goog.provide("muzak.front_end");
goog.require("cljs.core");
goog.require("chord.client");
goog.require("muzak.event_handlers");
goog.require("cljs.core.async");
goog.require("clidget.widget");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("dommy.core");
goog.require("dommy.core");
goog.require("cljs.core.async");
goog.require("muzak.event_handlers");
goog.require("chord.client");
cljs.core.enable_console_print_BANG_.call(null);
muzak.front_end.add_msg = function add_msg(msgs, new_msg) {
  return cljs.core.take.call(null, 10, cljs.core.cons.call(null, new_msg, msgs));
};
muzak.front_end.receive_msgs_BANG_ = function receive_msgs_BANG_(_BANG_msgs, server_ch) {
  var c__12125__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto__) {
    return function() {
      var f__12126__auto__ = function() {
        var switch__12060__auto__ = function(c__12125__auto__) {
          return function(state_15469) {
            var state_val_15470 = state_15469[1];
            if (state_val_15470 === 7) {
              var inst_15465 = state_15469[2];
              var state_15469__$1 = state_15469;
              var statearr_15471_15486 = state_15469__$1;
              statearr_15471_15486[2] = inst_15465;
              statearr_15471_15486[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15470 === 6) {
                var state_15469__$1 = state_15469;
                var statearr_15472_15487 = state_15469__$1;
                statearr_15472_15487[2] = null;
                statearr_15472_15487[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15470 === 5) {
                  var inst_15459 = state_15469[7];
                  var inst_15461 = cljs.core.swap_BANG_.call(null, _BANG_msgs, muzak.front_end.add_msg, inst_15459);
                  var state_15469__$1 = function() {
                    var statearr_15473 = state_15469;
                    statearr_15473[8] = inst_15461;
                    return statearr_15473;
                  }();
                  var statearr_15474_15488 = state_15469__$1;
                  statearr_15474_15488[2] = null;
                  statearr_15474_15488[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15470 === 4) {
                    var inst_15459 = state_15469[7];
                    var inst_15459__$1 = state_15469[2];
                    var state_15469__$1 = function() {
                      var statearr_15475 = state_15469;
                      statearr_15475[7] = inst_15459__$1;
                      return statearr_15475;
                    }();
                    if (cljs.core.truth_(inst_15459__$1)) {
                      var statearr_15476_15489 = state_15469__$1;
                      statearr_15476_15489[1] = 5;
                    } else {
                      var statearr_15477_15490 = state_15469__$1;
                      statearr_15477_15490[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15470 === 3) {
                      var inst_15467 = state_15469[2];
                      var state_15469__$1 = state_15469;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15469__$1, inst_15467);
                    } else {
                      if (state_val_15470 === 2) {
                        var state_15469__$1 = state_15469;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15469__$1, 4, server_ch);
                      } else {
                        if (state_val_15470 === 1) {
                          var state_15469__$1 = state_15469;
                          var statearr_15478_15491 = state_15469__$1;
                          statearr_15478_15491[2] = null;
                          statearr_15478_15491[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12125__auto__);
        return function(switch__12060__auto__, c__12125__auto__) {
          return function() {
            var state_machine__12061__auto__ = null;
            var state_machine__12061__auto____0 = function() {
              var statearr_15482 = [null, null, null, null, null, null, null, null, null];
              statearr_15482[0] = state_machine__12061__auto__;
              statearr_15482[1] = 1;
              return statearr_15482;
            };
            var state_machine__12061__auto____1 = function(state_15469) {
              while (true) {
                var ret_value__12062__auto__ = function() {
                  try {
                    while (true) {
                      var result__12063__auto__ = switch__12060__auto__.call(null, state_15469);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12063__auto__;
                      }
                      break;
                    }
                  } catch (e15483) {
                    if (e15483 instanceof Object) {
                      var ex__12064__auto__ = e15483;
                      var statearr_15484_15492 = state_15469;
                      statearr_15484_15492[5] = ex__12064__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15469);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e15483;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15493 = state_15469;
                  state_15469 = G__15493;
                  continue;
                } else {
                  return ret_value__12062__auto__;
                }
                break;
              }
            };
            state_machine__12061__auto__ = function(state_15469) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12061__auto____0.call(this);
                case 1:
                  return state_machine__12061__auto____1.call(this, state_15469);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
            return state_machine__12061__auto__;
          }();
        }(switch__12060__auto__, c__12125__auto__);
      }();
      var state__12127__auto__ = function() {
        var statearr_15485 = f__12126__auto__.call(null);
        statearr_15485[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto__;
        return statearr_15485;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
    };
  }(c__12125__auto__));
  return c__12125__auto__;
};
muzak.front_end.send_msgs_BANG_ = function send_msgs_BANG_(new_msg_ch, server_ch) {
  var c__12125__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto__) {
    return function() {
      var f__12126__auto__ = function() {
        var switch__12060__auto__ = function(c__12125__auto__) {
          return function(state_15537) {
            var state_val_15538 = state_15537[1];
            if (state_val_15538 === 8) {
              var inst_15529 = state_15537[2];
              var state_15537__$1 = function() {
                var statearr_15539 = state_15537;
                statearr_15539[7] = inst_15529;
                return statearr_15539;
              }();
              var statearr_15540_15554 = state_15537__$1;
              statearr_15540_15554[2] = null;
              statearr_15540_15554[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15538 === 7) {
                var inst_15533 = state_15537[2];
                var state_15537__$1 = state_15537;
                var statearr_15541_15555 = state_15537__$1;
                statearr_15541_15555[2] = inst_15533;
                statearr_15541_15555[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15538 === 6) {
                  var state_15537__$1 = state_15537;
                  var statearr_15542_15556 = state_15537__$1;
                  statearr_15542_15556[2] = null;
                  statearr_15542_15556[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15538 === 5) {
                    var inst_15526 = state_15537[8];
                    var state_15537__$1 = state_15537;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15537__$1, 8, server_ch, inst_15526);
                  } else {
                    if (state_val_15538 === 4) {
                      var inst_15526 = state_15537[8];
                      var inst_15526__$1 = state_15537[2];
                      var state_15537__$1 = function() {
                        var statearr_15543 = state_15537;
                        statearr_15543[8] = inst_15526__$1;
                        return statearr_15543;
                      }();
                      if (cljs.core.truth_(inst_15526__$1)) {
                        var statearr_15544_15557 = state_15537__$1;
                        statearr_15544_15557[1] = 5;
                      } else {
                        var statearr_15545_15558 = state_15537__$1;
                        statearr_15545_15558[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15538 === 3) {
                        var inst_15535 = state_15537[2];
                        var state_15537__$1 = state_15537;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15537__$1, inst_15535);
                      } else {
                        if (state_val_15538 === 2) {
                          var state_15537__$1 = state_15537;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15537__$1, 4, new_msg_ch);
                        } else {
                          if (state_val_15538 === 1) {
                            var state_15537__$1 = state_15537;
                            var statearr_15546_15559 = state_15537__$1;
                            statearr_15546_15559[2] = null;
                            statearr_15546_15559[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12125__auto__);
        return function(switch__12060__auto__, c__12125__auto__) {
          return function() {
            var state_machine__12061__auto__ = null;
            var state_machine__12061__auto____0 = function() {
              var statearr_15550 = [null, null, null, null, null, null, null, null, null];
              statearr_15550[0] = state_machine__12061__auto__;
              statearr_15550[1] = 1;
              return statearr_15550;
            };
            var state_machine__12061__auto____1 = function(state_15537) {
              while (true) {
                var ret_value__12062__auto__ = function() {
                  try {
                    while (true) {
                      var result__12063__auto__ = switch__12060__auto__.call(null, state_15537);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12063__auto__;
                      }
                      break;
                    }
                  } catch (e15551) {
                    if (e15551 instanceof Object) {
                      var ex__12064__auto__ = e15551;
                      var statearr_15552_15560 = state_15537;
                      statearr_15552_15560[5] = ex__12064__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15537);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e15551;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15561 = state_15537;
                  state_15537 = G__15561;
                  continue;
                } else {
                  return ret_value__12062__auto__;
                }
                break;
              }
            };
            state_machine__12061__auto__ = function(state_15537) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12061__auto____0.call(this);
                case 1:
                  return state_machine__12061__auto____1.call(this, state_15537);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
            return state_machine__12061__auto__;
          }();
        }(switch__12060__auto__, c__12125__auto__);
      }();
      var state__12127__auto__ = function() {
        var statearr_15553 = f__12126__auto__.call(null);
        statearr_15553[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto__;
        return statearr_15553;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
    };
  }(c__12125__auto__));
  return c__12125__auto__;
};
window.onload = function() {
  var c__12125__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12125__auto__) {
    return function() {
      var f__12126__auto__ = function() {
        var switch__12060__auto__ = function(c__12125__auto__) {
          return function(state_15600) {
            var state_val_15601 = state_15600[1];
            if (state_val_15601 === 8) {
              var inst_15598 = state_15600[2];
              var state_15600__$1 = state_15600;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15600__$1, inst_15598);
            } else {
              if (state_val_15601 === 7) {
                var inst_15576 = state_15600[7];
                var inst_15589 = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
                var inst_15590 = muzak.front_end.receive_msgs_BANG_.call(null, inst_15589, inst_15576);
                var inst_15592 = cljs.core.async.chan.call(null);
                var inst_15593 = muzak.front_end.send_msgs_BANG_.call(null, inst_15592, inst_15576);
                var inst_15594 = document.getElementById("content");
                var inst_15595 = muzak.event_handlers.page_body.call(null, inst_15589, inst_15592);
                var inst_15596 = dommy.core.replace_contents_BANG_.call(null, inst_15594, inst_15595);
                var state_15600__$1 = function() {
                  var statearr_15602 = state_15600;
                  statearr_15602[8] = inst_15593;
                  statearr_15602[9] = inst_15590;
                  return statearr_15602;
                }();
                var statearr_15603_15621 = state_15600__$1;
                statearr_15603_15621[2] = inst_15596;
                statearr_15603_15621[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15601 === 6) {
                  var inst_15575 = state_15600[10];
                  var inst_15578 = document.getElementById("content");
                  var inst_15580 = document.createElement("div");
                  var inst_15581 = document.createTextNode("Couldn't connect to websocket: ");
                  var inst_15582 = inst_15580.appendChild(inst_15581);
                  var inst_15583 = cljs.core.pr_str.call(null, inst_15575);
                  var inst_15584 = dommy.template.__GT_node_like.call(null, inst_15583);
                  var inst_15585 = inst_15580.appendChild(inst_15584);
                  var inst_15586 = dommy.core.replace_contents_BANG_.call(null, inst_15578, inst_15580);
                  var state_15600__$1 = function() {
                    var statearr_15604 = state_15600;
                    statearr_15604[11] = inst_15585;
                    statearr_15604[12] = inst_15582;
                    return statearr_15604;
                  }();
                  var statearr_15605_15622 = state_15600__$1;
                  statearr_15605_15622[2] = inst_15586;
                  statearr_15605_15622[1] = 8;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15601 === 5) {
                    var inst_15575 = state_15600[10];
                    var inst_15574 = state_15600[2];
                    var inst_15575__$1 = cljs.core.get.call(null, inst_15574, new cljs.core.Keyword(null, "error", "error", -978969032));
                    var inst_15576 = cljs.core.get.call(null, inst_15574, new cljs.core.Keyword(null, "ws-channel", "ws-channel", 1643892174));
                    var state_15600__$1 = function() {
                      var statearr_15606 = state_15600;
                      statearr_15606[10] = inst_15575__$1;
                      statearr_15606[7] = inst_15576;
                      return statearr_15606;
                    }();
                    if (cljs.core.truth_(inst_15575__$1)) {
                      var statearr_15607_15623 = state_15600__$1;
                      statearr_15607_15623[1] = 6;
                    } else {
                      var statearr_15608_15624 = state_15600__$1;
                      statearr_15608_15624[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15601 === 4) {
                      var inst_15568 = state_15600[13];
                      var state_15600__$1 = state_15600;
                      var statearr_15609_15625 = state_15600__$1;
                      statearr_15609_15625[2] = inst_15568;
                      statearr_15609_15625[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15601 === 3) {
                        var inst_15568 = state_15600[13];
                        var inst_15571 = cljs.core.apply.call(null, cljs.core.hash_map, inst_15568);
                        var state_15600__$1 = state_15600;
                        var statearr_15610_15626 = state_15600__$1;
                        statearr_15610_15626[2] = inst_15571;
                        statearr_15610_15626[1] = 5;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15601 === 2) {
                          var inst_15568 = state_15600[13];
                          var inst_15568__$1 = state_15600[2];
                          var inst_15569 = cljs.core.seq_QMARK_.call(null, inst_15568__$1);
                          var state_15600__$1 = function() {
                            var statearr_15611 = state_15600;
                            statearr_15611[13] = inst_15568__$1;
                            return statearr_15611;
                          }();
                          if (inst_15569) {
                            var statearr_15612_15627 = state_15600__$1;
                            statearr_15612_15627[1] = 3;
                          } else {
                            var statearr_15613_15628 = state_15600__$1;
                            statearr_15613_15628[1] = 4;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15601 === 1) {
                            var inst_15563 = [new cljs.core.Keyword(null, "format", "format", -1306924766)];
                            var inst_15564 = [new cljs.core.Keyword(null, "json-kw", "json-kw", 341203175)];
                            var inst_15565 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_15563, inst_15564);
                            var inst_15566 = chord.client.ws_ch.call(null, "ws://localhost:3000/ws", inst_15565);
                            var state_15600__$1 = state_15600;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15600__$1, 2, inst_15566);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12125__auto__);
        return function(switch__12060__auto__, c__12125__auto__) {
          return function() {
            var state_machine__12061__auto__ = null;
            var state_machine__12061__auto____0 = function() {
              var statearr_15617 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15617[0] = state_machine__12061__auto__;
              statearr_15617[1] = 1;
              return statearr_15617;
            };
            var state_machine__12061__auto____1 = function(state_15600) {
              while (true) {
                var ret_value__12062__auto__ = function() {
                  try {
                    while (true) {
                      var result__12063__auto__ = switch__12060__auto__.call(null, state_15600);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12063__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12063__auto__;
                      }
                      break;
                    }
                  } catch (e15618) {
                    if (e15618 instanceof Object) {
                      var ex__12064__auto__ = e15618;
                      var statearr_15619_15629 = state_15600;
                      statearr_15619_15629[5] = ex__12064__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15600);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e15618;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12062__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15630 = state_15600;
                  state_15600 = G__15630;
                  continue;
                } else {
                  return ret_value__12062__auto__;
                }
                break;
              }
            };
            state_machine__12061__auto__ = function(state_15600) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12061__auto____0.call(this);
                case 1:
                  return state_machine__12061__auto____1.call(this, state_15600);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12061__auto____0;
            state_machine__12061__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12061__auto____1;
            return state_machine__12061__auto__;
          }();
        }(switch__12060__auto__, c__12125__auto__);
      }();
      var state__12127__auto__ = function() {
        var statearr_15620 = f__12126__auto__.call(null);
        statearr_15620[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12125__auto__;
        return statearr_15620;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12127__auto__);
    };
  }(c__12125__auto__));
  return c__12125__auto__;
};
