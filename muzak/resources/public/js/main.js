var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_DEFINES;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.DEBUG) {
    if (!caller) {
      throw Error("arguments.caller not defined.  goog.base() expects not " + "to be running in strict mode. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
    }
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;").replace(goog.string.singleQuoteRe_, "\x26#39;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.singleQuoteRe_, "\x26#39;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /"/g;
goog.string.singleQuoteRe_ = /'/g;
goog.string.allRe_ = /[&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2268";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15736__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__15736 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15736__delegate.call(this, args);
    };
    G__15736.cljs$lang$maxFixedArity = 0;
    G__15736.cljs$lang$applyTo = function(arglist__15737) {
      var args = cljs.core.seq(arglist__15737);
      return G__15736__delegate(args);
    };
    G__15736.cljs$core$IFn$_invoke$arity$variadic = G__15736__delegate;
    return G__15736;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3015__auto__ = ty;
    if (cljs.core.truth_(and__3015__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3015__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__3883__auto___15738 = len;
  var i_15739 = 0;
  while (true) {
    if (i_15739 < n__3883__auto___15738) {
      new_arr[i_15739] = arr[i_15739];
      var G__15740 = i_15739 + 1;
      i_15739 = G__15740;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__15741__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__15741 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15741__delegate.call(this, array, i, idxs);
    };
    G__15741.cljs$lang$maxFixedArity = 2;
    G__15741.cljs$lang$applyTo = function(arglist__15742) {
      var array = cljs.core.first(arglist__15742);
      arglist__15742 = cljs.core.next(arglist__15742);
      var i = cljs.core.first(arglist__15742);
      var idxs = cljs.core.rest(arglist__15742);
      return G__15741__delegate(array, i, idxs);
    };
    G__15741.cljs$core$IFn$_invoke$arity$variadic = G__15741__delegate;
    return G__15741;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__15743__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__15743 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15743__delegate.call(this, array, idx, idx2, idxv);
    };
    G__15743.cljs$lang$maxFixedArity = 3;
    G__15743.cljs$lang$applyTo = function(arglist__15744) {
      var array = cljs.core.first(arglist__15744);
      arglist__15744 = cljs.core.next(arglist__15744);
      var idx = cljs.core.first(arglist__15744);
      arglist__15744 = cljs.core.next(arglist__15744);
      var idx2 = cljs.core.first(arglist__15744);
      var idxv = cljs.core.rest(arglist__15744);
      return G__15743__delegate(array, idx, idx2, idxv);
    };
    G__15743.cljs$core$IFn$_invoke$arity$variadic = G__15743__delegate;
    return G__15743;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj15746 = {};
  return obj15746;
}();
cljs.core.IFn = function() {
  var obj15748 = {};
  return obj15748;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3015__auto__ = this$;
      if (and__3015__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__3654__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3027__auto__ = cljs.core._invoke[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._invoke["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj15750 = {};
  return obj15750;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3015__auto__ = value;
    if (and__3015__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__3654__auto__ = value == null ? null : value;
    return function() {
      var or__3027__auto__ = cljs.core._clone[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._clone["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj15752 = {};
  return obj15752;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._count[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._count["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj15754 = {};
  return obj15754;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._empty[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._empty["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj15756 = {};
  return obj15756;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._conj[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._conj["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj15758 = {};
  return obj15758;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3015__auto__ = coll;
      if (and__3015__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__3654__auto__ = coll == null ? null : coll;
      return function() {
        var or__3027__auto__ = cljs.core._nth[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._nth["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3015__auto__ = coll;
      if (and__3015__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__3654__auto__ = coll == null ? null : coll;
      return function() {
        var or__3027__auto__ = cljs.core._nth[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._nth["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj15760 = {};
  return obj15760;
}();
cljs.core.ISeq = function() {
  var obj15762 = {};
  return obj15762;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._first[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._first["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._rest[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._rest["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj15764 = {};
  return obj15764;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._next[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._next["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj15766 = {};
  return obj15766;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3015__auto__ = o;
      if (and__3015__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__3654__auto__ = o == null ? null : o;
      return function() {
        var or__3027__auto__ = cljs.core._lookup[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._lookup["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3015__auto__ = o;
      if (and__3015__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__3654__auto__ = o == null ? null : o;
      return function() {
        var or__3027__auto__ = cljs.core._lookup[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._lookup["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj15768 = {};
  return obj15768;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._assoc[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._assoc["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj15770 = {};
  return obj15770;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._dissoc[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._dissoc["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj15772 = {};
  return obj15772;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._key[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._key["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._val[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._val["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj15774 = {};
  return obj15774;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._disjoin[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._disjoin["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj15776 = {};
  return obj15776;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._peek[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._peek["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._pop[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._pop["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj15778 = {};
  return obj15778;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._assoc_n[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj15780 = {};
  return obj15780;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3015__auto__ = o;
    if (and__3015__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__3654__auto__ = o == null ? null : o;
    return function() {
      var or__3027__auto__ = cljs.core._deref[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._deref["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15782 = {};
  return obj15782;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3015__auto__ = o;
    if (and__3015__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__3654__auto__ = o == null ? null : o;
    return function() {
      var or__3027__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj15784 = {};
  return obj15784;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3015__auto__ = o;
    if (and__3015__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__3654__auto__ = o == null ? null : o;
    return function() {
      var or__3027__auto__ = cljs.core._meta[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._meta["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj15786 = {};
  return obj15786;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3015__auto__ = o;
    if (and__3015__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__3654__auto__ = o == null ? null : o;
    return function() {
      var or__3027__auto__ = cljs.core._with_meta[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._with_meta["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj15788 = {};
  return obj15788;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3015__auto__ = coll;
      if (and__3015__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__3654__auto__ = coll == null ? null : coll;
      return function() {
        var or__3027__auto__ = cljs.core._reduce[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._reduce["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3015__auto__ = coll;
      if (and__3015__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__3654__auto__ = coll == null ? null : coll;
      return function() {
        var or__3027__auto__ = cljs.core._reduce[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._reduce["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj15790 = {};
  return obj15790;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._kv_reduce[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj15792 = {};
  return obj15792;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3015__auto__ = o;
    if (and__3015__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__3654__auto__ = o == null ? null : o;
    return function() {
      var or__3027__auto__ = cljs.core._equiv[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._equiv["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj15794 = {};
  return obj15794;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3015__auto__ = o;
    if (and__3015__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__3654__auto__ = o == null ? null : o;
    return function() {
      var or__3027__auto__ = cljs.core._hash[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._hash["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj15796 = {};
  return obj15796;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3015__auto__ = o;
    if (and__3015__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__3654__auto__ = o == null ? null : o;
    return function() {
      var or__3027__auto__ = cljs.core._seq[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._seq["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj15798 = {};
  return obj15798;
}();
cljs.core.IList = function() {
  var obj15800 = {};
  return obj15800;
}();
cljs.core.IRecord = function() {
  var obj15802 = {};
  return obj15802;
}();
cljs.core.IReversible = function() {
  var obj15804 = {};
  return obj15804;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._rseq[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._rseq["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj15806 = {};
  return obj15806;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._sorted_seq[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._entry_key[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._entry_key["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._comparator[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._comparator["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj15808 = {};
  return obj15808;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3015__auto__ = writer;
    if (and__3015__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__3654__auto__ = writer == null ? null : writer;
    return function() {
      var or__3027__auto__ = cljs.core._write[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._write["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3015__auto__ = writer;
    if (and__3015__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__3654__auto__ = writer == null ? null : writer;
    return function() {
      var or__3027__auto__ = cljs.core._flush[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._flush["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj15810 = {};
  return obj15810;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3015__auto__ = o;
    if (and__3015__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__3654__auto__ = o == null ? null : o;
    return function() {
      var or__3027__auto__ = cljs.core._pr_writer[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj15812 = {};
  return obj15812;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3015__auto__ = d;
    if (and__3015__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__3654__auto__ = d == null ? null : d;
    return function() {
      var or__3027__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj15814 = {};
  return obj15814;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3015__auto__ = this$;
    if (and__3015__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__3654__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3027__auto__ = cljs.core._notify_watches[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3015__auto__ = this$;
    if (and__3015__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__3654__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3027__auto__ = cljs.core._add_watch[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._add_watch["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3015__auto__ = this$;
    if (and__3015__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__3654__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3027__auto__ = cljs.core._remove_watch[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj15816 = {};
  return obj15816;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._as_transient[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._as_transient["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj15818 = {};
  return obj15818;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3015__auto__ = tcoll;
    if (and__3015__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__3654__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3027__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3015__auto__ = tcoll;
    if (and__3015__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__3654__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3027__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj15820 = {};
  return obj15820;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3015__auto__ = tcoll;
    if (and__3015__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__3654__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3027__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj15822 = {};
  return obj15822;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3015__auto__ = tcoll;
    if (and__3015__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__3654__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3027__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj15824 = {};
  return obj15824;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3015__auto__ = tcoll;
    if (and__3015__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__3654__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3027__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3015__auto__ = tcoll;
    if (and__3015__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__3654__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3027__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj15826 = {};
  return obj15826;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3015__auto__ = tcoll;
    if (and__3015__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__3654__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3027__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj15828 = {};
  return obj15828;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3015__auto__ = x;
    if (and__3015__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__3654__auto__ = x == null ? null : x;
    return function() {
      var or__3027__auto__ = cljs.core._compare[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._compare["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj15830 = {};
  return obj15830;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._drop_first[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._drop_first["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15832 = {};
  return obj15832;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._chunked_first[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._chunked_rest[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj15834 = {};
  return obj15834;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3015__auto__ = coll;
    if (and__3015__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__3654__auto__ = coll == null ? null : coll;
    return function() {
      var or__3027__auto__ = cljs.core._chunked_next[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj15836 = {};
  return obj15836;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3015__auto__ = x;
    if (and__3015__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__3654__auto__ = x == null ? null : x;
    return function() {
      var or__3027__auto__ = cljs.core._name[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._name["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3015__auto__ = x;
    if (and__3015__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__3654__auto__ = x == null ? null : x;
    return function() {
      var or__3027__auto__ = cljs.core._namespace[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._namespace["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__15837 = i + 2;
        var G__15838 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__15837;
        h1 = G__15838;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj15840 = {};
  return obj15840;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__15841 = i + 1;
          var G__15842 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__15841;
          hash = G__15842;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj15846 = {};
      return obj15846;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__15848 = o;
    if (G__15848) {
      var bit__3670__auto__ = G__15848.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__3670__auto__ || G__15848.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3015__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3015__auto__) {
        return b.ns;
      } else {
        return and__3015__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", -1987822328)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3438__auto__ = self__._hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__15850 = null;
  var G__15850__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__15850__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__15850 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15850__2.call(this, self__, coll);
      case 3:
        return G__15850__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15850;
}();
cljs.core.Symbol.prototype.apply = function(self__, args15849) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15849)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__15852 = value;
  if (G__15852) {
    var bit__3677__auto__ = G__15852.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__3677__auto__ || G__15852.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__15852.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15852);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15852);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15854 = coll;
      if (G__15854) {
        var bit__3670__auto__ = G__15854.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__3670__auto__ || G__15854.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15856 = coll;
      if (G__15856) {
        var bit__3670__auto__ = G__15856.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__3670__auto__ || G__15856.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15858 = coll;
      if (G__15858) {
        var bit__3670__auto__ = G__15858.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__3670__auto__ || G__15858.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15860 = coll;
      if (G__15860) {
        var bit__3670__auto__ = G__15860.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__3670__auto__ || G__15860.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__15861__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__15862 = y;
            var G__15863 = cljs.core.first.call(null, more);
            var G__15864 = cljs.core.next.call(null, more);
            x = G__15862;
            y = G__15863;
            more = G__15864;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15861 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15861__delegate.call(this, x, y, more);
    };
    G__15861.cljs$lang$maxFixedArity = 2;
    G__15861.cljs$lang$applyTo = function(arglist__15865) {
      var x = cljs.core.first(arglist__15865);
      arglist__15865 = cljs.core.next(arglist__15865);
      var y = cljs.core.first(arglist__15865);
      var more = cljs.core.rest(arglist__15865);
      return G__15861__delegate(x, y, more);
    };
    G__15861.cljs$core$IFn$_invoke$arity$variadic = G__15861__delegate;
    return G__15861;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15866 = n + 1;
      var G__15867 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__15868 = cljs.core.next.call(null, coll__$1);
      n = G__15866;
      hash_code = G__15867;
      coll__$1 = G__15868;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15869 = n + 1;
      var G__15870 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__15871 = cljs.core.next.call(null, coll__$1);
      n = G__15869;
      hash_code = G__15870;
      coll__$1 = G__15871;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15872 = nval;
            var G__15873 = n + 1;
            val = G__15872;
            n = G__15873;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15874 = nval;
          var G__15875 = n + 1;
          val__$1 = G__15874;
          n = G__15875;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15876 = nval;
          var G__15877 = n + 1;
          val__$1 = G__15876;
          n = G__15877;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15878 = nval;
            var G__15879 = n + 1;
            val = G__15878;
            n = G__15879;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15880 = nval;
          var G__15881 = n + 1;
          val__$1 = G__15880;
          n = G__15881;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15882 = nval;
          var G__15883 = n + 1;
          val__$1 = G__15882;
          n = G__15883;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__15885 = x;
  if (G__15885) {
    var bit__3677__auto__ = G__15885.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__3677__auto__ || G__15885.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__15885.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15885);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15885);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__15887 = x;
  if (G__15887) {
    var bit__3677__auto__ = G__15887.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__3677__auto__ || G__15887.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__15887.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15887);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15887);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__15888 = sn;
      s = G__15888;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__15889__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__15890 = conj.call(null, coll, x);
          var G__15891 = cljs.core.first.call(null, xs);
          var G__15892 = cljs.core.next.call(null, xs);
          coll = G__15890;
          x = G__15891;
          xs = G__15892;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__15889 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15889__delegate.call(this, coll, x, xs);
    };
    G__15889.cljs$lang$maxFixedArity = 2;
    G__15889.cljs$lang$applyTo = function(arglist__15893) {
      var coll = cljs.core.first(arglist__15893);
      arglist__15893 = cljs.core.next(arglist__15893);
      var x = cljs.core.first(arglist__15893);
      var xs = cljs.core.rest(arglist__15893);
      return G__15889__delegate(coll, x, xs);
    };
    G__15889.cljs$core$IFn$_invoke$arity$variadic = G__15889__delegate;
    return G__15889;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__15894 = cljs.core.next.call(null, s);
      var G__15895 = acc + 1;
      s = G__15894;
      acc = G__15895;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15897 = coll;
      if (G__15897) {
        var bit__3670__auto__ = G__15897.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__3670__auto__ || G__15897.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15898 = cljs.core.next.call(null, coll);
              var G__15899 = n - 1;
              coll = G__15898;
              n = G__15899;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15900 = cljs.core.next.call(null, coll);
              var G__15901 = n - 1;
              var G__15902 = not_found;
              coll = G__15900;
              n = G__15901;
              not_found = G__15902;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__15907 = coll;
          if (G__15907) {
            var bit__3670__auto__ = G__15907.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__3670__auto__ || G__15907.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__15908 = coll;
                  if (G__15908) {
                    var bit__3677__auto__ = G__15908.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__3677__auto__ || G__15908.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15908.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15908);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15908);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__15909 = coll;
          if (G__15909) {
            var bit__3670__auto__ = G__15909.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__3670__auto__ || G__15909.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__15910 = coll;
                  if (G__15910) {
                    var bit__3677__auto__ = G__15910.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__3677__auto__ || G__15910.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15910.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15910);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15910);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__15913 = o;
        if (G__15913) {
          var bit__3670__auto__ = G__15913.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__3670__auto__ || G__15913.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__15914 = o;
        if (G__15914) {
          var bit__3670__auto__ = G__15914.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__3670__auto__ || G__15914.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__15915__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__15916 = ret;
          var G__15917 = cljs.core.first.call(null, kvs);
          var G__15918 = cljs.core.second.call(null, kvs);
          var G__15919 = cljs.core.nnext.call(null, kvs);
          coll = G__15916;
          k = G__15917;
          v = G__15918;
          kvs = G__15919;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__15915 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15915__delegate.call(this, coll, k, v, kvs);
    };
    G__15915.cljs$lang$maxFixedArity = 3;
    G__15915.cljs$lang$applyTo = function(arglist__15920) {
      var coll = cljs.core.first(arglist__15920);
      arglist__15920 = cljs.core.next(arglist__15920);
      var k = cljs.core.first(arglist__15920);
      arglist__15920 = cljs.core.next(arglist__15920);
      var v = cljs.core.first(arglist__15920);
      var kvs = cljs.core.rest(arglist__15920);
      return G__15915__delegate(coll, k, v, kvs);
    };
    G__15915.cljs$core$IFn$_invoke$arity$variadic = G__15915__delegate;
    return G__15915;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__15921__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15922 = ret;
            var G__15923 = cljs.core.first.call(null, ks);
            var G__15924 = cljs.core.next.call(null, ks);
            coll = G__15922;
            k = G__15923;
            ks = G__15924;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15921 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15921__delegate.call(this, coll, k, ks);
    };
    G__15921.cljs$lang$maxFixedArity = 2;
    G__15921.cljs$lang$applyTo = function(arglist__15925) {
      var coll = cljs.core.first(arglist__15925);
      arglist__15925 = cljs.core.next(arglist__15925);
      var k = cljs.core.first(arglist__15925);
      var ks = cljs.core.rest(arglist__15925);
      return G__15921__delegate(coll, k, ks);
    };
    G__15921.cljs$core$IFn$_invoke$arity$variadic = G__15921__delegate;
    return G__15921;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3027__auto__ = goog.isFunction(f);
  if (or__3027__auto__) {
    return or__3027__auto__;
  } else {
    var G__15929 = f;
    if (G__15929) {
      var bit__3677__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3027__auto____$1 = bit__3677__auto__;
        if (cljs.core.truth_(or__3027__auto____$1)) {
          return or__3027__auto____$1;
        } else {
          return G__15929.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__15929.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15929);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15929);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__15931 = null;
  var G__15931__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__15931__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__15931__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__15931__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__15931__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__15931__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__15931__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__15931__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__15931__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__15931__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__15931__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__15931__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__15931__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__15931__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__15931__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__15931__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__15931__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__15931__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__15931__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__15931__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__15931__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__15931__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__15931 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__15931__1.call(this, self__);
      case 2:
        return G__15931__2.call(this, self__, a);
      case 3:
        return G__15931__3.call(this, self__, a, b);
      case 4:
        return G__15931__4.call(this, self__, a, b, c);
      case 5:
        return G__15931__5.call(this, self__, a, b, c, d);
      case 6:
        return G__15931__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__15931__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__15931__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__15931__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__15931__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__15931__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__15931__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__15931__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__15931__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__15931__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__15931__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__15931__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__15931__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__15931__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__15931__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__15931__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__15931__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15931;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args15930) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15930)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__15935 = o;
    if (G__15935) {
      var bit__3677__auto__ = G__15935.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__3677__auto__ || G__15935.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15935.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15935);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15935);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3015__auto__ = !(o == null);
    if (and__3015__auto__) {
      var G__15939 = o;
      if (G__15939) {
        var bit__3677__auto__ = G__15939.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__3677__auto__ || G__15939.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__15939.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15939);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15939);
      }
    } else {
      return and__3015__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__15940__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15941 = ret;
            var G__15942 = cljs.core.first.call(null, ks);
            var G__15943 = cljs.core.next.call(null, ks);
            coll = G__15941;
            k = G__15942;
            ks = G__15943;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15940 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15940__delegate.call(this, coll, k, ks);
    };
    G__15940.cljs$lang$maxFixedArity = 2;
    G__15940.cljs$lang$applyTo = function(arglist__15944) {
      var coll = cljs.core.first(arglist__15944);
      arglist__15944 = cljs.core.next(arglist__15944);
      var k = cljs.core.first(arglist__15944);
      var ks = cljs.core.rest(arglist__15944);
      return G__15940__delegate(coll, k, ks);
    };
    G__15940.cljs$core$IFn$_invoke$arity$variadic = G__15940__delegate;
    return G__15940;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15946 = x;
    if (G__15946) {
      var bit__3677__auto__ = G__15946.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__3677__auto__ || G__15946.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__15946.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15946);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15946);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15948 = x;
    if (G__15948) {
      var bit__3677__auto__ = G__15948.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__3677__auto__ || G__15948.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__15948.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15948);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15948);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__15950 = x;
  if (G__15950) {
    var bit__3677__auto__ = G__15950.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__3677__auto__ || G__15950.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__15950.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15950);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15950);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__15952 = x;
  if (G__15952) {
    var bit__3677__auto__ = G__15952.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__3677__auto__ || G__15952.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__15952.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15952);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15952);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__15954 = x;
  if (G__15954) {
    var bit__3677__auto__ = G__15954.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__3677__auto__ || G__15954.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__15954.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15954);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15954);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__15956 = x;
  if (G__15956) {
    var bit__3677__auto__ = G__15956.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__3677__auto__ || G__15956.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__15956.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15956);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15956);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15958 = x;
    if (G__15958) {
      var bit__3677__auto__ = G__15958.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__3677__auto__ || G__15958.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__15958.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15958);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15958);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__15960 = x;
  if (G__15960) {
    var bit__3677__auto__ = G__15960.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__3677__auto__ || G__15960.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__15960.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15960);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15960);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__15962 = x;
  if (G__15962) {
    var bit__3670__auto__ = G__15962.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__3670__auto__ || G__15962.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj15966 = {};
    return obj15966;
  };
  var js_obj__1 = function() {
    var G__15967__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__15967 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15967__delegate.call(this, keyvals);
    };
    G__15967.cljs$lang$maxFixedArity = 0;
    G__15967.cljs$lang$applyTo = function(arglist__15968) {
      var keyvals = cljs.core.seq(arglist__15968);
      return G__15967__delegate(keyvals);
    };
    G__15967.cljs$core$IFn$_invoke$arity$variadic = G__15967__delegate;
    return G__15967;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__15969 = i__$1 + 1;
      var G__15970 = j__$1 + 1;
      var G__15971 = len__$1 - 1;
      i__$1 = G__15969;
      j__$1 = G__15970;
      len__$1 = G__15971;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__15972 = i__$1 - 1;
      var G__15973 = j__$1 - 1;
      var G__15974 = len__$1 - 1;
      i__$1 = G__15972;
      j__$1 = G__15973;
      len__$1 = G__15974;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj15976 = {};
  return obj15976;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__15978 = s;
    if (G__15978) {
      var bit__3677__auto__ = G__15978.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__3677__auto__ || G__15978.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__15978.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15978);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15978);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__15980 = s;
  if (G__15980) {
    var bit__3677__auto__ = G__15980.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__3677__auto__ || G__15980.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__15980.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15980);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15980);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3027__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3027__auto__) {
    return or__3027__auto__;
  } else {
    var G__15984 = f;
    if (G__15984) {
      var bit__3677__auto__ = G__15984.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__3677__auto__ || G__15984.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__15984.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__15984);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__15984);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__15985__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__15986 = cljs.core.conj.call(null, s, x__$1);
              var G__15987 = etc;
              s = G__15986;
              xs = G__15987;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__15985 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15985__delegate.call(this, x, y, more);
    };
    G__15985.cljs$lang$maxFixedArity = 2;
    G__15985.cljs$lang$applyTo = function(arglist__15988) {
      var x = cljs.core.first(arglist__15988);
      arglist__15988 = cljs.core.next(arglist__15988);
      var y = cljs.core.first(arglist__15988);
      var more = cljs.core.rest(arglist__15988);
      return G__15985__delegate(x, y, more);
    };
    G__15985.cljs$core$IFn$_invoke$arity$variadic = G__15985__delegate;
    return G__15985;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3027__auto__ = cljs.core.seq.call(null, coll);
    if (or__3027__auto__) {
      return or__3027__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__15990 = x;
            if (G__15990) {
              var bit__3670__auto__ = G__15990.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__3670__auto__ || G__15990.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__15991 = xs;
        var G__15992 = ys;
        var G__15993 = len;
        var G__15994 = n + 1;
        xs = G__15991;
        ys = G__15992;
        len = G__15993;
        n = G__15994;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15995 = nval;
          var G__15996 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__15995;
          coll__$1 = G__15996;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__15999 = coll;
      if (G__15999) {
        var bit__3670__auto__ = G__15999.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__3670__auto__ || G__15999.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__16000 = coll;
      if (G__16000) {
        var bit__3670__auto__ = G__16000.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__3670__auto__ || G__16000.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__16001__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__16001 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16001__delegate.call(this, x, y, more);
    };
    G__16001.cljs$lang$maxFixedArity = 2;
    G__16001.cljs$lang$applyTo = function(arglist__16002) {
      var x = cljs.core.first(arglist__16002);
      arglist__16002 = cljs.core.next(arglist__16002);
      var y = cljs.core.first(arglist__16002);
      var more = cljs.core.rest(arglist__16002);
      return G__16001__delegate(x, y, more);
    };
    G__16001.cljs$core$IFn$_invoke$arity$variadic = G__16001__delegate;
    return G__16001;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__16003__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__16003 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16003__delegate.call(this, x, y, more);
    };
    G__16003.cljs$lang$maxFixedArity = 2;
    G__16003.cljs$lang$applyTo = function(arglist__16004) {
      var x = cljs.core.first(arglist__16004);
      arglist__16004 = cljs.core.next(arglist__16004);
      var y = cljs.core.first(arglist__16004);
      var more = cljs.core.rest(arglist__16004);
      return G__16003__delegate(x, y, more);
    };
    G__16003.cljs$core$IFn$_invoke$arity$variadic = G__16003__delegate;
    return G__16003;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__16005__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__16005 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16005__delegate.call(this, x, y, more);
    };
    G__16005.cljs$lang$maxFixedArity = 2;
    G__16005.cljs$lang$applyTo = function(arglist__16006) {
      var x = cljs.core.first(arglist__16006);
      arglist__16006 = cljs.core.next(arglist__16006);
      var y = cljs.core.first(arglist__16006);
      var more = cljs.core.rest(arglist__16006);
      return G__16005__delegate(x, y, more);
    };
    G__16005.cljs$core$IFn$_invoke$arity$variadic = G__16005__delegate;
    return G__16005;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__16007__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__16007 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16007__delegate.call(this, x, y, more);
    };
    G__16007.cljs$lang$maxFixedArity = 2;
    G__16007.cljs$lang$applyTo = function(arglist__16008) {
      var x = cljs.core.first(arglist__16008);
      arglist__16008 = cljs.core.next(arglist__16008);
      var y = cljs.core.first(arglist__16008);
      var more = cljs.core.rest(arglist__16008);
      return G__16007__delegate(x, y, more);
    };
    G__16007.cljs$core$IFn$_invoke$arity$variadic = G__16007__delegate;
    return G__16007;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__16009__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__16010 = y;
            var G__16011 = cljs.core.first.call(null, more);
            var G__16012 = cljs.core.next.call(null, more);
            x = G__16010;
            y = G__16011;
            more = G__16012;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16009 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16009__delegate.call(this, x, y, more);
    };
    G__16009.cljs$lang$maxFixedArity = 2;
    G__16009.cljs$lang$applyTo = function(arglist__16013) {
      var x = cljs.core.first(arglist__16013);
      arglist__16013 = cljs.core.next(arglist__16013);
      var y = cljs.core.first(arglist__16013);
      var more = cljs.core.rest(arglist__16013);
      return G__16009__delegate(x, y, more);
    };
    G__16009.cljs$core$IFn$_invoke$arity$variadic = G__16009__delegate;
    return G__16009;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__16014__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16015 = y;
            var G__16016 = cljs.core.first.call(null, more);
            var G__16017 = cljs.core.next.call(null, more);
            x = G__16015;
            y = G__16016;
            more = G__16017;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16014 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16014__delegate.call(this, x, y, more);
    };
    G__16014.cljs$lang$maxFixedArity = 2;
    G__16014.cljs$lang$applyTo = function(arglist__16018) {
      var x = cljs.core.first(arglist__16018);
      arglist__16018 = cljs.core.next(arglist__16018);
      var y = cljs.core.first(arglist__16018);
      var more = cljs.core.rest(arglist__16018);
      return G__16014__delegate(x, y, more);
    };
    G__16014.cljs$core$IFn$_invoke$arity$variadic = G__16014__delegate;
    return G__16014;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__16019__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__16020 = y;
            var G__16021 = cljs.core.first.call(null, more);
            var G__16022 = cljs.core.next.call(null, more);
            x = G__16020;
            y = G__16021;
            more = G__16022;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16019 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16019__delegate.call(this, x, y, more);
    };
    G__16019.cljs$lang$maxFixedArity = 2;
    G__16019.cljs$lang$applyTo = function(arglist__16023) {
      var x = cljs.core.first(arglist__16023);
      arglist__16023 = cljs.core.next(arglist__16023);
      var y = cljs.core.first(arglist__16023);
      var more = cljs.core.rest(arglist__16023);
      return G__16019__delegate(x, y, more);
    };
    G__16019.cljs$core$IFn$_invoke$arity$variadic = G__16019__delegate;
    return G__16019;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__16024__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16025 = y;
            var G__16026 = cljs.core.first.call(null, more);
            var G__16027 = cljs.core.next.call(null, more);
            x = G__16025;
            y = G__16026;
            more = G__16027;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16024 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16024__delegate.call(this, x, y, more);
    };
    G__16024.cljs$lang$maxFixedArity = 2;
    G__16024.cljs$lang$applyTo = function(arglist__16028) {
      var x = cljs.core.first(arglist__16028);
      arglist__16028 = cljs.core.next(arglist__16028);
      var y = cljs.core.first(arglist__16028);
      var more = cljs.core.rest(arglist__16028);
      return G__16024__delegate(x, y, more);
    };
    G__16024.cljs$core$IFn$_invoke$arity$variadic = G__16024__delegate;
    return G__16024;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3334__auto__ = x;
    var y__3335__auto__ = y;
    return x__3334__auto__ > y__3335__auto__ ? x__3334__auto__ : y__3335__auto__;
  };
  var max__3 = function() {
    var G__16029__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3334__auto__ = x;
        var y__3335__auto__ = y;
        return x__3334__auto__ > y__3335__auto__ ? x__3334__auto__ : y__3335__auto__;
      }(), more);
    };
    var G__16029 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16029__delegate.call(this, x, y, more);
    };
    G__16029.cljs$lang$maxFixedArity = 2;
    G__16029.cljs$lang$applyTo = function(arglist__16030) {
      var x = cljs.core.first(arglist__16030);
      arglist__16030 = cljs.core.next(arglist__16030);
      var y = cljs.core.first(arglist__16030);
      var more = cljs.core.rest(arglist__16030);
      return G__16029__delegate(x, y, more);
    };
    G__16029.cljs$core$IFn$_invoke$arity$variadic = G__16029__delegate;
    return G__16029;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3341__auto__ = x;
    var y__3342__auto__ = y;
    return x__3341__auto__ < y__3342__auto__ ? x__3341__auto__ : y__3342__auto__;
  };
  var min__3 = function() {
    var G__16031__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3341__auto__ = x;
        var y__3342__auto__ = y;
        return x__3341__auto__ < y__3342__auto__ ? x__3341__auto__ : y__3342__auto__;
      }(), more);
    };
    var G__16031 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16031__delegate.call(this, x, y, more);
    };
    G__16031.cljs$lang$maxFixedArity = 2;
    G__16031.cljs$lang$applyTo = function(arglist__16032) {
      var x = cljs.core.first(arglist__16032);
      arglist__16032 = cljs.core.next(arglist__16032);
      var y = cljs.core.first(arglist__16032);
      var more = cljs.core.rest(arglist__16032);
      return G__16031__delegate(x, y, more);
    };
    G__16031.cljs$core$IFn$_invoke$arity$variadic = G__16031__delegate;
    return G__16031;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__16033__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__16033 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16033__delegate.call(this, x, y, more);
    };
    G__16033.cljs$lang$maxFixedArity = 2;
    G__16033.cljs$lang$applyTo = function(arglist__16034) {
      var x = cljs.core.first(arglist__16034);
      arglist__16034 = cljs.core.next(arglist__16034);
      var y = cljs.core.first(arglist__16034);
      var more = cljs.core.rest(arglist__16034);
      return G__16033__delegate(x, y, more);
    };
    G__16033.cljs$core$IFn$_invoke$arity$variadic = G__16033__delegate;
    return G__16033;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__16035__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__16035 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16035__delegate.call(this, x, y, more);
    };
    G__16035.cljs$lang$maxFixedArity = 2;
    G__16035.cljs$lang$applyTo = function(arglist__16036) {
      var x = cljs.core.first(arglist__16036);
      arglist__16036 = cljs.core.next(arglist__16036);
      var y = cljs.core.first(arglist__16036);
      var more = cljs.core.rest(arglist__16036);
      return G__16035__delegate(x, y, more);
    };
    G__16035.cljs$core$IFn$_invoke$arity$variadic = G__16035__delegate;
    return G__16035;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__16037__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__16037 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16037__delegate.call(this, x, y, more);
    };
    G__16037.cljs$lang$maxFixedArity = 2;
    G__16037.cljs$lang$applyTo = function(arglist__16038) {
      var x = cljs.core.first(arglist__16038);
      arglist__16038 = cljs.core.next(arglist__16038);
      var y = cljs.core.first(arglist__16038);
      var more = cljs.core.rest(arglist__16038);
      return G__16037__delegate(x, y, more);
    };
    G__16037.cljs$core$IFn$_invoke$arity$variadic = G__16037__delegate;
    return G__16037;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__16039__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__16039 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16039__delegate.call(this, x, y, more);
    };
    G__16039.cljs$lang$maxFixedArity = 2;
    G__16039.cljs$lang$applyTo = function(arglist__16040) {
      var x = cljs.core.first(arglist__16040);
      arglist__16040 = cljs.core.next(arglist__16040);
      var y = cljs.core.first(arglist__16040);
      var more = cljs.core.rest(arglist__16040);
      return G__16039__delegate(x, y, more);
    };
    G__16039.cljs$core$IFn$_invoke$arity$variadic = G__16039__delegate;
    return G__16039;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__16041__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__16041 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16041__delegate.call(this, x, y, more);
    };
    G__16041.cljs$lang$maxFixedArity = 2;
    G__16041.cljs$lang$applyTo = function(arglist__16042) {
      var x = cljs.core.first(arglist__16042);
      arglist__16042 = cljs.core.next(arglist__16042);
      var y = cljs.core.first(arglist__16042);
      var more = cljs.core.rest(arglist__16042);
      return G__16041__delegate(x, y, more);
    };
    G__16041.cljs$core$IFn$_invoke$arity$variadic = G__16041__delegate;
    return G__16041;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__16043__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__16043 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16043__delegate.call(this, x, y, more);
    };
    G__16043.cljs$lang$maxFixedArity = 2;
    G__16043.cljs$lang$applyTo = function(arglist__16044) {
      var x = cljs.core.first(arglist__16044);
      arglist__16044 = cljs.core.next(arglist__16044);
      var y = cljs.core.first(arglist__16044);
      var more = cljs.core.rest(arglist__16044);
      return G__16043__delegate(x, y, more);
    };
    G__16043.cljs$core$IFn$_invoke$arity$variadic = G__16043__delegate;
    return G__16043;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__16045__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__16045 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16045__delegate.call(this, x, y, more);
    };
    G__16045.cljs$lang$maxFixedArity = 2;
    G__16045.cljs$lang$applyTo = function(arglist__16046) {
      var x = cljs.core.first(arglist__16046);
      arglist__16046 = cljs.core.next(arglist__16046);
      var y = cljs.core.first(arglist__16046);
      var more = cljs.core.rest(arglist__16046);
      return G__16045__delegate(x, y, more);
    };
    G__16045.cljs$core$IFn$_invoke$arity$variadic = G__16045__delegate;
    return G__16045;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__16047__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__16048 = y;
            var G__16049 = cljs.core.first.call(null, more);
            var G__16050 = cljs.core.next.call(null, more);
            x = G__16048;
            y = G__16049;
            more = G__16050;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16047 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16047__delegate.call(this, x, y, more);
    };
    G__16047.cljs$lang$maxFixedArity = 2;
    G__16047.cljs$lang$applyTo = function(arglist__16051) {
      var x = cljs.core.first(arglist__16051);
      arglist__16051 = cljs.core.next(arglist__16051);
      var y = cljs.core.first(arglist__16051);
      var more = cljs.core.rest(arglist__16051);
      return G__16047__delegate(x, y, more);
    };
    G__16047.cljs$core$IFn$_invoke$arity$variadic = G__16047__delegate;
    return G__16047;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__16052 = n__$1 - 1;
      var G__16053 = cljs.core.next.call(null, xs);
      n__$1 = G__16052;
      xs = G__16053;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__16054__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__16055 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__16056 = cljs.core.next.call(null, more);
          sb = G__16055;
          more = G__16056;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__16054 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16054__delegate.call(this, x, ys);
    };
    G__16054.cljs$lang$maxFixedArity = 1;
    G__16054.cljs$lang$applyTo = function(arglist__16057) {
      var x = cljs.core.first(arglist__16057);
      var ys = cljs.core.rest(arglist__16057);
      return G__16054__delegate(x, ys);
    };
    G__16054.cljs$core$IFn$_invoke$arity$variadic = G__16054__delegate;
    return G__16054;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__16058 = cljs.core.next.call(null, xs);
            var G__16059 = cljs.core.next.call(null, ys);
            xs = G__16058;
            ys = G__16059;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__16060 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__16061 = cljs.core.next.call(null, s);
        res = G__16060;
        s = G__16061;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__16062 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__16063 = cljs.core.next.call(null, s);
      h = G__16062;
      s = G__16063;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__16064 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__16065 = cljs.core.next.call(null, s__$1);
      h = G__16064;
      s__$1 = G__16065;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__16072_16078 = cljs.core.seq.call(null, fn_map);
  var chunk__16073_16079 = null;
  var count__16074_16080 = 0;
  var i__16075_16081 = 0;
  while (true) {
    if (i__16075_16081 < count__16074_16080) {
      var vec__16076_16082 = cljs.core._nth.call(null, chunk__16073_16079, i__16075_16081);
      var key_name_16083 = cljs.core.nth.call(null, vec__16076_16082, 0, null);
      var f_16084 = cljs.core.nth.call(null, vec__16076_16082, 1, null);
      var str_name_16085 = cljs.core.name.call(null, key_name_16083);
      obj[str_name_16085] = f_16084;
      var G__16086 = seq__16072_16078;
      var G__16087 = chunk__16073_16079;
      var G__16088 = count__16074_16080;
      var G__16089 = i__16075_16081 + 1;
      seq__16072_16078 = G__16086;
      chunk__16073_16079 = G__16087;
      count__16074_16080 = G__16088;
      i__16075_16081 = G__16089;
      continue;
    } else {
      var temp__4126__auto___16090 = cljs.core.seq.call(null, seq__16072_16078);
      if (temp__4126__auto___16090) {
        var seq__16072_16091__$1 = temp__4126__auto___16090;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16072_16091__$1)) {
          var c__3783__auto___16092 = cljs.core.chunk_first.call(null, seq__16072_16091__$1);
          var G__16093 = cljs.core.chunk_rest.call(null, seq__16072_16091__$1);
          var G__16094 = c__3783__auto___16092;
          var G__16095 = cljs.core.count.call(null, c__3783__auto___16092);
          var G__16096 = 0;
          seq__16072_16078 = G__16093;
          chunk__16073_16079 = G__16094;
          count__16074_16080 = G__16095;
          i__16075_16081 = G__16096;
          continue;
        } else {
          var vec__16077_16097 = cljs.core.first.call(null, seq__16072_16091__$1);
          var key_name_16098 = cljs.core.nth.call(null, vec__16077_16097, 0, null);
          var f_16099 = cljs.core.nth.call(null, vec__16077_16097, 1, null);
          var str_name_16100 = cljs.core.name.call(null, key_name_16098);
          obj[str_name_16100] = f_16099;
          var G__16101 = cljs.core.next.call(null, seq__16072_16091__$1);
          var G__16102 = null;
          var G__16103 = 0;
          var G__16104 = 0;
          seq__16072_16078 = G__16101;
          chunk__16073_16079 = G__16102;
          count__16074_16080 = G__16103;
          i__16075_16081 = G__16104;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__16106 = coll;
  if (G__16106) {
    var bit__3677__auto__ = G__16106.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__3677__auto__ || G__16106.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__16106.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16106);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16106);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__16107 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__16107;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__16108 = i - 1;
        var G__16109 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__16108;
        r = G__16109;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__16110) {
    var xs = cljs.core.seq(arglist__16110);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3027__auto__ = coll == null;
    if (or__3027__auto__) {
      return or__3027__auto__;
    } else {
      var G__16114 = coll;
      if (G__16114) {
        var bit__3670__auto__ = G__16114.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__3670__auto__ || G__16114.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__16116 = x;
  if (G__16116) {
    var bit__3677__auto__ = G__16116.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__3677__auto__ || G__16116.cljs$core$IList$) {
      return true;
    } else {
      if (!G__16116.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16116);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16116);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__3438__auto__ = self__._hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__16118 = null;
  var G__16118__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__16118__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__16118 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16118__2.call(this, self__, coll);
      case 3:
        return G__16118__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16118;
}();
cljs.core.Keyword.prototype.apply = function(self__, args16117) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16117)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__16120 = x;
    if (G__16120) {
      var bit__3670__auto__ = G__16120.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__3670__auto__ || G__16120.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__16121 = ls.sval();
        ls = G__16121;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__16123 = s;
    if (G__16123) {
      var bit__3670__auto__ = G__16123.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__3670__auto__ || G__16123.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__16124 = cljs.core.next.call(null, s__$1);
      s__$1 = G__16124;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_16125 = 0;
  var xs_16126 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_16126) {
      ret[i_16125] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_16126));
      var G__16127 = i_16125 + 1;
      var G__16128 = cljs.core.next.call(null, xs_16126);
      i_16125 = G__16127;
      xs_16126 = G__16128;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16129 = i + 1;
          var G__16130 = cljs.core.next.call(null, s__$1);
          i = G__16129;
          s__$1 = G__16130;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3883__auto___16131 = size;
      var i_16132 = 0;
      while (true) {
        if (i_16132 < n__3883__auto___16131) {
          a[i_16132] = init_val_or_seq;
          var G__16133 = i_16132 + 1;
          i_16132 = G__16133;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16134 = i + 1;
          var G__16135 = cljs.core.next.call(null, s__$1);
          i = G__16134;
          s__$1 = G__16135;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3883__auto___16136 = size;
      var i_16137 = 0;
      while (true) {
        if (i_16137 < n__3883__auto___16136) {
          a[i_16137] = init_val_or_seq;
          var G__16138 = i_16137 + 1;
          i_16137 = G__16138;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16139 = i + 1;
          var G__16140 = cljs.core.next.call(null, s__$1);
          i = G__16139;
          s__$1 = G__16140;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3883__auto___16141 = size;
      var i_16142 = 0;
      while (true) {
        if (i_16142 < n__3883__auto___16141) {
          a[i_16142] = init_val_or_seq;
          var G__16143 = i_16142 + 1;
          i_16142 = G__16143;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16144 = i + 1;
          var G__16145 = cljs.core.next.call(null, s__$1);
          i = G__16144;
          s__$1 = G__16145;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3883__auto___16146 = size;
      var i_16147 = 0;
      while (true) {
        if (i_16147 < n__3883__auto___16146) {
          a[i_16147] = init_val_or_seq;
          var G__16148 = i_16147 + 1;
          i_16147 = G__16148;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__16149 = cljs.core.next.call(null, s__$1);
        var G__16150 = i - 1;
        var G__16151 = sum + 1;
        s__$1 = G__16149;
        i = G__16150;
        sum = G__16151;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__16152__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__16152 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16152__delegate.call(this, x, y, zs);
    };
    G__16152.cljs$lang$maxFixedArity = 2;
    G__16152.cljs$lang$applyTo = function(arglist__16153) {
      var x = cljs.core.first(arglist__16153);
      arglist__16153 = cljs.core.next(arglist__16153);
      var y = cljs.core.first(arglist__16153);
      var zs = cljs.core.rest(arglist__16153);
      return G__16152__delegate(x, y, zs);
    };
    G__16152.cljs$core$IFn$_invoke$arity$variadic = G__16152__delegate;
    return G__16152;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__16154__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__16154 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16154__delegate.call(this, a, b, c, d, more);
    };
    G__16154.cljs$lang$maxFixedArity = 4;
    G__16154.cljs$lang$applyTo = function(arglist__16155) {
      var a = cljs.core.first(arglist__16155);
      arglist__16155 = cljs.core.next(arglist__16155);
      var b = cljs.core.first(arglist__16155);
      arglist__16155 = cljs.core.next(arglist__16155);
      var c = cljs.core.first(arglist__16155);
      arglist__16155 = cljs.core.next(arglist__16155);
      var d = cljs.core.first(arglist__16155);
      var more = cljs.core.rest(arglist__16155);
      return G__16154__delegate(a, b, c, d, more);
    };
    G__16154.cljs$core$IFn$_invoke$arity$variadic = G__16154__delegate;
    return G__16154;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__16156__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16157 = ntcoll;
          var G__16158 = cljs.core.first.call(null, vals);
          var G__16159 = cljs.core.next.call(null, vals);
          tcoll = G__16157;
          val = G__16158;
          vals = G__16159;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16156 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16156__delegate.call(this, tcoll, val, vals);
    };
    G__16156.cljs$lang$maxFixedArity = 2;
    G__16156.cljs$lang$applyTo = function(arglist__16160) {
      var tcoll = cljs.core.first(arglist__16160);
      arglist__16160 = cljs.core.next(arglist__16160);
      var val = cljs.core.first(arglist__16160);
      var vals = cljs.core.rest(arglist__16160);
      return G__16156__delegate(tcoll, val, vals);
    };
    G__16156.cljs$core$IFn$_invoke$arity$variadic = G__16156__delegate;
    return G__16156;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__16161__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__16162 = ntcoll;
          var G__16163 = cljs.core.first.call(null, kvs);
          var G__16164 = cljs.core.second.call(null, kvs);
          var G__16165 = cljs.core.nnext.call(null, kvs);
          tcoll = G__16162;
          key = G__16163;
          val = G__16164;
          kvs = G__16165;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16161 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16161__delegate.call(this, tcoll, key, val, kvs);
    };
    G__16161.cljs$lang$maxFixedArity = 3;
    G__16161.cljs$lang$applyTo = function(arglist__16166) {
      var tcoll = cljs.core.first(arglist__16166);
      arglist__16166 = cljs.core.next(arglist__16166);
      var key = cljs.core.first(arglist__16166);
      arglist__16166 = cljs.core.next(arglist__16166);
      var val = cljs.core.first(arglist__16166);
      var kvs = cljs.core.rest(arglist__16166);
      return G__16161__delegate(tcoll, key, val, kvs);
    };
    G__16161.cljs$core$IFn$_invoke$arity$variadic = G__16161__delegate;
    return G__16161;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__16167__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__16168 = ntcoll;
          var G__16169 = cljs.core.first.call(null, ks);
          var G__16170 = cljs.core.next.call(null, ks);
          tcoll = G__16168;
          key = G__16169;
          ks = G__16170;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16167 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16167__delegate.call(this, tcoll, key, ks);
    };
    G__16167.cljs$lang$maxFixedArity = 2;
    G__16167.cljs$lang$applyTo = function(arglist__16171) {
      var tcoll = cljs.core.first(arglist__16171);
      arglist__16171 = cljs.core.next(arglist__16171);
      var key = cljs.core.first(arglist__16171);
      var ks = cljs.core.rest(arglist__16171);
      return G__16167__delegate(tcoll, key, ks);
    };
    G__16167.cljs$core$IFn$_invoke$arity$variadic = G__16167__delegate;
    return G__16167;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__16172__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16173 = ntcoll;
          var G__16174 = cljs.core.first.call(null, vals);
          var G__16175 = cljs.core.next.call(null, vals);
          tcoll = G__16173;
          val = G__16174;
          vals = G__16175;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16172 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16172__delegate.call(this, tcoll, val, vals);
    };
    G__16172.cljs$lang$maxFixedArity = 2;
    G__16172.cljs$lang$applyTo = function(arglist__16176) {
      var tcoll = cljs.core.first(arglist__16176);
      arglist__16176 = cljs.core.next(arglist__16176);
      var val = cljs.core.first(arglist__16176);
      var vals = cljs.core.rest(arglist__16176);
      return G__16172__delegate(tcoll, val, vals);
    };
    G__16172.cljs$core$IFn$_invoke$arity$variadic = G__16172__delegate;
    return G__16172;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a3927 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a3927);
      } else {
        return f.call(null, a3927);
      }
    } else {
      var b3928 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a3927, b3928);
        } else {
          return f.call(null, a3927, b3928);
        }
      } else {
        var c3929 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a3927, b3928, c3929);
          } else {
            return f.call(null, a3927, b3928, c3929);
          }
        } else {
          var d3930 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a3927, b3928, c3929, d3930);
            } else {
              return f.call(null, a3927, b3928, c3929, d3930);
            }
          } else {
            var e3931 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a3927, b3928, c3929, d3930, e3931);
              } else {
                return f.call(null, a3927, b3928, c3929, d3930, e3931);
              }
            } else {
              var f3932 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a3927, b3928, c3929, d3930, e3931, f3932);
                } else {
                  return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932);
                }
              } else {
                var g3933 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a3927, b3928, c3929, d3930, e3931, f3932, g3933);
                  } else {
                    return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933);
                  }
                } else {
                  var h3934 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934);
                    } else {
                      return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934);
                    }
                  } else {
                    var i3935 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935);
                      } else {
                        return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935);
                      }
                    } else {
                      var j3936 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936);
                        } else {
                          return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936);
                        }
                      } else {
                        var k3937 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937);
                          } else {
                            return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937);
                          }
                        } else {
                          var l3938 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938);
                            } else {
                              return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938);
                            }
                          } else {
                            var m3939 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939);
                              } else {
                                return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939);
                              }
                            } else {
                              var n3940 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940);
                                } else {
                                  return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940);
                                }
                              } else {
                                var o3941 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941);
                                  } else {
                                    return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941);
                                  }
                                } else {
                                  var p3942 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942);
                                    } else {
                                      return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942);
                                    }
                                  } else {
                                    var q3943 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942, q3943);
                                      } else {
                                        return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942, q3943);
                                      }
                                    } else {
                                      var r3944 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942, q3943, r3944);
                                        } else {
                                          return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942, q3943, r3944);
                                        }
                                      } else {
                                        var s3945 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942, q3943, r3944, s3945);
                                          } else {
                                            return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942, q3943, r3944, s3945);
                                          }
                                        } else {
                                          var t3946 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942, q3943, r3944, s3945, t3946);
                                            } else {
                                              return f.call(null, a3927, b3928, c3929, d3930, e3931, f3932, g3933, h3934, i3935, j3936, k3937, l3938, m3939, n3940, o3941, p3942, q3943, r3944, s3945, t3946);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__16177__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__16177 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__16177__delegate.call(this, f, a, b, c, d, args);
    };
    G__16177.cljs$lang$maxFixedArity = 5;
    G__16177.cljs$lang$applyTo = function(arglist__16178) {
      var f = cljs.core.first(arglist__16178);
      arglist__16178 = cljs.core.next(arglist__16178);
      var a = cljs.core.first(arglist__16178);
      arglist__16178 = cljs.core.next(arglist__16178);
      var b = cljs.core.first(arglist__16178);
      arglist__16178 = cljs.core.next(arglist__16178);
      var c = cljs.core.first(arglist__16178);
      arglist__16178 = cljs.core.next(arglist__16178);
      var d = cljs.core.first(arglist__16178);
      var args = cljs.core.rest(arglist__16178);
      return G__16177__delegate(f, a, b, c, d, args);
    };
    G__16177.cljs$core$IFn$_invoke$arity$variadic = G__16177__delegate;
    return G__16177;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__16179__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__16179 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16179__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__16179.cljs$lang$maxFixedArity = 6;
    G__16179.cljs$lang$applyTo = function(arglist__16180) {
      var obj = cljs.core.first(arglist__16180);
      arglist__16180 = cljs.core.next(arglist__16180);
      var f = cljs.core.first(arglist__16180);
      arglist__16180 = cljs.core.next(arglist__16180);
      var a = cljs.core.first(arglist__16180);
      arglist__16180 = cljs.core.next(arglist__16180);
      var b = cljs.core.first(arglist__16180);
      arglist__16180 = cljs.core.next(arglist__16180);
      var c = cljs.core.first(arglist__16180);
      arglist__16180 = cljs.core.next(arglist__16180);
      var d = cljs.core.first(arglist__16180);
      var args = cljs.core.rest(arglist__16180);
      return G__16179__delegate(obj, f, a, b, c, d, args);
    };
    G__16179.cljs$core$IFn$_invoke$arity$variadic = G__16179__delegate;
    return G__16179;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__16181__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__16181 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16181__delegate.call(this, x, y, more);
    };
    G__16181.cljs$lang$maxFixedArity = 2;
    G__16181.cljs$lang$applyTo = function(arglist__16182) {
      var x = cljs.core.first(arglist__16182);
      arglist__16182 = cljs.core.next(arglist__16182);
      var y = cljs.core.first(arglist__16182);
      var more = cljs.core.rest(arglist__16182);
      return G__16181__delegate(x, y, more);
    };
    G__16181.cljs$core$IFn$_invoke$arity$variadic = G__16181__delegate;
    return G__16181;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__16183 = pred;
        var G__16184 = cljs.core.next.call(null, coll);
        pred = G__16183;
        coll = G__16184;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3027__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        var G__16185 = pred;
        var G__16186 = cljs.core.next.call(null, coll);
        pred = G__16185;
        coll = G__16186;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__16187 = null;
    var G__16187__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__16187__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__16187__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__16187__3 = function() {
      var G__16188__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__16188 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__16188__delegate.call(this, x, y, zs);
      };
      G__16188.cljs$lang$maxFixedArity = 2;
      G__16188.cljs$lang$applyTo = function(arglist__16189) {
        var x = cljs.core.first(arglist__16189);
        arglist__16189 = cljs.core.next(arglist__16189);
        var y = cljs.core.first(arglist__16189);
        var zs = cljs.core.rest(arglist__16189);
        return G__16188__delegate(x, y, zs);
      };
      G__16188.cljs$core$IFn$_invoke$arity$variadic = G__16188__delegate;
      return G__16188;
    }();
    G__16187 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__16187__0.call(this);
        case 1:
          return G__16187__1.call(this, x);
        case 2:
          return G__16187__2.call(this, x, y);
        default:
          return G__16187__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16187.cljs$lang$maxFixedArity = 2;
    G__16187.cljs$lang$applyTo = G__16187__3.cljs$lang$applyTo;
    return G__16187;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__16190__delegate = function(args) {
      return x;
    };
    var G__16190 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16190__delegate.call(this, args);
    };
    G__16190.cljs$lang$maxFixedArity = 0;
    G__16190.cljs$lang$applyTo = function(arglist__16191) {
      var args = cljs.core.seq(arglist__16191);
      return G__16190__delegate(args);
    };
    G__16190.cljs$core$IFn$_invoke$arity$variadic = G__16190__delegate;
    return G__16190;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__16192 = null;
      var G__16192__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__16192__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__16192__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__16192__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__16192__4 = function() {
        var G__16193__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__16193 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16193__delegate.call(this, x, y, z, args);
        };
        G__16193.cljs$lang$maxFixedArity = 3;
        G__16193.cljs$lang$applyTo = function(arglist__16194) {
          var x = cljs.core.first(arglist__16194);
          arglist__16194 = cljs.core.next(arglist__16194);
          var y = cljs.core.first(arglist__16194);
          arglist__16194 = cljs.core.next(arglist__16194);
          var z = cljs.core.first(arglist__16194);
          var args = cljs.core.rest(arglist__16194);
          return G__16193__delegate(x, y, z, args);
        };
        G__16193.cljs$core$IFn$_invoke$arity$variadic = G__16193__delegate;
        return G__16193;
      }();
      G__16192 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16192__0.call(this);
          case 1:
            return G__16192__1.call(this, x);
          case 2:
            return G__16192__2.call(this, x, y);
          case 3:
            return G__16192__3.call(this, x, y, z);
          default:
            return G__16192__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16192.cljs$lang$maxFixedArity = 3;
      G__16192.cljs$lang$applyTo = G__16192__4.cljs$lang$applyTo;
      return G__16192;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__16195 = null;
      var G__16195__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__16195__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__16195__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__16195__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__16195__4 = function() {
        var G__16196__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__16196 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16196__delegate.call(this, x, y, z, args);
        };
        G__16196.cljs$lang$maxFixedArity = 3;
        G__16196.cljs$lang$applyTo = function(arglist__16197) {
          var x = cljs.core.first(arglist__16197);
          arglist__16197 = cljs.core.next(arglist__16197);
          var y = cljs.core.first(arglist__16197);
          arglist__16197 = cljs.core.next(arglist__16197);
          var z = cljs.core.first(arglist__16197);
          var args = cljs.core.rest(arglist__16197);
          return G__16196__delegate(x, y, z, args);
        };
        G__16196.cljs$core$IFn$_invoke$arity$variadic = G__16196__delegate;
        return G__16196;
      }();
      G__16195 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16195__0.call(this);
          case 1:
            return G__16195__1.call(this, x);
          case 2:
            return G__16195__2.call(this, x, y);
          case 3:
            return G__16195__3.call(this, x, y, z);
          default:
            return G__16195__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16195.cljs$lang$maxFixedArity = 3;
      G__16195.cljs$lang$applyTo = G__16195__4.cljs$lang$applyTo;
      return G__16195;
    }();
  };
  var comp__4 = function() {
    var G__16198__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__16199__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__16200 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__16201 = cljs.core.next.call(null, fs__$2);
                ret = G__16200;
                fs__$2 = G__16201;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__16199 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__16199__delegate.call(this, args);
          };
          G__16199.cljs$lang$maxFixedArity = 0;
          G__16199.cljs$lang$applyTo = function(arglist__16202) {
            var args = cljs.core.seq(arglist__16202);
            return G__16199__delegate(args);
          };
          G__16199.cljs$core$IFn$_invoke$arity$variadic = G__16199__delegate;
          return G__16199;
        }();
      }(fs__$1);
    };
    var G__16198 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16198__delegate.call(this, f1, f2, f3, fs);
    };
    G__16198.cljs$lang$maxFixedArity = 3;
    G__16198.cljs$lang$applyTo = function(arglist__16203) {
      var f1 = cljs.core.first(arglist__16203);
      arglist__16203 = cljs.core.next(arglist__16203);
      var f2 = cljs.core.first(arglist__16203);
      arglist__16203 = cljs.core.next(arglist__16203);
      var f3 = cljs.core.first(arglist__16203);
      var fs = cljs.core.rest(arglist__16203);
      return G__16198__delegate(f1, f2, f3, fs);
    };
    G__16198.cljs$core$IFn$_invoke$arity$variadic = G__16198__delegate;
    return G__16198;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__16204__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__16204 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16204__delegate.call(this, args);
      };
      G__16204.cljs$lang$maxFixedArity = 0;
      G__16204.cljs$lang$applyTo = function(arglist__16205) {
        var args = cljs.core.seq(arglist__16205);
        return G__16204__delegate(args);
      };
      G__16204.cljs$core$IFn$_invoke$arity$variadic = G__16204__delegate;
      return G__16204;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__16206__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__16206 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16206__delegate.call(this, args);
      };
      G__16206.cljs$lang$maxFixedArity = 0;
      G__16206.cljs$lang$applyTo = function(arglist__16207) {
        var args = cljs.core.seq(arglist__16207);
        return G__16206__delegate(args);
      };
      G__16206.cljs$core$IFn$_invoke$arity$variadic = G__16206__delegate;
      return G__16206;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__16208__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__16208 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16208__delegate.call(this, args);
      };
      G__16208.cljs$lang$maxFixedArity = 0;
      G__16208.cljs$lang$applyTo = function(arglist__16209) {
        var args = cljs.core.seq(arglist__16209);
        return G__16208__delegate(args);
      };
      G__16208.cljs$core$IFn$_invoke$arity$variadic = G__16208__delegate;
      return G__16208;
    }();
  };
  var partial__5 = function() {
    var G__16210__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__16211__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__16211 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16211__delegate.call(this, args);
        };
        G__16211.cljs$lang$maxFixedArity = 0;
        G__16211.cljs$lang$applyTo = function(arglist__16212) {
          var args = cljs.core.seq(arglist__16212);
          return G__16211__delegate(args);
        };
        G__16211.cljs$core$IFn$_invoke$arity$variadic = G__16211__delegate;
        return G__16211;
      }();
    };
    var G__16210 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16210__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__16210.cljs$lang$maxFixedArity = 4;
    G__16210.cljs$lang$applyTo = function(arglist__16213) {
      var f = cljs.core.first(arglist__16213);
      arglist__16213 = cljs.core.next(arglist__16213);
      var arg1 = cljs.core.first(arglist__16213);
      arglist__16213 = cljs.core.next(arglist__16213);
      var arg2 = cljs.core.first(arglist__16213);
      arglist__16213 = cljs.core.next(arglist__16213);
      var arg3 = cljs.core.first(arglist__16213);
      var more = cljs.core.rest(arglist__16213);
      return G__16210__delegate(f, arg1, arg2, arg3, more);
    };
    G__16210.cljs$core$IFn$_invoke$arity$variadic = G__16210__delegate;
    return G__16210;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__16214 = null;
      var G__16214__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__16214__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__16214__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__16214__4 = function() {
        var G__16215__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__16215 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16215__delegate.call(this, a, b, c, ds);
        };
        G__16215.cljs$lang$maxFixedArity = 3;
        G__16215.cljs$lang$applyTo = function(arglist__16216) {
          var a = cljs.core.first(arglist__16216);
          arglist__16216 = cljs.core.next(arglist__16216);
          var b = cljs.core.first(arglist__16216);
          arglist__16216 = cljs.core.next(arglist__16216);
          var c = cljs.core.first(arglist__16216);
          var ds = cljs.core.rest(arglist__16216);
          return G__16215__delegate(a, b, c, ds);
        };
        G__16215.cljs$core$IFn$_invoke$arity$variadic = G__16215__delegate;
        return G__16215;
      }();
      G__16214 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__16214__1.call(this, a);
          case 2:
            return G__16214__2.call(this, a, b);
          case 3:
            return G__16214__3.call(this, a, b, c);
          default:
            return G__16214__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16214.cljs$lang$maxFixedArity = 3;
      G__16214.cljs$lang$applyTo = G__16214__4.cljs$lang$applyTo;
      return G__16214;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__16217 = null;
      var G__16217__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16217__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__16217__4 = function() {
        var G__16218__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__16218 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16218__delegate.call(this, a, b, c, ds);
        };
        G__16218.cljs$lang$maxFixedArity = 3;
        G__16218.cljs$lang$applyTo = function(arglist__16219) {
          var a = cljs.core.first(arglist__16219);
          arglist__16219 = cljs.core.next(arglist__16219);
          var b = cljs.core.first(arglist__16219);
          arglist__16219 = cljs.core.next(arglist__16219);
          var c = cljs.core.first(arglist__16219);
          var ds = cljs.core.rest(arglist__16219);
          return G__16218__delegate(a, b, c, ds);
        };
        G__16218.cljs$core$IFn$_invoke$arity$variadic = G__16218__delegate;
        return G__16218;
      }();
      G__16217 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16217__2.call(this, a, b);
          case 3:
            return G__16217__3.call(this, a, b, c);
          default:
            return G__16217__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16217.cljs$lang$maxFixedArity = 3;
      G__16217.cljs$lang$applyTo = G__16217__4.cljs$lang$applyTo;
      return G__16217;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__16220 = null;
      var G__16220__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16220__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__16220__4 = function() {
        var G__16221__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__16221 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16221__delegate.call(this, a, b, c, ds);
        };
        G__16221.cljs$lang$maxFixedArity = 3;
        G__16221.cljs$lang$applyTo = function(arglist__16222) {
          var a = cljs.core.first(arglist__16222);
          arglist__16222 = cljs.core.next(arglist__16222);
          var b = cljs.core.first(arglist__16222);
          arglist__16222 = cljs.core.next(arglist__16222);
          var c = cljs.core.first(arglist__16222);
          var ds = cljs.core.rest(arglist__16222);
          return G__16221__delegate(a, b, c, ds);
        };
        G__16221.cljs$core$IFn$_invoke$arity$variadic = G__16221__delegate;
        return G__16221;
      }();
      G__16220 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16220__2.call(this, a, b);
          case 3:
            return G__16220__3.call(this, a, b, c);
          default:
            return G__16220__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16220.cljs$lang$maxFixedArity = 3;
      G__16220.cljs$lang$applyTo = G__16220__4.cljs$lang$applyTo;
      return G__16220;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3883__auto___16223 = size;
          var i_16224 = 0;
          while (true) {
            if (i_16224 < n__3883__auto___16223) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_16224, cljs.core._nth.call(null, c, i_16224)));
              var G__16225 = i_16224 + 1;
              i_16224 = G__16225;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__3883__auto___16226 = size;
        var i_16227 = 0;
        while (true) {
          if (i_16227 < n__3883__auto___16226) {
            var x_16228 = f.call(null, cljs.core._nth.call(null, c, i_16227));
            if (x_16228 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_16228);
            }
            var G__16229 = i_16227 + 1;
            i_16227 = G__16229;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3883__auto___16230 = size;
          var i_16231 = 0;
          while (true) {
            if (i_16231 < n__3883__auto___16230) {
              var x_16232 = f.call(null, idx + i_16231, cljs.core._nth.call(null, c, i_16231));
              if (x_16232 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_16232);
              }
              var G__16233 = i_16231 + 1;
              i_16231 = G__16233;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3015__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3015__auto__)) {
            return p.call(null, y);
          } else {
            return and__3015__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3015__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3015__auto__)) {
            var and__3015__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3015__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3015__auto____$1;
            }
          } else {
            return and__3015__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__16240__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__16240 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16240__delegate.call(this, x, y, z, args);
        };
        G__16240.cljs$lang$maxFixedArity = 3;
        G__16240.cljs$lang$applyTo = function(arglist__16241) {
          var x = cljs.core.first(arglist__16241);
          arglist__16241 = cljs.core.next(arglist__16241);
          var y = cljs.core.first(arglist__16241);
          arglist__16241 = cljs.core.next(arglist__16241);
          var z = cljs.core.first(arglist__16241);
          var args = cljs.core.rest(arglist__16241);
          return G__16240__delegate(x, y, z, args);
        };
        G__16240.cljs$core$IFn$_invoke$arity$variadic = G__16240__delegate;
        return G__16240;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3015__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3015__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3015__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3015__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3015__auto__)) {
            var and__3015__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3015__auto____$1)) {
              var and__3015__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3015__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3015__auto____$2;
              }
            } else {
              return and__3015__auto____$1;
            }
          } else {
            return and__3015__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3015__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3015__auto__)) {
            var and__3015__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3015__auto____$1)) {
              var and__3015__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3015__auto____$2)) {
                var and__3015__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3015__auto____$3)) {
                  var and__3015__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3015__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3015__auto____$4;
                  }
                } else {
                  return and__3015__auto____$3;
                }
              } else {
                return and__3015__auto____$2;
              }
            } else {
              return and__3015__auto____$1;
            }
          } else {
            return and__3015__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__16242__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16234_SHARP_) {
            var and__3015__auto__ = p1.call(null, p1__16234_SHARP_);
            if (cljs.core.truth_(and__3015__auto__)) {
              return p2.call(null, p1__16234_SHARP_);
            } else {
              return and__3015__auto__;
            }
          }, args));
        };
        var G__16242 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16242__delegate.call(this, x, y, z, args);
        };
        G__16242.cljs$lang$maxFixedArity = 3;
        G__16242.cljs$lang$applyTo = function(arglist__16243) {
          var x = cljs.core.first(arglist__16243);
          arglist__16243 = cljs.core.next(arglist__16243);
          var y = cljs.core.first(arglist__16243);
          arglist__16243 = cljs.core.next(arglist__16243);
          var z = cljs.core.first(arglist__16243);
          var args = cljs.core.rest(arglist__16243);
          return G__16242__delegate(x, y, z, args);
        };
        G__16242.cljs$core$IFn$_invoke$arity$variadic = G__16242__delegate;
        return G__16242;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3015__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3015__auto__)) {
            var and__3015__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3015__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3015__auto____$1;
            }
          } else {
            return and__3015__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3015__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3015__auto__)) {
            var and__3015__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3015__auto____$1)) {
              var and__3015__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3015__auto____$2)) {
                var and__3015__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3015__auto____$3)) {
                  var and__3015__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3015__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3015__auto____$4;
                  }
                } else {
                  return and__3015__auto____$3;
                }
              } else {
                return and__3015__auto____$2;
              }
            } else {
              return and__3015__auto____$1;
            }
          } else {
            return and__3015__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3015__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3015__auto__)) {
            var and__3015__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3015__auto____$1)) {
              var and__3015__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3015__auto____$2)) {
                var and__3015__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3015__auto____$3)) {
                  var and__3015__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3015__auto____$4)) {
                    var and__3015__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3015__auto____$5)) {
                      var and__3015__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3015__auto____$6)) {
                        var and__3015__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3015__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3015__auto____$7;
                        }
                      } else {
                        return and__3015__auto____$6;
                      }
                    } else {
                      return and__3015__auto____$5;
                    }
                  } else {
                    return and__3015__auto____$4;
                  }
                } else {
                  return and__3015__auto____$3;
                }
              } else {
                return and__3015__auto____$2;
              }
            } else {
              return and__3015__auto____$1;
            }
          } else {
            return and__3015__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__16244__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16235_SHARP_) {
            var and__3015__auto__ = p1.call(null, p1__16235_SHARP_);
            if (cljs.core.truth_(and__3015__auto__)) {
              var and__3015__auto____$1 = p2.call(null, p1__16235_SHARP_);
              if (cljs.core.truth_(and__3015__auto____$1)) {
                return p3.call(null, p1__16235_SHARP_);
              } else {
                return and__3015__auto____$1;
              }
            } else {
              return and__3015__auto__;
            }
          }, args));
        };
        var G__16244 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16244__delegate.call(this, x, y, z, args);
        };
        G__16244.cljs$lang$maxFixedArity = 3;
        G__16244.cljs$lang$applyTo = function(arglist__16245) {
          var x = cljs.core.first(arglist__16245);
          arglist__16245 = cljs.core.next(arglist__16245);
          var y = cljs.core.first(arglist__16245);
          arglist__16245 = cljs.core.next(arglist__16245);
          var z = cljs.core.first(arglist__16245);
          var args = cljs.core.rest(arglist__16245);
          return G__16244__delegate(x, y, z, args);
        };
        G__16244.cljs$core$IFn$_invoke$arity$variadic = G__16244__delegate;
        return G__16244;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__16246__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16236_SHARP_) {
                return p1__16236_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16237_SHARP_) {
                var and__3015__auto__ = p1__16237_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3015__auto__)) {
                  return p1__16237_SHARP_.call(null, y);
                } else {
                  return and__3015__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16238_SHARP_) {
                var and__3015__auto__ = p1__16238_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3015__auto__)) {
                  var and__3015__auto____$1 = p1__16238_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3015__auto____$1)) {
                    return p1__16238_SHARP_.call(null, z);
                  } else {
                    return and__3015__auto____$1;
                  }
                } else {
                  return and__3015__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__16247__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__16239_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__16239_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__16247 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16247__delegate.call(this, x, y, z, args);
            };
            G__16247.cljs$lang$maxFixedArity = 3;
            G__16247.cljs$lang$applyTo = function(arglist__16248) {
              var x = cljs.core.first(arglist__16248);
              arglist__16248 = cljs.core.next(arglist__16248);
              var y = cljs.core.first(arglist__16248);
              arglist__16248 = cljs.core.next(arglist__16248);
              var z = cljs.core.first(arglist__16248);
              var args = cljs.core.rest(arglist__16248);
              return G__16247__delegate(x, y, z, args);
            };
            G__16247.cljs$core$IFn$_invoke$arity$variadic = G__16247__delegate;
            return G__16247;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__16246 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16246__delegate.call(this, p1, p2, p3, ps);
    };
    G__16246.cljs$lang$maxFixedArity = 3;
    G__16246.cljs$lang$applyTo = function(arglist__16249) {
      var p1 = cljs.core.first(arglist__16249);
      arglist__16249 = cljs.core.next(arglist__16249);
      var p2 = cljs.core.first(arglist__16249);
      arglist__16249 = cljs.core.next(arglist__16249);
      var p3 = cljs.core.first(arglist__16249);
      var ps = cljs.core.rest(arglist__16249);
      return G__16246__delegate(p1, p2, p3, ps);
    };
    G__16246.cljs$core$IFn$_invoke$arity$variadic = G__16246__delegate;
    return G__16246;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3027__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3027__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3027__auto____$1)) {
            return or__3027__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__16256__delegate = function(x, y, z, args) {
          var or__3027__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3027__auto__)) {
            return or__3027__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__16256 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16256__delegate.call(this, x, y, z, args);
        };
        G__16256.cljs$lang$maxFixedArity = 3;
        G__16256.cljs$lang$applyTo = function(arglist__16257) {
          var x = cljs.core.first(arglist__16257);
          arglist__16257 = cljs.core.next(arglist__16257);
          var y = cljs.core.first(arglist__16257);
          arglist__16257 = cljs.core.next(arglist__16257);
          var z = cljs.core.first(arglist__16257);
          var args = cljs.core.rest(arglist__16257);
          return G__16256__delegate(x, y, z, args);
        };
        G__16256.cljs$core$IFn$_invoke$arity$variadic = G__16256__delegate;
        return G__16256;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3027__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3027__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3027__auto____$1)) {
            return or__3027__auto____$1;
          } else {
            var or__3027__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3027__auto____$2)) {
              return or__3027__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3027__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3027__auto____$1)) {
            return or__3027__auto____$1;
          } else {
            var or__3027__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3027__auto____$2)) {
              return or__3027__auto____$2;
            } else {
              var or__3027__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3027__auto____$3)) {
                return or__3027__auto____$3;
              } else {
                var or__3027__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3027__auto____$4)) {
                  return or__3027__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__16258__delegate = function(x, y, z, args) {
          var or__3027__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3027__auto__)) {
            return or__3027__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3027__auto__) {
              return function(p1__16250_SHARP_) {
                var or__3027__auto____$1 = p1.call(null, p1__16250_SHARP_);
                if (cljs.core.truth_(or__3027__auto____$1)) {
                  return or__3027__auto____$1;
                } else {
                  return p2.call(null, p1__16250_SHARP_);
                }
              };
            }(or__3027__auto__), args);
          }
        };
        var G__16258 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16258__delegate.call(this, x, y, z, args);
        };
        G__16258.cljs$lang$maxFixedArity = 3;
        G__16258.cljs$lang$applyTo = function(arglist__16259) {
          var x = cljs.core.first(arglist__16259);
          arglist__16259 = cljs.core.next(arglist__16259);
          var y = cljs.core.first(arglist__16259);
          arglist__16259 = cljs.core.next(arglist__16259);
          var z = cljs.core.first(arglist__16259);
          var args = cljs.core.rest(arglist__16259);
          return G__16258__delegate(x, y, z, args);
        };
        G__16258.cljs$core$IFn$_invoke$arity$variadic = G__16258__delegate;
        return G__16258;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3027__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3027__auto____$1)) {
            return or__3027__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3027__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3027__auto____$1)) {
            return or__3027__auto____$1;
          } else {
            var or__3027__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3027__auto____$2)) {
              return or__3027__auto____$2;
            } else {
              var or__3027__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3027__auto____$3)) {
                return or__3027__auto____$3;
              } else {
                var or__3027__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3027__auto____$4)) {
                  return or__3027__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3027__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3027__auto____$1)) {
            return or__3027__auto____$1;
          } else {
            var or__3027__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3027__auto____$2)) {
              return or__3027__auto____$2;
            } else {
              var or__3027__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3027__auto____$3)) {
                return or__3027__auto____$3;
              } else {
                var or__3027__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3027__auto____$4)) {
                  return or__3027__auto____$4;
                } else {
                  var or__3027__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3027__auto____$5)) {
                    return or__3027__auto____$5;
                  } else {
                    var or__3027__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3027__auto____$6)) {
                      return or__3027__auto____$6;
                    } else {
                      var or__3027__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3027__auto____$7)) {
                        return or__3027__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__16260__delegate = function(x, y, z, args) {
          var or__3027__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3027__auto__)) {
            return or__3027__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3027__auto__) {
              return function(p1__16251_SHARP_) {
                var or__3027__auto____$1 = p1.call(null, p1__16251_SHARP_);
                if (cljs.core.truth_(or__3027__auto____$1)) {
                  return or__3027__auto____$1;
                } else {
                  var or__3027__auto____$2 = p2.call(null, p1__16251_SHARP_);
                  if (cljs.core.truth_(or__3027__auto____$2)) {
                    return or__3027__auto____$2;
                  } else {
                    return p3.call(null, p1__16251_SHARP_);
                  }
                }
              };
            }(or__3027__auto__), args);
          }
        };
        var G__16260 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16260__delegate.call(this, x, y, z, args);
        };
        G__16260.cljs$lang$maxFixedArity = 3;
        G__16260.cljs$lang$applyTo = function(arglist__16261) {
          var x = cljs.core.first(arglist__16261);
          arglist__16261 = cljs.core.next(arglist__16261);
          var y = cljs.core.first(arglist__16261);
          arglist__16261 = cljs.core.next(arglist__16261);
          var z = cljs.core.first(arglist__16261);
          var args = cljs.core.rest(arglist__16261);
          return G__16260__delegate(x, y, z, args);
        };
        G__16260.cljs$core$IFn$_invoke$arity$variadic = G__16260__delegate;
        return G__16260;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__16262__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16252_SHARP_) {
                return p1__16252_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16253_SHARP_) {
                var or__3027__auto__ = p1__16253_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3027__auto__)) {
                  return or__3027__auto__;
                } else {
                  return p1__16253_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16254_SHARP_) {
                var or__3027__auto__ = p1__16254_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3027__auto__)) {
                  return or__3027__auto__;
                } else {
                  var or__3027__auto____$1 = p1__16254_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3027__auto____$1)) {
                    return or__3027__auto____$1;
                  } else {
                    return p1__16254_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__16263__delegate = function(x, y, z, args) {
              var or__3027__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3027__auto__)) {
                return or__3027__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3027__auto__, ps__$1) {
                  return function(p1__16255_SHARP_) {
                    return cljs.core.some.call(null, p1__16255_SHARP_, args);
                  };
                }(or__3027__auto__, ps__$1), ps__$1);
              }
            };
            var G__16263 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16263__delegate.call(this, x, y, z, args);
            };
            G__16263.cljs$lang$maxFixedArity = 3;
            G__16263.cljs$lang$applyTo = function(arglist__16264) {
              var x = cljs.core.first(arglist__16264);
              arglist__16264 = cljs.core.next(arglist__16264);
              var y = cljs.core.first(arglist__16264);
              arglist__16264 = cljs.core.next(arglist__16264);
              var z = cljs.core.first(arglist__16264);
              var args = cljs.core.rest(arglist__16264);
              return G__16263__delegate(x, y, z, args);
            };
            G__16263.cljs$core$IFn$_invoke$arity$variadic = G__16263__delegate;
            return G__16263;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__16262 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16262__delegate.call(this, p1, p2, p3, ps);
    };
    G__16262.cljs$lang$maxFixedArity = 3;
    G__16262.cljs$lang$applyTo = function(arglist__16265) {
      var p1 = cljs.core.first(arglist__16265);
      arglist__16265 = cljs.core.next(arglist__16265);
      var p2 = cljs.core.first(arglist__16265);
      arglist__16265 = cljs.core.next(arglist__16265);
      var p3 = cljs.core.first(arglist__16265);
      var ps = cljs.core.rest(arglist__16265);
      return G__16262__delegate(p1, p2, p3, ps);
    };
    G__16262.cljs$core$IFn$_invoke$arity$variadic = G__16262__delegate;
    return G__16262;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3883__auto___16267 = size;
          var i_16268 = 0;
          while (true) {
            if (i_16268 < n__3883__auto___16267) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_16268)));
              var G__16269 = i_16268 + 1;
              i_16268 = G__16269;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__16270__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__16266_SHARP_) {
          return cljs.core.apply.call(null, f, p1__16266_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__16270 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16270__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16270.cljs$lang$maxFixedArity = 4;
    G__16270.cljs$lang$applyTo = function(arglist__16271) {
      var f = cljs.core.first(arglist__16271);
      arglist__16271 = cljs.core.next(arglist__16271);
      var c1 = cljs.core.first(arglist__16271);
      arglist__16271 = cljs.core.next(arglist__16271);
      var c2 = cljs.core.first(arglist__16271);
      arglist__16271 = cljs.core.next(arglist__16271);
      var c3 = cljs.core.first(arglist__16271);
      var colls = cljs.core.rest(arglist__16271);
      return G__16270__delegate(f, c1, c2, c3, colls);
    };
    G__16270.cljs$core$IFn$_invoke$arity$variadic = G__16270__delegate;
    return G__16270;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__16272 = n__$1 - 1;
        var G__16273 = cljs.core.rest.call(null, s);
        n__$1 = G__16272;
        coll__$1 = G__16273;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, n, coll);
    };
  }(step), null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__16274 = cljs.core.next.call(null, s);
      var G__16275 = cljs.core.next.call(null, lead);
      s = G__16274;
      lead = G__16275;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3015__auto__ = s;
        if (and__3015__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3015__auto__;
        }
      }())) {
        var G__16276 = pred__$1;
        var G__16277 = cljs.core.rest.call(null, s);
        pred__$1 = G__16276;
        coll__$1 = G__16277;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, pred, coll);
    };
  }(step), null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__16278__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__16278 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16278__delegate.call(this, c1, c2, colls);
    };
    G__16278.cljs$lang$maxFixedArity = 2;
    G__16278.cljs$lang$applyTo = function(arglist__16279) {
      var c1 = cljs.core.first(arglist__16279);
      arglist__16279 = cljs.core.next(arglist__16279);
      var c2 = cljs.core.first(arglist__16279);
      var colls = cljs.core.rest(arglist__16279);
      return G__16278__delegate(c1, c2, colls);
    };
    G__16278.cljs$core$IFn$_invoke$arity$variadic = G__16278__delegate;
    return G__16278;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__16280__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__16280 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16280__delegate.call(this, f, coll, colls);
    };
    G__16280.cljs$lang$maxFixedArity = 2;
    G__16280.cljs$lang$applyTo = function(arglist__16281) {
      var f = cljs.core.first(arglist__16281);
      arglist__16281 = cljs.core.next(arglist__16281);
      var coll = cljs.core.first(arglist__16281);
      var colls = cljs.core.rest(arglist__16281);
      return G__16280__delegate(f, coll, colls);
    };
    G__16280.cljs$core$IFn$_invoke$arity$variadic = G__16280__delegate;
    return G__16280;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__3883__auto___16282 = size;
        var i_16283 = 0;
        while (true) {
          if (i_16283 < n__3883__auto___16282) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_16283)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_16283));
            } else {
            }
            var G__16284 = i_16283 + 1;
            i_16283 = G__16284;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__16285_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__16285_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__16287 = to;
      if (G__16287) {
        var bit__3670__auto__ = G__16287.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__3670__auto__ || G__16287.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__16288__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__16288 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16288__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16288.cljs$lang$maxFixedArity = 4;
    G__16288.cljs$lang$applyTo = function(arglist__16289) {
      var f = cljs.core.first(arglist__16289);
      arglist__16289 = cljs.core.next(arglist__16289);
      var c1 = cljs.core.first(arglist__16289);
      arglist__16289 = cljs.core.next(arglist__16289);
      var c2 = cljs.core.first(arglist__16289);
      arglist__16289 = cljs.core.next(arglist__16289);
      var c3 = cljs.core.first(arglist__16289);
      var colls = cljs.core.rest(arglist__16289);
      return G__16288__delegate(f, c1, c2, c3, colls);
    };
    G__16288.cljs$core$IFn$_invoke$arity$variadic = G__16288__delegate;
    return G__16288;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__16291 = m__$1;
          if (G__16291) {
            var bit__3677__auto__ = G__16291.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__3677__auto__ || G__16291.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__16291.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16291);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16291);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__16292 = sentinel;
            var G__16293 = m__$2;
            var G__16294 = cljs.core.next.call(null, ks__$1);
            sentinel = G__16292;
            m__$1 = G__16293;
            ks__$1 = G__16294;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__16295, v) {
  var vec__16297 = p__16295;
  var k = cljs.core.nth.call(null, vec__16297, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__16297, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__16298, f) {
    var vec__16308 = p__16298;
    var k = cljs.core.nth.call(null, vec__16308, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16308, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__16299, f, a) {
    var vec__16309 = p__16299;
    var k = cljs.core.nth.call(null, vec__16309, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16309, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__16300, f, a, b) {
    var vec__16310 = p__16300;
    var k = cljs.core.nth.call(null, vec__16310, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16310, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__16301, f, a, b, c) {
    var vec__16311 = p__16301;
    var k = cljs.core.nth.call(null, vec__16311, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16311, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__16313__delegate = function(m, p__16302, f, a, b, c, args) {
      var vec__16312 = p__16302;
      var k = cljs.core.nth.call(null, vec__16312, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__16312, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__16313 = function(m, p__16302, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16313__delegate.call(this, m, p__16302, f, a, b, c, args);
    };
    G__16313.cljs$lang$maxFixedArity = 6;
    G__16313.cljs$lang$applyTo = function(arglist__16314) {
      var m = cljs.core.first(arglist__16314);
      arglist__16314 = cljs.core.next(arglist__16314);
      var p__16302 = cljs.core.first(arglist__16314);
      arglist__16314 = cljs.core.next(arglist__16314);
      var f = cljs.core.first(arglist__16314);
      arglist__16314 = cljs.core.next(arglist__16314);
      var a = cljs.core.first(arglist__16314);
      arglist__16314 = cljs.core.next(arglist__16314);
      var b = cljs.core.first(arglist__16314);
      arglist__16314 = cljs.core.next(arglist__16314);
      var c = cljs.core.first(arglist__16314);
      var args = cljs.core.rest(arglist__16314);
      return G__16313__delegate(m, p__16302, f, a, b, c, args);
    };
    G__16313.cljs$core$IFn$_invoke$arity$variadic = G__16313__delegate;
    return G__16313;
  }();
  update_in = function(m, p__16302, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__16302, f);
      case 4:
        return update_in__4.call(this, m, p__16302, f, a);
      case 5:
        return update_in__5.call(this, m, p__16302, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__16302, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__16302, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3597__auto__, writer__3598__auto__, opts__3599__auto__) {
  return cljs.core._write.call(null, writer__3598__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__16315 = ll - 5;
      var G__16316 = r;
      ll = G__16315;
      ret = G__16316;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__16317 = cljs.core.pv_aget.call(null, node, 0);
      var G__16318 = level - 5;
      node = G__16317;
      level = G__16318;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__16319 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__16320 = level - 5;
        node = G__16319;
        level = G__16320;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__16322 = j + 1;
              var G__16323 = init__$2;
              j = G__16322;
              init__$1 = G__16323;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__16324 = i + step_init[0];
        i = G__16324;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__3883__auto___16325 = len;
    var i_16326 = 0;
    while (true) {
      if (i_16326 < n__3883__auto___16325) {
        new_tail[i_16326] = self__.tail[i_16326];
        var G__16327 = i_16326 + 1;
        i_16326 = G__16327;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__16328 = null;
  var G__16328__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16328__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16328 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16328__2.call(this, self__, k);
      case 3:
        return G__16328__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16328;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args16321) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16321)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__16329 = i + 1;
        var G__16330 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__16329;
        out = G__16330;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__16331) {
    var args = cljs.core.seq(arglist__16331);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3334__auto__ = self__.end;
    var y__3335__auto__ = v_pos + 1;
    return x__3334__auto__ > y__3335__auto__ ? x__3334__auto__ : y__3335__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__16333 = null;
  var G__16333__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16333__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16333 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16333__2.call(this, self__, k);
      case 3:
        return G__16333__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16333;
}();
cljs.core.Subvec.prototype.apply = function(self__, args16332) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16332)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__16334 = meta;
      var G__16335 = v.v;
      var G__16336 = v.start + start;
      var G__16337 = v.start + end;
      var G__16338 = __hash;
      meta = G__16334;
      v = G__16335;
      start = G__16336;
      end = G__16337;
      __hash = G__16338;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj16342 = {};
    return obj16342;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__16343 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__16344 = level - 5;
        node = G__16343;
        level = G__16344;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__16346 = null;
  var G__16346__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16346__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16346 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16346__2.call(this, self__, k);
      case 3:
        return G__16346__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16346;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args16345) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16345)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3027__auto__ = self__.front;
    if (cljs.core.truth_(or__3027__auto__)) {
      return or__3027__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3027__auto__ = self__.rear;
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__16347 = i + incr;
        i = G__16347;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__16348 = i + 1;
      var G__16349 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__16348;
      out = G__16349;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj16353 = {};
    return obj16353;
  }();
  var l = ks.length;
  var i_16354 = 0;
  while (true) {
    if (i_16354 < l) {
      var k_16355 = ks[i_16354];
      new_obj[k_16355] = obj[k_16355];
      var G__16356 = i_16354 + 1;
      i_16354 = G__16356;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16359 = cljs.core.rest.call(null, keys__$1);
        var G__16360 = init__$2;
        keys__$1 = G__16359;
        init__$1 = G__16360;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__16357_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16357_SHARP_, self__.strobj[p1__16357_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__16361 = null;
  var G__16361__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16361__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16361 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16361__2.call(this, self__, k);
      case 3:
        return G__16361__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16361;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args16358) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16358)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj16363 = {};
  return obj16363;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.Iterator = function(s) {
  this.s = s;
};
cljs.core.Iterator.cljs$lang$type = true;
cljs.core.Iterator.cljs$lang$ctorStr = "cljs.core/Iterator";
cljs.core.Iterator.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/Iterator");
};
cljs.core.Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_Iterator = function __GT_Iterator(s) {
  return new cljs.core.Iterator(s);
};
cljs.core.iterator = function iterator(coll) {
  return new cljs.core.Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.EntriesIterator.cljs$lang$type = true;
cljs.core.EntriesIterator.cljs$lang$ctorStr = "cljs.core/EntriesIterator";
cljs.core.EntriesIterator.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/EntriesIterator");
};
cljs.core.EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__16364 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__16364, 0, null);
    var v = cljs.core.nth.call(null, vec__16364, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_EntriesIterator = function __GT_EntriesIterator(s) {
  return new cljs.core.EntriesIterator(s);
};
cljs.core.entries_iterator = function entries_iterator(coll) {
  return new cljs.core.EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.SetEntriesIterator.cljs$lang$type = true;
cljs.core.SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/SetEntriesIterator";
cljs.core.SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/SetEntriesIterator");
};
cljs.core.SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_SetEntriesIterator = function __GT_SetEntriesIterator(s) {
  return new cljs.core.SetEntriesIterator(s);
};
cljs.core.set_entries_iterator = function set_entries_iterator(coll) {
  return new cljs.core.SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16365 = i + 2;
          i = G__16365;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16366 = i + 2;
          i = G__16366;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16367 = i + 2;
          i = G__16367;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16368 = i + 2;
          i = G__16368;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16369 = i + 2;
          i = G__16369;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_16370 = 0;
  while (true) {
    if (i_16370 < l) {
      narr[i_16370] = arr[i_16370];
      var G__16371 = i_16370 + 1;
      i_16370 = G__16371;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16373 = cljs.core.seq.call(null, coll);
  var chunk__16374 = null;
  var count__16375 = 0;
  var i__16376 = 0;
  while (true) {
    if (i__16376 < count__16375) {
      var vec__16377 = cljs.core._nth.call(null, chunk__16374, i__16376);
      var k = cljs.core.nth.call(null, vec__16377, 0, null);
      var v = cljs.core.nth.call(null, vec__16377, 1, null);
      f.call(null, v, k);
      var G__16382 = seq__16373;
      var G__16383 = chunk__16374;
      var G__16384 = count__16375;
      var G__16385 = i__16376 + 1;
      seq__16373 = G__16382;
      chunk__16374 = G__16383;
      count__16375 = G__16384;
      i__16376 = G__16385;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16373);
      if (temp__4126__auto__) {
        var seq__16373__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16373__$1)) {
          var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__16373__$1);
          var G__16386 = cljs.core.chunk_rest.call(null, seq__16373__$1);
          var G__16387 = c__3783__auto__;
          var G__16388 = cljs.core.count.call(null, c__3783__auto__);
          var G__16389 = 0;
          seq__16373 = G__16386;
          chunk__16374 = G__16387;
          count__16375 = G__16388;
          i__16376 = G__16389;
          continue;
        } else {
          var vec__16378 = cljs.core.first.call(null, seq__16373__$1);
          var k = cljs.core.nth.call(null, vec__16378, 0, null);
          var v = cljs.core.nth.call(null, vec__16378, 1, null);
          f.call(null, v, k);
          var G__16390 = cljs.core.next.call(null, seq__16373__$1);
          var G__16391 = null;
          var G__16392 = 0;
          var G__16393 = 0;
          seq__16373 = G__16390;
          chunk__16374 = G__16391;
          count__16375 = G__16392;
          i__16376 = G__16393;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16394 = i + 2;
        var G__16395 = init__$2;
        i = G__16394;
        init__$1 = G__16395;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj16380 = {};
    return obj16380;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__16396 = s + 2;
            var G__16397 = d;
            s = G__16396;
            d = G__16397;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__16398 = s + 2;
              var G__16399 = d + 2;
              s = G__16398;
              d = G__16399;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var arr__$1 = function() {
          var G__16381 = cljs.core.aclone.call(null, self__.arr);
          G__16381[idx + 1] = v;
          return G__16381;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16400 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16401 = cljs.core.next.call(null, es);
          ret = G__16400;
          es = G__16401;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__16402 = null;
  var G__16402__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16402__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16402 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16402__2.call(this, self__, k);
      case 3:
        return G__16402__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16402;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args16372) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16372)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16403 = i + 2;
        var G__16404 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__16403;
        ret = G__16404;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__16405_16407 = self__.arr;
      G__16405_16407.pop();
      G__16405_16407.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__16406 = o;
      if (G__16406) {
        var bit__3677__auto__ = G__16406.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__3677__auto__ || G__16406.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16406.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16406);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16406);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__16408 = cljs.core.next.call(null, es);
          var G__16409 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16408;
          tcoll__$2 = G__16409;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__16410 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__16411 = i + 2;
      out = G__16410;
      i = G__16411;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3597__auto__, writer__3598__auto__, opts__3599__auto__) {
  return cljs.core._write.call(null, writer__3598__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__16414 = cljs.core.aclone.call(null, arr);
    G__16414[i] = a;
    return G__16414;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__16415 = cljs.core.aclone.call(null, arr);
    G__16415[i] = a;
    G__16415[j] = b;
    return G__16415;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16416 = i + 2;
        var G__16417 = init__$2;
        i = G__16416;
        init__$1 = G__16417;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_16418 = 0;
        var j_16419 = 0;
        while (true) {
          if (i_16418 < 32) {
            if ((self__.bitmap >>> i_16418 & 1) === 0) {
              var G__16420 = i_16418 + 1;
              var G__16421 = j_16419;
              i_16418 = G__16420;
              j_16419 = G__16421;
              continue;
            } else {
              nodes[i_16418] = !(self__.arr[j_16419] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_16419]), self__.arr[j_16419], self__.arr[j_16419 + 1], added_leaf_QMARK_) : self__.arr[j_16419 + 1];
              var G__16422 = i_16418 + 1;
              var G__16423 = j_16419 + 2;
              i_16418 = G__16422;
              j_16419 = G__16423;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_16424 = 0;
      var j_16425 = 0;
      while (true) {
        if (i_16424 < 32) {
          if ((self__.bitmap >>> i_16424 & 1) === 0) {
            var G__16426 = i_16424 + 1;
            var G__16427 = j_16425;
            i_16424 = G__16426;
            j_16425 = G__16427;
            continue;
          } else {
            nodes[i_16424] = !(self__.arr[j_16425] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_16425]), self__.arr[j_16425], self__.arr[j_16425 + 1], added_leaf_QMARK_) : self__.arr[j_16425 + 1];
            var G__16428 = i_16424 + 1;
            var G__16429 = j_16425 + 2;
            i_16424 = G__16428;
            j_16425 = G__16429;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__16430 = i + 1;
        var G__16431 = j + 2;
        var G__16432 = bitmap | 1 << i;
        i = G__16430;
        j = G__16431;
        bitmap = G__16432;
        continue;
      } else {
        var G__16433 = i + 1;
        var G__16434 = j;
        var G__16435 = bitmap;
        i = G__16433;
        j = G__16434;
        bitmap = G__16435;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__16436 = i + 1;
          var G__16437 = init__$2;
          i = G__16436;
          init__$1 = G__16437;
          continue;
        }
      } else {
        var G__16438 = i + 1;
        var G__16439 = init__$1;
        i = G__16438;
        init__$1 = G__16439;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__16440 = i + 2;
        i = G__16440;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__16441 = j + 2;
                j = G__16441;
                continue;
              }
            } else {
              var G__16442 = j + 2;
              j = G__16442;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__16443 = j + 1;
              j = G__16443;
              continue;
            }
          } else {
            var G__16444 = j + 1;
            j = G__16444;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16446 = cljs.core.seq.call(null, coll);
  var chunk__16447 = null;
  var count__16448 = 0;
  var i__16449 = 0;
  while (true) {
    if (i__16449 < count__16448) {
      var vec__16450 = cljs.core._nth.call(null, chunk__16447, i__16449);
      var k = cljs.core.nth.call(null, vec__16450, 0, null);
      var v = cljs.core.nth.call(null, vec__16450, 1, null);
      f.call(null, v, k);
      var G__16454 = seq__16446;
      var G__16455 = chunk__16447;
      var G__16456 = count__16448;
      var G__16457 = i__16449 + 1;
      seq__16446 = G__16454;
      chunk__16447 = G__16455;
      count__16448 = G__16456;
      i__16449 = G__16457;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16446);
      if (temp__4126__auto__) {
        var seq__16446__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16446__$1)) {
          var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__16446__$1);
          var G__16458 = cljs.core.chunk_rest.call(null, seq__16446__$1);
          var G__16459 = c__3783__auto__;
          var G__16460 = cljs.core.count.call(null, c__3783__auto__);
          var G__16461 = 0;
          seq__16446 = G__16458;
          chunk__16447 = G__16459;
          count__16448 = G__16460;
          i__16449 = G__16461;
          continue;
        } else {
          var vec__16451 = cljs.core.first.call(null, seq__16446__$1);
          var k = cljs.core.nth.call(null, vec__16451, 0, null);
          var v = cljs.core.nth.call(null, vec__16451, 1, null);
          f.call(null, v, k);
          var G__16462 = cljs.core.next.call(null, seq__16446__$1);
          var G__16463 = null;
          var G__16464 = 0;
          var G__16465 = 0;
          seq__16446 = G__16462;
          chunk__16447 = G__16463;
          count__16448 = G__16464;
          i__16449 = G__16465;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj16453 = {};
    return obj16453;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16466 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16467 = cljs.core.next.call(null, es);
          ret = G__16466;
          es = G__16467;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__16468 = null;
  var G__16468__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16468__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16468 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16468__2.call(this, self__, k);
      case 3:
        return G__16468__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16468;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args16445) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16445)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__16469 = i + 1;
      var G__16470 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__16469;
      out = G__16470;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__16471 = o;
      if (G__16471) {
        var bit__3677__auto__ = G__16471.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__3677__auto__ || G__16471.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16471.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16471);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16471);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__16472 = cljs.core.next.call(null, es);
          var G__16473 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16472;
          tcoll__$1 = G__16473;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__16474 = ascending_QMARK_ ? t.left : t.right;
      var G__16475 = cljs.core.conj.call(null, stack__$1, t);
      t = G__16474;
      stack__$1 = G__16475;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__16477 = null;
  var G__16477__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16477__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16477 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16477__2.call(this, self__, k);
      case 3:
        return G__16477__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16477;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args16476) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16476)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__16479 = null;
  var G__16479__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16479__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16479 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16479__2.call(this, self__, k);
      case 3:
        return G__16479__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16479;
}();
cljs.core.RedNode.prototype.apply = function(self__, args16478) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16478)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16481 = cljs.core.seq.call(null, coll);
  var chunk__16482 = null;
  var count__16483 = 0;
  var i__16484 = 0;
  while (true) {
    if (i__16484 < count__16483) {
      var vec__16485 = cljs.core._nth.call(null, chunk__16482, i__16484);
      var k = cljs.core.nth.call(null, vec__16485, 0, null);
      var v = cljs.core.nth.call(null, vec__16485, 1, null);
      f.call(null, v, k);
      var G__16487 = seq__16481;
      var G__16488 = chunk__16482;
      var G__16489 = count__16483;
      var G__16490 = i__16484 + 1;
      seq__16481 = G__16487;
      chunk__16482 = G__16488;
      count__16483 = G__16489;
      i__16484 = G__16490;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16481);
      if (temp__4126__auto__) {
        var seq__16481__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16481__$1)) {
          var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__16481__$1);
          var G__16491 = cljs.core.chunk_rest.call(null, seq__16481__$1);
          var G__16492 = c__3783__auto__;
          var G__16493 = cljs.core.count.call(null, c__3783__auto__);
          var G__16494 = 0;
          seq__16481 = G__16491;
          chunk__16482 = G__16492;
          count__16483 = G__16493;
          i__16484 = G__16494;
          continue;
        } else {
          var vec__16486 = cljs.core.first.call(null, seq__16481__$1);
          var k = cljs.core.nth.call(null, vec__16486, 0, null);
          var v = cljs.core.nth.call(null, vec__16486, 1, null);
          f.call(null, v, k);
          var G__16495 = cljs.core.next.call(null, seq__16481__$1);
          var G__16496 = null;
          var G__16497 = 0;
          var G__16498 = 0;
          seq__16481 = G__16495;
          chunk__16482 = G__16496;
          count__16483 = G__16497;
          i__16484 = G__16498;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__16499 = t.left;
          t = G__16499;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var G__16500 = t.right;
            t = G__16500;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16501 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16502 = cljs.core.next.call(null, es);
          ret = G__16501;
          es = G__16502;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__16503 = null;
  var G__16503__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16503__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16503 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16503__2.call(this, self__, k);
      case 3:
        return G__16503__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16503;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args16480) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16480)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__16504 = cljs.core.conj.call(null, stack, t);
              var G__16505 = t.left;
              stack = G__16504;
              t = G__16505;
              continue;
            } else {
              var G__16506 = stack;
              var G__16507 = t.right;
              stack = G__16506;
              t = G__16507;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              if (c > 0) {
                var G__16508 = cljs.core.conj.call(null, stack, t);
                var G__16509 = t.right;
                stack = G__16508;
                t = G__16509;
                continue;
              } else {
                var G__16510 = stack;
                var G__16511 = t.left;
                stack = G__16510;
                t = G__16511;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__16512 = cljs.core.nnext.call(null, in$);
        var G__16513 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16512;
        out = G__16513;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__16514) {
    var keyvals = cljs.core.seq(arglist__16514);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__16515) {
    var keyvals = cljs.core.seq(arglist__16515);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj16519 = {};
      return obj16519;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__16520 = cljs.core.nnext.call(null, kvs);
        kvs = G__16520;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__16521) {
    var keyvals = cljs.core.seq(arglist__16521);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__16522 = cljs.core.nnext.call(null, in$);
        var G__16523 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16522;
        out = G__16523;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__16524) {
    var keyvals = cljs.core.seq(arglist__16524);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__16525 = cljs.core.nnext.call(null, in$);
        var G__16526 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16525;
        out = G__16526;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__16527) {
    var comparator = cljs.core.first(arglist__16527);
    var keyvals = cljs.core.rest(arglist__16527);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16528 = self__.mseq;
    if (G__16528) {
      var bit__3677__auto__ = G__16528.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3677__auto__ || G__16528.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16528.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16528);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16528);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16529 = self__.mseq;
    if (G__16529) {
      var bit__3677__auto__ = G__16529.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3677__auto__ || G__16529.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16529.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16529);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16529);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16530 = self__.mseq;
    if (G__16530) {
      var bit__3677__auto__ = G__16530.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3677__auto__ || G__16530.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16530.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16530);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16530);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16531 = self__.mseq;
    if (G__16531) {
      var bit__3677__auto__ = G__16531.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3677__auto__ || G__16531.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16531.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16531);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16531);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__16532_SHARP_, p2__16533_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3027__auto__ = p1__16532_SHARP_;
          if (cljs.core.truth_(or__3027__auto__)) {
            return or__3027__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__16533_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__16534) {
    var maps = cljs.core.seq(arglist__16534);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3027__auto__ = m1;
            if (cljs.core.truth_(or__3027__auto__)) {
              return or__3027__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__16535) {
    var f = cljs.core.first(arglist__16535);
    var maps = cljs.core.rest(arglist__16535);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__16536 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__16537 = cljs.core.next.call(null, keys);
      ret = G__16536;
      keys = G__16537;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16540 = cljs.core.seq.call(null, coll);
  var chunk__16541 = null;
  var count__16542 = 0;
  var i__16543 = 0;
  while (true) {
    if (i__16543 < count__16542) {
      var vec__16544 = cljs.core._nth.call(null, chunk__16541, i__16543);
      var k = cljs.core.nth.call(null, vec__16544, 0, null);
      var v = cljs.core.nth.call(null, vec__16544, 1, null);
      f.call(null, v, k);
      var G__16546 = seq__16540;
      var G__16547 = chunk__16541;
      var G__16548 = count__16542;
      var G__16549 = i__16543 + 1;
      seq__16540 = G__16546;
      chunk__16541 = G__16547;
      count__16542 = G__16548;
      i__16543 = G__16549;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16540);
      if (temp__4126__auto__) {
        var seq__16540__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16540__$1)) {
          var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__16540__$1);
          var G__16550 = cljs.core.chunk_rest.call(null, seq__16540__$1);
          var G__16551 = c__3783__auto__;
          var G__16552 = cljs.core.count.call(null, c__3783__auto__);
          var G__16553 = 0;
          seq__16540 = G__16550;
          chunk__16541 = G__16551;
          count__16542 = G__16552;
          i__16543 = G__16553;
          continue;
        } else {
          var vec__16545 = cljs.core.first.call(null, seq__16540__$1);
          var k = cljs.core.nth.call(null, vec__16545, 0, null);
          var v = cljs.core.nth.call(null, vec__16545, 1, null);
          f.call(null, v, k);
          var G__16554 = cljs.core.next.call(null, seq__16540__$1);
          var G__16555 = null;
          var G__16556 = 0;
          var G__16557 = 0;
          seq__16540 = G__16554;
          chunk__16541 = G__16555;
          count__16542 = G__16556;
          i__16543 = G__16557;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16538_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16538_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__16558 = null;
  var G__16558__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16558__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16558 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16558__2.call(this, self__, k);
      case 3:
        return G__16558__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16558;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args16539) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16539)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16559 = i + 1;
        var G__16560 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__16559;
        out = G__16560;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__16561 = i + 1;
        var G__16562 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__16561;
        out = G__16562;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__16564 = null;
  var G__16564__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__16564__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__16564 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16564__2.call(this, self__, k);
      case 3:
        return G__16564__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16564;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args16563) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16563)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16567 = cljs.core.seq.call(null, coll);
  var chunk__16568 = null;
  var count__16569 = 0;
  var i__16570 = 0;
  while (true) {
    if (i__16570 < count__16569) {
      var vec__16571 = cljs.core._nth.call(null, chunk__16568, i__16570);
      var k = cljs.core.nth.call(null, vec__16571, 0, null);
      var v = cljs.core.nth.call(null, vec__16571, 1, null);
      f.call(null, v, k);
      var G__16573 = seq__16567;
      var G__16574 = chunk__16568;
      var G__16575 = count__16569;
      var G__16576 = i__16570 + 1;
      seq__16567 = G__16573;
      chunk__16568 = G__16574;
      count__16569 = G__16575;
      i__16570 = G__16576;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16567);
      if (temp__4126__auto__) {
        var seq__16567__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16567__$1)) {
          var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__16567__$1);
          var G__16577 = cljs.core.chunk_rest.call(null, seq__16567__$1);
          var G__16578 = c__3783__auto__;
          var G__16579 = cljs.core.count.call(null, c__3783__auto__);
          var G__16580 = 0;
          seq__16567 = G__16577;
          chunk__16568 = G__16578;
          count__16569 = G__16579;
          i__16570 = G__16580;
          continue;
        } else {
          var vec__16572 = cljs.core.first.call(null, seq__16567__$1);
          var k = cljs.core.nth.call(null, vec__16572, 0, null);
          var v = cljs.core.nth.call(null, vec__16572, 1, null);
          f.call(null, v, k);
          var G__16581 = cljs.core.next.call(null, seq__16567__$1);
          var G__16582 = null;
          var G__16583 = 0;
          var G__16584 = 0;
          seq__16567 = G__16581;
          chunk__16568 = G__16582;
          count__16569 = G__16583;
          i__16570 = G__16584;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16565_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16565_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__16585 = null;
  var G__16585__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16585__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16585 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16585__2.call(this, self__, k);
      case 3:
        return G__16585__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16585;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args16566) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16566)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__3877__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__3877__auto__.length) {
        var G__16586 = i + 1;
        var G__16587 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__16586;
        res = G__16587;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__16588 = cljs.core._next.call(null, in$__$1);
            var G__16589 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__16588;
            out = G__16589;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__16590__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__16590 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16590__delegate.call(this, keys);
    };
    G__16590.cljs$lang$maxFixedArity = 0;
    G__16590.cljs$lang$applyTo = function(arglist__16591) {
      var keys = cljs.core.seq(arglist__16591);
      return G__16590__delegate(keys);
    };
    G__16590.cljs$core$IFn$_invoke$arity$variadic = G__16590__delegate;
    return G__16590;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__16592) {
    var keys = cljs.core.seq(arglist__16592);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__16593) {
    var comparator = cljs.core.first(arglist__16593);
    var keys = cljs.core.rest(arglist__16593);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(n) {
      return function(v, i) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__16594_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__16594_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__16594_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__16601, seen__$1) {
        while (true) {
          var vec__16602 = p__16601;
          var f = cljs.core.nth.call(null, vec__16602, 0, null);
          var xs__$1 = vec__16602;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__16603 = cljs.core.rest.call(null, s);
              var G__16604 = seen__$1;
              p__16601 = G__16603;
              seen__$1 = G__16604;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__16605 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__16606 = cljs.core.next.call(null, s__$1);
      ret = G__16605;
      s__$1 = G__16606;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__16608 = x;
    if (G__16608) {
      var bit__3670__auto__ = G__16608.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__3670__auto__ || G__16608.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__16609 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__16610 = cljs.core.next.call(null, ks);
      var G__16611 = cljs.core.next.call(null, vs);
      map = G__16609;
      ks = G__16610;
      vs = G__16611;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__16614__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16612_SHARP_, p2__16613_SHARP_) {
        return max_key.call(null, k, p1__16612_SHARP_, p2__16613_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__16614 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16614__delegate.call(this, k, x, y, more);
    };
    G__16614.cljs$lang$maxFixedArity = 3;
    G__16614.cljs$lang$applyTo = function(arglist__16615) {
      var k = cljs.core.first(arglist__16615);
      arglist__16615 = cljs.core.next(arglist__16615);
      var x = cljs.core.first(arglist__16615);
      arglist__16615 = cljs.core.next(arglist__16615);
      var y = cljs.core.first(arglist__16615);
      var more = cljs.core.rest(arglist__16615);
      return G__16614__delegate(k, x, y, more);
    };
    G__16614.cljs$core$IFn$_invoke$arity$variadic = G__16614__delegate;
    return G__16614;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__16618__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16616_SHARP_, p2__16617_SHARP_) {
        return min_key.call(null, k, p1__16616_SHARP_, p2__16617_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__16618 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16618__delegate.call(this, k, x, y, more);
    };
    G__16618.cljs$lang$maxFixedArity = 3;
    G__16618.cljs$lang$applyTo = function(arglist__16619) {
      var k = cljs.core.first(arglist__16619);
      arglist__16619 = cljs.core.next(arglist__16619);
      var x = cljs.core.first(arglist__16619);
      arglist__16619 = cljs.core.next(arglist__16619);
      var y = cljs.core.first(arglist__16619);
      var more = cljs.core.rest(arglist__16619);
      return G__16618__delegate(k, x, y, more);
    };
    G__16618.cljs$core$IFn$_invoke$arity$variadic = G__16618__delegate;
    return G__16618;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16622 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16622, 0, null);
        var s = vec__16622;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16623 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16623, 0, null);
      var s = vec__16623;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16626 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16626, 0, null);
        var s = vec__16626;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16627 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16627, 0, null);
      var s = vec__16627;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
        return function(p1__16628_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__16628_SHARP_));
        };
      }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__16639 = null;
      var G__16639__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__16639__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__16639__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__16639__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__16639__4 = function() {
        var G__16640__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__16640 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16640__delegate.call(this, x, y, z, args);
        };
        G__16640.cljs$lang$maxFixedArity = 3;
        G__16640.cljs$lang$applyTo = function(arglist__16641) {
          var x = cljs.core.first(arglist__16641);
          arglist__16641 = cljs.core.next(arglist__16641);
          var y = cljs.core.first(arglist__16641);
          arglist__16641 = cljs.core.next(arglist__16641);
          var z = cljs.core.first(arglist__16641);
          var args = cljs.core.rest(arglist__16641);
          return G__16640__delegate(x, y, z, args);
        };
        G__16640.cljs$core$IFn$_invoke$arity$variadic = G__16640__delegate;
        return G__16640;
      }();
      G__16639 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16639__0.call(this);
          case 1:
            return G__16639__1.call(this, x);
          case 2:
            return G__16639__2.call(this, x, y);
          case 3:
            return G__16639__3.call(this, x, y, z);
          default:
            return G__16639__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16639.cljs$lang$maxFixedArity = 3;
      G__16639.cljs$lang$applyTo = G__16639__4.cljs$lang$applyTo;
      return G__16639;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__16642 = null;
      var G__16642__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__16642__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__16642__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__16642__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__16642__4 = function() {
        var G__16643__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__16643 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16643__delegate.call(this, x, y, z, args);
        };
        G__16643.cljs$lang$maxFixedArity = 3;
        G__16643.cljs$lang$applyTo = function(arglist__16644) {
          var x = cljs.core.first(arglist__16644);
          arglist__16644 = cljs.core.next(arglist__16644);
          var y = cljs.core.first(arglist__16644);
          arglist__16644 = cljs.core.next(arglist__16644);
          var z = cljs.core.first(arglist__16644);
          var args = cljs.core.rest(arglist__16644);
          return G__16643__delegate(x, y, z, args);
        };
        G__16643.cljs$core$IFn$_invoke$arity$variadic = G__16643__delegate;
        return G__16643;
      }();
      G__16642 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16642__0.call(this);
          case 1:
            return G__16642__1.call(this, x);
          case 2:
            return G__16642__2.call(this, x, y);
          case 3:
            return G__16642__3.call(this, x, y, z);
          default:
            return G__16642__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16642.cljs$lang$maxFixedArity = 3;
      G__16642.cljs$lang$applyTo = G__16642__4.cljs$lang$applyTo;
      return G__16642;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__16645 = null;
      var G__16645__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__16645__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__16645__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__16645__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__16645__4 = function() {
        var G__16646__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__16646 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16646__delegate.call(this, x, y, z, args);
        };
        G__16646.cljs$lang$maxFixedArity = 3;
        G__16646.cljs$lang$applyTo = function(arglist__16647) {
          var x = cljs.core.first(arglist__16647);
          arglist__16647 = cljs.core.next(arglist__16647);
          var y = cljs.core.first(arglist__16647);
          arglist__16647 = cljs.core.next(arglist__16647);
          var z = cljs.core.first(arglist__16647);
          var args = cljs.core.rest(arglist__16647);
          return G__16646__delegate(x, y, z, args);
        };
        G__16646.cljs$core$IFn$_invoke$arity$variadic = G__16646__delegate;
        return G__16646;
      }();
      G__16645 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16645__0.call(this);
          case 1:
            return G__16645__1.call(this, x);
          case 2:
            return G__16645__2.call(this, x, y);
          case 3:
            return G__16645__3.call(this, x, y, z);
          default:
            return G__16645__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16645.cljs$lang$maxFixedArity = 3;
      G__16645.cljs$lang$applyTo = G__16645__4.cljs$lang$applyTo;
      return G__16645;
    }();
  };
  var juxt__4 = function() {
    var G__16648__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__16649 = null;
          var G__16649__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16629_SHARP_, p2__16630_SHARP_) {
                return cljs.core.conj.call(null, p1__16629_SHARP_, p2__16630_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16649__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16631_SHARP_, p2__16632_SHARP_) {
                return cljs.core.conj.call(null, p1__16631_SHARP_, p2__16632_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16649__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16633_SHARP_, p2__16634_SHARP_) {
                return cljs.core.conj.call(null, p1__16633_SHARP_, p2__16634_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16649__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16635_SHARP_, p2__16636_SHARP_) {
                return cljs.core.conj.call(null, p1__16635_SHARP_, p2__16636_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16649__4 = function() {
            var G__16650__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__16637_SHARP_, p2__16638_SHARP_) {
                  return cljs.core.conj.call(null, p1__16637_SHARP_, cljs.core.apply.call(null, p2__16638_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__16650 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16650__delegate.call(this, x, y, z, args);
            };
            G__16650.cljs$lang$maxFixedArity = 3;
            G__16650.cljs$lang$applyTo = function(arglist__16651) {
              var x = cljs.core.first(arglist__16651);
              arglist__16651 = cljs.core.next(arglist__16651);
              var y = cljs.core.first(arglist__16651);
              arglist__16651 = cljs.core.next(arglist__16651);
              var z = cljs.core.first(arglist__16651);
              var args = cljs.core.rest(arglist__16651);
              return G__16650__delegate(x, y, z, args);
            };
            G__16650.cljs$core$IFn$_invoke$arity$variadic = G__16650__delegate;
            return G__16650;
          }();
          G__16649 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__16649__0.call(this);
              case 1:
                return G__16649__1.call(this, x);
              case 2:
                return G__16649__2.call(this, x, y);
              case 3:
                return G__16649__3.call(this, x, y, z);
              default:
                return G__16649__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16649.cljs$lang$maxFixedArity = 3;
          G__16649.cljs$lang$applyTo = G__16649__4.cljs$lang$applyTo;
          return G__16649;
        }();
      }(fs__$1);
    };
    var G__16648 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16648__delegate.call(this, f, g, h, fs);
    };
    G__16648.cljs$lang$maxFixedArity = 3;
    G__16648.cljs$lang$applyTo = function(arglist__16652) {
      var f = cljs.core.first(arglist__16652);
      arglist__16652 = cljs.core.next(arglist__16652);
      var g = cljs.core.first(arglist__16652);
      arglist__16652 = cljs.core.next(arglist__16652);
      var h = cljs.core.first(arglist__16652);
      var fs = cljs.core.rest(arglist__16652);
      return G__16648__delegate(f, g, h, fs);
    };
    G__16648.cljs$core$IFn$_invoke$arity$variadic = G__16648__delegate;
    return G__16648;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__16653 = cljs.core.next.call(null, coll);
        coll = G__16653;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__16654 = n - 1;
        var G__16655 = cljs.core.next.call(null, coll);
        n = G__16654;
        coll = G__16655;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__16657 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__16657, 0, null);
  var flags = cljs.core.nth.call(null, vec__16657, 1, null);
  var pattern = cljs.core.nth.call(null, vec__16657, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_16659 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_16660__$1 = cljs.core.next.call(null, coll);
      var n_16661 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_16660__$1 && (n_16661 == null || !(n_16661 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_16660__$1), writer, opts);
          var G__16662 = cljs.core.next.call(null, coll_16660__$1);
          var G__16663 = n_16661 - 1;
          coll_16660__$1 = G__16662;
          n_16661 = G__16663;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_16660__$1) && n_16661 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_16659;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__16668 = cljs.core.seq.call(null, ss);
    var chunk__16669 = null;
    var count__16670 = 0;
    var i__16671 = 0;
    while (true) {
      if (i__16671 < count__16670) {
        var s = cljs.core._nth.call(null, chunk__16669, i__16671);
        cljs.core._write.call(null, writer, s);
        var G__16672 = seq__16668;
        var G__16673 = chunk__16669;
        var G__16674 = count__16670;
        var G__16675 = i__16671 + 1;
        seq__16668 = G__16672;
        chunk__16669 = G__16673;
        count__16670 = G__16674;
        i__16671 = G__16675;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__16668);
        if (temp__4126__auto__) {
          var seq__16668__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__16668__$1)) {
            var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__16668__$1);
            var G__16676 = cljs.core.chunk_rest.call(null, seq__16668__$1);
            var G__16677 = c__3783__auto__;
            var G__16678 = cljs.core.count.call(null, c__3783__auto__);
            var G__16679 = 0;
            seq__16668 = G__16676;
            chunk__16669 = G__16677;
            count__16670 = G__16678;
            i__16671 = G__16679;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__16668__$1);
            cljs.core._write.call(null, writer, s);
            var G__16680 = cljs.core.next.call(null, seq__16668__$1);
            var G__16681 = null;
            var G__16682 = 0;
            var G__16683 = 0;
            seq__16668 = G__16680;
            chunk__16669 = G__16681;
            count__16670 = G__16682;
            i__16671 = G__16683;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__16684) {
    var writer = cljs.core.first(arglist__16684);
    var ss = cljs.core.rest(arglist__16684);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj16686 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj16686;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        if (cljs.core.truth_(function() {
          var and__3015__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
          if (cljs.core.truth_(and__3015__auto__)) {
            var and__3015__auto____$1 = function() {
              var G__16692 = obj;
              if (G__16692) {
                var bit__3677__auto__ = G__16692.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__3677__auto__ || G__16692.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__16692.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16692);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16692);
              }
            }();
            if (and__3015__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3015__auto____$1;
            }
          } else {
            return and__3015__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__16693 = obj;
              if (G__16693) {
                var bit__3670__auto__ = G__16693.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__3670__auto__ || G__16693.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__16695 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                                ns = G__16695;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__16694 = obj;
                              if (G__16694) {
                                var bit__3677__auto__ = G__16694.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__3677__auto__ || G__16694.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__16694.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16694);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16694);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__16700 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__16701 = null;
  var count__16702 = 0;
  var i__16703 = 0;
  while (true) {
    if (i__16703 < count__16702) {
      var obj = cljs.core._nth.call(null, chunk__16701, i__16703);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__16704 = seq__16700;
      var G__16705 = chunk__16701;
      var G__16706 = count__16702;
      var G__16707 = i__16703 + 1;
      seq__16700 = G__16704;
      chunk__16701 = G__16705;
      count__16702 = G__16706;
      i__16703 = G__16707;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16700);
      if (temp__4126__auto__) {
        var seq__16700__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16700__$1)) {
          var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__16700__$1);
          var G__16708 = cljs.core.chunk_rest.call(null, seq__16700__$1);
          var G__16709 = c__3783__auto__;
          var G__16710 = cljs.core.count.call(null, c__3783__auto__);
          var G__16711 = 0;
          seq__16700 = G__16708;
          chunk__16701 = G__16709;
          count__16702 = G__16710;
          i__16703 = G__16711;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__16700__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__16712 = cljs.core.next.call(null, seq__16700__$1);
          var G__16713 = null;
          var G__16714 = 0;
          var G__16715 = 0;
          seq__16700 = G__16712;
          chunk__16701 = G__16713;
          count__16702 = G__16714;
          i__16703 = G__16715;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__16716) {
    var objs = cljs.core.seq(arglist__16716);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__16717) {
    var objs = cljs.core.seq(arglist__16717);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__16718) {
    var objs = cljs.core.seq(arglist__16718);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__16719) {
    var objs = cljs.core.seq(arglist__16719);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__16720) {
    var objs = cljs.core.seq(arglist__16720);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__16721) {
    var objs = cljs.core.seq(arglist__16721);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__16722) {
    var objs = cljs.core.seq(arglist__16722);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__16723) {
    var objs = cljs.core.seq(arglist__16723);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj16725 = {};
  return obj16725;
}();
cljs.core.IReset = function() {
  var obj16727 = {};
  return obj16727;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3015__auto__ = o;
    if (and__3015__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__3654__auto__ = o == null ? null : o;
    return function() {
      var or__3027__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj16729 = {};
  return obj16729;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3015__auto__ = o;
      if (and__3015__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__3654__auto__ = o == null ? null : o;
      return function() {
        var or__3027__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3015__auto__ = o;
      if (and__3015__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__3654__auto__ = o == null ? null : o;
      return function() {
        var or__3027__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3015__auto__ = o;
      if (and__3015__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__3654__auto__ = o == null ? null : o;
      return function() {
        var or__3027__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3015__auto__ = o;
      if (and__3015__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__3654__auto__ = o == null ? null : o;
      return function() {
        var or__3027__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__16730 = cljs.core.seq.call(null, self__.watches);
  var chunk__16731 = null;
  var count__16732 = 0;
  var i__16733 = 0;
  while (true) {
    if (i__16733 < count__16732) {
      var vec__16734 = cljs.core._nth.call(null, chunk__16731, i__16733);
      var key = cljs.core.nth.call(null, vec__16734, 0, null);
      var f = cljs.core.nth.call(null, vec__16734, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__16736 = seq__16730;
      var G__16737 = chunk__16731;
      var G__16738 = count__16732;
      var G__16739 = i__16733 + 1;
      seq__16730 = G__16736;
      chunk__16731 = G__16737;
      count__16732 = G__16738;
      i__16733 = G__16739;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16730);
      if (temp__4126__auto__) {
        var seq__16730__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16730__$1)) {
          var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__16730__$1);
          var G__16740 = cljs.core.chunk_rest.call(null, seq__16730__$1);
          var G__16741 = c__3783__auto__;
          var G__16742 = cljs.core.count.call(null, c__3783__auto__);
          var G__16743 = 0;
          seq__16730 = G__16740;
          chunk__16731 = G__16741;
          count__16732 = G__16742;
          i__16733 = G__16743;
          continue;
        } else {
          var vec__16735 = cljs.core.first.call(null, seq__16730__$1);
          var key = cljs.core.nth.call(null, vec__16735, 0, null);
          var f = cljs.core.nth.call(null, vec__16735, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__16744 = cljs.core.next.call(null, seq__16730__$1);
          var G__16745 = null;
          var G__16746 = 0;
          var G__16747 = 0;
          seq__16730 = G__16744;
          chunk__16731 = G__16745;
          count__16732 = G__16746;
          i__16733 = G__16747;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__16751__delegate = function(x, p__16748) {
      var map__16750 = p__16748;
      var map__16750__$1 = cljs.core.seq_QMARK_.call(null, map__16750) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16750) : map__16750;
      var validator = cljs.core.get.call(null, map__16750__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__16750__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__16751 = function(x, var_args) {
      var p__16748 = null;
      if (arguments.length > 1) {
        p__16748 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16751__delegate.call(this, x, p__16748);
    };
    G__16751.cljs$lang$maxFixedArity = 1;
    G__16751.cljs$lang$applyTo = function(arglist__16752) {
      var x = cljs.core.first(arglist__16752);
      var p__16748 = cljs.core.rest(arglist__16752);
      return G__16751__delegate(x, p__16748);
    };
    G__16751.cljs$core$IFn$_invoke$arity$variadic = G__16751__delegate;
    return G__16751;
  }();
  atom = function(x, var_args) {
    var p__16748 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__16753__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__16753 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16753__delegate.call(this, a, f, x, y, more);
    };
    G__16753.cljs$lang$maxFixedArity = 4;
    G__16753.cljs$lang$applyTo = function(arglist__16754) {
      var a = cljs.core.first(arglist__16754);
      arglist__16754 = cljs.core.next(arglist__16754);
      var f = cljs.core.first(arglist__16754);
      arglist__16754 = cljs.core.next(arglist__16754);
      var x = cljs.core.first(arglist__16754);
      arglist__16754 = cljs.core.next(arglist__16754);
      var y = cljs.core.first(arglist__16754);
      var more = cljs.core.rest(arglist__16754);
      return G__16753__delegate(a, f, x, y, more);
    };
    G__16753.cljs$core$IFn$_invoke$arity$variadic = G__16753__delegate;
    return G__16753;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__16755) {
    var iref = cljs.core.first(arglist__16755);
    arglist__16755 = cljs.core.next(arglist__16755);
    var f = cljs.core.first(arglist__16755);
    var args = cljs.core.rest(arglist__16755);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj16757 = {};
  return obj16757;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3015__auto__ = x;
    if (and__3015__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__3654__auto__ = x == null ? null : x;
    return function() {
      var or__3027__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3015__auto__ = x;
    if (and__3015__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__3654__auto__ = x == null ? null : x;
    return function() {
      var or__3027__auto__ = cljs.core._key__GT_js[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__16759 = k;
    if (G__16759) {
      var bit__3677__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3027__auto__ = bit__3677__auto__;
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          return G__16759.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__16759.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16759);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16759);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__16773 = x;
      if (G__16773) {
        var bit__3677__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3027__auto__ = bit__3677__auto__;
          if (cljs.core.truth_(or__3027__auto__)) {
            return or__3027__auto__;
          } else {
            return G__16773.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__16773.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16773);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16773);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj16775 = {};
              return obj16775;
            }();
            var seq__16776_16786 = cljs.core.seq.call(null, x);
            var chunk__16777_16787 = null;
            var count__16778_16788 = 0;
            var i__16779_16789 = 0;
            while (true) {
              if (i__16779_16789 < count__16778_16788) {
                var vec__16780_16790 = cljs.core._nth.call(null, chunk__16777_16787, i__16779_16789);
                var k_16791 = cljs.core.nth.call(null, vec__16780_16790, 0, null);
                var v_16792 = cljs.core.nth.call(null, vec__16780_16790, 1, null);
                m[cljs.core.key__GT_js.call(null, k_16791)] = clj__GT_js.call(null, v_16792);
                var G__16793 = seq__16776_16786;
                var G__16794 = chunk__16777_16787;
                var G__16795 = count__16778_16788;
                var G__16796 = i__16779_16789 + 1;
                seq__16776_16786 = G__16793;
                chunk__16777_16787 = G__16794;
                count__16778_16788 = G__16795;
                i__16779_16789 = G__16796;
                continue;
              } else {
                var temp__4126__auto___16797 = cljs.core.seq.call(null, seq__16776_16786);
                if (temp__4126__auto___16797) {
                  var seq__16776_16798__$1 = temp__4126__auto___16797;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__16776_16798__$1)) {
                    var c__3783__auto___16799 = cljs.core.chunk_first.call(null, seq__16776_16798__$1);
                    var G__16800 = cljs.core.chunk_rest.call(null, seq__16776_16798__$1);
                    var G__16801 = c__3783__auto___16799;
                    var G__16802 = cljs.core.count.call(null, c__3783__auto___16799);
                    var G__16803 = 0;
                    seq__16776_16786 = G__16800;
                    chunk__16777_16787 = G__16801;
                    count__16778_16788 = G__16802;
                    i__16779_16789 = G__16803;
                    continue;
                  } else {
                    var vec__16781_16804 = cljs.core.first.call(null, seq__16776_16798__$1);
                    var k_16805 = cljs.core.nth.call(null, vec__16781_16804, 0, null);
                    var v_16806 = cljs.core.nth.call(null, vec__16781_16804, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_16805)] = clj__GT_js.call(null, v_16806);
                    var G__16807 = cljs.core.next.call(null, seq__16776_16798__$1);
                    var G__16808 = null;
                    var G__16809 = 0;
                    var G__16810 = 0;
                    seq__16776_16786 = G__16807;
                    chunk__16777_16787 = G__16808;
                    count__16778_16788 = G__16809;
                    i__16779_16789 = G__16810;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__16782_16811 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__16783_16812 = null;
              var count__16784_16813 = 0;
              var i__16785_16814 = 0;
              while (true) {
                if (i__16785_16814 < count__16784_16813) {
                  var x_16815__$1 = cljs.core._nth.call(null, chunk__16783_16812, i__16785_16814);
                  arr.push(x_16815__$1);
                  var G__16816 = seq__16782_16811;
                  var G__16817 = chunk__16783_16812;
                  var G__16818 = count__16784_16813;
                  var G__16819 = i__16785_16814 + 1;
                  seq__16782_16811 = G__16816;
                  chunk__16783_16812 = G__16817;
                  count__16784_16813 = G__16818;
                  i__16785_16814 = G__16819;
                  continue;
                } else {
                  var temp__4126__auto___16820 = cljs.core.seq.call(null, seq__16782_16811);
                  if (temp__4126__auto___16820) {
                    var seq__16782_16821__$1 = temp__4126__auto___16820;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__16782_16821__$1)) {
                      var c__3783__auto___16822 = cljs.core.chunk_first.call(null, seq__16782_16821__$1);
                      var G__16823 = cljs.core.chunk_rest.call(null, seq__16782_16821__$1);
                      var G__16824 = c__3783__auto___16822;
                      var G__16825 = cljs.core.count.call(null, c__3783__auto___16822);
                      var G__16826 = 0;
                      seq__16782_16811 = G__16823;
                      chunk__16783_16812 = G__16824;
                      count__16784_16813 = G__16825;
                      i__16785_16814 = G__16826;
                      continue;
                    } else {
                      var x_16827__$1 = cljs.core.first.call(null, seq__16782_16821__$1);
                      arr.push(x_16827__$1);
                      var G__16828 = cljs.core.next.call(null, seq__16782_16821__$1);
                      var G__16829 = null;
                      var G__16830 = 0;
                      var G__16831 = 0;
                      seq__16782_16811 = G__16828;
                      chunk__16783_16812 = G__16829;
                      count__16784_16813 = G__16830;
                      i__16785_16814 = G__16831;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj16833 = {};
  return obj16833;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3015__auto__ = x;
    if (and__3015__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__3654__auto__ = x == null ? null : x;
    return function() {
      var or__3027__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__16854__delegate = function(x, opts) {
      if (function() {
        var G__16844 = x;
        if (G__16844) {
          var bit__3677__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3027__auto__ = bit__3677__auto__;
            if (cljs.core.truth_(or__3027__auto__)) {
              return or__3027__auto__;
            } else {
              return G__16844.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__16844.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16844);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16844);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__16845 = opts;
          var map__16845__$1 = cljs.core.seq_QMARK_.call(null, map__16845) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16845) : map__16845;
          var keywordize_keys = cljs.core.get.call(null, map__16845__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__16845, map__16845__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__3752__auto__ = function(map__16845, map__16845__$1, keywordize_keys, keyfn) {
                          return function iter__16850(s__16851) {
                            return new cljs.core.LazySeq(null, function(map__16845, map__16845__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__16851__$1 = s__16851;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__16851__$1);
                                  if (temp__4126__auto__) {
                                    var s__16851__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__16851__$2)) {
                                      var c__3750__auto__ = cljs.core.chunk_first.call(null, s__16851__$2);
                                      var size__3751__auto__ = cljs.core.count.call(null, c__3750__auto__);
                                      var b__16853 = cljs.core.chunk_buffer.call(null, size__3751__auto__);
                                      if (function() {
                                        var i__16852 = 0;
                                        while (true) {
                                          if (i__16852 < size__3751__auto__) {
                                            var k = cljs.core._nth.call(null, c__3750__auto__, i__16852);
                                            cljs.core.chunk_append.call(null, b__16853, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__16855 = i__16852 + 1;
                                            i__16852 = G__16855;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16853), iter__16850.call(null, cljs.core.chunk_rest.call(null, s__16851__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16853), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__16851__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__16850.call(null, cljs.core.rest.call(null, s__16851__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__16845, map__16845__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__16845, map__16845__$1, keywordize_keys, keyfn);
                        return iter__3752__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__16845, map__16845__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__16854 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16854__delegate.call(this, x, opts);
    };
    G__16854.cljs$lang$maxFixedArity = 1;
    G__16854.cljs$lang$applyTo = function(arglist__16856) {
      var x = cljs.core.first(arglist__16856);
      var opts = cljs.core.rest(arglist__16856);
      return G__16854__delegate(x, opts);
    };
    G__16854.cljs$core$IFn$_invoke$arity$variadic = G__16854__delegate;
    return G__16854;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__16857__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__16857 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16857__delegate.call(this, args);
      };
      G__16857.cljs$lang$maxFixedArity = 0;
      G__16857.cljs$lang$applyTo = function(arglist__16858) {
        var args = cljs.core.seq(arglist__16858);
        return G__16857__delegate(args);
      };
      G__16857.cljs$core$IFn$_invoke$arity$variadic = G__16857__delegate;
      return G__16857;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__16859 = ret;
        f = G__16859;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__16860__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__16860 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16860__delegate.call(this, f, args);
    };
    G__16860.cljs$lang$maxFixedArity = 1;
    G__16860.cljs$lang$applyTo = function(arglist__16861) {
      var f = cljs.core.first(arglist__16861);
      var args = cljs.core.rest(arglist__16861);
      return G__16860__delegate(f, args);
    };
    G__16860.cljs$core$IFn$_invoke$arity$variadic = G__16860__delegate;
    return G__16860;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__16862) {
    var f = cljs.core.first(arglist__16862);
    var args = cljs.core.rest(arglist__16862);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3027__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3027__auto__) {
      return or__3027__auto__;
    } else {
      var or__3027__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3027__auto____$1) {
        return or__3027__auto____$1;
      } else {
        var and__3015__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3015__auto__) {
          var and__3015__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3015__auto____$1) {
            var and__3015__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3015__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__16863 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__16864 = i + 1;
                  ret = G__16863;
                  i = G__16864;
                  continue;
                }
                break;
              }
            } else {
              return and__3015__auto____$2;
            }
          } else {
            return and__3015__auto____$1;
          }
        } else {
          return and__3015__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3027__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3027__auto__)) {
      return or__3027__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__16865_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__16865_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__16865_SHARP_), cljs.core.second.call(null, p1__16865_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__16866_SHARP_, p2__16867_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__16866_SHARP_, p2__16867_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3027__auto__ = cljs.core.truth_(function() {
    var and__3015__auto__ = xprefs;
    if (cljs.core.truth_(and__3015__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3015__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3027__auto__)) {
    return or__3027__auto__;
  } else {
    var or__3027__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__16868 = cljs.core.rest.call(null, ps);
          ps = G__16868;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3027__auto____$1)) {
      return or__3027__auto____$1;
    } else {
      var or__3027__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__16869 = cljs.core.rest.call(null, ps);
            ps = G__16869;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3027__auto____$2)) {
        return or__3027__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3027__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3027__auto__)) {
    return or__3027__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__16872) {
    var vec__16873 = p__16872;
    var k = cljs.core.nth.call(null, vec__16873, 0, null);
    var _ = cljs.core.nth.call(null, vec__16873, 1, null);
    var e = vec__16873;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3027__auto__ = be == null;
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj16875 = {};
  return obj16875;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3015__auto__ = mf;
    if (and__3015__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__3654__auto__ = mf == null ? null : mf;
    return function() {
      var or__3027__auto__ = cljs.core._reset[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._reset["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3015__auto__ = mf;
    if (and__3015__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__3654__auto__ = mf == null ? null : mf;
    return function() {
      var or__3027__auto__ = cljs.core._add_method[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._add_method["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3015__auto__ = mf;
    if (and__3015__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__3654__auto__ = mf == null ? null : mf;
    return function() {
      var or__3027__auto__ = cljs.core._remove_method[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._remove_method["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3015__auto__ = mf;
    if (and__3015__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__3654__auto__ = mf == null ? null : mf;
    return function() {
      var or__3027__auto__ = cljs.core._prefer_method[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3015__auto__ = mf;
    if (and__3015__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__3654__auto__ = mf == null ? null : mf;
    return function() {
      var or__3027__auto__ = cljs.core._get_method[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._get_method["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3015__auto__ = mf;
    if (and__3015__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__3654__auto__ = mf == null ? null : mf;
    return function() {
      var or__3027__auto__ = cljs.core._methods[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._methods["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3015__auto__ = mf;
    if (and__3015__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__3654__auto__ = mf == null ? null : mf;
    return function() {
      var or__3027__auto__ = cljs.core._prefers[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core._prefers["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__16877 = null;
  var G__16877__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__16877__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__16877__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__16877__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__16877__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__16877__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__16877__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__16877__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__16877__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__16877__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__16877__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__16877__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__16877__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__16877__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__16877__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__16877__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__16877__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__16877__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__16877__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__16877__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__16877__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__16877 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__16877__2.call(this, self__, a);
      case 3:
        return G__16877__3.call(this, self__, a, b);
      case 4:
        return G__16877__4.call(this, self__, a, b, c);
      case 5:
        return G__16877__5.call(this, self__, a, b, c, d);
      case 6:
        return G__16877__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__16877__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__16877__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__16877__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__16877__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__16877__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__16877__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__16877__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__16877__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__16877__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__16877__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__16877__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__16877__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__16877__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__16877__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__16877__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__16877__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16877;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args16876) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16876)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3597__auto__, writer__3598__auto__, opts__3599__auto__) {
  return cljs.core._write.call(null, writer__3598__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj17393 = {};
  return obj17393;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3015__auto__ = port;
    if (and__3015__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__3654__auto__ = port == null ? null : port;
    return function() {
      var or__3027__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj17395 = {};
  return obj17395;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3015__auto__ = port;
    if (and__3015__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__3654__auto__ = port == null ? null : port;
    return function() {
      var or__3027__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj17397 = {};
  return obj17397;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3015__auto__ = chan;
    if (and__3015__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__3654__auto__ = chan == null ? null : chan;
    return function() {
      var or__3027__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3015__auto__ = chan;
    if (and__3015__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__3654__auto__ = chan == null ? null : chan;
    return function() {
      var or__3027__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj17399 = {};
  return obj17399;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3015__auto__ = h;
    if (and__3015__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__3654__auto__ = h == null ? null : h;
    return function() {
      var or__3027__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3015__auto__ = h;
    if (and__3015__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__3654__auto__ = h == null ? null : h;
    return function() {
      var or__3027__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj17401 = {};
  return obj17401;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3015__auto__ = b;
    if (and__3015__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__3654__auto__ = b == null ? null : b;
    return function() {
      var or__3027__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3015__auto__ = b;
    if (and__3015__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__3654__auto__ = b == null ? null : b;
    return function() {
      var or__3027__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3015__auto__ = b;
    if (and__3015__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__3654__auto__ = b == null ? null : b;
    return function() {
      var or__3027__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj17403 = {};
  return obj17403;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__20135 = cnt + 1;
      cnt = G__20135;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__3883__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__3883__auto__) {
      var v_20136 = this$.pop();
      if (keep_QMARK_.call(null, v_20136)) {
        this$.unshift(v_20136);
      } else {
      }
      var G__20137 = x + 1;
      x = G__20137;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_20138 = 0;
  while (true) {
    var m_20139 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_20139 == null) {
    } else {
      m_20139.call(null);
      if (count_20138 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__20140 = count_20138 + 1;
        count_20138 = G__20140;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3015__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3015__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3015__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t20144 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t20144 = function(val, box, meta20145) {
      this.val = val;
      this.box = box;
      this.meta20145 = meta20145;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t20144.cljs$lang$type = true;
    cljs.core.async.impl.channels.t20144.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t20144";
    cljs.core.async.impl.channels.t20144.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
      return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async.impl.channels/t20144");
    };
    cljs.core.async.impl.channels.t20144.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t20144.prototype.cljs$core$IMeta$_meta$arity$1 = function(_20146) {
      var self__ = this;
      var _20146__$1 = this;
      return self__.meta20145;
    };
    cljs.core.async.impl.channels.t20144.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_20146, meta20145__$1) {
      var self__ = this;
      var _20146__$1 = this;
      return new cljs.core.async.impl.channels.t20144(self__.val, self__.box, meta20145__$1);
    };
    cljs.core.async.impl.channels.__GT_t20144 = function __GT_t20144(val__$1, box__$1, meta20145) {
      return new cljs.core.async.impl.channels.t20144(val__$1, box__$1, meta20145);
    };
  }
  return new cljs.core.async.impl.channels.t20144(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3597__auto__, writer__3598__auto__, opts__3599__auto__) {
  return cljs.core._write.call(null, writer__3598__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_20147 = self__.takes.pop();
      if (taker_20147 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_20147)) {
          var take_cb_20148 = cljs.core.async.impl.protocols.commit.call(null, taker_20147);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_20148, taker_20147, this$__$1) {
            return function() {
              return take_cb_20148.call(null, null);
            };
          }(take_cb_20148, taker_20147, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        var putter_20149 = self__.puts.pop();
        if (!(putter_20149 == null)) {
          var put_handler_20150 = putter_20149.handler;
          var val_20151 = putter_20149.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_20150)) {
            var put_cb_20152 = cljs.core.async.impl.protocols.commit.call(null, put_handler_20150);
            var __20153__$1 = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb_20152, __20153__$1, put_handler_20150, val_20151, putter_20149, _, retval, this$__$1) {
              return function() {
                return put_cb_20152.call(null, true);
              };
            }(put_cb_20152, __20153__$1, put_handler_20150, val_20151, putter_20149, _, retval, this$__$1));
            cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val_20151);
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      return retval;
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb, _, put_handler, val, putter, this$__$1) {
              return function() {
                return put_cb.call(null, true);
              };
            }(put_cb, _, put_handler, val, putter, this$__$1));
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t20083 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t20083 = function(f, fn_handler, meta20084) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta20084 = meta20084;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t20083.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t20083.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t20083";
    cljs.core.async.impl.ioc_helpers.t20083.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
      return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async.impl.ioc-helpers/t20083");
    };
    cljs.core.async.impl.ioc_helpers.t20083.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t20083.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t20083.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t20083.prototype.cljs$core$IMeta$_meta$arity$1 = function(_20085) {
      var self__ = this;
      var _20085__$1 = this;
      return self__.meta20084;
    };
    cljs.core.async.impl.ioc_helpers.t20083.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_20085, meta20084__$1) {
      var self__ = this;
      var _20085__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t20083(self__.f, self__.fn_handler, meta20084__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t20083 = function __GT_t20083(f__$1, fn_handler__$1, meta20084) {
      return new cljs.core.async.impl.ioc_helpers.t20083(f__$1, fn_handler__$1, meta20084);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t20083(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e20087) {
    if (e20087 instanceof Object) {
      var ex = e20087;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw e20087;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_20090_20092 = state;
    statearr_20090_20092[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_20090_20092[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_20091_20093 = state;
    statearr_20091_20093[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_20091_20093[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_20096_20098 = state;
    statearr_20096_20098[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_20096_20098[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_20097_20099 = state;
    statearr_20097_20099[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_20097_20099[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__20100) {
    var map__20105 = p__20100;
    var map__20105__$1 = cljs.core.seq_QMARK_.call(null, map__20105) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20105) : map__20105;
    var opts = map__20105__$1;
    var statearr_20106_20109 = state;
    statearr_20106_20109[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__20105, map__20105__$1, opts) {
      return function(val) {
        var statearr_20107_20110 = state;
        statearr_20107_20110[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__20105, map__20105__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_20108_20111 = state;
      statearr_20108_20111[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__20100 = null;
    if (arguments.length > 3) {
      p__20100 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__20100);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__20112) {
    var state = cljs.core.first(arglist__20112);
    arglist__20112 = cljs.core.next(arglist__20112);
    var cont_block = cljs.core.first(arglist__20112);
    arglist__20112 = cljs.core.next(arglist__20112);
    var ports = cljs.core.first(arglist__20112);
    var p__20100 = cljs.core.rest(arglist__20112);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__20100);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3613__auto__, k__3614__auto__) {
  var self__ = this;
  var this__3613__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3613__auto____$1, k__3614__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3615__auto__, k20114, else__3616__auto__) {
  var self__ = this;
  var this__3615__auto____$1 = this;
  var G__20116 = k20114 instanceof cljs.core.Keyword ? k20114.fqn : null;
  switch(G__20116) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k20114, else__3616__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3627__auto__, writer__3628__auto__, opts__3629__auto__) {
  var self__ = this;
  var this__3627__auto____$1 = this;
  var pr_pair__3630__auto__ = function(this__3627__auto____$1) {
    return function(keyval__3631__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__3628__auto__, cljs.core.pr_writer, "", " ", "", opts__3629__auto__, keyval__3631__auto__);
    };
  }(this__3627__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__3628__auto__, pr_pair__3630__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__3629__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3611__auto__) {
  var self__ = this;
  var this__3611__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__3607__auto__) {
  var self__ = this;
  var this__3607__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3617__auto__) {
  var self__ = this;
  var this__3617__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3608__auto__) {
  var self__ = this;
  var this__3608__auto____$1 = this;
  var h__3438__auto__ = self__.__hash;
  if (!(h__3438__auto__ == null)) {
    return h__3438__auto__;
  } else {
    var h__3438__auto____$1 = cljs.core.hash_imap.call(null, this__3608__auto____$1);
    self__.__hash = h__3438__auto____$1;
    return h__3438__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3609__auto__, other__3610__auto__) {
  var self__ = this;
  var this__3609__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3015__auto__ = other__3610__auto__;
    if (cljs.core.truth_(and__3015__auto__)) {
      return this__3609__auto____$1.constructor === other__3610__auto__.constructor && cljs.core.equiv_map.call(null, this__3609__auto____$1, other__3610__auto__);
    } else {
      return and__3015__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3622__auto__, k__3623__auto__) {
  var self__ = this;
  var this__3622__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__3623__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3622__auto____$1), self__.__meta), k__3623__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3623__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3620__auto__, k__3621__auto__, G__20113) {
  var self__ = this;
  var this__3620__auto____$1 = this;
  var pred__20117 = cljs.core.keyword_identical_QMARK_;
  var expr__20118 = k__3621__auto__;
  if (cljs.core.truth_(pred__20117.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__20118))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__20113, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__20117.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__20118))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__20113, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__20117.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__20118))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__20113, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__20117.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__20118))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__20113, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__20117.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__20118))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__20113, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3621__auto__, G__20113), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3625__auto__) {
  var self__ = this;
  var this__3625__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3612__auto__, G__20113) {
  var self__ = this;
  var this__3612__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__20113, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3618__auto__, entry__3619__auto__) {
  var self__ = this;
  var this__3618__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3619__auto__)) {
    return cljs.core._assoc.call(null, this__3618__auto____$1, cljs.core._nth.call(null, entry__3619__auto__, 0), cljs.core._nth.call(null, entry__3619__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3618__auto____$1, entry__3619__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__3647__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__3647__auto__, writer__3648__auto__) {
  return cljs.core._write.call(null, writer__3648__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__20115) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__20115), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__20115), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__20115), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__20115), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__20115), null, cljs.core.dissoc.call(null, G__20115, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_20122 = state;
  statearr_20122[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_20122;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3015__auto__ = exception;
      if (cljs.core.truth_(and__3015__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3015__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3015__auto__ = exception;
        if (cljs.core.truth_(and__3015__auto__)) {
          var and__3015__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3015__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3015__auto____$1;
          }
        } else {
          return and__3015__auto__;
        }
      }())) {
        var statearr_20128 = state;
        statearr_20128[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_20128[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_20128[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_20128[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_20128;
      } else {
        if (cljs.core.truth_(function() {
          var and__3015__auto__ = exception;
          if (cljs.core.truth_(and__3015__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3015__auto__;
          }
        }())) {
          var statearr_20129_20133 = state;
          statearr_20129_20133[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__20134 = state;
          state = G__20134;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3015__auto__ = exception;
            if (cljs.core.truth_(and__3015__auto__)) {
              var and__3015__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3015__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3015__auto____$1;
              }
            } else {
              return and__3015__auto__;
            }
          }())) {
            var statearr_20130 = state;
            statearr_20130[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_20130[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_20130;
          } else {
            if (cljs.core.truth_(function() {
              var and__3015__auto__ = cljs.core.not.call(null, exception);
              if (and__3015__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3015__auto__;
              }
            }())) {
              var statearr_20131 = state;
              statearr_20131[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_20131[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_20131;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_20132 = state;
                statearr_20132[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_20132[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_20132;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error("Assert failed: No matching clause\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, false)));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__20056 = level + 1;
        level = G__20056;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_20057 = 0;
    while (true) {
      if (i_20057 < arr.length) {
        arr[i_20057] = null;
        var G__20058 = i_20057 + 1;
        i_20057 = G__20058;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__20059 = x_SINGLEQUOTE_;
                x__$1 = G__20059;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__20060 = x__$1;
        var G__20061 = k;
        var G__20062 = level - 1;
        var G__20063 = update;
        x = G__20060;
        k = G__20061;
        level = G__20062;
        update = G__20063;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_20064 = self__.level + 1;
      while (true) {
        if (i_20064 <= new_level + 1) {
          update[i_20064] = self__.header;
          var G__20065 = i_20064 + 1;
          i_20064 = G__20065;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_20066 = 0;
    while (true) {
      if (i_20066 <= self__.level) {
        var links_20067 = update[i_20066].forward;
        if (links_20067[i_20066] === x__$1) {
          links_20067[i_20066] = x__$1.forward[i_20066];
          var G__20068 = i_20066 + 1;
          i_20066 = G__20068;
          continue;
        } else {
          var G__20069 = i_20066 + 1;
          i_20066 = G__20069;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__20070 = x_SINGLEQUOTE_;
              x__$1 = G__20070;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__20071 = nx;
        var G__20072 = level__$1 - 1;
        x = G__20071;
        level__$1 = G__20072;
        continue;
      } else {
        var G__20073 = x;
        var G__20074 = level__$1 - 1;
        x = G__20073;
        level__$1 = G__20074;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__20075 = x_SINGLEQUOTE_;
              x__$1 = G__20075;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__20076 = nx;
        var G__20077 = level__$1 - 1;
        x = G__20076;
        level__$1 = G__20077;
        continue;
      } else {
        var G__20078 = x;
        var G__20079 = level__$1 - 1;
        x = G__20078;
        level__$1 = G__20079;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3027__auto__ = cljs.core.truth_(function() {
    var and__3015__auto__ = me;
    if (cljs.core.truth_(and__3015__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3015__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3027__auto__)) {
    return or__3027__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3027__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3027__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t17407 !== "undefined") {
  } else {
    cljs.core.async.t17407 = function(f, fn_handler, meta17408) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta17408 = meta17408;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17407.cljs$lang$type = true;
    cljs.core.async.t17407.cljs$lang$ctorStr = "cljs.core.async/t17407";
    cljs.core.async.t17407.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
      return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t17407");
    };
    cljs.core.async.t17407.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17407.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t17407.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t17407.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17409) {
      var self__ = this;
      var _17409__$1 = this;
      return self__.meta17408;
    };
    cljs.core.async.t17407.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17409, meta17408__$1) {
      var self__ = this;
      var _17409__$1 = this;
      return new cljs.core.async.t17407(self__.f, self__.fn_handler, meta17408__$1);
    };
    cljs.core.async.__GT_t17407 = function __GT_t17407(f__$1, fn_handler__$1, meta17408) {
      return new cljs.core.async.t17407(f__$1, fn_handler__$1, meta17408);
    };
  }
  return new cljs.core.async.t17407(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__17411 = buff;
  if (G__17411) {
    var bit__3677__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3027__auto__ = bit__3677__auto__;
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return G__17411.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__17411.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__17411);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__17411);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_17412 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_17412);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_17412, ret) {
          return function() {
            return fn1.call(null, val_17412);
          };
        }(val_17412, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__3883__auto___17413 = n;
  var x_17414 = 0;
  while (true) {
    if (x_17414 < n__3883__auto___17413) {
      a[x_17414] = 0;
      var G__17415 = x_17414 + 1;
      x_17414 = G__17415;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__17416 = i + 1;
      i = G__17416;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t17420 !== "undefined") {
  } else {
    cljs.core.async.t17420 = function(flag, alt_flag, meta17421) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta17421 = meta17421;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17420.cljs$lang$type = true;
    cljs.core.async.t17420.cljs$lang$ctorStr = "cljs.core.async/t17420";
    cljs.core.async.t17420.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
        return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t17420");
      };
    }(flag);
    cljs.core.async.t17420.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17420.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t17420.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t17420.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_17422) {
        var self__ = this;
        var _17422__$1 = this;
        return self__.meta17421;
      };
    }(flag);
    cljs.core.async.t17420.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_17422, meta17421__$1) {
        var self__ = this;
        var _17422__$1 = this;
        return new cljs.core.async.t17420(self__.flag, self__.alt_flag, meta17421__$1);
      };
    }(flag);
    cljs.core.async.__GT_t17420 = function(flag) {
      return function __GT_t17420(flag__$1, alt_flag__$1, meta17421) {
        return new cljs.core.async.t17420(flag__$1, alt_flag__$1, meta17421);
      };
    }(flag);
  }
  return new cljs.core.async.t17420(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t17426 !== "undefined") {
  } else {
    cljs.core.async.t17426 = function(cb, flag, alt_handler, meta17427) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta17427 = meta17427;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17426.cljs$lang$type = true;
    cljs.core.async.t17426.cljs$lang$ctorStr = "cljs.core.async/t17426";
    cljs.core.async.t17426.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
      return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t17426");
    };
    cljs.core.async.t17426.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17426.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t17426.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t17426.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17428) {
      var self__ = this;
      var _17428__$1 = this;
      return self__.meta17427;
    };
    cljs.core.async.t17426.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17428, meta17427__$1) {
      var self__ = this;
      var _17428__$1 = this;
      return new cljs.core.async.t17426(self__.cb, self__.flag, self__.alt_handler, meta17427__$1);
    };
    cljs.core.async.__GT_t17426 = function __GT_t17426(cb__$1, flag__$1, alt_handler__$1, meta17427) {
      return new cljs.core.async.t17426(cb__$1, flag__$1, alt_handler__$1, meta17427);
    };
  }
  return new cljs.core.async.t17426(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__17429_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17429_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__17430_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17430_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3027__auto__ = wport;
            if (cljs.core.truth_(or__3027__auto__)) {
              return or__3027__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__17431 = i + 1;
          i = G__17431;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3027__auto__ = ret;
  if (cljs.core.truth_(or__3027__auto__)) {
    return or__3027__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3015__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3015__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3015__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__17432) {
    var map__17434 = p__17432;
    var map__17434__$1 = cljs.core.seq_QMARK_.call(null, map__17434) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17434) : map__17434;
    var opts = map__17434__$1;
    if (null) {
      return null;
    } else {
      throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__17432 = null;
    if (arguments.length > 1) {
      p__17432 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__17432);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__17435) {
    var ports = cljs.core.first(arglist__17435);
    var p__17432 = cljs.core.rest(arglist__17435);
    return alts_BANG___delegate(ports, p__17432);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t17443 !== "undefined") {
  } else {
    cljs.core.async.t17443 = function(ch, f, map_LT_, meta17444) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta17444 = meta17444;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17443.cljs$lang$type = true;
    cljs.core.async.t17443.cljs$lang$ctorStr = "cljs.core.async/t17443";
    cljs.core.async.t17443.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
      return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t17443");
    };
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t17446 !== "undefined") {
        } else {
          cljs.core.async.t17446 = function(fn1, _, meta17444, ch, f, map_LT_, meta17447) {
            this.fn1 = fn1;
            this._ = _;
            this.meta17444 = meta17444;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta17447 = meta17447;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t17446.cljs$lang$type = true;
          cljs.core.async.t17446.cljs$lang$ctorStr = "cljs.core.async/t17446";
          cljs.core.async.t17446.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
              return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t17446");
            };
          }(___$1);
          cljs.core.async.t17446.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t17446.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t17446.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t17446.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__17436_SHARP_) {
                  return f1.call(null, p1__17436_SHARP_ == null ? null : self__.f.call(null, p1__17436_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t17446.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_17448) {
              var self__ = this;
              var _17448__$1 = this;
              return self__.meta17447;
            };
          }(___$1);
          cljs.core.async.t17446.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_17448, meta17447__$1) {
              var self__ = this;
              var _17448__$1 = this;
              return new cljs.core.async.t17446(self__.fn1, self__._, self__.meta17444, self__.ch, self__.f, self__.map_LT_, meta17447__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t17446 = function(___$1) {
            return function __GT_t17446(fn1__$1, ___$2, meta17444__$1, ch__$2, f__$2, map_LT___$2, meta17447) {
              return new cljs.core.async.t17446(fn1__$1, ___$2, meta17444__$1, ch__$2, f__$2, map_LT___$2, meta17447);
            };
          }(___$1);
        }
        return new cljs.core.async.t17446(fn1, ___$1, self__.meta17444, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3015__auto__ = ret;
        if (cljs.core.truth_(and__3015__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3015__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t17443.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17445) {
      var self__ = this;
      var _17445__$1 = this;
      return self__.meta17444;
    };
    cljs.core.async.t17443.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17445, meta17444__$1) {
      var self__ = this;
      var _17445__$1 = this;
      return new cljs.core.async.t17443(self__.ch, self__.f, self__.map_LT_, meta17444__$1);
    };
    cljs.core.async.__GT_t17443 = function __GT_t17443(ch__$1, f__$1, map_LT___$1, meta17444) {
      return new cljs.core.async.t17443(ch__$1, f__$1, map_LT___$1, meta17444);
    };
  }
  return new cljs.core.async.t17443(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t17452 !== "undefined") {
  } else {
    cljs.core.async.t17452 = function(ch, f, map_GT_, meta17453) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta17453 = meta17453;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17452.cljs$lang$type = true;
    cljs.core.async.t17452.cljs$lang$ctorStr = "cljs.core.async/t17452";
    cljs.core.async.t17452.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
      return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t17452");
    };
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17452.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17454) {
      var self__ = this;
      var _17454__$1 = this;
      return self__.meta17453;
    };
    cljs.core.async.t17452.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17454, meta17453__$1) {
      var self__ = this;
      var _17454__$1 = this;
      return new cljs.core.async.t17452(self__.ch, self__.f, self__.map_GT_, meta17453__$1);
    };
    cljs.core.async.__GT_t17452 = function __GT_t17452(ch__$1, f__$1, map_GT___$1, meta17453) {
      return new cljs.core.async.t17452(ch__$1, f__$1, map_GT___$1, meta17453);
    };
  }
  return new cljs.core.async.t17452(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t17458 !== "undefined") {
  } else {
    cljs.core.async.t17458 = function(ch, p, filter_GT_, meta17459) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta17459 = meta17459;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17458.cljs$lang$type = true;
    cljs.core.async.t17458.cljs$lang$ctorStr = "cljs.core.async/t17458";
    cljs.core.async.t17458.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
      return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t17458");
    };
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t17458.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17460) {
      var self__ = this;
      var _17460__$1 = this;
      return self__.meta17459;
    };
    cljs.core.async.t17458.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17460, meta17459__$1) {
      var self__ = this;
      var _17460__$1 = this;
      return new cljs.core.async.t17458(self__.ch, self__.p, self__.filter_GT_, meta17459__$1);
    };
    cljs.core.async.__GT_t17458 = function __GT_t17458(ch__$1, p__$1, filter_GT___$1, meta17459) {
      return new cljs.core.async.t17458(ch__$1, p__$1, filter_GT___$1, meta17459);
    };
  }
  return new cljs.core.async.t17458(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__11578__auto___17543 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___17543, out) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___17543, out) {
            return function(state_17522) {
              var state_val_17523 = state_17522[1];
              if (state_val_17523 === 7) {
                var inst_17518 = state_17522[2];
                var state_17522__$1 = state_17522;
                var statearr_17524_17544 = state_17522__$1;
                statearr_17524_17544[2] = inst_17518;
                statearr_17524_17544[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17523 === 1) {
                  var state_17522__$1 = state_17522;
                  var statearr_17525_17545 = state_17522__$1;
                  statearr_17525_17545[2] = null;
                  statearr_17525_17545[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17523 === 4) {
                    var inst_17504 = state_17522[7];
                    var inst_17504__$1 = state_17522[2];
                    var inst_17505 = inst_17504__$1 == null;
                    var state_17522__$1 = function() {
                      var statearr_17526 = state_17522;
                      statearr_17526[7] = inst_17504__$1;
                      return statearr_17526;
                    }();
                    if (cljs.core.truth_(inst_17505)) {
                      var statearr_17527_17546 = state_17522__$1;
                      statearr_17527_17546[1] = 5;
                    } else {
                      var statearr_17528_17547 = state_17522__$1;
                      statearr_17528_17547[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17523 === 6) {
                      var inst_17504 = state_17522[7];
                      var inst_17509 = p.call(null, inst_17504);
                      var state_17522__$1 = state_17522;
                      if (cljs.core.truth_(inst_17509)) {
                        var statearr_17529_17548 = state_17522__$1;
                        statearr_17529_17548[1] = 8;
                      } else {
                        var statearr_17530_17549 = state_17522__$1;
                        statearr_17530_17549[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17523 === 3) {
                        var inst_17520 = state_17522[2];
                        var state_17522__$1 = state_17522;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17522__$1, inst_17520);
                      } else {
                        if (state_val_17523 === 2) {
                          var state_17522__$1 = state_17522;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17522__$1, 4, ch);
                        } else {
                          if (state_val_17523 === 11) {
                            var inst_17512 = state_17522[2];
                            var state_17522__$1 = state_17522;
                            var statearr_17531_17550 = state_17522__$1;
                            statearr_17531_17550[2] = inst_17512;
                            statearr_17531_17550[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17523 === 9) {
                              var state_17522__$1 = state_17522;
                              var statearr_17532_17551 = state_17522__$1;
                              statearr_17532_17551[2] = null;
                              statearr_17532_17551[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17523 === 5) {
                                var inst_17507 = cljs.core.async.close_BANG_.call(null, out);
                                var state_17522__$1 = state_17522;
                                var statearr_17533_17552 = state_17522__$1;
                                statearr_17533_17552[2] = inst_17507;
                                statearr_17533_17552[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17523 === 10) {
                                  var inst_17515 = state_17522[2];
                                  var state_17522__$1 = function() {
                                    var statearr_17534 = state_17522;
                                    statearr_17534[8] = inst_17515;
                                    return statearr_17534;
                                  }();
                                  var statearr_17535_17553 = state_17522__$1;
                                  statearr_17535_17553[2] = null;
                                  statearr_17535_17553[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17523 === 8) {
                                    var inst_17504 = state_17522[7];
                                    var state_17522__$1 = state_17522;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17522__$1, 11, out, inst_17504);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___17543, out);
          return function(switch__11563__auto__, c__11578__auto___17543, out) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_17539 = [null, null, null, null, null, null, null, null, null];
                statearr_17539[0] = state_machine__11564__auto__;
                statearr_17539[1] = 1;
                return statearr_17539;
              };
              var state_machine__11564__auto____1 = function(state_17522) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_17522);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e17540) {
                      if (e17540 instanceof Object) {
                        var ex__11567__auto__ = e17540;
                        var statearr_17541_17554 = state_17522;
                        statearr_17541_17554[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17522);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17540;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17555 = state_17522;
                    state_17522 = G__17555;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_17522) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_17522);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___17543, out);
        }();
        var state__11580__auto__ = function() {
          var statearr_17542 = f__11579__auto__.call(null);
          statearr_17542[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___17543;
          return statearr_17542;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___17543, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__11578__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto__) {
    return function() {
      var f__11579__auto__ = function() {
        var switch__11563__auto__ = function(c__11578__auto__) {
          return function(state_17721) {
            var state_val_17722 = state_17721[1];
            if (state_val_17722 === 7) {
              var inst_17717 = state_17721[2];
              var state_17721__$1 = state_17721;
              var statearr_17723_17764 = state_17721__$1;
              statearr_17723_17764[2] = inst_17717;
              statearr_17723_17764[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17722 === 20) {
                var inst_17687 = state_17721[7];
                var inst_17698 = state_17721[2];
                var inst_17699 = cljs.core.next.call(null, inst_17687);
                var inst_17673 = inst_17699;
                var inst_17674 = null;
                var inst_17675 = 0;
                var inst_17676 = 0;
                var state_17721__$1 = function() {
                  var statearr_17724 = state_17721;
                  statearr_17724[8] = inst_17698;
                  statearr_17724[9] = inst_17675;
                  statearr_17724[10] = inst_17676;
                  statearr_17724[11] = inst_17673;
                  statearr_17724[12] = inst_17674;
                  return statearr_17724;
                }();
                var statearr_17725_17765 = state_17721__$1;
                statearr_17725_17765[2] = null;
                statearr_17725_17765[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17722 === 1) {
                  var state_17721__$1 = state_17721;
                  var statearr_17726_17766 = state_17721__$1;
                  statearr_17726_17766[2] = null;
                  statearr_17726_17766[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17722 === 4) {
                    var inst_17662 = state_17721[13];
                    var inst_17662__$1 = state_17721[2];
                    var inst_17663 = inst_17662__$1 == null;
                    var state_17721__$1 = function() {
                      var statearr_17727 = state_17721;
                      statearr_17727[13] = inst_17662__$1;
                      return statearr_17727;
                    }();
                    if (cljs.core.truth_(inst_17663)) {
                      var statearr_17728_17767 = state_17721__$1;
                      statearr_17728_17767[1] = 5;
                    } else {
                      var statearr_17729_17768 = state_17721__$1;
                      statearr_17729_17768[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17722 === 15) {
                      var state_17721__$1 = state_17721;
                      var statearr_17733_17769 = state_17721__$1;
                      statearr_17733_17769[2] = null;
                      statearr_17733_17769[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17722 === 21) {
                        var state_17721__$1 = state_17721;
                        var statearr_17734_17770 = state_17721__$1;
                        statearr_17734_17770[2] = null;
                        statearr_17734_17770[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17722 === 13) {
                          var inst_17675 = state_17721[9];
                          var inst_17676 = state_17721[10];
                          var inst_17673 = state_17721[11];
                          var inst_17674 = state_17721[12];
                          var inst_17683 = state_17721[2];
                          var inst_17684 = inst_17676 + 1;
                          var tmp17730 = inst_17675;
                          var tmp17731 = inst_17673;
                          var tmp17732 = inst_17674;
                          var inst_17673__$1 = tmp17731;
                          var inst_17674__$1 = tmp17732;
                          var inst_17675__$1 = tmp17730;
                          var inst_17676__$1 = inst_17684;
                          var state_17721__$1 = function() {
                            var statearr_17735 = state_17721;
                            statearr_17735[14] = inst_17683;
                            statearr_17735[9] = inst_17675__$1;
                            statearr_17735[10] = inst_17676__$1;
                            statearr_17735[11] = inst_17673__$1;
                            statearr_17735[12] = inst_17674__$1;
                            return statearr_17735;
                          }();
                          var statearr_17736_17771 = state_17721__$1;
                          statearr_17736_17771[2] = null;
                          statearr_17736_17771[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17722 === 22) {
                            var state_17721__$1 = state_17721;
                            var statearr_17737_17772 = state_17721__$1;
                            statearr_17737_17772[2] = null;
                            statearr_17737_17772[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17722 === 6) {
                              var inst_17662 = state_17721[13];
                              var inst_17671 = f.call(null, inst_17662);
                              var inst_17672 = cljs.core.seq.call(null, inst_17671);
                              var inst_17673 = inst_17672;
                              var inst_17674 = null;
                              var inst_17675 = 0;
                              var inst_17676 = 0;
                              var state_17721__$1 = function() {
                                var statearr_17738 = state_17721;
                                statearr_17738[9] = inst_17675;
                                statearr_17738[10] = inst_17676;
                                statearr_17738[11] = inst_17673;
                                statearr_17738[12] = inst_17674;
                                return statearr_17738;
                              }();
                              var statearr_17739_17773 = state_17721__$1;
                              statearr_17739_17773[2] = null;
                              statearr_17739_17773[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17722 === 17) {
                                var inst_17687 = state_17721[7];
                                var inst_17691 = cljs.core.chunk_first.call(null, inst_17687);
                                var inst_17692 = cljs.core.chunk_rest.call(null, inst_17687);
                                var inst_17693 = cljs.core.count.call(null, inst_17691);
                                var inst_17673 = inst_17692;
                                var inst_17674 = inst_17691;
                                var inst_17675 = inst_17693;
                                var inst_17676 = 0;
                                var state_17721__$1 = function() {
                                  var statearr_17740 = state_17721;
                                  statearr_17740[9] = inst_17675;
                                  statearr_17740[10] = inst_17676;
                                  statearr_17740[11] = inst_17673;
                                  statearr_17740[12] = inst_17674;
                                  return statearr_17740;
                                }();
                                var statearr_17741_17774 = state_17721__$1;
                                statearr_17741_17774[2] = null;
                                statearr_17741_17774[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17722 === 3) {
                                  var inst_17719 = state_17721[2];
                                  var state_17721__$1 = state_17721;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17721__$1, inst_17719);
                                } else {
                                  if (state_val_17722 === 12) {
                                    var inst_17707 = state_17721[2];
                                    var state_17721__$1 = state_17721;
                                    var statearr_17742_17775 = state_17721__$1;
                                    statearr_17742_17775[2] = inst_17707;
                                    statearr_17742_17775[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17722 === 2) {
                                      var state_17721__$1 = state_17721;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17721__$1, 4, in$);
                                    } else {
                                      if (state_val_17722 === 23) {
                                        var inst_17715 = state_17721[2];
                                        var state_17721__$1 = state_17721;
                                        var statearr_17743_17776 = state_17721__$1;
                                        statearr_17743_17776[2] = inst_17715;
                                        statearr_17743_17776[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17722 === 19) {
                                          var inst_17702 = state_17721[2];
                                          var state_17721__$1 = state_17721;
                                          var statearr_17744_17777 = state_17721__$1;
                                          statearr_17744_17777[2] = inst_17702;
                                          statearr_17744_17777[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_17722 === 11) {
                                            var inst_17687 = state_17721[7];
                                            var inst_17673 = state_17721[11];
                                            var inst_17687__$1 = cljs.core.seq.call(null, inst_17673);
                                            var state_17721__$1 = function() {
                                              var statearr_17745 = state_17721;
                                              statearr_17745[7] = inst_17687__$1;
                                              return statearr_17745;
                                            }();
                                            if (inst_17687__$1) {
                                              var statearr_17746_17778 = state_17721__$1;
                                              statearr_17746_17778[1] = 14;
                                            } else {
                                              var statearr_17747_17779 = state_17721__$1;
                                              statearr_17747_17779[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_17722 === 9) {
                                              var inst_17709 = state_17721[2];
                                              var inst_17710 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_17721__$1 = function() {
                                                var statearr_17748 = state_17721;
                                                statearr_17748[15] = inst_17709;
                                                return statearr_17748;
                                              }();
                                              if (cljs.core.truth_(inst_17710)) {
                                                var statearr_17749_17780 = state_17721__$1;
                                                statearr_17749_17780[1] = 21;
                                              } else {
                                                var statearr_17750_17781 = state_17721__$1;
                                                statearr_17750_17781[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_17722 === 5) {
                                                var inst_17665 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_17721__$1 = state_17721;
                                                var statearr_17751_17782 = state_17721__$1;
                                                statearr_17751_17782[2] = inst_17665;
                                                statearr_17751_17782[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_17722 === 14) {
                                                  var inst_17687 = state_17721[7];
                                                  var inst_17689 = cljs.core.chunked_seq_QMARK_.call(null, inst_17687);
                                                  var state_17721__$1 = state_17721;
                                                  if (inst_17689) {
                                                    var statearr_17752_17783 = state_17721__$1;
                                                    statearr_17752_17783[1] = 17;
                                                  } else {
                                                    var statearr_17753_17784 = state_17721__$1;
                                                    statearr_17753_17784[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_17722 === 16) {
                                                    var inst_17705 = state_17721[2];
                                                    var state_17721__$1 = state_17721;
                                                    var statearr_17754_17785 = state_17721__$1;
                                                    statearr_17754_17785[2] = inst_17705;
                                                    statearr_17754_17785[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_17722 === 10) {
                                                      var inst_17676 = state_17721[10];
                                                      var inst_17674 = state_17721[12];
                                                      var inst_17681 = cljs.core._nth.call(null, inst_17674, inst_17676);
                                                      var state_17721__$1 = state_17721;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17721__$1, 13, out, inst_17681);
                                                    } else {
                                                      if (state_val_17722 === 18) {
                                                        var inst_17687 = state_17721[7];
                                                        var inst_17696 = cljs.core.first.call(null, inst_17687);
                                                        var state_17721__$1 = state_17721;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17721__$1, 20, out, inst_17696);
                                                      } else {
                                                        if (state_val_17722 === 8) {
                                                          var inst_17675 = state_17721[9];
                                                          var inst_17676 = state_17721[10];
                                                          var inst_17678 = inst_17676 < inst_17675;
                                                          var inst_17679 = inst_17678;
                                                          var state_17721__$1 = state_17721;
                                                          if (cljs.core.truth_(inst_17679)) {
                                                            var statearr_17755_17786 = state_17721__$1;
                                                            statearr_17755_17786[1] = 10;
                                                          } else {
                                                            var statearr_17756_17787 = state_17721__$1;
                                                            statearr_17756_17787[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11578__auto__);
        return function(switch__11563__auto__, c__11578__auto__) {
          return function() {
            var state_machine__11564__auto__ = null;
            var state_machine__11564__auto____0 = function() {
              var statearr_17760 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17760[0] = state_machine__11564__auto__;
              statearr_17760[1] = 1;
              return statearr_17760;
            };
            var state_machine__11564__auto____1 = function(state_17721) {
              while (true) {
                var ret_value__11565__auto__ = function() {
                  try {
                    while (true) {
                      var result__11566__auto__ = switch__11563__auto__.call(null, state_17721);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11566__auto__;
                      }
                      break;
                    }
                  } catch (e17761) {
                    if (e17761 instanceof Object) {
                      var ex__11567__auto__ = e17761;
                      var statearr_17762_17788 = state_17721;
                      statearr_17762_17788[5] = ex__11567__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17721);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e17761;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17789 = state_17721;
                  state_17721 = G__17789;
                  continue;
                } else {
                  return ret_value__11565__auto__;
                }
                break;
              }
            };
            state_machine__11564__auto__ = function(state_17721) {
              switch(arguments.length) {
                case 0:
                  return state_machine__11564__auto____0.call(this);
                case 1:
                  return state_machine__11564__auto____1.call(this, state_17721);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
            return state_machine__11564__auto__;
          }();
        }(switch__11563__auto__, c__11578__auto__);
      }();
      var state__11580__auto__ = function() {
        var statearr_17763 = f__11579__auto__.call(null);
        statearr_17763[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto__;
        return statearr_17763;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
    };
  }(c__11578__auto__));
  return c__11578__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__11578__auto___17884 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___17884) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___17884) {
            return function(state_17860) {
              var state_val_17861 = state_17860[1];
              if (state_val_17861 === 7) {
                var inst_17856 = state_17860[2];
                var state_17860__$1 = state_17860;
                var statearr_17862_17885 = state_17860__$1;
                statearr_17862_17885[2] = inst_17856;
                statearr_17862_17885[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17861 === 1) {
                  var state_17860__$1 = state_17860;
                  var statearr_17863_17886 = state_17860__$1;
                  statearr_17863_17886[2] = null;
                  statearr_17863_17886[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17861 === 4) {
                    var inst_17839 = state_17860[7];
                    var inst_17839__$1 = state_17860[2];
                    var inst_17840 = inst_17839__$1 == null;
                    var state_17860__$1 = function() {
                      var statearr_17864 = state_17860;
                      statearr_17864[7] = inst_17839__$1;
                      return statearr_17864;
                    }();
                    if (cljs.core.truth_(inst_17840)) {
                      var statearr_17865_17887 = state_17860__$1;
                      statearr_17865_17887[1] = 5;
                    } else {
                      var statearr_17866_17888 = state_17860__$1;
                      statearr_17866_17888[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17861 === 13) {
                      var state_17860__$1 = state_17860;
                      var statearr_17867_17889 = state_17860__$1;
                      statearr_17867_17889[2] = null;
                      statearr_17867_17889[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17861 === 6) {
                        var inst_17839 = state_17860[7];
                        var state_17860__$1 = state_17860;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17860__$1, 11, to, inst_17839);
                      } else {
                        if (state_val_17861 === 3) {
                          var inst_17858 = state_17860[2];
                          var state_17860__$1 = state_17860;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17860__$1, inst_17858);
                        } else {
                          if (state_val_17861 === 12) {
                            var state_17860__$1 = state_17860;
                            var statearr_17868_17890 = state_17860__$1;
                            statearr_17868_17890[2] = null;
                            statearr_17868_17890[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17861 === 2) {
                              var state_17860__$1 = state_17860;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17860__$1, 4, from);
                            } else {
                              if (state_val_17861 === 11) {
                                var inst_17849 = state_17860[2];
                                var state_17860__$1 = state_17860;
                                if (cljs.core.truth_(inst_17849)) {
                                  var statearr_17869_17891 = state_17860__$1;
                                  statearr_17869_17891[1] = 12;
                                } else {
                                  var statearr_17870_17892 = state_17860__$1;
                                  statearr_17870_17892[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17861 === 9) {
                                  var state_17860__$1 = state_17860;
                                  var statearr_17871_17893 = state_17860__$1;
                                  statearr_17871_17893[2] = null;
                                  statearr_17871_17893[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17861 === 5) {
                                    var state_17860__$1 = state_17860;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_17872_17894 = state_17860__$1;
                                      statearr_17872_17894[1] = 8;
                                    } else {
                                      var statearr_17873_17895 = state_17860__$1;
                                      statearr_17873_17895[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17861 === 14) {
                                      var inst_17854 = state_17860[2];
                                      var state_17860__$1 = state_17860;
                                      var statearr_17874_17896 = state_17860__$1;
                                      statearr_17874_17896[2] = inst_17854;
                                      statearr_17874_17896[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17861 === 10) {
                                        var inst_17846 = state_17860[2];
                                        var state_17860__$1 = state_17860;
                                        var statearr_17875_17897 = state_17860__$1;
                                        statearr_17875_17897[2] = inst_17846;
                                        statearr_17875_17897[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17861 === 8) {
                                          var inst_17843 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_17860__$1 = state_17860;
                                          var statearr_17876_17898 = state_17860__$1;
                                          statearr_17876_17898[2] = inst_17843;
                                          statearr_17876_17898[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___17884);
          return function(switch__11563__auto__, c__11578__auto___17884) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_17880 = [null, null, null, null, null, null, null, null];
                statearr_17880[0] = state_machine__11564__auto__;
                statearr_17880[1] = 1;
                return statearr_17880;
              };
              var state_machine__11564__auto____1 = function(state_17860) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_17860);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e17881) {
                      if (e17881 instanceof Object) {
                        var ex__11567__auto__ = e17881;
                        var statearr_17882_17899 = state_17860;
                        statearr_17882_17899[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17860);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17881;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17900 = state_17860;
                    state_17860 = G__17900;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_17860) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_17860);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___17884);
        }();
        var state__11580__auto__ = function() {
          var statearr_17883 = f__11579__auto__.call(null);
          statearr_17883[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___17884;
          return statearr_17883;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___17884));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__11578__auto___18001 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___18001, tc, fc) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___18001, tc, fc) {
            return function(state_17976) {
              var state_val_17977 = state_17976[1];
              if (state_val_17977 === 7) {
                var inst_17972 = state_17976[2];
                var state_17976__$1 = state_17976;
                var statearr_17978_18002 = state_17976__$1;
                statearr_17978_18002[2] = inst_17972;
                statearr_17978_18002[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17977 === 1) {
                  var state_17976__$1 = state_17976;
                  var statearr_17979_18003 = state_17976__$1;
                  statearr_17979_18003[2] = null;
                  statearr_17979_18003[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17977 === 4) {
                    var inst_17953 = state_17976[7];
                    var inst_17953__$1 = state_17976[2];
                    var inst_17954 = inst_17953__$1 == null;
                    var state_17976__$1 = function() {
                      var statearr_17980 = state_17976;
                      statearr_17980[7] = inst_17953__$1;
                      return statearr_17980;
                    }();
                    if (cljs.core.truth_(inst_17954)) {
                      var statearr_17981_18004 = state_17976__$1;
                      statearr_17981_18004[1] = 5;
                    } else {
                      var statearr_17982_18005 = state_17976__$1;
                      statearr_17982_18005[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17977 === 13) {
                      var state_17976__$1 = state_17976;
                      var statearr_17983_18006 = state_17976__$1;
                      statearr_17983_18006[2] = null;
                      statearr_17983_18006[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17977 === 6) {
                        var inst_17953 = state_17976[7];
                        var inst_17959 = p.call(null, inst_17953);
                        var state_17976__$1 = state_17976;
                        if (cljs.core.truth_(inst_17959)) {
                          var statearr_17984_18007 = state_17976__$1;
                          statearr_17984_18007[1] = 9;
                        } else {
                          var statearr_17985_18008 = state_17976__$1;
                          statearr_17985_18008[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17977 === 3) {
                          var inst_17974 = state_17976[2];
                          var state_17976__$1 = state_17976;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17976__$1, inst_17974);
                        } else {
                          if (state_val_17977 === 12) {
                            var state_17976__$1 = state_17976;
                            var statearr_17986_18009 = state_17976__$1;
                            statearr_17986_18009[2] = null;
                            statearr_17986_18009[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17977 === 2) {
                              var state_17976__$1 = state_17976;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17976__$1, 4, ch);
                            } else {
                              if (state_val_17977 === 11) {
                                var inst_17953 = state_17976[7];
                                var inst_17963 = state_17976[2];
                                var state_17976__$1 = state_17976;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17976__$1, 8, inst_17963, inst_17953);
                              } else {
                                if (state_val_17977 === 9) {
                                  var state_17976__$1 = state_17976;
                                  var statearr_17987_18010 = state_17976__$1;
                                  statearr_17987_18010[2] = tc;
                                  statearr_17987_18010[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17977 === 5) {
                                    var inst_17956 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_17957 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_17976__$1 = function() {
                                      var statearr_17988 = state_17976;
                                      statearr_17988[8] = inst_17956;
                                      return statearr_17988;
                                    }();
                                    var statearr_17989_18011 = state_17976__$1;
                                    statearr_17989_18011[2] = inst_17957;
                                    statearr_17989_18011[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17977 === 14) {
                                      var inst_17970 = state_17976[2];
                                      var state_17976__$1 = state_17976;
                                      var statearr_17990_18012 = state_17976__$1;
                                      statearr_17990_18012[2] = inst_17970;
                                      statearr_17990_18012[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17977 === 10) {
                                        var state_17976__$1 = state_17976;
                                        var statearr_17991_18013 = state_17976__$1;
                                        statearr_17991_18013[2] = fc;
                                        statearr_17991_18013[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17977 === 8) {
                                          var inst_17965 = state_17976[2];
                                          var state_17976__$1 = state_17976;
                                          if (cljs.core.truth_(inst_17965)) {
                                            var statearr_17992_18014 = state_17976__$1;
                                            statearr_17992_18014[1] = 12;
                                          } else {
                                            var statearr_17993_18015 = state_17976__$1;
                                            statearr_17993_18015[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___18001, tc, fc);
          return function(switch__11563__auto__, c__11578__auto___18001, tc, fc) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_17997 = [null, null, null, null, null, null, null, null, null];
                statearr_17997[0] = state_machine__11564__auto__;
                statearr_17997[1] = 1;
                return statearr_17997;
              };
              var state_machine__11564__auto____1 = function(state_17976) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_17976);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e17998) {
                      if (e17998 instanceof Object) {
                        var ex__11567__auto__ = e17998;
                        var statearr_17999_18016 = state_17976;
                        statearr_17999_18016[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17976);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17998;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__18017 = state_17976;
                    state_17976 = G__18017;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_17976) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_17976);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___18001, tc, fc);
        }();
        var state__11580__auto__ = function() {
          var statearr_18000 = f__11579__auto__.call(null);
          statearr_18000[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___18001;
          return statearr_18000;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___18001, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__11578__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto__) {
    return function() {
      var f__11579__auto__ = function() {
        var switch__11563__auto__ = function(c__11578__auto__) {
          return function(state_18064) {
            var state_val_18065 = state_18064[1];
            if (state_val_18065 === 7) {
              var inst_18060 = state_18064[2];
              var state_18064__$1 = state_18064;
              var statearr_18066_18082 = state_18064__$1;
              statearr_18066_18082[2] = inst_18060;
              statearr_18066_18082[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18065 === 6) {
                var inst_18053 = state_18064[7];
                var inst_18050 = state_18064[8];
                var inst_18057 = f.call(null, inst_18050, inst_18053);
                var inst_18050__$1 = inst_18057;
                var state_18064__$1 = function() {
                  var statearr_18067 = state_18064;
                  statearr_18067[8] = inst_18050__$1;
                  return statearr_18067;
                }();
                var statearr_18068_18083 = state_18064__$1;
                statearr_18068_18083[2] = null;
                statearr_18068_18083[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18065 === 5) {
                  var inst_18050 = state_18064[8];
                  var state_18064__$1 = state_18064;
                  var statearr_18069_18084 = state_18064__$1;
                  statearr_18069_18084[2] = inst_18050;
                  statearr_18069_18084[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18065 === 4) {
                    var inst_18053 = state_18064[7];
                    var inst_18053__$1 = state_18064[2];
                    var inst_18054 = inst_18053__$1 == null;
                    var state_18064__$1 = function() {
                      var statearr_18070 = state_18064;
                      statearr_18070[7] = inst_18053__$1;
                      return statearr_18070;
                    }();
                    if (cljs.core.truth_(inst_18054)) {
                      var statearr_18071_18085 = state_18064__$1;
                      statearr_18071_18085[1] = 5;
                    } else {
                      var statearr_18072_18086 = state_18064__$1;
                      statearr_18072_18086[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18065 === 3) {
                      var inst_18062 = state_18064[2];
                      var state_18064__$1 = state_18064;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18064__$1, inst_18062);
                    } else {
                      if (state_val_18065 === 2) {
                        var state_18064__$1 = state_18064;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18064__$1, 4, ch);
                      } else {
                        if (state_val_18065 === 1) {
                          var inst_18050 = init;
                          var state_18064__$1 = function() {
                            var statearr_18073 = state_18064;
                            statearr_18073[8] = inst_18050;
                            return statearr_18073;
                          }();
                          var statearr_18074_18087 = state_18064__$1;
                          statearr_18074_18087[2] = null;
                          statearr_18074_18087[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11578__auto__);
        return function(switch__11563__auto__, c__11578__auto__) {
          return function() {
            var state_machine__11564__auto__ = null;
            var state_machine__11564__auto____0 = function() {
              var statearr_18078 = [null, null, null, null, null, null, null, null, null];
              statearr_18078[0] = state_machine__11564__auto__;
              statearr_18078[1] = 1;
              return statearr_18078;
            };
            var state_machine__11564__auto____1 = function(state_18064) {
              while (true) {
                var ret_value__11565__auto__ = function() {
                  try {
                    while (true) {
                      var result__11566__auto__ = switch__11563__auto__.call(null, state_18064);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11566__auto__;
                      }
                      break;
                    }
                  } catch (e18079) {
                    if (e18079 instanceof Object) {
                      var ex__11567__auto__ = e18079;
                      var statearr_18080_18088 = state_18064;
                      statearr_18080_18088[5] = ex__11567__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18064);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e18079;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18089 = state_18064;
                  state_18064 = G__18089;
                  continue;
                } else {
                  return ret_value__11565__auto__;
                }
                break;
              }
            };
            state_machine__11564__auto__ = function(state_18064) {
              switch(arguments.length) {
                case 0:
                  return state_machine__11564__auto____0.call(this);
                case 1:
                  return state_machine__11564__auto____1.call(this, state_18064);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
            return state_machine__11564__auto__;
          }();
        }(switch__11563__auto__, c__11578__auto__);
      }();
      var state__11580__auto__ = function() {
        var statearr_18081 = f__11579__auto__.call(null);
        statearr_18081[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto__;
        return statearr_18081;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
    };
  }(c__11578__auto__));
  return c__11578__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__11578__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto__) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto__) {
            return function(state_18163) {
              var state_val_18164 = state_18163[1];
              if (state_val_18164 === 7) {
                var inst_18145 = state_18163[2];
                var state_18163__$1 = state_18163;
                var statearr_18165_18188 = state_18163__$1;
                statearr_18165_18188[2] = inst_18145;
                statearr_18165_18188[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18164 === 1) {
                  var inst_18139 = cljs.core.seq.call(null, coll);
                  var inst_18140 = inst_18139;
                  var state_18163__$1 = function() {
                    var statearr_18166 = state_18163;
                    statearr_18166[7] = inst_18140;
                    return statearr_18166;
                  }();
                  var statearr_18167_18189 = state_18163__$1;
                  statearr_18167_18189[2] = null;
                  statearr_18167_18189[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18164 === 4) {
                    var inst_18140 = state_18163[7];
                    var inst_18143 = cljs.core.first.call(null, inst_18140);
                    var state_18163__$1 = state_18163;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18163__$1, 7, ch, inst_18143);
                  } else {
                    if (state_val_18164 === 13) {
                      var inst_18157 = state_18163[2];
                      var state_18163__$1 = state_18163;
                      var statearr_18168_18190 = state_18163__$1;
                      statearr_18168_18190[2] = inst_18157;
                      statearr_18168_18190[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18164 === 6) {
                        var inst_18148 = state_18163[2];
                        var state_18163__$1 = state_18163;
                        if (cljs.core.truth_(inst_18148)) {
                          var statearr_18169_18191 = state_18163__$1;
                          statearr_18169_18191[1] = 8;
                        } else {
                          var statearr_18170_18192 = state_18163__$1;
                          statearr_18170_18192[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18164 === 3) {
                          var inst_18161 = state_18163[2];
                          var state_18163__$1 = state_18163;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18163__$1, inst_18161);
                        } else {
                          if (state_val_18164 === 12) {
                            var state_18163__$1 = state_18163;
                            var statearr_18171_18193 = state_18163__$1;
                            statearr_18171_18193[2] = null;
                            statearr_18171_18193[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18164 === 2) {
                              var inst_18140 = state_18163[7];
                              var state_18163__$1 = state_18163;
                              if (cljs.core.truth_(inst_18140)) {
                                var statearr_18172_18194 = state_18163__$1;
                                statearr_18172_18194[1] = 4;
                              } else {
                                var statearr_18173_18195 = state_18163__$1;
                                statearr_18173_18195[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18164 === 11) {
                                var inst_18154 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_18163__$1 = state_18163;
                                var statearr_18174_18196 = state_18163__$1;
                                statearr_18174_18196[2] = inst_18154;
                                statearr_18174_18196[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18164 === 9) {
                                  var state_18163__$1 = state_18163;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_18175_18197 = state_18163__$1;
                                    statearr_18175_18197[1] = 11;
                                  } else {
                                    var statearr_18176_18198 = state_18163__$1;
                                    statearr_18176_18198[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18164 === 5) {
                                    var inst_18140 = state_18163[7];
                                    var state_18163__$1 = state_18163;
                                    var statearr_18177_18199 = state_18163__$1;
                                    statearr_18177_18199[2] = inst_18140;
                                    statearr_18177_18199[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18164 === 10) {
                                      var inst_18159 = state_18163[2];
                                      var state_18163__$1 = state_18163;
                                      var statearr_18178_18200 = state_18163__$1;
                                      statearr_18178_18200[2] = inst_18159;
                                      statearr_18178_18200[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18164 === 8) {
                                        var inst_18140 = state_18163[7];
                                        var inst_18150 = cljs.core.next.call(null, inst_18140);
                                        var inst_18140__$1 = inst_18150;
                                        var state_18163__$1 = function() {
                                          var statearr_18179 = state_18163;
                                          statearr_18179[7] = inst_18140__$1;
                                          return statearr_18179;
                                        }();
                                        var statearr_18180_18201 = state_18163__$1;
                                        statearr_18180_18201[2] = null;
                                        statearr_18180_18201[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto__);
          return function(switch__11563__auto__, c__11578__auto__) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_18184 = [null, null, null, null, null, null, null, null];
                statearr_18184[0] = state_machine__11564__auto__;
                statearr_18184[1] = 1;
                return statearr_18184;
              };
              var state_machine__11564__auto____1 = function(state_18163) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_18163);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e18185) {
                      if (e18185 instanceof Object) {
                        var ex__11567__auto__ = e18185;
                        var statearr_18186_18202 = state_18163;
                        statearr_18186_18202[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18163);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e18185;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__18203 = state_18163;
                    state_18163 = G__18203;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_18163) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_18163);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto__);
        }();
        var state__11580__auto__ = function() {
          var statearr_18187 = f__11579__auto__.call(null);
          statearr_18187[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto__;
          return statearr_18187;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto__));
    return c__11578__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj18205 = {};
  return obj18205;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3015__auto__ = _;
    if (and__3015__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__3654__auto__ = _ == null ? null : _;
    return function() {
      var or__3027__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj18207 = {};
  return obj18207;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3015__auto__ = m;
    if (and__3015__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__3654__auto__ = m == null ? null : m;
    return function() {
      var or__3027__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3015__auto__ = m;
    if (and__3015__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__3654__auto__ = m == null ? null : m;
    return function() {
      var or__3027__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3015__auto__ = m;
    if (and__3015__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__3654__auto__ = m == null ? null : m;
    return function() {
      var or__3027__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t18429 !== "undefined") {
    } else {
      cljs.core.async.t18429 = function(cs, ch, mult, meta18430) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta18430 = meta18430;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t18429.cljs$lang$type = true;
      cljs.core.async.t18429.cljs$lang$ctorStr = "cljs.core.async/t18429";
      cljs.core.async.t18429.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
          return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t18429");
        };
      }(cs);
      cljs.core.async.t18429.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t18429.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t18429.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t18429.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t18429.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t18429.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t18429.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_18431) {
          var self__ = this;
          var _18431__$1 = this;
          return self__.meta18430;
        };
      }(cs);
      cljs.core.async.t18429.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_18431, meta18430__$1) {
          var self__ = this;
          var _18431__$1 = this;
          return new cljs.core.async.t18429(self__.cs, self__.ch, self__.mult, meta18430__$1);
        };
      }(cs);
      cljs.core.async.__GT_t18429 = function(cs) {
        return function __GT_t18429(cs__$1, ch__$1, mult__$1, meta18430) {
          return new cljs.core.async.t18429(cs__$1, ch__$1, mult__$1, meta18430);
        };
      }(cs);
    }
    return new cljs.core.async.t18429(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__11578__auto___18650 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___18650, cs, m, dchan, dctr, done) {
    return function() {
      var f__11579__auto__ = function() {
        var switch__11563__auto__ = function(c__11578__auto___18650, cs, m, dchan, dctr, done) {
          return function(state_18562) {
            var state_val_18563 = state_18562[1];
            if (state_val_18563 === 7) {
              var inst_18558 = state_18562[2];
              var state_18562__$1 = state_18562;
              var statearr_18564_18651 = state_18562__$1;
              statearr_18564_18651[2] = inst_18558;
              statearr_18564_18651[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18563 === 20) {
                var inst_18463 = state_18562[7];
                var inst_18473 = cljs.core.first.call(null, inst_18463);
                var inst_18474 = cljs.core.nth.call(null, inst_18473, 0, null);
                var inst_18475 = cljs.core.nth.call(null, inst_18473, 1, null);
                var state_18562__$1 = function() {
                  var statearr_18565 = state_18562;
                  statearr_18565[8] = inst_18474;
                  return statearr_18565;
                }();
                if (cljs.core.truth_(inst_18475)) {
                  var statearr_18566_18652 = state_18562__$1;
                  statearr_18566_18652[1] = 22;
                } else {
                  var statearr_18567_18653 = state_18562__$1;
                  statearr_18567_18653[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18563 === 27) {
                  var inst_18434 = state_18562[9];
                  var inst_18505 = state_18562[10];
                  var inst_18510 = state_18562[11];
                  var inst_18503 = state_18562[12];
                  var inst_18510__$1 = cljs.core._nth.call(null, inst_18503, inst_18505);
                  var inst_18511 = cljs.core.async.put_BANG_.call(null, inst_18510__$1, inst_18434, done);
                  var state_18562__$1 = function() {
                    var statearr_18568 = state_18562;
                    statearr_18568[11] = inst_18510__$1;
                    return statearr_18568;
                  }();
                  if (cljs.core.truth_(inst_18511)) {
                    var statearr_18569_18654 = state_18562__$1;
                    statearr_18569_18654[1] = 30;
                  } else {
                    var statearr_18570_18655 = state_18562__$1;
                    statearr_18570_18655[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18563 === 1) {
                    var state_18562__$1 = state_18562;
                    var statearr_18571_18656 = state_18562__$1;
                    statearr_18571_18656[2] = null;
                    statearr_18571_18656[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18563 === 24) {
                      var inst_18463 = state_18562[7];
                      var inst_18480 = state_18562[2];
                      var inst_18481 = cljs.core.next.call(null, inst_18463);
                      var inst_18443 = inst_18481;
                      var inst_18444 = null;
                      var inst_18445 = 0;
                      var inst_18446 = 0;
                      var state_18562__$1 = function() {
                        var statearr_18572 = state_18562;
                        statearr_18572[13] = inst_18446;
                        statearr_18572[14] = inst_18445;
                        statearr_18572[15] = inst_18443;
                        statearr_18572[16] = inst_18444;
                        statearr_18572[17] = inst_18480;
                        return statearr_18572;
                      }();
                      var statearr_18573_18657 = state_18562__$1;
                      statearr_18573_18657[2] = null;
                      statearr_18573_18657[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18563 === 39) {
                        var state_18562__$1 = state_18562;
                        var statearr_18577_18658 = state_18562__$1;
                        statearr_18577_18658[2] = null;
                        statearr_18577_18658[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18563 === 4) {
                          var inst_18434 = state_18562[9];
                          var inst_18434__$1 = state_18562[2];
                          var inst_18435 = inst_18434__$1 == null;
                          var state_18562__$1 = function() {
                            var statearr_18578 = state_18562;
                            statearr_18578[9] = inst_18434__$1;
                            return statearr_18578;
                          }();
                          if (cljs.core.truth_(inst_18435)) {
                            var statearr_18579_18659 = state_18562__$1;
                            statearr_18579_18659[1] = 5;
                          } else {
                            var statearr_18580_18660 = state_18562__$1;
                            statearr_18580_18660[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18563 === 15) {
                            var inst_18446 = state_18562[13];
                            var inst_18445 = state_18562[14];
                            var inst_18443 = state_18562[15];
                            var inst_18444 = state_18562[16];
                            var inst_18459 = state_18562[2];
                            var inst_18460 = inst_18446 + 1;
                            var tmp18574 = inst_18445;
                            var tmp18575 = inst_18443;
                            var tmp18576 = inst_18444;
                            var inst_18443__$1 = tmp18575;
                            var inst_18444__$1 = tmp18576;
                            var inst_18445__$1 = tmp18574;
                            var inst_18446__$1 = inst_18460;
                            var state_18562__$1 = function() {
                              var statearr_18581 = state_18562;
                              statearr_18581[13] = inst_18446__$1;
                              statearr_18581[14] = inst_18445__$1;
                              statearr_18581[15] = inst_18443__$1;
                              statearr_18581[16] = inst_18444__$1;
                              statearr_18581[18] = inst_18459;
                              return statearr_18581;
                            }();
                            var statearr_18582_18661 = state_18562__$1;
                            statearr_18582_18661[2] = null;
                            statearr_18582_18661[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18563 === 21) {
                              var inst_18484 = state_18562[2];
                              var state_18562__$1 = state_18562;
                              var statearr_18586_18662 = state_18562__$1;
                              statearr_18586_18662[2] = inst_18484;
                              statearr_18586_18662[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18563 === 31) {
                                var inst_18510 = state_18562[11];
                                var inst_18514 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_18515 = cljs.core.async.untap_STAR_.call(null, m, inst_18510);
                                var state_18562__$1 = function() {
                                  var statearr_18587 = state_18562;
                                  statearr_18587[19] = inst_18514;
                                  return statearr_18587;
                                }();
                                var statearr_18588_18663 = state_18562__$1;
                                statearr_18588_18663[2] = inst_18515;
                                statearr_18588_18663[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18563 === 32) {
                                  var inst_18502 = state_18562[20];
                                  var inst_18505 = state_18562[10];
                                  var inst_18503 = state_18562[12];
                                  var inst_18504 = state_18562[21];
                                  var inst_18517 = state_18562[2];
                                  var inst_18518 = inst_18505 + 1;
                                  var tmp18583 = inst_18502;
                                  var tmp18584 = inst_18503;
                                  var tmp18585 = inst_18504;
                                  var inst_18502__$1 = tmp18583;
                                  var inst_18503__$1 = tmp18584;
                                  var inst_18504__$1 = tmp18585;
                                  var inst_18505__$1 = inst_18518;
                                  var state_18562__$1 = function() {
                                    var statearr_18589 = state_18562;
                                    statearr_18589[20] = inst_18502__$1;
                                    statearr_18589[10] = inst_18505__$1;
                                    statearr_18589[22] = inst_18517;
                                    statearr_18589[12] = inst_18503__$1;
                                    statearr_18589[21] = inst_18504__$1;
                                    return statearr_18589;
                                  }();
                                  var statearr_18590_18664 = state_18562__$1;
                                  statearr_18590_18664[2] = null;
                                  statearr_18590_18664[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18563 === 40) {
                                    var inst_18530 = state_18562[23];
                                    var inst_18534 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_18535 = cljs.core.async.untap_STAR_.call(null, m, inst_18530);
                                    var state_18562__$1 = function() {
                                      var statearr_18591 = state_18562;
                                      statearr_18591[24] = inst_18534;
                                      return statearr_18591;
                                    }();
                                    var statearr_18592_18665 = state_18562__$1;
                                    statearr_18592_18665[2] = inst_18535;
                                    statearr_18592_18665[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18563 === 33) {
                                      var inst_18521 = state_18562[25];
                                      var inst_18523 = cljs.core.chunked_seq_QMARK_.call(null, inst_18521);
                                      var state_18562__$1 = state_18562;
                                      if (inst_18523) {
                                        var statearr_18593_18666 = state_18562__$1;
                                        statearr_18593_18666[1] = 36;
                                      } else {
                                        var statearr_18594_18667 = state_18562__$1;
                                        statearr_18594_18667[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18563 === 13) {
                                        var inst_18453 = state_18562[26];
                                        var inst_18456 = cljs.core.async.close_BANG_.call(null, inst_18453);
                                        var state_18562__$1 = state_18562;
                                        var statearr_18595_18668 = state_18562__$1;
                                        statearr_18595_18668[2] = inst_18456;
                                        statearr_18595_18668[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18563 === 22) {
                                          var inst_18474 = state_18562[8];
                                          var inst_18477 = cljs.core.async.close_BANG_.call(null, inst_18474);
                                          var state_18562__$1 = state_18562;
                                          var statearr_18596_18669 = state_18562__$1;
                                          statearr_18596_18669[2] = inst_18477;
                                          statearr_18596_18669[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18563 === 36) {
                                            var inst_18521 = state_18562[25];
                                            var inst_18525 = cljs.core.chunk_first.call(null, inst_18521);
                                            var inst_18526 = cljs.core.chunk_rest.call(null, inst_18521);
                                            var inst_18527 = cljs.core.count.call(null, inst_18525);
                                            var inst_18502 = inst_18526;
                                            var inst_18503 = inst_18525;
                                            var inst_18504 = inst_18527;
                                            var inst_18505 = 0;
                                            var state_18562__$1 = function() {
                                              var statearr_18597 = state_18562;
                                              statearr_18597[20] = inst_18502;
                                              statearr_18597[10] = inst_18505;
                                              statearr_18597[12] = inst_18503;
                                              statearr_18597[21] = inst_18504;
                                              return statearr_18597;
                                            }();
                                            var statearr_18598_18670 = state_18562__$1;
                                            statearr_18598_18670[2] = null;
                                            statearr_18598_18670[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18563 === 41) {
                                              var inst_18521 = state_18562[25];
                                              var inst_18537 = state_18562[2];
                                              var inst_18538 = cljs.core.next.call(null, inst_18521);
                                              var inst_18502 = inst_18538;
                                              var inst_18503 = null;
                                              var inst_18504 = 0;
                                              var inst_18505 = 0;
                                              var state_18562__$1 = function() {
                                                var statearr_18599 = state_18562;
                                                statearr_18599[20] = inst_18502;
                                                statearr_18599[27] = inst_18537;
                                                statearr_18599[10] = inst_18505;
                                                statearr_18599[12] = inst_18503;
                                                statearr_18599[21] = inst_18504;
                                                return statearr_18599;
                                              }();
                                              var statearr_18600_18671 = state_18562__$1;
                                              statearr_18600_18671[2] = null;
                                              statearr_18600_18671[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18563 === 43) {
                                                var state_18562__$1 = state_18562;
                                                var statearr_18601_18672 = state_18562__$1;
                                                statearr_18601_18672[2] = null;
                                                statearr_18601_18672[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18563 === 29) {
                                                  var inst_18546 = state_18562[2];
                                                  var state_18562__$1 = state_18562;
                                                  var statearr_18602_18673 = state_18562__$1;
                                                  statearr_18602_18673[2] = inst_18546;
                                                  statearr_18602_18673[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18563 === 44) {
                                                    var inst_18555 = state_18562[2];
                                                    var state_18562__$1 = function() {
                                                      var statearr_18603 = state_18562;
                                                      statearr_18603[28] = inst_18555;
                                                      return statearr_18603;
                                                    }();
                                                    var statearr_18604_18674 = state_18562__$1;
                                                    statearr_18604_18674[2] = null;
                                                    statearr_18604_18674[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18563 === 6) {
                                                      var inst_18494 = state_18562[29];
                                                      var inst_18493 = cljs.core.deref.call(null, cs);
                                                      var inst_18494__$1 = cljs.core.keys.call(null, inst_18493);
                                                      var inst_18495 = cljs.core.count.call(null, inst_18494__$1);
                                                      var inst_18496 = cljs.core.reset_BANG_.call(null, dctr, inst_18495);
                                                      var inst_18501 = cljs.core.seq.call(null, inst_18494__$1);
                                                      var inst_18502 = inst_18501;
                                                      var inst_18503 = null;
                                                      var inst_18504 = 0;
                                                      var inst_18505 = 0;
                                                      var state_18562__$1 = function() {
                                                        var statearr_18605 = state_18562;
                                                        statearr_18605[20] = inst_18502;
                                                        statearr_18605[29] = inst_18494__$1;
                                                        statearr_18605[10] = inst_18505;
                                                        statearr_18605[12] = inst_18503;
                                                        statearr_18605[21] = inst_18504;
                                                        statearr_18605[30] = inst_18496;
                                                        return statearr_18605;
                                                      }();
                                                      var statearr_18606_18675 = state_18562__$1;
                                                      statearr_18606_18675[2] = null;
                                                      statearr_18606_18675[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18563 === 28) {
                                                        var inst_18502 = state_18562[20];
                                                        var inst_18521 = state_18562[25];
                                                        var inst_18521__$1 = cljs.core.seq.call(null, inst_18502);
                                                        var state_18562__$1 = function() {
                                                          var statearr_18607 = state_18562;
                                                          statearr_18607[25] = inst_18521__$1;
                                                          return statearr_18607;
                                                        }();
                                                        if (inst_18521__$1) {
                                                          var statearr_18608_18676 = state_18562__$1;
                                                          statearr_18608_18676[1] = 33;
                                                        } else {
                                                          var statearr_18609_18677 = state_18562__$1;
                                                          statearr_18609_18677[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18563 === 25) {
                                                          var inst_18505 = state_18562[10];
                                                          var inst_18504 = state_18562[21];
                                                          var inst_18507 = inst_18505 < inst_18504;
                                                          var inst_18508 = inst_18507;
                                                          var state_18562__$1 = state_18562;
                                                          if (cljs.core.truth_(inst_18508)) {
                                                            var statearr_18610_18678 = state_18562__$1;
                                                            statearr_18610_18678[1] = 27;
                                                          } else {
                                                            var statearr_18611_18679 = state_18562__$1;
                                                            statearr_18611_18679[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18563 === 34) {
                                                            var state_18562__$1 = state_18562;
                                                            var statearr_18612_18680 = state_18562__$1;
                                                            statearr_18612_18680[2] = null;
                                                            statearr_18612_18680[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18563 === 17) {
                                                              var state_18562__$1 = state_18562;
                                                              var statearr_18613_18681 = state_18562__$1;
                                                              statearr_18613_18681[2] = null;
                                                              statearr_18613_18681[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18563 === 3) {
                                                                var inst_18560 = state_18562[2];
                                                                var state_18562__$1 = state_18562;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18562__$1, inst_18560);
                                                              } else {
                                                                if (state_val_18563 === 12) {
                                                                  var inst_18489 = state_18562[2];
                                                                  var state_18562__$1 = state_18562;
                                                                  var statearr_18614_18682 = state_18562__$1;
                                                                  statearr_18614_18682[2] = inst_18489;
                                                                  statearr_18614_18682[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_18563 === 2) {
                                                                    var state_18562__$1 = state_18562;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18562__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_18563 === 23) {
                                                                      var state_18562__$1 = state_18562;
                                                                      var statearr_18615_18683 = state_18562__$1;
                                                                      statearr_18615_18683[2] = null;
                                                                      statearr_18615_18683[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_18563 === 35) {
                                                                        var inst_18544 = state_18562[2];
                                                                        var state_18562__$1 = state_18562;
                                                                        var statearr_18616_18684 = state_18562__$1;
                                                                        statearr_18616_18684[2] = inst_18544;
                                                                        statearr_18616_18684[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_18563 === 19) {
                                                                          var inst_18463 = state_18562[7];
                                                                          var inst_18467 = cljs.core.chunk_first.call(null, inst_18463);
                                                                          var inst_18468 = cljs.core.chunk_rest.call(null, inst_18463);
                                                                          var inst_18469 = cljs.core.count.call(null, inst_18467);
                                                                          var inst_18443 = inst_18468;
                                                                          var inst_18444 = inst_18467;
                                                                          var inst_18445 = inst_18469;
                                                                          var inst_18446 = 0;
                                                                          var state_18562__$1 = function() {
                                                                            var statearr_18617 = state_18562;
                                                                            statearr_18617[13] = inst_18446;
                                                                            statearr_18617[14] = inst_18445;
                                                                            statearr_18617[15] = inst_18443;
                                                                            statearr_18617[16] = inst_18444;
                                                                            return statearr_18617;
                                                                          }();
                                                                          var statearr_18618_18685 = state_18562__$1;
                                                                          statearr_18618_18685[2] = null;
                                                                          statearr_18618_18685[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_18563 === 11) {
                                                                            var inst_18443 = state_18562[15];
                                                                            var inst_18463 = state_18562[7];
                                                                            var inst_18463__$1 = cljs.core.seq.call(null, inst_18443);
                                                                            var state_18562__$1 = function() {
                                                                              var statearr_18619 = state_18562;
                                                                              statearr_18619[7] = inst_18463__$1;
                                                                              return statearr_18619;
                                                                            }();
                                                                            if (inst_18463__$1) {
                                                                              var statearr_18620_18686 = state_18562__$1;
                                                                              statearr_18620_18686[1] = 16;
                                                                            } else {
                                                                              var statearr_18621_18687 = state_18562__$1;
                                                                              statearr_18621_18687[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_18563 === 9) {
                                                                              var inst_18491 = state_18562[2];
                                                                              var state_18562__$1 = state_18562;
                                                                              var statearr_18622_18688 = state_18562__$1;
                                                                              statearr_18622_18688[2] = inst_18491;
                                                                              statearr_18622_18688[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_18563 === 5) {
                                                                                var inst_18441 = cljs.core.deref.call(null, cs);
                                                                                var inst_18442 = cljs.core.seq.call(null, inst_18441);
                                                                                var inst_18443 = inst_18442;
                                                                                var inst_18444 = null;
                                                                                var inst_18445 = 0;
                                                                                var inst_18446 = 0;
                                                                                var state_18562__$1 = function() {
                                                                                  var statearr_18623 = state_18562;
                                                                                  statearr_18623[13] = inst_18446;
                                                                                  statearr_18623[14] = inst_18445;
                                                                                  statearr_18623[15] = inst_18443;
                                                                                  statearr_18623[16] = inst_18444;
                                                                                  return statearr_18623;
                                                                                }();
                                                                                var statearr_18624_18689 = state_18562__$1;
                                                                                statearr_18624_18689[2] = null;
                                                                                statearr_18624_18689[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_18563 === 14) {
                                                                                  var state_18562__$1 = state_18562;
                                                                                  var statearr_18625_18690 = state_18562__$1;
                                                                                  statearr_18625_18690[2] = null;
                                                                                  statearr_18625_18690[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_18563 === 45) {
                                                                                    var inst_18552 = state_18562[2];
                                                                                    var state_18562__$1 = state_18562;
                                                                                    var statearr_18626_18691 = state_18562__$1;
                                                                                    statearr_18626_18691[2] = inst_18552;
                                                                                    statearr_18626_18691[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_18563 === 26) {
                                                                                      var inst_18494 = state_18562[29];
                                                                                      var inst_18548 = state_18562[2];
                                                                                      var inst_18549 = cljs.core.seq.call(null, inst_18494);
                                                                                      var state_18562__$1 = function() {
                                                                                        var statearr_18627 = state_18562;
                                                                                        statearr_18627[31] = inst_18548;
                                                                                        return statearr_18627;
                                                                                      }();
                                                                                      if (inst_18549) {
                                                                                        var statearr_18628_18692 = state_18562__$1;
                                                                                        statearr_18628_18692[1] = 42;
                                                                                      } else {
                                                                                        var statearr_18629_18693 = state_18562__$1;
                                                                                        statearr_18629_18693[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_18563 === 16) {
                                                                                        var inst_18463 = state_18562[7];
                                                                                        var inst_18465 = cljs.core.chunked_seq_QMARK_.call(null, inst_18463);
                                                                                        var state_18562__$1 = state_18562;
                                                                                        if (inst_18465) {
                                                                                          var statearr_18630_18694 = state_18562__$1;
                                                                                          statearr_18630_18694[1] = 19;
                                                                                        } else {
                                                                                          var statearr_18631_18695 = state_18562__$1;
                                                                                          statearr_18631_18695[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_18563 === 38) {
                                                                                          var inst_18541 = state_18562[2];
                                                                                          var state_18562__$1 = state_18562;
                                                                                          var statearr_18632_18696 = state_18562__$1;
                                                                                          statearr_18632_18696[2] = inst_18541;
                                                                                          statearr_18632_18696[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_18563 === 30) {
                                                                                            var state_18562__$1 = state_18562;
                                                                                            var statearr_18633_18697 = state_18562__$1;
                                                                                            statearr_18633_18697[2] = null;
                                                                                            statearr_18633_18697[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_18563 === 10) {
                                                                                              var inst_18446 = state_18562[13];
                                                                                              var inst_18444 = state_18562[16];
                                                                                              var inst_18452 = cljs.core._nth.call(null, inst_18444, inst_18446);
                                                                                              var inst_18453 = cljs.core.nth.call(null, inst_18452, 0, null);
                                                                                              var inst_18454 = cljs.core.nth.call(null, inst_18452, 1, null);
                                                                                              var state_18562__$1 = function() {
                                                                                                var statearr_18634 = state_18562;
                                                                                                statearr_18634[26] = inst_18453;
                                                                                                return statearr_18634;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_18454)) {
                                                                                                var statearr_18635_18698 = state_18562__$1;
                                                                                                statearr_18635_18698[1] = 13;
                                                                                              } else {
                                                                                                var statearr_18636_18699 = state_18562__$1;
                                                                                                statearr_18636_18699[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_18563 === 18) {
                                                                                                var inst_18487 = state_18562[2];
                                                                                                var state_18562__$1 = state_18562;
                                                                                                var statearr_18637_18700 = state_18562__$1;
                                                                                                statearr_18637_18700[2] = inst_18487;
                                                                                                statearr_18637_18700[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_18563 === 42) {
                                                                                                  var state_18562__$1 = state_18562;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18562__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_18563 === 37) {
                                                                                                    var inst_18434 = state_18562[9];
                                                                                                    var inst_18530 = state_18562[23];
                                                                                                    var inst_18521 = state_18562[25];
                                                                                                    var inst_18530__$1 = cljs.core.first.call(null, inst_18521);
                                                                                                    var inst_18531 = cljs.core.async.put_BANG_.call(null, inst_18530__$1, inst_18434, done);
                                                                                                    var state_18562__$1 = function() {
                                                                                                      var statearr_18638 = state_18562;
                                                                                                      statearr_18638[23] = inst_18530__$1;
                                                                                                      return statearr_18638;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_18531)) {
                                                                                                      var statearr_18639_18701 = state_18562__$1;
                                                                                                      statearr_18639_18701[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_18640_18702 = state_18562__$1;
                                                                                                      statearr_18640_18702[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_18563 === 8) {
                                                                                                      var inst_18446 = state_18562[13];
                                                                                                      var inst_18445 = state_18562[14];
                                                                                                      var inst_18448 = inst_18446 < inst_18445;
                                                                                                      var inst_18449 = inst_18448;
                                                                                                      var state_18562__$1 = state_18562;
                                                                                                      if (cljs.core.truth_(inst_18449)) {
                                                                                                        var statearr_18641_18703 = state_18562__$1;
                                                                                                        statearr_18641_18703[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_18642_18704 = state_18562__$1;
                                                                                                        statearr_18642_18704[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11578__auto___18650, cs, m, dchan, dctr, done);
        return function(switch__11563__auto__, c__11578__auto___18650, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__11564__auto__ = null;
            var state_machine__11564__auto____0 = function() {
              var statearr_18646 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18646[0] = state_machine__11564__auto__;
              statearr_18646[1] = 1;
              return statearr_18646;
            };
            var state_machine__11564__auto____1 = function(state_18562) {
              while (true) {
                var ret_value__11565__auto__ = function() {
                  try {
                    while (true) {
                      var result__11566__auto__ = switch__11563__auto__.call(null, state_18562);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11566__auto__;
                      }
                      break;
                    }
                  } catch (e18647) {
                    if (e18647 instanceof Object) {
                      var ex__11567__auto__ = e18647;
                      var statearr_18648_18705 = state_18562;
                      statearr_18648_18705[5] = ex__11567__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18562);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e18647;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18706 = state_18562;
                  state_18562 = G__18706;
                  continue;
                } else {
                  return ret_value__11565__auto__;
                }
                break;
              }
            };
            state_machine__11564__auto__ = function(state_18562) {
              switch(arguments.length) {
                case 0:
                  return state_machine__11564__auto____0.call(this);
                case 1:
                  return state_machine__11564__auto____1.call(this, state_18562);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
            return state_machine__11564__auto__;
          }();
        }(switch__11563__auto__, c__11578__auto___18650, cs, m, dchan, dctr, done);
      }();
      var state__11580__auto__ = function() {
        var statearr_18649 = f__11579__auto__.call(null);
        statearr_18649[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___18650;
        return statearr_18649;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
    };
  }(c__11578__auto___18650, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj18708 = {};
  return obj18708;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3015__auto__ = m;
    if (and__3015__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__3654__auto__ = m == null ? null : m;
    return function() {
      var or__3027__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3015__auto__ = m;
    if (and__3015__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__3654__auto__ = m == null ? null : m;
    return function() {
      var or__3027__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3015__auto__ = m;
    if (and__3015__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__3654__auto__ = m == null ? null : m;
    return function() {
      var or__3027__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3015__auto__ = m;
    if (and__3015__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__3654__auto__ = m == null ? null : m;
    return function() {
      var or__3027__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3015__auto__ = m;
    if (and__3015__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__3654__auto__ = m == null ? null : m;
    return function() {
      var or__3027__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t18828 !== "undefined") {
    } else {
      cljs.core.async.t18828 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta18829) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta18829 = meta18829;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t18828.cljs$lang$type = true;
      cljs.core.async.t18828.cljs$lang$ctorStr = "cljs.core.async/t18828";
      cljs.core.async.t18828.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
          return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t18828");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18828.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t18828.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18828.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18828.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18828.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18828.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18828.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t18828.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18828.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18830) {
          var self__ = this;
          var _18830__$1 = this;
          return self__.meta18829;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18828.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18830, meta18829__$1) {
          var self__ = this;
          var _18830__$1 = this;
          return new cljs.core.async.t18828(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta18829__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t18828 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t18828(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18829) {
          return new cljs.core.async.t18828(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18829);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t18828(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__11578__auto___18947 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___18947, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__11579__auto__ = function() {
        var switch__11563__auto__ = function(c__11578__auto___18947, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_18900) {
            var state_val_18901 = state_18900[1];
            if (state_val_18901 === 7) {
              var inst_18844 = state_18900[7];
              var inst_18849 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18844);
              var state_18900__$1 = state_18900;
              var statearr_18902_18948 = state_18900__$1;
              statearr_18902_18948[2] = inst_18849;
              statearr_18902_18948[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18901 === 20) {
                var inst_18859 = state_18900[8];
                var state_18900__$1 = state_18900;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18900__$1, 23, out, inst_18859);
              } else {
                if (state_val_18901 === 1) {
                  var inst_18834 = state_18900[9];
                  var inst_18834__$1 = calc_state.call(null);
                  var inst_18835 = cljs.core.seq_QMARK_.call(null, inst_18834__$1);
                  var state_18900__$1 = function() {
                    var statearr_18903 = state_18900;
                    statearr_18903[9] = inst_18834__$1;
                    return statearr_18903;
                  }();
                  if (inst_18835) {
                    var statearr_18904_18949 = state_18900__$1;
                    statearr_18904_18949[1] = 2;
                  } else {
                    var statearr_18905_18950 = state_18900__$1;
                    statearr_18905_18950[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18901 === 24) {
                    var inst_18852 = state_18900[10];
                    var inst_18844 = inst_18852;
                    var state_18900__$1 = function() {
                      var statearr_18906 = state_18900;
                      statearr_18906[7] = inst_18844;
                      return statearr_18906;
                    }();
                    var statearr_18907_18951 = state_18900__$1;
                    statearr_18907_18951[2] = null;
                    statearr_18907_18951[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18901 === 4) {
                      var inst_18834 = state_18900[9];
                      var inst_18840 = state_18900[2];
                      var inst_18841 = cljs.core.get.call(null, inst_18840, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_18842 = cljs.core.get.call(null, inst_18840, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_18843 = cljs.core.get.call(null, inst_18840, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_18844 = inst_18834;
                      var state_18900__$1 = function() {
                        var statearr_18908 = state_18900;
                        statearr_18908[11] = inst_18842;
                        statearr_18908[7] = inst_18844;
                        statearr_18908[12] = inst_18841;
                        statearr_18908[13] = inst_18843;
                        return statearr_18908;
                      }();
                      var statearr_18909_18952 = state_18900__$1;
                      statearr_18909_18952[2] = null;
                      statearr_18909_18952[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18901 === 15) {
                        var state_18900__$1 = state_18900;
                        var statearr_18910_18953 = state_18900__$1;
                        statearr_18910_18953[2] = null;
                        statearr_18910_18953[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18901 === 21) {
                          var inst_18852 = state_18900[10];
                          var inst_18844 = inst_18852;
                          var state_18900__$1 = function() {
                            var statearr_18911 = state_18900;
                            statearr_18911[7] = inst_18844;
                            return statearr_18911;
                          }();
                          var statearr_18912_18954 = state_18900__$1;
                          statearr_18912_18954[2] = null;
                          statearr_18912_18954[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18901 === 13) {
                            var inst_18896 = state_18900[2];
                            var state_18900__$1 = state_18900;
                            var statearr_18913_18955 = state_18900__$1;
                            statearr_18913_18955[2] = inst_18896;
                            statearr_18913_18955[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18901 === 22) {
                              var inst_18894 = state_18900[2];
                              var state_18900__$1 = state_18900;
                              var statearr_18914_18956 = state_18900__$1;
                              statearr_18914_18956[2] = inst_18894;
                              statearr_18914_18956[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18901 === 6) {
                                var inst_18898 = state_18900[2];
                                var state_18900__$1 = state_18900;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18900__$1, inst_18898);
                              } else {
                                if (state_val_18901 === 25) {
                                  var state_18900__$1 = state_18900;
                                  var statearr_18915_18957 = state_18900__$1;
                                  statearr_18915_18957[2] = null;
                                  statearr_18915_18957[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18901 === 17) {
                                    var inst_18874 = state_18900[14];
                                    var state_18900__$1 = state_18900;
                                    var statearr_18916_18958 = state_18900__$1;
                                    statearr_18916_18958[2] = inst_18874;
                                    statearr_18916_18958[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18901 === 3) {
                                      var inst_18834 = state_18900[9];
                                      var state_18900__$1 = state_18900;
                                      var statearr_18917_18959 = state_18900__$1;
                                      statearr_18917_18959[2] = inst_18834;
                                      statearr_18917_18959[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18901 === 12) {
                                        var inst_18860 = state_18900[15];
                                        var inst_18874 = state_18900[14];
                                        var inst_18855 = state_18900[16];
                                        var inst_18874__$1 = inst_18855.call(null, inst_18860);
                                        var state_18900__$1 = function() {
                                          var statearr_18918 = state_18900;
                                          statearr_18918[14] = inst_18874__$1;
                                          return statearr_18918;
                                        }();
                                        if (cljs.core.truth_(inst_18874__$1)) {
                                          var statearr_18919_18960 = state_18900__$1;
                                          statearr_18919_18960[1] = 17;
                                        } else {
                                          var statearr_18920_18961 = state_18900__$1;
                                          statearr_18920_18961[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18901 === 2) {
                                          var inst_18834 = state_18900[9];
                                          var inst_18837 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18834);
                                          var state_18900__$1 = state_18900;
                                          var statearr_18921_18962 = state_18900__$1;
                                          statearr_18921_18962[2] = inst_18837;
                                          statearr_18921_18962[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18901 === 23) {
                                            var inst_18885 = state_18900[2];
                                            var state_18900__$1 = state_18900;
                                            if (cljs.core.truth_(inst_18885)) {
                                              var statearr_18922_18963 = state_18900__$1;
                                              statearr_18922_18963[1] = 24;
                                            } else {
                                              var statearr_18923_18964 = state_18900__$1;
                                              statearr_18923_18964[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18901 === 19) {
                                              var inst_18882 = state_18900[2];
                                              var state_18900__$1 = state_18900;
                                              if (cljs.core.truth_(inst_18882)) {
                                                var statearr_18924_18965 = state_18900__$1;
                                                statearr_18924_18965[1] = 20;
                                              } else {
                                                var statearr_18925_18966 = state_18900__$1;
                                                statearr_18925_18966[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18901 === 11) {
                                                var inst_18859 = state_18900[8];
                                                var inst_18865 = inst_18859 == null;
                                                var state_18900__$1 = state_18900;
                                                if (cljs.core.truth_(inst_18865)) {
                                                  var statearr_18926_18967 = state_18900__$1;
                                                  statearr_18926_18967[1] = 14;
                                                } else {
                                                  var statearr_18927_18968 = state_18900__$1;
                                                  statearr_18927_18968[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18901 === 9) {
                                                  var inst_18852 = state_18900[10];
                                                  var inst_18852__$1 = state_18900[2];
                                                  var inst_18853 = cljs.core.get.call(null, inst_18852__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_18854 = cljs.core.get.call(null, inst_18852__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_18855 = cljs.core.get.call(null, inst_18852__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_18900__$1 = function() {
                                                    var statearr_18928 = state_18900;
                                                    statearr_18928[10] = inst_18852__$1;
                                                    statearr_18928[17] = inst_18854;
                                                    statearr_18928[16] = inst_18855;
                                                    return statearr_18928;
                                                  }();
                                                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_18900__$1, 10, inst_18853);
                                                } else {
                                                  if (state_val_18901 === 5) {
                                                    var inst_18844 = state_18900[7];
                                                    var inst_18847 = cljs.core.seq_QMARK_.call(null, inst_18844);
                                                    var state_18900__$1 = state_18900;
                                                    if (inst_18847) {
                                                      var statearr_18929_18969 = state_18900__$1;
                                                      statearr_18929_18969[1] = 7;
                                                    } else {
                                                      var statearr_18930_18970 = state_18900__$1;
                                                      statearr_18930_18970[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18901 === 14) {
                                                      var inst_18860 = state_18900[15];
                                                      var inst_18867 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_18860);
                                                      var state_18900__$1 = state_18900;
                                                      var statearr_18931_18971 = state_18900__$1;
                                                      statearr_18931_18971[2] = inst_18867;
                                                      statearr_18931_18971[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18901 === 26) {
                                                        var inst_18890 = state_18900[2];
                                                        var state_18900__$1 = state_18900;
                                                        var statearr_18932_18972 = state_18900__$1;
                                                        statearr_18932_18972[2] = inst_18890;
                                                        statearr_18932_18972[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18901 === 16) {
                                                          var inst_18870 = state_18900[2];
                                                          var inst_18871 = calc_state.call(null);
                                                          var inst_18844 = inst_18871;
                                                          var state_18900__$1 = function() {
                                                            var statearr_18933 = state_18900;
                                                            statearr_18933[18] = inst_18870;
                                                            statearr_18933[7] = inst_18844;
                                                            return statearr_18933;
                                                          }();
                                                          var statearr_18934_18973 = state_18900__$1;
                                                          statearr_18934_18973[2] = null;
                                                          statearr_18934_18973[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18901 === 10) {
                                                            var inst_18860 = state_18900[15];
                                                            var inst_18859 = state_18900[8];
                                                            var inst_18858 = state_18900[2];
                                                            var inst_18859__$1 = cljs.core.nth.call(null, inst_18858, 0, null);
                                                            var inst_18860__$1 = cljs.core.nth.call(null, inst_18858, 1, null);
                                                            var inst_18861 = inst_18859__$1 == null;
                                                            var inst_18862 = cljs.core._EQ_.call(null, inst_18860__$1, change);
                                                            var inst_18863 = inst_18861 || inst_18862;
                                                            var state_18900__$1 = function() {
                                                              var statearr_18935 = state_18900;
                                                              statearr_18935[15] = inst_18860__$1;
                                                              statearr_18935[8] = inst_18859__$1;
                                                              return statearr_18935;
                                                            }();
                                                            if (cljs.core.truth_(inst_18863)) {
                                                              var statearr_18936_18974 = state_18900__$1;
                                                              statearr_18936_18974[1] = 11;
                                                            } else {
                                                              var statearr_18937_18975 = state_18900__$1;
                                                              statearr_18937_18975[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18901 === 18) {
                                                              var inst_18860 = state_18900[15];
                                                              var inst_18854 = state_18900[17];
                                                              var inst_18855 = state_18900[16];
                                                              var inst_18877 = cljs.core.empty_QMARK_.call(null, inst_18855);
                                                              var inst_18878 = inst_18854.call(null, inst_18860);
                                                              var inst_18879 = cljs.core.not.call(null, inst_18878);
                                                              var inst_18880 = inst_18877 && inst_18879;
                                                              var state_18900__$1 = state_18900;
                                                              var statearr_18938_18976 = state_18900__$1;
                                                              statearr_18938_18976[2] = inst_18880;
                                                              statearr_18938_18976[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18901 === 8) {
                                                                var inst_18844 = state_18900[7];
                                                                var state_18900__$1 = state_18900;
                                                                var statearr_18939_18977 = state_18900__$1;
                                                                statearr_18939_18977[2] = inst_18844;
                                                                statearr_18939_18977[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11578__auto___18947, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__11563__auto__, c__11578__auto___18947, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__11564__auto__ = null;
            var state_machine__11564__auto____0 = function() {
              var statearr_18943 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18943[0] = state_machine__11564__auto__;
              statearr_18943[1] = 1;
              return statearr_18943;
            };
            var state_machine__11564__auto____1 = function(state_18900) {
              while (true) {
                var ret_value__11565__auto__ = function() {
                  try {
                    while (true) {
                      var result__11566__auto__ = switch__11563__auto__.call(null, state_18900);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11566__auto__;
                      }
                      break;
                    }
                  } catch (e18944) {
                    if (e18944 instanceof Object) {
                      var ex__11567__auto__ = e18944;
                      var statearr_18945_18978 = state_18900;
                      statearr_18945_18978[5] = ex__11567__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18900);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e18944;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18979 = state_18900;
                  state_18900 = G__18979;
                  continue;
                } else {
                  return ret_value__11565__auto__;
                }
                break;
              }
            };
            state_machine__11564__auto__ = function(state_18900) {
              switch(arguments.length) {
                case 0:
                  return state_machine__11564__auto____0.call(this);
                case 1:
                  return state_machine__11564__auto____1.call(this, state_18900);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
            return state_machine__11564__auto__;
          }();
        }(switch__11563__auto__, c__11578__auto___18947, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__11580__auto__ = function() {
        var statearr_18946 = f__11579__auto__.call(null);
        statearr_18946[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___18947;
        return statearr_18946;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
    };
  }(c__11578__auto___18947, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj18981 = {};
  return obj18981;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3015__auto__ = p;
    if (and__3015__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__3654__auto__ = p == null ? null : p;
    return function() {
      var or__3027__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3015__auto__ = p;
    if (and__3015__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__3654__auto__ = p == null ? null : p;
    return function() {
      var or__3027__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3015__auto__ = p;
      if (and__3015__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__3654__auto__ = p == null ? null : p;
      return function() {
        var or__3027__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3015__auto__ = p;
      if (and__3015__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3015__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__3654__auto__ = p == null ? null : p;
      return function() {
        var or__3027__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3654__auto__)];
        if (or__3027__auto__) {
          return or__3027__auto__;
        } else {
          var or__3027__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3027__auto____$1) {
            return or__3027__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3027__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3027__auto__, mults) {
            return function(p1__18982_SHARP_) {
              if (cljs.core.truth_(p1__18982_SHARP_.call(null, topic))) {
                return p1__18982_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__18982_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3027__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t19105 !== "undefined") {
      } else {
        cljs.core.async.t19105 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta19106) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta19106 = meta19106;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t19105.cljs$lang$type = true;
        cljs.core.async.t19105.cljs$lang$ctorStr = "cljs.core.async/t19105";
        cljs.core.async.t19105.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
            return cljs.core._write.call(null, writer__3595__auto__, "cljs.core.async/t19105");
          };
        }(mults, ensure_mult);
        cljs.core.async.t19105.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t19105.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t19105.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t19105.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t19105.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t19105.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t19105.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t19105.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_19107) {
            var self__ = this;
            var _19107__$1 = this;
            return self__.meta19106;
          };
        }(mults, ensure_mult);
        cljs.core.async.t19105.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_19107, meta19106__$1) {
            var self__ = this;
            var _19107__$1 = this;
            return new cljs.core.async.t19105(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta19106__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t19105 = function(mults, ensure_mult) {
          return function __GT_t19105(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta19106) {
            return new cljs.core.async.t19105(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta19106);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t19105(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__11578__auto___19227 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___19227, mults, ensure_mult, p) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___19227, mults, ensure_mult, p) {
            return function(state_19179) {
              var state_val_19180 = state_19179[1];
              if (state_val_19180 === 7) {
                var inst_19175 = state_19179[2];
                var state_19179__$1 = state_19179;
                var statearr_19181_19228 = state_19179__$1;
                statearr_19181_19228[2] = inst_19175;
                statearr_19181_19228[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19180 === 20) {
                  var state_19179__$1 = state_19179;
                  var statearr_19182_19229 = state_19179__$1;
                  statearr_19182_19229[2] = null;
                  statearr_19182_19229[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19180 === 1) {
                    var state_19179__$1 = state_19179;
                    var statearr_19183_19230 = state_19179__$1;
                    statearr_19183_19230[2] = null;
                    statearr_19183_19230[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19180 === 24) {
                      var inst_19158 = state_19179[7];
                      var inst_19167 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_19158);
                      var state_19179__$1 = state_19179;
                      var statearr_19184_19231 = state_19179__$1;
                      statearr_19184_19231[2] = inst_19167;
                      statearr_19184_19231[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19180 === 4) {
                        var inst_19110 = state_19179[8];
                        var inst_19110__$1 = state_19179[2];
                        var inst_19111 = inst_19110__$1 == null;
                        var state_19179__$1 = function() {
                          var statearr_19185 = state_19179;
                          statearr_19185[8] = inst_19110__$1;
                          return statearr_19185;
                        }();
                        if (cljs.core.truth_(inst_19111)) {
                          var statearr_19186_19232 = state_19179__$1;
                          statearr_19186_19232[1] = 5;
                        } else {
                          var statearr_19187_19233 = state_19179__$1;
                          statearr_19187_19233[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19180 === 15) {
                          var inst_19152 = state_19179[2];
                          var state_19179__$1 = state_19179;
                          var statearr_19188_19234 = state_19179__$1;
                          statearr_19188_19234[2] = inst_19152;
                          statearr_19188_19234[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19180 === 21) {
                            var inst_19172 = state_19179[2];
                            var state_19179__$1 = function() {
                              var statearr_19189 = state_19179;
                              statearr_19189[9] = inst_19172;
                              return statearr_19189;
                            }();
                            var statearr_19190_19235 = state_19179__$1;
                            statearr_19190_19235[2] = null;
                            statearr_19190_19235[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19180 === 13) {
                              var inst_19134 = state_19179[10];
                              var inst_19136 = cljs.core.chunked_seq_QMARK_.call(null, inst_19134);
                              var state_19179__$1 = state_19179;
                              if (inst_19136) {
                                var statearr_19191_19236 = state_19179__$1;
                                statearr_19191_19236[1] = 16;
                              } else {
                                var statearr_19192_19237 = state_19179__$1;
                                statearr_19192_19237[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19180 === 22) {
                                var inst_19164 = state_19179[2];
                                var state_19179__$1 = state_19179;
                                if (cljs.core.truth_(inst_19164)) {
                                  var statearr_19193_19238 = state_19179__$1;
                                  statearr_19193_19238[1] = 23;
                                } else {
                                  var statearr_19194_19239 = state_19179__$1;
                                  statearr_19194_19239[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19180 === 6) {
                                  var inst_19110 = state_19179[8];
                                  var inst_19158 = state_19179[7];
                                  var inst_19160 = state_19179[11];
                                  var inst_19158__$1 = topic_fn.call(null, inst_19110);
                                  var inst_19159 = cljs.core.deref.call(null, mults);
                                  var inst_19160__$1 = cljs.core.get.call(null, inst_19159, inst_19158__$1);
                                  var state_19179__$1 = function() {
                                    var statearr_19195 = state_19179;
                                    statearr_19195[7] = inst_19158__$1;
                                    statearr_19195[11] = inst_19160__$1;
                                    return statearr_19195;
                                  }();
                                  if (cljs.core.truth_(inst_19160__$1)) {
                                    var statearr_19196_19240 = state_19179__$1;
                                    statearr_19196_19240[1] = 19;
                                  } else {
                                    var statearr_19197_19241 = state_19179__$1;
                                    statearr_19197_19241[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19180 === 25) {
                                    var inst_19169 = state_19179[2];
                                    var state_19179__$1 = state_19179;
                                    var statearr_19198_19242 = state_19179__$1;
                                    statearr_19198_19242[2] = inst_19169;
                                    statearr_19198_19242[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19180 === 17) {
                                      var inst_19134 = state_19179[10];
                                      var inst_19143 = cljs.core.first.call(null, inst_19134);
                                      var inst_19144 = cljs.core.async.muxch_STAR_.call(null, inst_19143);
                                      var inst_19145 = cljs.core.async.close_BANG_.call(null, inst_19144);
                                      var inst_19146 = cljs.core.next.call(null, inst_19134);
                                      var inst_19120 = inst_19146;
                                      var inst_19121 = null;
                                      var inst_19122 = 0;
                                      var inst_19123 = 0;
                                      var state_19179__$1 = function() {
                                        var statearr_19199 = state_19179;
                                        statearr_19199[12] = inst_19121;
                                        statearr_19199[13] = inst_19120;
                                        statearr_19199[14] = inst_19145;
                                        statearr_19199[15] = inst_19122;
                                        statearr_19199[16] = inst_19123;
                                        return statearr_19199;
                                      }();
                                      var statearr_19200_19243 = state_19179__$1;
                                      statearr_19200_19243[2] = null;
                                      statearr_19200_19243[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19180 === 3) {
                                        var inst_19177 = state_19179[2];
                                        var state_19179__$1 = state_19179;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19179__$1, inst_19177);
                                      } else {
                                        if (state_val_19180 === 12) {
                                          var inst_19154 = state_19179[2];
                                          var state_19179__$1 = state_19179;
                                          var statearr_19201_19244 = state_19179__$1;
                                          statearr_19201_19244[2] = inst_19154;
                                          statearr_19201_19244[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19180 === 2) {
                                            var state_19179__$1 = state_19179;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19179__$1, 4, ch);
                                          } else {
                                            if (state_val_19180 === 23) {
                                              var state_19179__$1 = state_19179;
                                              var statearr_19202_19245 = state_19179__$1;
                                              statearr_19202_19245[2] = null;
                                              statearr_19202_19245[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_19180 === 19) {
                                                var inst_19110 = state_19179[8];
                                                var inst_19160 = state_19179[11];
                                                var inst_19162 = cljs.core.async.muxch_STAR_.call(null, inst_19160);
                                                var state_19179__$1 = state_19179;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19179__$1, 22, inst_19162, inst_19110);
                                              } else {
                                                if (state_val_19180 === 11) {
                                                  var inst_19120 = state_19179[13];
                                                  var inst_19134 = state_19179[10];
                                                  var inst_19134__$1 = cljs.core.seq.call(null, inst_19120);
                                                  var state_19179__$1 = function() {
                                                    var statearr_19203 = state_19179;
                                                    statearr_19203[10] = inst_19134__$1;
                                                    return statearr_19203;
                                                  }();
                                                  if (inst_19134__$1) {
                                                    var statearr_19204_19246 = state_19179__$1;
                                                    statearr_19204_19246[1] = 13;
                                                  } else {
                                                    var statearr_19205_19247 = state_19179__$1;
                                                    statearr_19205_19247[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_19180 === 9) {
                                                    var inst_19156 = state_19179[2];
                                                    var state_19179__$1 = state_19179;
                                                    var statearr_19206_19248 = state_19179__$1;
                                                    statearr_19206_19248[2] = inst_19156;
                                                    statearr_19206_19248[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_19180 === 5) {
                                                      var inst_19117 = cljs.core.deref.call(null, mults);
                                                      var inst_19118 = cljs.core.vals.call(null, inst_19117);
                                                      var inst_19119 = cljs.core.seq.call(null, inst_19118);
                                                      var inst_19120 = inst_19119;
                                                      var inst_19121 = null;
                                                      var inst_19122 = 0;
                                                      var inst_19123 = 0;
                                                      var state_19179__$1 = function() {
                                                        var statearr_19207 = state_19179;
                                                        statearr_19207[12] = inst_19121;
                                                        statearr_19207[13] = inst_19120;
                                                        statearr_19207[15] = inst_19122;
                                                        statearr_19207[16] = inst_19123;
                                                        return statearr_19207;
                                                      }();
                                                      var statearr_19208_19249 = state_19179__$1;
                                                      statearr_19208_19249[2] = null;
                                                      statearr_19208_19249[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_19180 === 14) {
                                                        var state_19179__$1 = state_19179;
                                                        var statearr_19212_19250 = state_19179__$1;
                                                        statearr_19212_19250[2] = null;
                                                        statearr_19212_19250[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_19180 === 16) {
                                                          var inst_19134 = state_19179[10];
                                                          var inst_19138 = cljs.core.chunk_first.call(null, inst_19134);
                                                          var inst_19139 = cljs.core.chunk_rest.call(null, inst_19134);
                                                          var inst_19140 = cljs.core.count.call(null, inst_19138);
                                                          var inst_19120 = inst_19139;
                                                          var inst_19121 = inst_19138;
                                                          var inst_19122 = inst_19140;
                                                          var inst_19123 = 0;
                                                          var state_19179__$1 = function() {
                                                            var statearr_19213 = state_19179;
                                                            statearr_19213[12] = inst_19121;
                                                            statearr_19213[13] = inst_19120;
                                                            statearr_19213[15] = inst_19122;
                                                            statearr_19213[16] = inst_19123;
                                                            return statearr_19213;
                                                          }();
                                                          var statearr_19214_19251 = state_19179__$1;
                                                          statearr_19214_19251[2] = null;
                                                          statearr_19214_19251[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_19180 === 10) {
                                                            var inst_19121 = state_19179[12];
                                                            var inst_19120 = state_19179[13];
                                                            var inst_19122 = state_19179[15];
                                                            var inst_19123 = state_19179[16];
                                                            var inst_19128 = cljs.core._nth.call(null, inst_19121, inst_19123);
                                                            var inst_19129 = cljs.core.async.muxch_STAR_.call(null, inst_19128);
                                                            var inst_19130 = cljs.core.async.close_BANG_.call(null, inst_19129);
                                                            var inst_19131 = inst_19123 + 1;
                                                            var tmp19209 = inst_19121;
                                                            var tmp19210 = inst_19120;
                                                            var tmp19211 = inst_19122;
                                                            var inst_19120__$1 = tmp19210;
                                                            var inst_19121__$1 = tmp19209;
                                                            var inst_19122__$1 = tmp19211;
                                                            var inst_19123__$1 = inst_19131;
                                                            var state_19179__$1 = function() {
                                                              var statearr_19215 = state_19179;
                                                              statearr_19215[12] = inst_19121__$1;
                                                              statearr_19215[17] = inst_19130;
                                                              statearr_19215[13] = inst_19120__$1;
                                                              statearr_19215[15] = inst_19122__$1;
                                                              statearr_19215[16] = inst_19123__$1;
                                                              return statearr_19215;
                                                            }();
                                                            var statearr_19216_19252 = state_19179__$1;
                                                            statearr_19216_19252[2] = null;
                                                            statearr_19216_19252[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_19180 === 18) {
                                                              var inst_19149 = state_19179[2];
                                                              var state_19179__$1 = state_19179;
                                                              var statearr_19217_19253 = state_19179__$1;
                                                              statearr_19217_19253[2] = inst_19149;
                                                              statearr_19217_19253[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_19180 === 8) {
                                                                var inst_19122 = state_19179[15];
                                                                var inst_19123 = state_19179[16];
                                                                var inst_19125 = inst_19123 < inst_19122;
                                                                var inst_19126 = inst_19125;
                                                                var state_19179__$1 = state_19179;
                                                                if (cljs.core.truth_(inst_19126)) {
                                                                  var statearr_19218_19254 = state_19179__$1;
                                                                  statearr_19218_19254[1] = 10;
                                                                } else {
                                                                  var statearr_19219_19255 = state_19179__$1;
                                                                  statearr_19219_19255[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___19227, mults, ensure_mult, p);
          return function(switch__11563__auto__, c__11578__auto___19227, mults, ensure_mult, p) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_19223 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19223[0] = state_machine__11564__auto__;
                statearr_19223[1] = 1;
                return statearr_19223;
              };
              var state_machine__11564__auto____1 = function(state_19179) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_19179);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e19224) {
                      if (e19224 instanceof Object) {
                        var ex__11567__auto__ = e19224;
                        var statearr_19225_19256 = state_19179;
                        statearr_19225_19256[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19179);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19224;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19257 = state_19179;
                    state_19179 = G__19257;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_19179) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_19179);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___19227, mults, ensure_mult, p);
        }();
        var state__11580__auto__ = function() {
          var statearr_19226 = f__11579__auto__.call(null);
          statearr_19226[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___19227;
          return statearr_19226;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___19227, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__11578__auto___19394 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___19394, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___19394, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_19364) {
              var state_val_19365 = state_19364[1];
              if (state_val_19365 === 7) {
                var state_19364__$1 = state_19364;
                var statearr_19366_19395 = state_19364__$1;
                statearr_19366_19395[2] = null;
                statearr_19366_19395[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19365 === 1) {
                  var state_19364__$1 = state_19364;
                  var statearr_19367_19396 = state_19364__$1;
                  statearr_19367_19396[2] = null;
                  statearr_19367_19396[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19365 === 4) {
                    var inst_19328 = state_19364[7];
                    var inst_19330 = inst_19328 < cnt;
                    var state_19364__$1 = state_19364;
                    if (cljs.core.truth_(inst_19330)) {
                      var statearr_19368_19397 = state_19364__$1;
                      statearr_19368_19397[1] = 6;
                    } else {
                      var statearr_19369_19398 = state_19364__$1;
                      statearr_19369_19398[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19365 === 15) {
                      var inst_19360 = state_19364[2];
                      var state_19364__$1 = state_19364;
                      var statearr_19370_19399 = state_19364__$1;
                      statearr_19370_19399[2] = inst_19360;
                      statearr_19370_19399[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19365 === 13) {
                        var inst_19353 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19364__$1 = state_19364;
                        var statearr_19371_19400 = state_19364__$1;
                        statearr_19371_19400[2] = inst_19353;
                        statearr_19371_19400[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19365 === 6) {
                          var state_19364__$1 = state_19364;
                          var statearr_19372_19401 = state_19364__$1;
                          statearr_19372_19401[2] = null;
                          statearr_19372_19401[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19365 === 3) {
                            var inst_19362 = state_19364[2];
                            var state_19364__$1 = state_19364;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19364__$1, inst_19362);
                          } else {
                            if (state_val_19365 === 12) {
                              var inst_19350 = state_19364[8];
                              var inst_19350__$1 = state_19364[2];
                              var inst_19351 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_19350__$1);
                              var state_19364__$1 = function() {
                                var statearr_19373 = state_19364;
                                statearr_19373[8] = inst_19350__$1;
                                return statearr_19373;
                              }();
                              if (cljs.core.truth_(inst_19351)) {
                                var statearr_19374_19402 = state_19364__$1;
                                statearr_19374_19402[1] = 13;
                              } else {
                                var statearr_19375_19403 = state_19364__$1;
                                statearr_19375_19403[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19365 === 2) {
                                var inst_19327 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_19328 = 0;
                                var state_19364__$1 = function() {
                                  var statearr_19376 = state_19364;
                                  statearr_19376[7] = inst_19328;
                                  statearr_19376[9] = inst_19327;
                                  return statearr_19376;
                                }();
                                var statearr_19377_19404 = state_19364__$1;
                                statearr_19377_19404[2] = null;
                                statearr_19377_19404[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19365 === 11) {
                                  var inst_19328 = state_19364[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_19364, 10, Object, null, 9);
                                  var inst_19337 = chs__$1.call(null, inst_19328);
                                  var inst_19338 = done.call(null, inst_19328);
                                  var inst_19339 = cljs.core.async.take_BANG_.call(null, inst_19337, inst_19338);
                                  var state_19364__$1 = state_19364;
                                  var statearr_19378_19405 = state_19364__$1;
                                  statearr_19378_19405[2] = inst_19339;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19364__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19365 === 9) {
                                    var inst_19328 = state_19364[7];
                                    var inst_19341 = state_19364[2];
                                    var inst_19342 = inst_19328 + 1;
                                    var inst_19328__$1 = inst_19342;
                                    var state_19364__$1 = function() {
                                      var statearr_19379 = state_19364;
                                      statearr_19379[10] = inst_19341;
                                      statearr_19379[7] = inst_19328__$1;
                                      return statearr_19379;
                                    }();
                                    var statearr_19380_19406 = state_19364__$1;
                                    statearr_19380_19406[2] = null;
                                    statearr_19380_19406[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19365 === 5) {
                                      var inst_19348 = state_19364[2];
                                      var state_19364__$1 = function() {
                                        var statearr_19381 = state_19364;
                                        statearr_19381[11] = inst_19348;
                                        return statearr_19381;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19364__$1, 12, dchan);
                                    } else {
                                      if (state_val_19365 === 14) {
                                        var inst_19350 = state_19364[8];
                                        var inst_19355 = cljs.core.apply.call(null, f, inst_19350);
                                        var state_19364__$1 = state_19364;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19364__$1, 16, out, inst_19355);
                                      } else {
                                        if (state_val_19365 === 16) {
                                          var inst_19357 = state_19364[2];
                                          var state_19364__$1 = function() {
                                            var statearr_19382 = state_19364;
                                            statearr_19382[12] = inst_19357;
                                            return statearr_19382;
                                          }();
                                          var statearr_19383_19407 = state_19364__$1;
                                          statearr_19383_19407[2] = null;
                                          statearr_19383_19407[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19365 === 10) {
                                            var inst_19332 = state_19364[2];
                                            var inst_19333 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_19364__$1 = function() {
                                              var statearr_19384 = state_19364;
                                              statearr_19384[13] = inst_19332;
                                              return statearr_19384;
                                            }();
                                            var statearr_19385_19408 = state_19364__$1;
                                            statearr_19385_19408[2] = inst_19333;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19364__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_19365 === 8) {
                                              var inst_19346 = state_19364[2];
                                              var state_19364__$1 = state_19364;
                                              var statearr_19386_19409 = state_19364__$1;
                                              statearr_19386_19409[2] = inst_19346;
                                              statearr_19386_19409[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___19394, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__11563__auto__, c__11578__auto___19394, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_19390 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19390[0] = state_machine__11564__auto__;
                statearr_19390[1] = 1;
                return statearr_19390;
              };
              var state_machine__11564__auto____1 = function(state_19364) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_19364);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e19391) {
                      if (e19391 instanceof Object) {
                        var ex__11567__auto__ = e19391;
                        var statearr_19392_19410 = state_19364;
                        statearr_19392_19410[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19364);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19391;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19411 = state_19364;
                    state_19364 = G__19411;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_19364) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_19364);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___19394, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__11580__auto__ = function() {
          var statearr_19393 = f__11579__auto__.call(null);
          statearr_19393[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___19394;
          return statearr_19393;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___19394, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__11578__auto___19519 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___19519, out) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___19519, out) {
            return function(state_19495) {
              var state_val_19496 = state_19495[1];
              if (state_val_19496 === 7) {
                var inst_19474 = state_19495[7];
                var inst_19475 = state_19495[8];
                var inst_19474__$1 = state_19495[2];
                var inst_19475__$1 = cljs.core.nth.call(null, inst_19474__$1, 0, null);
                var inst_19476 = cljs.core.nth.call(null, inst_19474__$1, 1, null);
                var inst_19477 = inst_19475__$1 == null;
                var state_19495__$1 = function() {
                  var statearr_19497 = state_19495;
                  statearr_19497[9] = inst_19476;
                  statearr_19497[7] = inst_19474__$1;
                  statearr_19497[8] = inst_19475__$1;
                  return statearr_19497;
                }();
                if (cljs.core.truth_(inst_19477)) {
                  var statearr_19498_19520 = state_19495__$1;
                  statearr_19498_19520[1] = 8;
                } else {
                  var statearr_19499_19521 = state_19495__$1;
                  statearr_19499_19521[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19496 === 1) {
                  var inst_19466 = cljs.core.vec.call(null, chs);
                  var inst_19467 = inst_19466;
                  var state_19495__$1 = function() {
                    var statearr_19500 = state_19495;
                    statearr_19500[10] = inst_19467;
                    return statearr_19500;
                  }();
                  var statearr_19501_19522 = state_19495__$1;
                  statearr_19501_19522[2] = null;
                  statearr_19501_19522[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19496 === 4) {
                    var inst_19467 = state_19495[10];
                    var state_19495__$1 = state_19495;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_19495__$1, 7, inst_19467);
                  } else {
                    if (state_val_19496 === 6) {
                      var inst_19491 = state_19495[2];
                      var state_19495__$1 = state_19495;
                      var statearr_19502_19523 = state_19495__$1;
                      statearr_19502_19523[2] = inst_19491;
                      statearr_19502_19523[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19496 === 3) {
                        var inst_19493 = state_19495[2];
                        var state_19495__$1 = state_19495;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19495__$1, inst_19493);
                      } else {
                        if (state_val_19496 === 2) {
                          var inst_19467 = state_19495[10];
                          var inst_19469 = cljs.core.count.call(null, inst_19467);
                          var inst_19470 = inst_19469 > 0;
                          var state_19495__$1 = state_19495;
                          if (cljs.core.truth_(inst_19470)) {
                            var statearr_19504_19524 = state_19495__$1;
                            statearr_19504_19524[1] = 4;
                          } else {
                            var statearr_19505_19525 = state_19495__$1;
                            statearr_19505_19525[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19496 === 11) {
                            var inst_19467 = state_19495[10];
                            var inst_19484 = state_19495[2];
                            var tmp19503 = inst_19467;
                            var inst_19467__$1 = tmp19503;
                            var state_19495__$1 = function() {
                              var statearr_19506 = state_19495;
                              statearr_19506[10] = inst_19467__$1;
                              statearr_19506[11] = inst_19484;
                              return statearr_19506;
                            }();
                            var statearr_19507_19526 = state_19495__$1;
                            statearr_19507_19526[2] = null;
                            statearr_19507_19526[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19496 === 9) {
                              var inst_19475 = state_19495[8];
                              var state_19495__$1 = state_19495;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19495__$1, 11, out, inst_19475);
                            } else {
                              if (state_val_19496 === 5) {
                                var inst_19489 = cljs.core.async.close_BANG_.call(null, out);
                                var state_19495__$1 = state_19495;
                                var statearr_19508_19527 = state_19495__$1;
                                statearr_19508_19527[2] = inst_19489;
                                statearr_19508_19527[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19496 === 10) {
                                  var inst_19487 = state_19495[2];
                                  var state_19495__$1 = state_19495;
                                  var statearr_19509_19528 = state_19495__$1;
                                  statearr_19509_19528[2] = inst_19487;
                                  statearr_19509_19528[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19496 === 8) {
                                    var inst_19476 = state_19495[9];
                                    var inst_19467 = state_19495[10];
                                    var inst_19474 = state_19495[7];
                                    var inst_19475 = state_19495[8];
                                    var inst_19479 = function() {
                                      var c = inst_19476;
                                      var v = inst_19475;
                                      var vec__19472 = inst_19474;
                                      var cs = inst_19467;
                                      return function(c, v, vec__19472, cs, inst_19476, inst_19467, inst_19474, inst_19475, state_val_19496, c__11578__auto___19519, out) {
                                        return function(p1__19412_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__19412_SHARP_);
                                        };
                                      }(c, v, vec__19472, cs, inst_19476, inst_19467, inst_19474, inst_19475, state_val_19496, c__11578__auto___19519, out);
                                    }();
                                    var inst_19480 = cljs.core.filterv.call(null, inst_19479, inst_19467);
                                    var inst_19467__$1 = inst_19480;
                                    var state_19495__$1 = function() {
                                      var statearr_19510 = state_19495;
                                      statearr_19510[10] = inst_19467__$1;
                                      return statearr_19510;
                                    }();
                                    var statearr_19511_19529 = state_19495__$1;
                                    statearr_19511_19529[2] = null;
                                    statearr_19511_19529[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___19519, out);
          return function(switch__11563__auto__, c__11578__auto___19519, out) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_19515 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19515[0] = state_machine__11564__auto__;
                statearr_19515[1] = 1;
                return statearr_19515;
              };
              var state_machine__11564__auto____1 = function(state_19495) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_19495);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e19516) {
                      if (e19516 instanceof Object) {
                        var ex__11567__auto__ = e19516;
                        var statearr_19517_19530 = state_19495;
                        statearr_19517_19530[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19495);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19516;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19531 = state_19495;
                    state_19495 = G__19531;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_19495) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_19495);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___19519, out);
        }();
        var state__11580__auto__ = function() {
          var statearr_19518 = f__11579__auto__.call(null);
          statearr_19518[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___19519;
          return statearr_19518;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___19519, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__11578__auto___19624 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___19624, out) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___19624, out) {
            return function(state_19601) {
              var state_val_19602 = state_19601[1];
              if (state_val_19602 === 7) {
                var inst_19583 = state_19601[7];
                var inst_19583__$1 = state_19601[2];
                var inst_19584 = inst_19583__$1 == null;
                var inst_19585 = cljs.core.not.call(null, inst_19584);
                var state_19601__$1 = function() {
                  var statearr_19603 = state_19601;
                  statearr_19603[7] = inst_19583__$1;
                  return statearr_19603;
                }();
                if (inst_19585) {
                  var statearr_19604_19625 = state_19601__$1;
                  statearr_19604_19625[1] = 8;
                } else {
                  var statearr_19605_19626 = state_19601__$1;
                  statearr_19605_19626[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19602 === 1) {
                  var inst_19578 = 0;
                  var state_19601__$1 = function() {
                    var statearr_19606 = state_19601;
                    statearr_19606[8] = inst_19578;
                    return statearr_19606;
                  }();
                  var statearr_19607_19627 = state_19601__$1;
                  statearr_19607_19627[2] = null;
                  statearr_19607_19627[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19602 === 4) {
                    var state_19601__$1 = state_19601;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19601__$1, 7, ch);
                  } else {
                    if (state_val_19602 === 6) {
                      var inst_19596 = state_19601[2];
                      var state_19601__$1 = state_19601;
                      var statearr_19608_19628 = state_19601__$1;
                      statearr_19608_19628[2] = inst_19596;
                      statearr_19608_19628[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19602 === 3) {
                        var inst_19598 = state_19601[2];
                        var inst_19599 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19601__$1 = function() {
                          var statearr_19609 = state_19601;
                          statearr_19609[9] = inst_19598;
                          return statearr_19609;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19601__$1, inst_19599);
                      } else {
                        if (state_val_19602 === 2) {
                          var inst_19578 = state_19601[8];
                          var inst_19580 = inst_19578 < n;
                          var state_19601__$1 = state_19601;
                          if (cljs.core.truth_(inst_19580)) {
                            var statearr_19610_19629 = state_19601__$1;
                            statearr_19610_19629[1] = 4;
                          } else {
                            var statearr_19611_19630 = state_19601__$1;
                            statearr_19611_19630[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19602 === 11) {
                            var inst_19578 = state_19601[8];
                            var inst_19588 = state_19601[2];
                            var inst_19589 = inst_19578 + 1;
                            var inst_19578__$1 = inst_19589;
                            var state_19601__$1 = function() {
                              var statearr_19612 = state_19601;
                              statearr_19612[8] = inst_19578__$1;
                              statearr_19612[10] = inst_19588;
                              return statearr_19612;
                            }();
                            var statearr_19613_19631 = state_19601__$1;
                            statearr_19613_19631[2] = null;
                            statearr_19613_19631[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19602 === 9) {
                              var state_19601__$1 = state_19601;
                              var statearr_19614_19632 = state_19601__$1;
                              statearr_19614_19632[2] = null;
                              statearr_19614_19632[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19602 === 5) {
                                var state_19601__$1 = state_19601;
                                var statearr_19615_19633 = state_19601__$1;
                                statearr_19615_19633[2] = null;
                                statearr_19615_19633[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19602 === 10) {
                                  var inst_19593 = state_19601[2];
                                  var state_19601__$1 = state_19601;
                                  var statearr_19616_19634 = state_19601__$1;
                                  statearr_19616_19634[2] = inst_19593;
                                  statearr_19616_19634[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19602 === 8) {
                                    var inst_19583 = state_19601[7];
                                    var state_19601__$1 = state_19601;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19601__$1, 11, out, inst_19583);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___19624, out);
          return function(switch__11563__auto__, c__11578__auto___19624, out) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_19620 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19620[0] = state_machine__11564__auto__;
                statearr_19620[1] = 1;
                return statearr_19620;
              };
              var state_machine__11564__auto____1 = function(state_19601) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_19601);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e19621) {
                      if (e19621 instanceof Object) {
                        var ex__11567__auto__ = e19621;
                        var statearr_19622_19635 = state_19601;
                        statearr_19622_19635[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19601);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19621;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19636 = state_19601;
                    state_19601 = G__19636;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_19601) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_19601);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___19624, out);
        }();
        var state__11580__auto__ = function() {
          var statearr_19623 = f__11579__auto__.call(null);
          statearr_19623[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___19624;
          return statearr_19623;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___19624, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__11578__auto___19733 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___19733, out) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___19733, out) {
            return function(state_19708) {
              var state_val_19709 = state_19708[1];
              if (state_val_19709 === 7) {
                var inst_19703 = state_19708[2];
                var state_19708__$1 = state_19708;
                var statearr_19710_19734 = state_19708__$1;
                statearr_19710_19734[2] = inst_19703;
                statearr_19710_19734[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19709 === 1) {
                  var inst_19685 = null;
                  var state_19708__$1 = function() {
                    var statearr_19711 = state_19708;
                    statearr_19711[7] = inst_19685;
                    return statearr_19711;
                  }();
                  var statearr_19712_19735 = state_19708__$1;
                  statearr_19712_19735[2] = null;
                  statearr_19712_19735[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19709 === 4) {
                    var inst_19688 = state_19708[8];
                    var inst_19688__$1 = state_19708[2];
                    var inst_19689 = inst_19688__$1 == null;
                    var inst_19690 = cljs.core.not.call(null, inst_19689);
                    var state_19708__$1 = function() {
                      var statearr_19713 = state_19708;
                      statearr_19713[8] = inst_19688__$1;
                      return statearr_19713;
                    }();
                    if (inst_19690) {
                      var statearr_19714_19736 = state_19708__$1;
                      statearr_19714_19736[1] = 5;
                    } else {
                      var statearr_19715_19737 = state_19708__$1;
                      statearr_19715_19737[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19709 === 6) {
                      var state_19708__$1 = state_19708;
                      var statearr_19716_19738 = state_19708__$1;
                      statearr_19716_19738[2] = null;
                      statearr_19716_19738[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19709 === 3) {
                        var inst_19705 = state_19708[2];
                        var inst_19706 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19708__$1 = function() {
                          var statearr_19717 = state_19708;
                          statearr_19717[9] = inst_19705;
                          return statearr_19717;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19708__$1, inst_19706);
                      } else {
                        if (state_val_19709 === 2) {
                          var state_19708__$1 = state_19708;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19708__$1, 4, ch);
                        } else {
                          if (state_val_19709 === 11) {
                            var inst_19688 = state_19708[8];
                            var inst_19697 = state_19708[2];
                            var inst_19685 = inst_19688;
                            var state_19708__$1 = function() {
                              var statearr_19718 = state_19708;
                              statearr_19718[7] = inst_19685;
                              statearr_19718[10] = inst_19697;
                              return statearr_19718;
                            }();
                            var statearr_19719_19739 = state_19708__$1;
                            statearr_19719_19739[2] = null;
                            statearr_19719_19739[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19709 === 9) {
                              var inst_19688 = state_19708[8];
                              var state_19708__$1 = state_19708;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19708__$1, 11, out, inst_19688);
                            } else {
                              if (state_val_19709 === 5) {
                                var inst_19688 = state_19708[8];
                                var inst_19685 = state_19708[7];
                                var inst_19692 = cljs.core._EQ_.call(null, inst_19688, inst_19685);
                                var state_19708__$1 = state_19708;
                                if (inst_19692) {
                                  var statearr_19721_19740 = state_19708__$1;
                                  statearr_19721_19740[1] = 8;
                                } else {
                                  var statearr_19722_19741 = state_19708__$1;
                                  statearr_19722_19741[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19709 === 10) {
                                  var inst_19700 = state_19708[2];
                                  var state_19708__$1 = state_19708;
                                  var statearr_19723_19742 = state_19708__$1;
                                  statearr_19723_19742[2] = inst_19700;
                                  statearr_19723_19742[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19709 === 8) {
                                    var inst_19685 = state_19708[7];
                                    var tmp19720 = inst_19685;
                                    var inst_19685__$1 = tmp19720;
                                    var state_19708__$1 = function() {
                                      var statearr_19724 = state_19708;
                                      statearr_19724[7] = inst_19685__$1;
                                      return statearr_19724;
                                    }();
                                    var statearr_19725_19743 = state_19708__$1;
                                    statearr_19725_19743[2] = null;
                                    statearr_19725_19743[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___19733, out);
          return function(switch__11563__auto__, c__11578__auto___19733, out) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_19729 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19729[0] = state_machine__11564__auto__;
                statearr_19729[1] = 1;
                return statearr_19729;
              };
              var state_machine__11564__auto____1 = function(state_19708) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_19708);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e19730) {
                      if (e19730 instanceof Object) {
                        var ex__11567__auto__ = e19730;
                        var statearr_19731_19744 = state_19708;
                        statearr_19731_19744[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19708);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19730;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19745 = state_19708;
                    state_19708 = G__19745;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_19708) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_19708);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___19733, out);
        }();
        var state__11580__auto__ = function() {
          var statearr_19732 = f__11579__auto__.call(null);
          statearr_19732[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___19733;
          return statearr_19732;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___19733, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__11578__auto___19880 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___19880, out) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___19880, out) {
            return function(state_19850) {
              var state_val_19851 = state_19850[1];
              if (state_val_19851 === 7) {
                var inst_19846 = state_19850[2];
                var state_19850__$1 = state_19850;
                var statearr_19852_19881 = state_19850__$1;
                statearr_19852_19881[2] = inst_19846;
                statearr_19852_19881[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19851 === 1) {
                  var inst_19813 = new Array(n);
                  var inst_19814 = inst_19813;
                  var inst_19815 = 0;
                  var state_19850__$1 = function() {
                    var statearr_19853 = state_19850;
                    statearr_19853[7] = inst_19815;
                    statearr_19853[8] = inst_19814;
                    return statearr_19853;
                  }();
                  var statearr_19854_19882 = state_19850__$1;
                  statearr_19854_19882[2] = null;
                  statearr_19854_19882[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19851 === 4) {
                    var inst_19818 = state_19850[9];
                    var inst_19818__$1 = state_19850[2];
                    var inst_19819 = inst_19818__$1 == null;
                    var inst_19820 = cljs.core.not.call(null, inst_19819);
                    var state_19850__$1 = function() {
                      var statearr_19855 = state_19850;
                      statearr_19855[9] = inst_19818__$1;
                      return statearr_19855;
                    }();
                    if (inst_19820) {
                      var statearr_19856_19883 = state_19850__$1;
                      statearr_19856_19883[1] = 5;
                    } else {
                      var statearr_19857_19884 = state_19850__$1;
                      statearr_19857_19884[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19851 === 15) {
                      var inst_19840 = state_19850[2];
                      var state_19850__$1 = state_19850;
                      var statearr_19858_19885 = state_19850__$1;
                      statearr_19858_19885[2] = inst_19840;
                      statearr_19858_19885[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19851 === 13) {
                        var state_19850__$1 = state_19850;
                        var statearr_19859_19886 = state_19850__$1;
                        statearr_19859_19886[2] = null;
                        statearr_19859_19886[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19851 === 6) {
                          var inst_19815 = state_19850[7];
                          var inst_19836 = inst_19815 > 0;
                          var state_19850__$1 = state_19850;
                          if (cljs.core.truth_(inst_19836)) {
                            var statearr_19860_19887 = state_19850__$1;
                            statearr_19860_19887[1] = 12;
                          } else {
                            var statearr_19861_19888 = state_19850__$1;
                            statearr_19861_19888[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19851 === 3) {
                            var inst_19848 = state_19850[2];
                            var state_19850__$1 = state_19850;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19850__$1, inst_19848);
                          } else {
                            if (state_val_19851 === 12) {
                              var inst_19814 = state_19850[8];
                              var inst_19838 = cljs.core.vec.call(null, inst_19814);
                              var state_19850__$1 = state_19850;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19850__$1, 15, out, inst_19838);
                            } else {
                              if (state_val_19851 === 2) {
                                var state_19850__$1 = state_19850;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19850__$1, 4, ch);
                              } else {
                                if (state_val_19851 === 11) {
                                  var inst_19830 = state_19850[2];
                                  var inst_19831 = new Array(n);
                                  var inst_19814 = inst_19831;
                                  var inst_19815 = 0;
                                  var state_19850__$1 = function() {
                                    var statearr_19862 = state_19850;
                                    statearr_19862[7] = inst_19815;
                                    statearr_19862[8] = inst_19814;
                                    statearr_19862[10] = inst_19830;
                                    return statearr_19862;
                                  }();
                                  var statearr_19863_19889 = state_19850__$1;
                                  statearr_19863_19889[2] = null;
                                  statearr_19863_19889[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19851 === 9) {
                                    var inst_19814 = state_19850[8];
                                    var inst_19828 = cljs.core.vec.call(null, inst_19814);
                                    var state_19850__$1 = state_19850;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19850__$1, 11, out, inst_19828);
                                  } else {
                                    if (state_val_19851 === 5) {
                                      var inst_19818 = state_19850[9];
                                      var inst_19815 = state_19850[7];
                                      var inst_19814 = state_19850[8];
                                      var inst_19823 = state_19850[11];
                                      var inst_19822 = inst_19814[inst_19815] = inst_19818;
                                      var inst_19823__$1 = inst_19815 + 1;
                                      var inst_19824 = inst_19823__$1 < n;
                                      var state_19850__$1 = function() {
                                        var statearr_19864 = state_19850;
                                        statearr_19864[12] = inst_19822;
                                        statearr_19864[11] = inst_19823__$1;
                                        return statearr_19864;
                                      }();
                                      if (cljs.core.truth_(inst_19824)) {
                                        var statearr_19865_19890 = state_19850__$1;
                                        statearr_19865_19890[1] = 8;
                                      } else {
                                        var statearr_19866_19891 = state_19850__$1;
                                        statearr_19866_19891[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19851 === 14) {
                                        var inst_19843 = state_19850[2];
                                        var inst_19844 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_19850__$1 = function() {
                                          var statearr_19868 = state_19850;
                                          statearr_19868[13] = inst_19843;
                                          return statearr_19868;
                                        }();
                                        var statearr_19869_19892 = state_19850__$1;
                                        statearr_19869_19892[2] = inst_19844;
                                        statearr_19869_19892[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19851 === 10) {
                                          var inst_19834 = state_19850[2];
                                          var state_19850__$1 = state_19850;
                                          var statearr_19870_19893 = state_19850__$1;
                                          statearr_19870_19893[2] = inst_19834;
                                          statearr_19870_19893[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19851 === 8) {
                                            var inst_19814 = state_19850[8];
                                            var inst_19823 = state_19850[11];
                                            var tmp19867 = inst_19814;
                                            var inst_19814__$1 = tmp19867;
                                            var inst_19815 = inst_19823;
                                            var state_19850__$1 = function() {
                                              var statearr_19871 = state_19850;
                                              statearr_19871[7] = inst_19815;
                                              statearr_19871[8] = inst_19814__$1;
                                              return statearr_19871;
                                            }();
                                            var statearr_19872_19894 = state_19850__$1;
                                            statearr_19872_19894[2] = null;
                                            statearr_19872_19894[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___19880, out);
          return function(switch__11563__auto__, c__11578__auto___19880, out) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_19876 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19876[0] = state_machine__11564__auto__;
                statearr_19876[1] = 1;
                return statearr_19876;
              };
              var state_machine__11564__auto____1 = function(state_19850) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_19850);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e19877) {
                      if (e19877 instanceof Object) {
                        var ex__11567__auto__ = e19877;
                        var statearr_19878_19895 = state_19850;
                        statearr_19878_19895[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19850);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19877;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19896 = state_19850;
                    state_19850 = G__19896;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_19850) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_19850);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___19880, out);
        }();
        var state__11580__auto__ = function() {
          var statearr_19879 = f__11579__auto__.call(null);
          statearr_19879[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___19880;
          return statearr_19879;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___19880, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__11578__auto___20039 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___20039, out) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___20039, out) {
            return function(state_20009) {
              var state_val_20010 = state_20009[1];
              if (state_val_20010 === 7) {
                var inst_20005 = state_20009[2];
                var state_20009__$1 = state_20009;
                var statearr_20011_20040 = state_20009__$1;
                statearr_20011_20040[2] = inst_20005;
                statearr_20011_20040[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20010 === 1) {
                  var inst_19968 = [];
                  var inst_19969 = inst_19968;
                  var inst_19970 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_20009__$1 = function() {
                    var statearr_20012 = state_20009;
                    statearr_20012[7] = inst_19970;
                    statearr_20012[8] = inst_19969;
                    return statearr_20012;
                  }();
                  var statearr_20013_20041 = state_20009__$1;
                  statearr_20013_20041[2] = null;
                  statearr_20013_20041[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20010 === 4) {
                    var inst_19973 = state_20009[9];
                    var inst_19973__$1 = state_20009[2];
                    var inst_19974 = inst_19973__$1 == null;
                    var inst_19975 = cljs.core.not.call(null, inst_19974);
                    var state_20009__$1 = function() {
                      var statearr_20014 = state_20009;
                      statearr_20014[9] = inst_19973__$1;
                      return statearr_20014;
                    }();
                    if (inst_19975) {
                      var statearr_20015_20042 = state_20009__$1;
                      statearr_20015_20042[1] = 5;
                    } else {
                      var statearr_20016_20043 = state_20009__$1;
                      statearr_20016_20043[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20010 === 15) {
                      var inst_19999 = state_20009[2];
                      var state_20009__$1 = state_20009;
                      var statearr_20017_20044 = state_20009__$1;
                      statearr_20017_20044[2] = inst_19999;
                      statearr_20017_20044[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20010 === 13) {
                        var state_20009__$1 = state_20009;
                        var statearr_20018_20045 = state_20009__$1;
                        statearr_20018_20045[2] = null;
                        statearr_20018_20045[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20010 === 6) {
                          var inst_19969 = state_20009[8];
                          var inst_19994 = inst_19969.length;
                          var inst_19995 = inst_19994 > 0;
                          var state_20009__$1 = state_20009;
                          if (cljs.core.truth_(inst_19995)) {
                            var statearr_20019_20046 = state_20009__$1;
                            statearr_20019_20046[1] = 12;
                          } else {
                            var statearr_20020_20047 = state_20009__$1;
                            statearr_20020_20047[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20010 === 3) {
                            var inst_20007 = state_20009[2];
                            var state_20009__$1 = state_20009;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20009__$1, inst_20007);
                          } else {
                            if (state_val_20010 === 12) {
                              var inst_19969 = state_20009[8];
                              var inst_19997 = cljs.core.vec.call(null, inst_19969);
                              var state_20009__$1 = state_20009;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20009__$1, 15, out, inst_19997);
                            } else {
                              if (state_val_20010 === 2) {
                                var state_20009__$1 = state_20009;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20009__$1, 4, ch);
                              } else {
                                if (state_val_20010 === 11) {
                                  var inst_19973 = state_20009[9];
                                  var inst_19977 = state_20009[10];
                                  var inst_19987 = state_20009[2];
                                  var inst_19988 = [];
                                  var inst_19989 = inst_19988.push(inst_19973);
                                  var inst_19969 = inst_19988;
                                  var inst_19970 = inst_19977;
                                  var state_20009__$1 = function() {
                                    var statearr_20021 = state_20009;
                                    statearr_20021[11] = inst_19989;
                                    statearr_20021[12] = inst_19987;
                                    statearr_20021[7] = inst_19970;
                                    statearr_20021[8] = inst_19969;
                                    return statearr_20021;
                                  }();
                                  var statearr_20022_20048 = state_20009__$1;
                                  statearr_20022_20048[2] = null;
                                  statearr_20022_20048[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20010 === 9) {
                                    var inst_19969 = state_20009[8];
                                    var inst_19985 = cljs.core.vec.call(null, inst_19969);
                                    var state_20009__$1 = state_20009;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20009__$1, 11, out, inst_19985);
                                  } else {
                                    if (state_val_20010 === 5) {
                                      var inst_19973 = state_20009[9];
                                      var inst_19970 = state_20009[7];
                                      var inst_19977 = state_20009[10];
                                      var inst_19977__$1 = f.call(null, inst_19973);
                                      var inst_19978 = cljs.core._EQ_.call(null, inst_19977__$1, inst_19970);
                                      var inst_19979 = cljs.core.keyword_identical_QMARK_.call(null, inst_19970, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_19980 = inst_19978 || inst_19979;
                                      var state_20009__$1 = function() {
                                        var statearr_20023 = state_20009;
                                        statearr_20023[10] = inst_19977__$1;
                                        return statearr_20023;
                                      }();
                                      if (cljs.core.truth_(inst_19980)) {
                                        var statearr_20024_20049 = state_20009__$1;
                                        statearr_20024_20049[1] = 8;
                                      } else {
                                        var statearr_20025_20050 = state_20009__$1;
                                        statearr_20025_20050[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20010 === 14) {
                                        var inst_20002 = state_20009[2];
                                        var inst_20003 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_20009__$1 = function() {
                                          var statearr_20027 = state_20009;
                                          statearr_20027[13] = inst_20002;
                                          return statearr_20027;
                                        }();
                                        var statearr_20028_20051 = state_20009__$1;
                                        statearr_20028_20051[2] = inst_20003;
                                        statearr_20028_20051[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_20010 === 10) {
                                          var inst_19992 = state_20009[2];
                                          var state_20009__$1 = state_20009;
                                          var statearr_20029_20052 = state_20009__$1;
                                          statearr_20029_20052[2] = inst_19992;
                                          statearr_20029_20052[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20010 === 8) {
                                            var inst_19973 = state_20009[9];
                                            var inst_19969 = state_20009[8];
                                            var inst_19977 = state_20009[10];
                                            var inst_19982 = inst_19969.push(inst_19973);
                                            var tmp20026 = inst_19969;
                                            var inst_19969__$1 = tmp20026;
                                            var inst_19970 = inst_19977;
                                            var state_20009__$1 = function() {
                                              var statearr_20030 = state_20009;
                                              statearr_20030[14] = inst_19982;
                                              statearr_20030[7] = inst_19970;
                                              statearr_20030[8] = inst_19969__$1;
                                              return statearr_20030;
                                            }();
                                            var statearr_20031_20053 = state_20009__$1;
                                            statearr_20031_20053[2] = null;
                                            statearr_20031_20053[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___20039, out);
          return function(switch__11563__auto__, c__11578__auto___20039, out) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_20035 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20035[0] = state_machine__11564__auto__;
                statearr_20035[1] = 1;
                return statearr_20035;
              };
              var state_machine__11564__auto____1 = function(state_20009) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_20009);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e20036) {
                      if (e20036 instanceof Object) {
                        var ex__11567__auto__ = e20036;
                        var statearr_20037_20054 = state_20009;
                        statearr_20037_20054[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20009);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e20036;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20055 = state_20009;
                    state_20009 = G__20055;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_20009) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_20009);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___20039, out);
        }();
        var state__11580__auto__ = function() {
          var statearr_20038 = f__11579__auto__.call(null);
          statearr_20038[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___20039;
          return statearr_20038;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___20039, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("clidget.widget");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
clidget.widget._STAR_context_STAR_ = null;
clidget.widget.get_widget_key = function get_widget_key(system, keys_binding) {
  return cljs.core.select_keys.call(null, system, cljs.core.map.call(null, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325), keys_binding));
};
clidget.widget.resolve_state = function resolve_state(system, keys_binding) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__3752__auto__ = function iter__15607(s__15608) {
      return new cljs.core.LazySeq(null, function() {
        var s__15608__$1 = s__15608;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__15608__$1);
          if (temp__4126__auto__) {
            var s__15608__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__15608__$2)) {
              var c__3750__auto__ = cljs.core.chunk_first.call(null, s__15608__$2);
              var size__3751__auto__ = cljs.core.count.call(null, c__3750__auto__);
              var b__15610 = cljs.core.chunk_buffer.call(null, size__3751__auto__);
              if (function() {
                var i__15609 = 0;
                while (true) {
                  if (i__15609 < size__3751__auto__) {
                    var map__15615 = cljs.core._nth.call(null, c__3750__auto__, i__15609);
                    var map__15615__$1 = cljs.core.seq_QMARK_.call(null, map__15615) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15615) : map__15615;
                    var atom_key = cljs.core.get.call(null, map__15615__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
                    var val_key = cljs.core.get.call(null, map__15615__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
                    cljs.core.chunk_append.call(null, b__15610, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [val_key, function() {
                      var or__3027__auto__ = cljs.core.get.call(null, system, val_key);
                      if (cljs.core.truth_(or__3027__auto__)) {
                        return or__3027__auto__;
                      } else {
                        var G__15616 = atom_key;
                        var G__15616__$1 = G__15616 == null ? null : cljs.core.get.call(null, system, G__15616);
                        var G__15616__$2 = G__15616__$1 == null ? null : cljs.core.deref.call(null, G__15616__$1);
                        return G__15616__$2;
                      }
                    }()], null));
                    var G__15619 = i__15609 + 1;
                    i__15609 = G__15619;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15610), iter__15607.call(null, cljs.core.chunk_rest.call(null, s__15608__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15610), null);
              }
            } else {
              var map__15617 = cljs.core.first.call(null, s__15608__$2);
              var map__15617__$1 = cljs.core.seq_QMARK_.call(null, map__15617) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15617) : map__15617;
              var atom_key = cljs.core.get.call(null, map__15617__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
              var val_key = cljs.core.get.call(null, map__15617__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [val_key, function() {
                var or__3027__auto__ = cljs.core.get.call(null, system, val_key);
                if (cljs.core.truth_(or__3027__auto__)) {
                  return or__3027__auto__;
                } else {
                  var G__15618 = atom_key;
                  var G__15618__$1 = G__15618 == null ? null : cljs.core.get.call(null, system, G__15618);
                  var G__15618__$2 = G__15618__$1 == null ? null : cljs.core.deref.call(null, G__15618__$1);
                  return G__15618__$2;
                }
              }()], null), iter__15607.call(null, cljs.core.rest.call(null, s__15608__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__3752__auto__.call(null, keys_binding);
  }());
};
clidget.widget.get_cached_widget = function get_cached_widget(p__15620, widget_key) {
  var map__15622 = p__15620;
  var map__15622__$1 = cljs.core.seq_QMARK_.call(null, map__15622) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15622) : map__15622;
  var _BANG_to_cache = cljs.core.get.call(null, map__15622__$1, new cljs.core.Keyword(null, "!to-cache", "!to-cache", 1995196812));
  var from_cache = cljs.core.get.call(null, map__15622__$1, new cljs.core.Keyword(null, "from-cache", "from-cache", 223356736));
  if (cljs.core.truth_(from_cache)) {
    var cached_widget = cljs.core.get.call(null, from_cache, widget_key);
    if (cljs.core.truth_(function() {
      var and__3015__auto__ = cached_widget;
      if (cljs.core.truth_(and__3015__auto__)) {
        return _BANG_to_cache;
      } else {
        return and__3015__auto__;
      }
    }())) {
      cljs.core.swap_BANG_.call(null, _BANG_to_cache, cljs.core.assoc, widget_key, cached_widget);
      return cached_widget;
    } else {
      return null;
    }
  } else {
    return null;
  }
};
clidget.widget.cache_widget_BANG_ = function cache_widget_BANG_(widget, _BANG_widget_cache, widget_key) {
  if (cljs.core.truth_(_BANG_widget_cache)) {
    return cljs.core.swap_BANG_.call(null, _BANG_widget_cache, cljs.core.assoc, widget_key, widget);
  } else {
    return null;
  }
};
clidget.widget.init_locals = function init_locals(system, locals_binding) {
  return cljs.core.reduce.call(null, function(system__$1, p__15625) {
    var vec__15626 = p__15625;
    var atom_key = cljs.core.nth.call(null, vec__15626, 0, null);
    var init_fn = cljs.core.nth.call(null, vec__15626, 1, null);
    return cljs.core.assoc.call(null, system__$1, atom_key, init_fn.call(null));
  }, system, locals_binding);
};
clidget.widget.add_watches = function add_watches(system, keys_binding, render_ch) {
  var seq__15635 = cljs.core.seq.call(null, keys_binding);
  var chunk__15636 = null;
  var count__15637 = 0;
  var i__15638 = 0;
  while (true) {
    if (i__15638 < count__15637) {
      var map__15639 = cljs.core._nth.call(null, chunk__15636, i__15638);
      var map__15639__$1 = cljs.core.seq_QMARK_.call(null, map__15639) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15639) : map__15639;
      var atom_key = cljs.core.get.call(null, map__15639__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
      var val_key = cljs.core.get.call(null, map__15639__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
      var temp__4126__auto___15643 = function() {
        var G__15640 = atom_key;
        var G__15640__$1 = G__15640 == null ? null : cljs.core.get.call(null, system, G__15640);
        return G__15640__$1;
      }();
      if (cljs.core.truth_(temp__4126__auto___15643)) {
        var watched_atom_15644 = temp__4126__auto___15643;
        cljs.core.add_watch.call(null, watched_atom_15644, cljs.core.gensym.call(null, "clidget"), function(seq__15635, chunk__15636, count__15637, i__15638, watched_atom_15644, temp__4126__auto___15643, map__15639, map__15639__$1, atom_key, val_key) {
          return function(_, ___$1, ___$2, new_value) {
            return cljs.core.async.put_BANG_.call(null, render_ch, cljs.core.assoc.call(null, system, val_key, new_value));
          };
        }(seq__15635, chunk__15636, count__15637, i__15638, watched_atom_15644, temp__4126__auto___15643, map__15639, map__15639__$1, atom_key, val_key));
      } else {
      }
      var G__15645 = seq__15635;
      var G__15646 = chunk__15636;
      var G__15647 = count__15637;
      var G__15648 = i__15638 + 1;
      seq__15635 = G__15645;
      chunk__15636 = G__15646;
      count__15637 = G__15647;
      i__15638 = G__15648;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__15635);
      if (temp__4126__auto__) {
        var seq__15635__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15635__$1)) {
          var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__15635__$1);
          var G__15649 = cljs.core.chunk_rest.call(null, seq__15635__$1);
          var G__15650 = c__3783__auto__;
          var G__15651 = cljs.core.count.call(null, c__3783__auto__);
          var G__15652 = 0;
          seq__15635 = G__15649;
          chunk__15636 = G__15650;
          count__15637 = G__15651;
          i__15638 = G__15652;
          continue;
        } else {
          var map__15641 = cljs.core.first.call(null, seq__15635__$1);
          var map__15641__$1 = cljs.core.seq_QMARK_.call(null, map__15641) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15641) : map__15641;
          var atom_key = cljs.core.get.call(null, map__15641__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
          var val_key = cljs.core.get.call(null, map__15641__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
          var temp__4126__auto___15653__$1 = function() {
            var G__15642 = atom_key;
            var G__15642__$1 = G__15642 == null ? null : cljs.core.get.call(null, system, G__15642);
            return G__15642__$1;
          }();
          if (cljs.core.truth_(temp__4126__auto___15653__$1)) {
            var watched_atom_15654 = temp__4126__auto___15653__$1;
            cljs.core.add_watch.call(null, watched_atom_15654, cljs.core.gensym.call(null, "clidget"), function(seq__15635, chunk__15636, count__15637, i__15638, watched_atom_15654, temp__4126__auto___15653__$1, map__15641, map__15641__$1, atom_key, val_key, seq__15635__$1, temp__4126__auto__) {
              return function(_, ___$1, ___$2, new_value) {
                return cljs.core.async.put_BANG_.call(null, render_ch, cljs.core.assoc.call(null, system, val_key, new_value));
              };
            }(seq__15635, chunk__15636, count__15637, i__15638, watched_atom_15654, temp__4126__auto___15653__$1, map__15641, map__15641__$1, atom_key, val_key, seq__15635__$1, temp__4126__auto__));
          } else {
          }
          var G__15655 = cljs.core.next.call(null, seq__15635__$1);
          var G__15656 = null;
          var G__15657 = 0;
          var G__15658 = 0;
          seq__15635 = G__15655;
          chunk__15636 = G__15656;
          count__15637 = G__15657;
          i__15638 = G__15658;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
clidget.widget.make_render_ch = function make_render_ch(render_widget_BANG_) {
  var ch = cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 1));
  var c__11578__auto___15717 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___15717, ch) {
    return function() {
      var f__11579__auto__ = function() {
        var switch__11563__auto__ = function(c__11578__auto___15717, ch) {
          return function(state_15700) {
            var state_val_15701 = state_15700[1];
            if (state_val_15701 === 7) {
              var inst_15696 = state_15700[2];
              var state_15700__$1 = state_15700;
              var statearr_15702_15718 = state_15700__$1;
              statearr_15702_15718[2] = inst_15696;
              statearr_15702_15718[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15701 === 6) {
                var state_15700__$1 = state_15700;
                var statearr_15703_15719 = state_15700__$1;
                statearr_15703_15719[2] = null;
                statearr_15703_15719[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15701 === 5) {
                  var inst_15690 = state_15700[7];
                  var inst_15692 = render_widget_BANG_.call(null, inst_15690);
                  var state_15700__$1 = function() {
                    var statearr_15704 = state_15700;
                    statearr_15704[8] = inst_15692;
                    return statearr_15704;
                  }();
                  var statearr_15705_15720 = state_15700__$1;
                  statearr_15705_15720[2] = null;
                  statearr_15705_15720[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15701 === 4) {
                    var inst_15690 = state_15700[7];
                    var inst_15690__$1 = state_15700[2];
                    var state_15700__$1 = function() {
                      var statearr_15706 = state_15700;
                      statearr_15706[7] = inst_15690__$1;
                      return statearr_15706;
                    }();
                    if (cljs.core.truth_(inst_15690__$1)) {
                      var statearr_15707_15721 = state_15700__$1;
                      statearr_15707_15721[1] = 5;
                    } else {
                      var statearr_15708_15722 = state_15700__$1;
                      statearr_15708_15722[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15701 === 3) {
                      var inst_15698 = state_15700[2];
                      var state_15700__$1 = state_15700;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15700__$1, inst_15698);
                    } else {
                      if (state_val_15701 === 2) {
                        var state_15700__$1 = state_15700;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15700__$1, 4, ch);
                      } else {
                        if (state_val_15701 === 1) {
                          var state_15700__$1 = state_15700;
                          var statearr_15709_15723 = state_15700__$1;
                          statearr_15709_15723[2] = null;
                          statearr_15709_15723[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11578__auto___15717, ch);
        return function(switch__11563__auto__, c__11578__auto___15717, ch) {
          return function() {
            var state_machine__11564__auto__ = null;
            var state_machine__11564__auto____0 = function() {
              var statearr_15713 = [null, null, null, null, null, null, null, null, null];
              statearr_15713[0] = state_machine__11564__auto__;
              statearr_15713[1] = 1;
              return statearr_15713;
            };
            var state_machine__11564__auto____1 = function(state_15700) {
              while (true) {
                var ret_value__11565__auto__ = function() {
                  try {
                    while (true) {
                      var result__11566__auto__ = switch__11563__auto__.call(null, state_15700);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11566__auto__;
                      }
                      break;
                    }
                  } catch (e15714) {
                    if (e15714 instanceof Object) {
                      var ex__11567__auto__ = e15714;
                      var statearr_15715_15724 = state_15700;
                      statearr_15715_15724[5] = ex__11567__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15700);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e15714;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15725 = state_15700;
                  state_15700 = G__15725;
                  continue;
                } else {
                  return ret_value__11565__auto__;
                }
                break;
              }
            };
            state_machine__11564__auto__ = function(state_15700) {
              switch(arguments.length) {
                case 0:
                  return state_machine__11564__auto____0.call(this);
                case 1:
                  return state_machine__11564__auto____1.call(this, state_15700);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
            return state_machine__11564__auto__;
          }();
        }(switch__11563__auto__, c__11578__auto___15717, ch);
      }();
      var state__11580__auto__ = function() {
        var statearr_15716 = f__11579__auto__.call(null);
        statearr_15716[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___15717;
        return statearr_15716;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
    };
  }(c__11578__auto___15717, ch));
  return ch;
};
clidget.widget.re_render_widget = function re_render_widget(p__15727, widget_key, system, keys_binding, render_widget_fn) {
  var map__15732 = p__15727;
  var map__15732__$1 = cljs.core.seq_QMARK_.call(null, map__15732) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15732) : map__15732;
  var _BANG_parent_widget_cache = cljs.core.get.call(null, map__15732__$1, new cljs.core.Keyword(null, "!to-cache", "!to-cache", 1995196812));
  var _BANG_widget = cljs.core.atom.call(null, null);
  var _BANG_widget_cache = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var render_widget_BANG_ = function(_BANG_widget, _BANG_widget_cache, map__15732, map__15732__$1, _BANG_parent_widget_cache) {
    return function(system__$1) {
      var G__15733 = function() {
        var from_cache__10438__auto__ = cljs.core.deref.call(null, _BANG_widget_cache);
        var _STAR_context_STAR_15734 = clidget.widget._STAR_context_STAR_;
        try {
          clidget.widget._STAR_context_STAR_ = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "from-cache", "from-cache", 223356736), from_cache__10438__auto__, new cljs.core.Keyword(null, "!to-cache", "!to-cache", 1995196812), function() {
            var G__15735 = _BANG_widget_cache;
            cljs.core.reset_BANG_.call(null, G__15735, cljs.core.PersistentArrayMap.EMPTY);
            return G__15735;
          }()], null);
          return render_widget_fn.call(null, cljs.core.dissoc.call(null, cljs.core.merge.call(null, system__$1, clidget.widget.resolve_state.call(null, system__$1, keys_binding)), new cljs.core.Keyword("clidget", "widget-key", "clidget/widget-key", -879111104), new cljs.core.Keyword("clidget", "widget-type", "clidget/widget-type", 981736725)));
        } finally {
          clidget.widget._STAR_context_STAR_ = _STAR_context_STAR_15734;
        }
      }();
      clidget.widget.cache_widget_BANG_.call(null, G__15733, _BANG_parent_widget_cache, widget_key);
      (function(G__15733, _BANG_widget, _BANG_widget_cache, map__15732, map__15732__$1, _BANG_parent_widget_cache) {
        return function(p1__15726_SHARP_) {
          var temp__4126__auto__ = cljs.core.deref.call(null, _BANG_widget);
          if (cljs.core.truth_(temp__4126__auto__)) {
            var current_widget = temp__4126__auto__;
            return current_widget.parentNode.replaceChild(p1__15726_SHARP_, current_widget);
          } else {
            return null;
          }
        };
      })(G__15733, _BANG_widget, _BANG_widget_cache, map__15732, map__15732__$1, _BANG_parent_widget_cache).call(null, G__15733);
      cljs.core.reset_BANG_.call(null, _BANG_widget, G__15733);
      return G__15733;
    };
  }(_BANG_widget, _BANG_widget_cache, map__15732, map__15732__$1, _BANG_parent_widget_cache);
  var render_ch = clidget.widget.make_render_ch.call(null, render_widget_BANG_);
  clidget.widget.add_watches.call(null, system, keys_binding, render_ch);
  return cljs.core.reset_BANG_.call(null, _BANG_widget, render_widget_BANG_.call(null, system));
};
clidget.widget.updated_widget = function updated_widget(system, keys_binding, locals_binding, render_widget_fn) {
  var widget_key = clidget.widget.get_widget_key.call(null, system, keys_binding);
  var or__3027__auto__ = clidget.widget.get_cached_widget.call(null, clidget.widget._STAR_context_STAR_, widget_key);
  if (cljs.core.truth_(or__3027__auto__)) {
    return or__3027__auto__;
  } else {
    return clidget.widget.re_render_widget.call(null, clidget.widget._STAR_context_STAR_, widget_key, clidget.widget.init_locals.call(null, system, locals_binding), keys_binding, render_widget_fn);
  }
};
goog.provide("chord.channels");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async");
chord.channels.read_from_ws_BANG_ = function read_from_ws_BANG_(ws, ch) {
  return ws.onmessage = function(ev) {
    var message = ev.data;
    return cljs.core.async.put_BANG_.call(null, ch, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message", "message", -406056002), message], null));
  };
};
chord.channels.write_to_ws_BANG_ = function write_to_ws_BANG_(ws, ch) {
  var c__11578__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto__) {
    return function() {
      var f__11579__auto__ = function() {
        var switch__11563__auto__ = function(c__11578__auto__) {
          return function(state_17355) {
            var state_val_17356 = state_17355[1];
            if (state_val_17356 === 7) {
              var inst_17351 = state_17355[2];
              var state_17355__$1 = state_17355;
              var statearr_17357_17372 = state_17355__$1;
              statearr_17357_17372[2] = inst_17351;
              statearr_17357_17372[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17356 === 6) {
                var state_17355__$1 = state_17355;
                var statearr_17358_17373 = state_17355__$1;
                statearr_17358_17373[2] = null;
                statearr_17358_17373[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17356 === 5) {
                  var inst_17345 = state_17355[7];
                  var inst_17347 = ws.send(inst_17345);
                  var state_17355__$1 = function() {
                    var statearr_17359 = state_17355;
                    statearr_17359[8] = inst_17347;
                    return statearr_17359;
                  }();
                  var statearr_17360_17374 = state_17355__$1;
                  statearr_17360_17374[2] = null;
                  statearr_17360_17374[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17356 === 4) {
                    var inst_17345 = state_17355[7];
                    var inst_17345__$1 = state_17355[2];
                    var state_17355__$1 = function() {
                      var statearr_17361 = state_17355;
                      statearr_17361[7] = inst_17345__$1;
                      return statearr_17361;
                    }();
                    if (cljs.core.truth_(inst_17345__$1)) {
                      var statearr_17362_17375 = state_17355__$1;
                      statearr_17362_17375[1] = 5;
                    } else {
                      var statearr_17363_17376 = state_17355__$1;
                      statearr_17363_17376[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17356 === 3) {
                      var inst_17353 = state_17355[2];
                      var state_17355__$1 = state_17355;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17355__$1, inst_17353);
                    } else {
                      if (state_val_17356 === 2) {
                        var state_17355__$1 = state_17355;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17355__$1, 4, ch);
                      } else {
                        if (state_val_17356 === 1) {
                          var state_17355__$1 = state_17355;
                          var statearr_17364_17377 = state_17355__$1;
                          statearr_17364_17377[2] = null;
                          statearr_17364_17377[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11578__auto__);
        return function(switch__11563__auto__, c__11578__auto__) {
          return function() {
            var state_machine__11564__auto__ = null;
            var state_machine__11564__auto____0 = function() {
              var statearr_17368 = [null, null, null, null, null, null, null, null, null];
              statearr_17368[0] = state_machine__11564__auto__;
              statearr_17368[1] = 1;
              return statearr_17368;
            };
            var state_machine__11564__auto____1 = function(state_17355) {
              while (true) {
                var ret_value__11565__auto__ = function() {
                  try {
                    while (true) {
                      var result__11566__auto__ = switch__11563__auto__.call(null, state_17355);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11566__auto__;
                      }
                      break;
                    }
                  } catch (e17369) {
                    if (e17369 instanceof Object) {
                      var ex__11567__auto__ = e17369;
                      var statearr_17370_17378 = state_17355;
                      statearr_17370_17378[5] = ex__11567__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17355);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e17369;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17379 = state_17355;
                  state_17355 = G__17379;
                  continue;
                } else {
                  return ret_value__11565__auto__;
                }
                break;
              }
            };
            state_machine__11564__auto__ = function(state_17355) {
              switch(arguments.length) {
                case 0:
                  return state_machine__11564__auto____0.call(this);
                case 1:
                  return state_machine__11564__auto____1.call(this, state_17355);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
            state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
            return state_machine__11564__auto__;
          }();
        }(switch__11563__auto__, c__11578__auto__);
      }();
      var state__11580__auto__ = function() {
        var statearr_17371 = f__11579__auto__.call(null);
        statearr_17371[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto__;
        return statearr_17371;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
    };
  }(c__11578__auto__));
  return c__11578__auto__;
};
chord.channels.bidi_ch = function() {
  var bidi_ch__delegate = function(read_ch, write_ch, p__17380) {
    var vec__17386 = p__17380;
    var map__17387 = cljs.core.nth.call(null, vec__17386, 0, null);
    var map__17387__$1 = cljs.core.seq_QMARK_.call(null, map__17387) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17387) : map__17387;
    var on_close = cljs.core.get.call(null, map__17387__$1, new cljs.core.Keyword(null, "on-close", "on-close", -761178394));
    if (typeof chord.channels.t17388 !== "undefined") {
    } else {
      chord.channels.t17388 = function(on_close, map__17387, vec__17386, p__17380, write_ch, read_ch, bidi_ch, meta17389) {
        this.on_close = on_close;
        this.map__17387 = map__17387;
        this.vec__17386 = vec__17386;
        this.p__17380 = p__17380;
        this.write_ch = write_ch;
        this.read_ch = read_ch;
        this.bidi_ch = bidi_ch;
        this.meta17389 = meta17389;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      chord.channels.t17388.cljs$lang$type = true;
      chord.channels.t17388.cljs$lang$ctorStr = "chord.channels/t17388";
      chord.channels.t17388.cljs$lang$ctorPrWriter = function(vec__17386, map__17387, map__17387__$1, on_close) {
        return function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
          return cljs.core._write.call(null, writer__3595__auto__, "chord.channels/t17388");
        };
      }(vec__17386, map__17387, map__17387__$1, on_close);
      chord.channels.t17388.prototype.cljs$core$async$impl$protocols$Channel$ = true;
      chord.channels.t17388.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(vec__17386, map__17387, map__17387__$1, on_close) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.async.impl.protocols.close_BANG_.call(null, self__.read_ch);
          cljs.core.async.impl.protocols.close_BANG_.call(null, self__.write_ch);
          if (cljs.core.truth_(self__.on_close)) {
            return self__.on_close.call(null);
          } else {
            return null;
          }
        };
      }(vec__17386, map__17387, map__17387__$1, on_close);
      chord.channels.t17388.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
      chord.channels.t17388.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(vec__17386, map__17387, map__17387__$1, on_close) {
        return function(_, msg, handler) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.write_ch, msg, handler);
        };
      }(vec__17386, map__17387, map__17387__$1, on_close);
      chord.channels.t17388.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
      chord.channels.t17388.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(vec__17386, map__17387, map__17387__$1, on_close) {
        return function(_, handler) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.read_ch, handler);
        };
      }(vec__17386, map__17387, map__17387__$1, on_close);
      chord.channels.t17388.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__17386, map__17387, map__17387__$1, on_close) {
        return function(_17390) {
          var self__ = this;
          var _17390__$1 = this;
          return self__.meta17389;
        };
      }(vec__17386, map__17387, map__17387__$1, on_close);
      chord.channels.t17388.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__17386, map__17387, map__17387__$1, on_close) {
        return function(_17390, meta17389__$1) {
          var self__ = this;
          var _17390__$1 = this;
          return new chord.channels.t17388(self__.on_close, self__.map__17387, self__.vec__17386, self__.p__17380, self__.write_ch, self__.read_ch, self__.bidi_ch, meta17389__$1);
        };
      }(vec__17386, map__17387, map__17387__$1, on_close);
      chord.channels.__GT_t17388 = function(vec__17386, map__17387, map__17387__$1, on_close) {
        return function __GT_t17388(on_close__$1, map__17387__$2, vec__17386__$1, p__17380__$1, write_ch__$1, read_ch__$1, bidi_ch__$1, meta17389) {
          return new chord.channels.t17388(on_close__$1, map__17387__$2, vec__17386__$1, p__17380__$1, write_ch__$1, read_ch__$1, bidi_ch__$1, meta17389);
        };
      }(vec__17386, map__17387, map__17387__$1, on_close);
    }
    return new chord.channels.t17388(on_close, map__17387__$1, vec__17386, p__17380, write_ch, read_ch, bidi_ch, null);
  };
  var bidi_ch = function(read_ch, write_ch, var_args) {
    var p__17380 = null;
    if (arguments.length > 2) {
      p__17380 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return bidi_ch__delegate.call(this, read_ch, write_ch, p__17380);
  };
  bidi_ch.cljs$lang$maxFixedArity = 2;
  bidi_ch.cljs$lang$applyTo = function(arglist__17391) {
    var read_ch = cljs.core.first(arglist__17391);
    arglist__17391 = cljs.core.next(arglist__17391);
    var write_ch = cljs.core.first(arglist__17391);
    var p__17380 = cljs.core.rest(arglist__17391);
    return bidi_ch__delegate(read_ch, write_ch, p__17380);
  };
  bidi_ch.cljs$core$IFn$_invoke$arity$variadic = bidi_ch__delegate;
  return bidi_ch;
}();
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj21008 = {};
  return obj21008;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3015__auto__ = reader;
    if (and__3015__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__3654__auto__ = reader == null ? null : reader;
    return function() {
      var or__3027__auto__ = cljs.reader.read_char[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.reader.read_char["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3015__auto__ = reader;
    if (and__3015__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__3654__auto__ = reader == null ? null : reader;
    return function() {
      var or__3027__auto__ = cljs.reader.unread[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.reader.unread["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
  return cljs.core._write.call(null, writer__3595__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3027__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3027__auto__)) {
    return or__3027__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__21009) {
    var rdr = cljs.core.first(arglist__21009);
    var msg = cljs.core.rest(arglist__21009);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3015__auto__ = !(ch === "#");
  if (and__3015__auto__) {
    var and__3015__auto____$1 = !(ch === "'");
    if (and__3015__auto____$1) {
      var and__3015__auto____$2 = !(ch === ":");
      if (and__3015__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3015__auto____$2;
      }
    } else {
      return and__3015__auto____$1;
    }
  } else {
    return and__3015__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__21010 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__21011 = cljs.reader.read_char.call(null, rdr);
      sb = G__21010;
      ch = G__21011;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var zero = groups[2];
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : new cljs.core.Keyword(null, "else", "else", -1508377146) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__21012 = cljs.reader.read_char.call(null, rdr);
      ch = G__21012;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__21013 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__21013;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__21014 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__21014;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3027__auto__ = ch == null;
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3027__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__21015 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__21016 = cljs.reader.read_char.call(null, reader);
      buffer = G__21015;
      ch = G__21016;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__21017 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__21018 = cljs.reader.read_char.call(null, reader);
        buffer = G__21017;
        ch = G__21018;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", -1987822328)) {
            var G__21019 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__21020 = cljs.reader.read_char.call(null, reader);
            buffer = G__21019;
            ch = G__21020;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__21025 = function() {
            var G__21023 = buffer;
            G__21023.append(nch);
            return G__21023;
          }();
          var G__21026 = cljs.reader.read_char.call(null, reader);
          buffer = G__21025;
          ch = G__21026;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var G__21027 = function() {
              var G__21024 = buffer;
              G__21024.append(ch);
              return G__21024;
            }();
            var G__21028 = cljs.reader.read_char.call(null, reader);
            buffer = G__21027;
            ch = G__21028;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__21030 = o;
    if (G__21030) {
      var bit__3677__auto__ = G__21030.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__3677__auto__ || G__21030.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__21030.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__21030);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__21030);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__21031 = reader;
        var G__21032 = eof_is_error;
        var G__21033 = sentinel;
        var G__21034 = is_recursive;
        reader = G__21031;
        eof_is_error = G__21032;
        sentinel = G__21033;
        is_recursive = G__21034;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__21035 = cljs.reader.read_comment.call(null, reader, ch);
          var G__21036 = eof_is_error;
          var G__21037 = sentinel;
          var G__21038 = is_recursive;
          reader = G__21035;
          eof_is_error = G__21036;
          sentinel = G__21037;
          is_recursive = G__21038;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", -1508377146) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__21039 = reader;
              var G__21040 = eof_is_error;
              var G__21041 = sentinel;
              var G__21042 = is_recursive;
              reader = G__21039;
              eof_is_error = G__21040;
              sentinel = G__21041;
              is_recursive = G__21042;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__21043 = b.append("0");
            b = G__21043;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__21045 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__21045, 0, null);
  var years = cljs.core.nth.call(null, vec__21045, 1, null);
  var months = cljs.core.nth.call(null, vec__21045, 2, null);
  var days = cljs.core.nth.call(null, vec__21045, 3, null);
  var hours = cljs.core.nth.call(null, vec__21045, 4, null);
  var minutes = cljs.core.nth.call(null, vec__21045, 5, null);
  var seconds = cljs.core.nth.call(null, vec__21045, 6, null);
  var fraction = cljs.core.nth.call(null, vec__21045, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__21045, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__21045, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__21045, 10, null);
  var v = vec__21045;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3027__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3027__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3027__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3027__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3027__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3027__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3027__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3027__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__21047 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__21047, 0, null);
    var months = cljs.core.nth.call(null, vec__21047, 1, null);
    var days = cljs.core.nth.call(null, vec__21047, 2, null);
    var hours = cljs.core.nth.call(null, vec__21047, 3, null);
    var minutes = cljs.core.nth.call(null, vec__21047, 4, null);
    var seconds = cljs.core.nth.call(null, vec__21047, 5, null);
    var ms = cljs.core.nth.call(null, vec__21047, 6, null);
    var offset = cljs.core.nth.call(null, vec__21047, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__21060_21072 = cljs.core.seq.call(null, form);
    var chunk__21061_21073 = null;
    var count__21062_21074 = 0;
    var i__21063_21075 = 0;
    while (true) {
      if (i__21063_21075 < count__21062_21074) {
        var x_21076 = cljs.core._nth.call(null, chunk__21061_21073, i__21063_21075);
        arr.push(x_21076);
        var G__21077 = seq__21060_21072;
        var G__21078 = chunk__21061_21073;
        var G__21079 = count__21062_21074;
        var G__21080 = i__21063_21075 + 1;
        seq__21060_21072 = G__21077;
        chunk__21061_21073 = G__21078;
        count__21062_21074 = G__21079;
        i__21063_21075 = G__21080;
        continue;
      } else {
        var temp__4126__auto___21081 = cljs.core.seq.call(null, seq__21060_21072);
        if (temp__4126__auto___21081) {
          var seq__21060_21082__$1 = temp__4126__auto___21081;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21060_21082__$1)) {
            var c__3783__auto___21083 = cljs.core.chunk_first.call(null, seq__21060_21082__$1);
            var G__21084 = cljs.core.chunk_rest.call(null, seq__21060_21082__$1);
            var G__21085 = c__3783__auto___21083;
            var G__21086 = cljs.core.count.call(null, c__3783__auto___21083);
            var G__21087 = 0;
            seq__21060_21072 = G__21084;
            chunk__21061_21073 = G__21085;
            count__21062_21074 = G__21086;
            i__21063_21075 = G__21087;
            continue;
          } else {
            var x_21088 = cljs.core.first.call(null, seq__21060_21082__$1);
            arr.push(x_21088);
            var G__21089 = cljs.core.next.call(null, seq__21060_21082__$1);
            var G__21090 = null;
            var G__21091 = 0;
            var G__21092 = 0;
            seq__21060_21072 = G__21089;
            chunk__21061_21073 = G__21090;
            count__21062_21074 = G__21091;
            i__21063_21075 = G__21092;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj21065 = {};
        return obj21065;
      }();
      var seq__21066_21093 = cljs.core.seq.call(null, form);
      var chunk__21067_21094 = null;
      var count__21068_21095 = 0;
      var i__21069_21096 = 0;
      while (true) {
        if (i__21069_21096 < count__21068_21095) {
          var vec__21070_21097 = cljs.core._nth.call(null, chunk__21067_21094, i__21069_21096);
          var k_21098 = cljs.core.nth.call(null, vec__21070_21097, 0, null);
          var v_21099 = cljs.core.nth.call(null, vec__21070_21097, 1, null);
          obj[cljs.core.name.call(null, k_21098)] = v_21099;
          var G__21100 = seq__21066_21093;
          var G__21101 = chunk__21067_21094;
          var G__21102 = count__21068_21095;
          var G__21103 = i__21069_21096 + 1;
          seq__21066_21093 = G__21100;
          chunk__21067_21094 = G__21101;
          count__21068_21095 = G__21102;
          i__21069_21096 = G__21103;
          continue;
        } else {
          var temp__4126__auto___21104 = cljs.core.seq.call(null, seq__21066_21093);
          if (temp__4126__auto___21104) {
            var seq__21066_21105__$1 = temp__4126__auto___21104;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__21066_21105__$1)) {
              var c__3783__auto___21106 = cljs.core.chunk_first.call(null, seq__21066_21105__$1);
              var G__21107 = cljs.core.chunk_rest.call(null, seq__21066_21105__$1);
              var G__21108 = c__3783__auto___21106;
              var G__21109 = cljs.core.count.call(null, c__3783__auto___21106);
              var G__21110 = 0;
              seq__21066_21093 = G__21107;
              chunk__21067_21094 = G__21108;
              count__21068_21095 = G__21109;
              i__21069_21096 = G__21110;
              continue;
            } else {
              var vec__21071_21111 = cljs.core.first.call(null, seq__21066_21105__$1);
              var k_21112 = cljs.core.nth.call(null, vec__21071_21111, 0, null);
              var v_21113 = cljs.core.nth.call(null, vec__21071_21111, 1, null);
              obj[cljs.core.name.call(null, k_21112)] = v_21113;
              var G__21114 = cljs.core.next.call(null, seq__21066_21105__$1);
              var G__21115 = null;
              var G__21116 = 0;
              var G__21117 = 0;
              seq__21066_21093 = G__21114;
              chunk__21067_21094 = G__21115;
              count__21068_21095 = G__21116;
              i__21069_21096 = G__21117;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__17308) {
    var vec__17309 = p__17308;
    var k = cljs.core.nth.call(null, vec__17309, 0, null);
    var v = cljs.core.nth.call(null, vec__17309, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__17312) {
    var vec__17313 = p__17312;
    var k = cljs.core.nth.call(null, vec__17313, 0, null);
    var v = cljs.core.nth.call(null, vec__17313, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("chord.format");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
chord.format.try_read = function try_read(read_fn) {
  return function(p__17298) {
    var map__17299 = p__17298;
    var map__17299__$1 = cljs.core.seq_QMARK_.call(null, map__17299) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17299) : map__17299;
    var data = map__17299__$1;
    var message = cljs.core.get.call(null, map__17299__$1, new cljs.core.Keyword(null, "message", "message", -406056002));
    var error = cljs.core.get.call(null, map__17299__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
    if (cljs.core.truth_(error)) {
      return data;
    } else {
      try {
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message", "message", -406056002), read_fn.call(null, message)], null);
      } catch (e17300) {
        if (e17300 instanceof Error) {
          var e = e17300;
          return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "invalid-format", "invalid-format", -72676108), new cljs.core.Keyword(null, "cause", "cause", 231901252), e, new cljs.core.Keyword(null, "invalid-msg", "invalid-msg", -1474361625), message], null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            throw e17300;
          } else {
            return null;
          }
        }
      }
    }
  };
};
chord.format.wrap_format = function() {
  var method_table__3893__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__3894__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__3895__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__3896__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__3897__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("wrap-format", function(method_table__3893__auto__, prefer_table__3894__auto__, method_cache__3895__auto__, cached_hierarchy__3896__auto__, hierarchy__3897__auto__) {
    return function(chs, format) {
      return format;
    };
  }(method_table__3893__auto__, prefer_table__3894__auto__, method_cache__3895__auto__, cached_hierarchy__3896__auto__, hierarchy__3897__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__3897__auto__, method_table__3893__auto__, prefer_table__3894__auto__, method_cache__3895__auto__, cached_hierarchy__3896__auto__);
}();
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "edn", "edn", 1317840885), function(p__17301, _) {
  var map__17302 = p__17301;
  var map__17302__$1 = cljs.core.seq_QMARK_.call(null, map__17302) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17302) : map__17302;
  var write_ch = cljs.core.get.call(null, map__17302__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
  var read_ch = cljs.core.get.call(null, map__17302__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), cljs.core.async.map_LT_.call(null, chord.format.try_read.call(null, cljs.reader.read_string), read_ch), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), cljs.core.async.map_GT_.call(null, cljs.core.pr_str, write_ch)], null);
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "json", "json", 1279968570), function(p__17303, _) {
  var map__17304 = p__17303;
  var map__17304__$1 = cljs.core.seq_QMARK_.call(null, map__17304) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17304) : map__17304;
  var write_ch = cljs.core.get.call(null, map__17304__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
  var read_ch = cljs.core.get.call(null, map__17304__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), cljs.core.async.map_LT_.call(null, chord.format.try_read.call(null, cljs.core.comp.call(null, cljs.core.js__GT_clj, JSON.parse)), read_ch), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), cljs.core.async.map_GT_.call(null, cljs.core.comp.call(null, JSON.stringify, cljs.core.clj__GT_js), write_ch)], null);
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "json-kw", "json-kw", 341203175), function(chs, _) {
  return cljs.core.update_in.call(null, chord.format.wrap_format.call(null, chs, new cljs.core.Keyword(null, "json", "json", 1279968570)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414)], null), function(p1__17305_SHARP_) {
    return cljs.core.async.map_LT_.call(null, clojure.walk.keywordize_keys, p1__17305_SHARP_);
  });
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "str", "str", 1089608819), function(chs, _) {
  return chs;
});
cljs.core._add_method.call(null, chord.format.wrap_format, null, function(chs, _) {
  return chord.format.wrap_format.call(null, chs, new cljs.core.Keyword(null, "edn", "edn", 1317840885));
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "default", "default", -1987822328), function(chs, format) {
  throw "ERROR: Invalid Chord channel format: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(format);
});
goog.provide("chord.client");
goog.require("cljs.core");
goog.require("chord.channels");
goog.require("cljs.core.async");
goog.require("chord.format");
goog.require("chord.format");
goog.require("chord.channels");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
chord.client.on_close = function() {
  var on_close__delegate = function(ws, read_ch, write_ch, p__16878) {
    var vec__16951 = p__16878;
    var err_meta_channel = cljs.core.nth.call(null, vec__16951, 0, null);
    return ws.onclose = function(vec__16951, err_meta_channel) {
      return function(ev) {
        var c__11578__auto__ = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto__, vec__16951, err_meta_channel) {
          return function() {
            var f__11579__auto__ = function() {
              var switch__11563__auto__ = function(c__11578__auto__, vec__16951, err_meta_channel) {
                return function(state_16990) {
                  var state_val_16991 = state_16990[1];
                  if (state_val_16991 === 7) {
                    var inst_16986 = state_16990[2];
                    var inst_16987 = cljs.core.async.close_BANG_.call(null, read_ch);
                    var inst_16988 = cljs.core.async.close_BANG_.call(null, write_ch);
                    var state_16990__$1 = function() {
                      var statearr_16992 = state_16990;
                      statearr_16992[7] = inst_16986;
                      statearr_16992[8] = inst_16987;
                      return statearr_16992;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16990__$1, inst_16988);
                  } else {
                    if (state_val_16991 === 1) {
                      var inst_16952 = state_16990[9];
                      var inst_16952__$1 = ws.error_seen;
                      var state_16990__$1 = function() {
                        var statearr_16993 = state_16990;
                        statearr_16993[9] = inst_16952__$1;
                        return statearr_16993;
                      }();
                      if (cljs.core.truth_(inst_16952__$1)) {
                        var statearr_16994_17023 = state_16990__$1;
                        statearr_16994_17023[1] = 2;
                      } else {
                        var statearr_16995_17024 = state_16990__$1;
                        statearr_16995_17024[1] = 3;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16991 === 4) {
                        var inst_16958 = state_16990[2];
                        var state_16990__$1 = state_16990;
                        if (cljs.core.truth_(inst_16958)) {
                          var statearr_16996_17025 = state_16990__$1;
                          statearr_16996_17025[1] = 5;
                        } else {
                          var statearr_16997_17026 = state_16990__$1;
                          statearr_16997_17026[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16991 === 6) {
                          var state_16990__$1 = state_16990;
                          var statearr_16998_17027 = state_16990__$1;
                          statearr_16998_17027[2] = null;
                          statearr_16998_17027[1] = 7;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16991 === 3) {
                            var inst_16955 = ev.wasClean;
                            var inst_16956 = cljs.core.not.call(null, inst_16955);
                            var state_16990__$1 = state_16990;
                            var statearr_16999_17028 = state_16990__$1;
                            statearr_16999_17028[2] = inst_16956;
                            statearr_16999_17028[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16991 === 12) {
                              var inst_16983 = state_16990[2];
                              var state_16990__$1 = state_16990;
                              var statearr_17000_17029 = state_16990__$1;
                              statearr_17000_17029[2] = inst_16983;
                              statearr_17000_17029[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16991 === 2) {
                                var inst_16952 = state_16990[9];
                                var state_16990__$1 = state_16990;
                                var statearr_17001_17030 = state_16990__$1;
                                statearr_17001_17030[2] = inst_16952;
                                statearr_17001_17030[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16991 === 11) {
                                  var inst_16978 = state_16990[2];
                                  var state_16990__$1 = state_16990;
                                  var statearr_17002_17031 = state_16990__$1;
                                  statearr_17002_17031[2] = inst_16978;
                                  statearr_17002_17031[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16991 === 9) {
                                    var state_16990__$1 = state_16990;
                                    var statearr_17003_17032 = state_16990__$1;
                                    statearr_17003_17032[2] = null;
                                    statearr_17003_17032[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16991 === 5) {
                                      var inst_16960 = [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "wasClean", "wasClean", -1404940601)];
                                      var inst_16961 = ev.reason;
                                      var inst_16962 = ev.code;
                                      var inst_16963 = ev.wasClean;
                                      var inst_16964 = [inst_16961, inst_16962, inst_16963];
                                      var inst_16965 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_16960, inst_16964);
                                      var state_16990__$1 = function() {
                                        var statearr_17004 = state_16990;
                                        statearr_17004[10] = inst_16965;
                                        return statearr_17004;
                                      }();
                                      if (cljs.core.truth_(err_meta_channel)) {
                                        var statearr_17005_17033 = state_16990__$1;
                                        statearr_17005_17033[1] = 8;
                                      } else {
                                        var statearr_17006_17034 = state_16990__$1;
                                        statearr_17006_17034[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16991 === 10) {
                                        var inst_16965 = state_16990[10];
                                        var inst_16981 = state_16990[2];
                                        var state_16990__$1 = function() {
                                          var statearr_17007 = state_16990;
                                          statearr_17007[11] = inst_16981;
                                          return statearr_17007;
                                        }();
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16990__$1, 12, read_ch, inst_16965);
                                      } else {
                                        if (state_val_16991 === 8) {
                                          var inst_16965 = state_16990[10];
                                          var inst_16952 = state_16990[9];
                                          var inst_16970 = cljs.core.async.chan.call(null, 1);
                                          var inst_16971 = function() {
                                            var c__11578__auto____$1 = inst_16970;
                                            var error_desc = inst_16965;
                                            var error_seen_QMARK_ = inst_16952;
                                            return function(c__11578__auto____$1, error_desc, error_seen_QMARK_, inst_16965, inst_16952, inst_16970, state_val_16991, c__11578__auto__, vec__16951, err_meta_channel) {
                                              return function() {
                                                var f__11579__auto__ = function() {
                                                  var switch__11563__auto__ = function(c__11578__auto____$1, error_desc, error_seen_QMARK_, inst_16965, inst_16952, inst_16970, state_val_16991, c__11578__auto__, vec__16951, err_meta_channel) {
                                                    return function(state_16968) {
                                                      var state_val_16969 = state_16968[1];
                                                      if (state_val_16969 === 1) {
                                                        var state_16968__$1 = state_16968;
                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16968__$1, error_desc);
                                                      } else {
                                                        return null;
                                                      }
                                                    };
                                                  }(c__11578__auto____$1, error_desc, error_seen_QMARK_, inst_16965, inst_16952, inst_16970, state_val_16991, c__11578__auto__, vec__16951, err_meta_channel);
                                                  return function(switch__11563__auto__, c__11578__auto____$1, error_desc, error_seen_QMARK_, inst_16965, inst_16952, inst_16970, state_val_16991, c__11578__auto__, vec__16951, err_meta_channel) {
                                                    return function() {
                                                      var state_machine__11564__auto__ = null;
                                                      var state_machine__11564__auto____0 = function() {
                                                        var statearr_17011 = [null, null, null, null, null, null, null];
                                                        statearr_17011[0] = state_machine__11564__auto__;
                                                        statearr_17011[1] = 1;
                                                        return statearr_17011;
                                                      };
                                                      var state_machine__11564__auto____1 = function(state_16968) {
                                                        while (true) {
                                                          var ret_value__11565__auto__ = function() {
                                                            try {
                                                              while (true) {
                                                                var result__11566__auto__ = switch__11563__auto__.call(null, state_16968);
                                                                if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                                  continue;
                                                                } else {
                                                                  return result__11566__auto__;
                                                                }
                                                                break;
                                                              }
                                                            } catch (e17012) {
                                                              if (e17012 instanceof Object) {
                                                                var ex__11567__auto__ = e17012;
                                                                var statearr_17013_17035 = state_16968;
                                                                statearr_17013_17035[5] = ex__11567__auto__;
                                                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16968);
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                                                  throw e17012;
                                                                } else {
                                                                  return null;
                                                                }
                                                              }
                                                            }
                                                          }();
                                                          if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                            var G__17036 = state_16968;
                                                            state_16968 = G__17036;
                                                            continue;
                                                          } else {
                                                            return ret_value__11565__auto__;
                                                          }
                                                          break;
                                                        }
                                                      };
                                                      state_machine__11564__auto__ = function(state_16968) {
                                                        switch(arguments.length) {
                                                          case 0:
                                                            return state_machine__11564__auto____0.call(this);
                                                          case 1:
                                                            return state_machine__11564__auto____1.call(this, state_16968);
                                                        }
                                                        throw new Error("Invalid arity: " + arguments.length);
                                                      };
                                                      state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
                                                      state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
                                                      return state_machine__11564__auto__;
                                                    }();
                                                  }(switch__11563__auto__, c__11578__auto____$1, error_desc, error_seen_QMARK_, inst_16965, inst_16952, inst_16970, state_val_16991, c__11578__auto__, vec__16951, err_meta_channel);
                                                }();
                                                var state__11580__auto__ = function() {
                                                  var statearr_17014 = f__11579__auto__.call(null);
                                                  statearr_17014[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto____$1;
                                                  return statearr_17014;
                                                }();
                                                return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
                                              };
                                            }(c__11578__auto____$1, error_desc, error_seen_QMARK_, inst_16965, inst_16952, inst_16970, state_val_16991, c__11578__auto__, vec__16951, err_meta_channel);
                                          }();
                                          var inst_16972 = cljs.core.async.impl.dispatch.run.call(null, inst_16971);
                                          var inst_16974 = cljs.core.async.chan.call(null);
                                          var inst_16975 = cljs.core.async.close_BANG_.call(null, inst_16974);
                                          var inst_16976 = chord.channels.bidi_ch.call(null, inst_16970, inst_16974);
                                          var state_16990__$1 = function() {
                                            var statearr_17015 = state_16990;
                                            statearr_17015[12] = inst_16975;
                                            statearr_17015[13] = inst_16972;
                                            return statearr_17015;
                                          }();
                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16990__$1, 11, err_meta_channel, inst_16976);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                };
              }(c__11578__auto__, vec__16951, err_meta_channel);
              return function(switch__11563__auto__, c__11578__auto__, vec__16951, err_meta_channel) {
                return function() {
                  var state_machine__11564__auto__ = null;
                  var state_machine__11564__auto____0 = function() {
                    var statearr_17019 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                    statearr_17019[0] = state_machine__11564__auto__;
                    statearr_17019[1] = 1;
                    return statearr_17019;
                  };
                  var state_machine__11564__auto____1 = function(state_16990) {
                    while (true) {
                      var ret_value__11565__auto__ = function() {
                        try {
                          while (true) {
                            var result__11566__auto__ = switch__11563__auto__.call(null, state_16990);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__11566__auto__;
                            }
                            break;
                          }
                        } catch (e17020) {
                          if (e17020 instanceof Object) {
                            var ex__11567__auto__ = e17020;
                            var statearr_17021_17037 = state_16990;
                            statearr_17021_17037[5] = ex__11567__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16990);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                              throw e17020;
                            } else {
                              return null;
                            }
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__17038 = state_16990;
                        state_16990 = G__17038;
                        continue;
                      } else {
                        return ret_value__11565__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__11564__auto__ = function(state_16990) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__11564__auto____0.call(this);
                      case 1:
                        return state_machine__11564__auto____1.call(this, state_16990);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
                  state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
                  return state_machine__11564__auto__;
                }();
              }(switch__11563__auto__, c__11578__auto__, vec__16951, err_meta_channel);
            }();
            var state__11580__auto__ = function() {
              var statearr_17022 = f__11579__auto__.call(null);
              statearr_17022[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto__;
              return statearr_17022;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
          };
        }(c__11578__auto__, vec__16951, err_meta_channel));
        return c__11578__auto__;
      };
    }(vec__16951, err_meta_channel);
  };
  var on_close = function(ws, read_ch, write_ch, var_args) {
    var p__16878 = null;
    if (arguments.length > 3) {
      p__16878 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return on_close__delegate.call(this, ws, read_ch, write_ch, p__16878);
  };
  on_close.cljs$lang$maxFixedArity = 3;
  on_close.cljs$lang$applyTo = function(arglist__17039) {
    var ws = cljs.core.first(arglist__17039);
    arglist__17039 = cljs.core.next(arglist__17039);
    var read_ch = cljs.core.first(arglist__17039);
    arglist__17039 = cljs.core.next(arglist__17039);
    var write_ch = cljs.core.first(arglist__17039);
    var p__16878 = cljs.core.rest(arglist__17039);
    return on_close__delegate(ws, read_ch, write_ch, p__16878);
  };
  on_close.cljs$core$IFn$_invoke$arity$variadic = on_close__delegate;
  return on_close;
}();
chord.client.make_open_ch = function make_open_ch(ws, read_ch, write_ch, v) {
  var ch = cljs.core.async.chan.call(null);
  chord.client.on_close.call(null, ws, read_ch, write_ch, ch);
  ws.onopen = function(ch) {
    return function() {
      var c__11578__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto__, ch) {
        return function() {
          var f__11579__auto__ = function() {
            var switch__11563__auto__ = function(c__11578__auto__, ch) {
              return function(state_17058) {
                var state_val_17059 = state_17058[1];
                if (state_val_17059 === 2) {
                  var inst_17055 = state_17058[2];
                  var inst_17056 = cljs.core.async.close_BANG_.call(null, ch);
                  var state_17058__$1 = function() {
                    var statearr_17060 = state_17058;
                    statearr_17060[7] = inst_17055;
                    return statearr_17060;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17058__$1, inst_17056);
                } else {
                  if (state_val_17059 === 1) {
                    var state_17058__$1 = state_17058;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17058__$1, 2, ch, v);
                  } else {
                    return null;
                  }
                }
              };
            }(c__11578__auto__, ch);
            return function(switch__11563__auto__, c__11578__auto__, ch) {
              return function() {
                var state_machine__11564__auto__ = null;
                var state_machine__11564__auto____0 = function() {
                  var statearr_17064 = [null, null, null, null, null, null, null, null];
                  statearr_17064[0] = state_machine__11564__auto__;
                  statearr_17064[1] = 1;
                  return statearr_17064;
                };
                var state_machine__11564__auto____1 = function(state_17058) {
                  while (true) {
                    var ret_value__11565__auto__ = function() {
                      try {
                        while (true) {
                          var result__11566__auto__ = switch__11563__auto__.call(null, state_17058);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__11566__auto__;
                          }
                          break;
                        }
                      } catch (e17065) {
                        if (e17065 instanceof Object) {
                          var ex__11567__auto__ = e17065;
                          var statearr_17066_17068 = state_17058;
                          statearr_17066_17068[5] = ex__11567__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17058);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                            throw e17065;
                          } else {
                            return null;
                          }
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__17069 = state_17058;
                      state_17058 = G__17069;
                      continue;
                    } else {
                      return ret_value__11565__auto__;
                    }
                    break;
                  }
                };
                state_machine__11564__auto__ = function(state_17058) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__11564__auto____0.call(this);
                    case 1:
                      return state_machine__11564__auto____1.call(this, state_17058);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
                state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
                return state_machine__11564__auto__;
              }();
            }(switch__11563__auto__, c__11578__auto__, ch);
          }();
          var state__11580__auto__ = function() {
            var statearr_17067 = f__11579__auto__.call(null);
            statearr_17067[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto__;
            return statearr_17067;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
        };
      }(c__11578__auto__, ch));
      return c__11578__auto__;
    };
  }(ch);
  return ch;
};
chord.client.close_event__GT_maybe_error = function close_event__GT_maybe_error(ev) {
  if (cljs.core.truth_(ev.wasClean)) {
    return null;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reason", "reason", -2070751759), ev.reason, new cljs.core.Keyword(null, "code", "code", 1586293142), ev.code], null);
  }
};
chord.client.ws_ch = function() {
  var ws_ch__delegate = function(ws_url, p__17072) {
    var vec__17171 = p__17072;
    var map__17172 = cljs.core.nth.call(null, vec__17171, 0, null);
    var map__17172__$1 = cljs.core.seq_QMARK_.call(null, map__17172) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17172) : map__17172;
    var format = cljs.core.get.call(null, map__17172__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
    var write_ch = cljs.core.get.call(null, map__17172__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
    var read_ch = cljs.core.get.call(null, map__17172__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
    var web_socket = new WebSocket(ws_url);
    var map__17173 = chord.format.wrap_format.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), function() {
      var or__3027__auto__ = read_ch;
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return cljs.core.async.chan.call(null);
      }
    }(), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), function() {
      var or__3027__auto__ = write_ch;
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return cljs.core.async.chan.call(null);
      }
    }()], null), format);
    var map__17173__$1 = cljs.core.seq_QMARK_.call(null, map__17173) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17173) : map__17173;
    var write_ch__$1 = cljs.core.get.call(null, map__17173__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
    var read_ch__$1 = cljs.core.get.call(null, map__17173__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
    var open_ch = cljs.core.async.chan.call(null);
    var close_ch = cljs.core.async.chan.call(null);
    web_socket.binaryType = "arraybuffer";
    chord.channels.read_from_ws_BANG_.call(null, web_socket, read_ch__$1);
    chord.channels.write_to_ws_BANG_.call(null, web_socket, write_ch__$1);
    web_socket.onopen = function(web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch) {
      return function(p1__17070_SHARP_) {
        return cljs.core.async.put_BANG_.call(null, open_ch, p1__17070_SHARP_);
      };
    }(web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch);
    web_socket.onclose = function(web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch) {
      return function(p1__17071_SHARP_) {
        return cljs.core.async.put_BANG_.call(null, close_ch, p1__17071_SHARP_);
      };
    }(web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch);
    var ws_chan = chord.channels.bidi_ch.call(null, read_ch__$1, write_ch__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-close", "on-close", -761178394), function(web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch) {
      return function() {
        return web_socket.close();
      };
    }(web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch)], null));
    var initial_ch = cljs.core.async.chan.call(null);
    var c__11578__auto___17269 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11578__auto___17269, ws_chan, initial_ch, web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch) {
      return function() {
        var f__11579__auto__ = function() {
          var switch__11563__auto__ = function(c__11578__auto___17269, ws_chan, initial_ch, web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch) {
            return function(state_17232) {
              var state_val_17233 = state_17232[1];
              if (state_val_17233 === 7) {
                var inst_17228 = state_17232[2];
                var state_17232__$1 = state_17232;
                var statearr_17234_17270 = state_17232__$1;
                statearr_17234_17270[2] = inst_17228;
                statearr_17234_17270[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17233 === 20) {
                  var state_17232__$1 = state_17232;
                  var statearr_17235_17271 = state_17232__$1;
                  statearr_17235_17271[2] = null;
                  statearr_17235_17271[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17233 === 1) {
                    var inst_17174 = false;
                    var state_17232__$1 = function() {
                      var statearr_17236 = state_17232;
                      statearr_17236[7] = inst_17174;
                      return statearr_17236;
                    }();
                    var statearr_17237_17272 = state_17232__$1;
                    statearr_17237_17272[2] = null;
                    statearr_17237_17272[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17233 === 4) {
                      var inst_17186 = state_17232[8];
                      var inst_17184 = state_17232[9];
                      var inst_17184__$1 = state_17232[2];
                      var inst_17185 = cljs.core.nth.call(null, inst_17184__$1, 0, null);
                      var inst_17186__$1 = cljs.core.nth.call(null, inst_17184__$1, 1, null);
                      var inst_17187 = cljs.core._EQ_.call(null, inst_17186__$1, open_ch);
                      var state_17232__$1 = function() {
                        var statearr_17238 = state_17232;
                        statearr_17238[10] = inst_17185;
                        statearr_17238[8] = inst_17186__$1;
                        statearr_17238[9] = inst_17184__$1;
                        return statearr_17238;
                      }();
                      if (inst_17187) {
                        var statearr_17239_17273 = state_17232__$1;
                        statearr_17239_17273[1] = 5;
                      } else {
                        var statearr_17240_17274 = state_17232__$1;
                        statearr_17240_17274[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17233 === 15) {
                        var inst_17213 = state_17232[2];
                        var state_17232__$1 = state_17232;
                        var statearr_17241_17275 = state_17232__$1;
                        statearr_17241_17275[2] = inst_17213;
                        statearr_17241_17275[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17233 === 21) {
                          var inst_17224 = state_17232[2];
                          var state_17232__$1 = state_17232;
                          var statearr_17242_17276 = state_17232__$1;
                          statearr_17242_17276[2] = inst_17224;
                          statearr_17242_17276[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17233 === 13) {
                            var state_17232__$1 = state_17232;
                            var statearr_17243_17277 = state_17232__$1;
                            statearr_17243_17277[2] = null;
                            statearr_17243_17277[1] = 14;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17233 === 6) {
                              var inst_17186 = state_17232[8];
                              var inst_17199 = cljs.core._EQ_.call(null, inst_17186, close_ch);
                              var state_17232__$1 = state_17232;
                              if (inst_17199) {
                                var statearr_17244_17278 = state_17232__$1;
                                statearr_17244_17278[1] = 9;
                              } else {
                                var statearr_17245_17279 = state_17232__$1;
                                statearr_17245_17279[1] = 10;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17233 === 17) {
                                var state_17232__$1 = state_17232;
                                var statearr_17246_17280 = state_17232__$1;
                                statearr_17246_17280[2] = initial_ch;
                                statearr_17246_17280[1] = 18;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17233 === 3) {
                                  var inst_17230 = state_17232[2];
                                  var state_17232__$1 = state_17232;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17232__$1, inst_17230);
                                } else {
                                  if (state_val_17233 === 12) {
                                    var inst_17174 = state_17232[7];
                                    var state_17232__$1 = state_17232;
                                    if (cljs.core.truth_(inst_17174)) {
                                      var statearr_17247_17281 = state_17232__$1;
                                      statearr_17247_17281[1] = 16;
                                    } else {
                                      var statearr_17248_17282 = state_17232__$1;
                                      statearr_17248_17282[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17233 === 2) {
                                      var inst_17181 = [open_ch, close_ch];
                                      var inst_17182 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_17181, null);
                                      var state_17232__$1 = state_17232;
                                      return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_17232__$1, 4, inst_17182);
                                    } else {
                                      if (state_val_17233 === 19) {
                                        var inst_17185 = state_17232[10];
                                        var state_17232__$1 = state_17232;
                                        var statearr_17249_17283 = state_17232__$1;
                                        statearr_17249_17283[2] = inst_17185;
                                        statearr_17249_17283[1] = 21;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17233 === 11) {
                                          var inst_17226 = state_17232[2];
                                          var state_17232__$1 = state_17232;
                                          var statearr_17250_17284 = state_17232__$1;
                                          statearr_17250_17284[2] = inst_17226;
                                          statearr_17250_17284[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_17233 === 9) {
                                            var inst_17203 = state_17232[11];
                                            var inst_17184 = state_17232[9];
                                            var inst_17202 = cljs.core.nth.call(null, inst_17184, 0, null);
                                            var inst_17203__$1 = chord.client.close_event__GT_maybe_error.call(null, inst_17202);
                                            var state_17232__$1 = function() {
                                              var statearr_17251 = state_17232;
                                              statearr_17251[11] = inst_17203__$1;
                                              return statearr_17251;
                                            }();
                                            if (cljs.core.truth_(inst_17203__$1)) {
                                              var statearr_17252_17285 = state_17232__$1;
                                              statearr_17252_17285[1] = 12;
                                            } else {
                                              var statearr_17253_17286 = state_17232__$1;
                                              statearr_17253_17286[1] = 13;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_17233 === 5) {
                                              var inst_17184 = state_17232[9];
                                              var inst_17190 = cljs.core.nth.call(null, inst_17184, 0, null);
                                              var inst_17191 = [new cljs.core.Keyword(null, "ws-channel", "ws-channel", 1643892174)];
                                              var inst_17192 = [ws_chan];
                                              var inst_17193 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_17191, inst_17192);
                                              var state_17232__$1 = function() {
                                                var statearr_17254 = state_17232;
                                                statearr_17254[12] = inst_17190;
                                                return statearr_17254;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17232__$1, 8, initial_ch, inst_17193);
                                            } else {
                                              if (state_val_17233 === 14) {
                                                var inst_17216 = state_17232[2];
                                                var inst_17217 = cljs.core.async.close_BANG_.call(null, ws_chan);
                                                var inst_17218 = cljs.core.async.close_BANG_.call(null, initial_ch);
                                                var state_17232__$1 = function() {
                                                  var statearr_17255 = state_17232;
                                                  statearr_17255[13] = inst_17217;
                                                  statearr_17255[14] = inst_17216;
                                                  return statearr_17255;
                                                }();
                                                var statearr_17256_17287 = state_17232__$1;
                                                statearr_17256_17287[2] = inst_17218;
                                                statearr_17256_17287[1] = 11;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_17233 === 16) {
                                                  var state_17232__$1 = state_17232;
                                                  var statearr_17257_17288 = state_17232__$1;
                                                  statearr_17257_17288[2] = read_ch__$1;
                                                  statearr_17257_17288[1] = 18;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_17233 === 10) {
                                                    var inst_17186 = state_17232[8];
                                                    var inst_17220 = cljs.core._EQ_.call(null, inst_17186, new cljs.core.Keyword(null, "default", "default", -1987822328));
                                                    var state_17232__$1 = state_17232;
                                                    if (inst_17220) {
                                                      var statearr_17258_17289 = state_17232__$1;
                                                      statearr_17258_17289[1] = 19;
                                                    } else {
                                                      var statearr_17259_17290 = state_17232__$1;
                                                      statearr_17259_17290[1] = 20;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_17233 === 18) {
                                                      var inst_17203 = state_17232[11];
                                                      var inst_17208 = state_17232[2];
                                                      var inst_17209 = [new cljs.core.Keyword(null, "error", "error", -978969032)];
                                                      var inst_17210 = [inst_17203];
                                                      var inst_17211 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_17209, inst_17210);
                                                      var state_17232__$1 = state_17232;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17232__$1, 15, inst_17208, inst_17211);
                                                    } else {
                                                      if (state_val_17233 === 8) {
                                                        var inst_17195 = state_17232[2];
                                                        var inst_17196 = cljs.core.async.close_BANG_.call(null, initial_ch);
                                                        var inst_17174 = true;
                                                        var state_17232__$1 = function() {
                                                          var statearr_17260 = state_17232;
                                                          statearr_17260[15] = inst_17196;
                                                          statearr_17260[16] = inst_17195;
                                                          statearr_17260[7] = inst_17174;
                                                          return statearr_17260;
                                                        }();
                                                        var statearr_17261_17291 = state_17232__$1;
                                                        statearr_17261_17291[2] = null;
                                                        statearr_17261_17291[1] = 2;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        return null;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__11578__auto___17269, ws_chan, initial_ch, web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch);
          return function(switch__11563__auto__, c__11578__auto___17269, ws_chan, initial_ch, web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch) {
            return function() {
              var state_machine__11564__auto__ = null;
              var state_machine__11564__auto____0 = function() {
                var statearr_17265 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_17265[0] = state_machine__11564__auto__;
                statearr_17265[1] = 1;
                return statearr_17265;
              };
              var state_machine__11564__auto____1 = function(state_17232) {
                while (true) {
                  var ret_value__11565__auto__ = function() {
                    try {
                      while (true) {
                        var result__11566__auto__ = switch__11563__auto__.call(null, state_17232);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11566__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11566__auto__;
                        }
                        break;
                      }
                    } catch (e17266) {
                      if (e17266 instanceof Object) {
                        var ex__11567__auto__ = e17266;
                        var statearr_17267_17292 = state_17232;
                        statearr_17267_17292[5] = ex__11567__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17232);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17266;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11565__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17293 = state_17232;
                    state_17232 = G__17293;
                    continue;
                  } else {
                    return ret_value__11565__auto__;
                  }
                  break;
                }
              };
              state_machine__11564__auto__ = function(state_17232) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__11564__auto____0.call(this);
                  case 1:
                    return state_machine__11564__auto____1.call(this, state_17232);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11564__auto____0;
              state_machine__11564__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11564__auto____1;
              return state_machine__11564__auto__;
            }();
          }(switch__11563__auto__, c__11578__auto___17269, ws_chan, initial_ch, web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch);
        }();
        var state__11580__auto__ = function() {
          var statearr_17268 = f__11579__auto__.call(null);
          statearr_17268[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11578__auto___17269;
          return statearr_17268;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11580__auto__);
      };
    }(c__11578__auto___17269, ws_chan, initial_ch, web_socket, map__17173, map__17173__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__17171, map__17172, map__17172__$1, format, write_ch, read_ch));
    return initial_ch;
  };
  var ws_ch = function(ws_url, var_args) {
    var p__17072 = null;
    if (arguments.length > 1) {
      p__17072 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ws_ch__delegate.call(this, ws_url, p__17072);
  };
  ws_ch.cljs$lang$maxFixedArity = 1;
  ws_ch.cljs$lang$applyTo = function(arglist__17294) {
    var ws_url = cljs.core.first(arglist__17294);
    var p__17072 = cljs.core.rest(arglist__17294);
    return ws_ch__delegate(ws_url, p__17072);
  };
  ws_ch.cljs$core$IFn$_invoke$arity$variadic = ws_ch__delegate;
  return ws_ch;
}();
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__20549 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__20549;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__20553 = cljs.core._EQ_;
    var expr__20554 = limit;
    if (cljs.core.truth_(pred__20553.call(null, 1, expr__20554))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__20553.call(null, 2, expr__20554))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__20556 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__20557 = limit__$1 - 1;
            var G__20558 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__20556;
            limit__$1 = G__20557;
            parts = G__20558;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__20559 = index - 1;
        index = G__20559;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___20560 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___20560)) {
        var replacement_20561 = temp__4124__auto___20560;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_20561));
      } else {
        buffer.append(ch);
      }
      var G__20562 = index + 1;
      index = G__20562;
      continue;
    }
    break;
  }
};
goog.provide("dommy.attrs");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.attrs.class_match_QMARK_ = function class_match_QMARK_(class_name, class$, idx) {
  var and__3015__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__3015__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__3015__auto__;
  }
};
dommy.attrs.class_index = function class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.attrs.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__20566 = i + class$.length;
        start_from = G__20566;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.attrs.has_class_QMARK_ = function has_class_QMARK_(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4124__auto__ = elem__$1.classList;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var class_list = temp__4124__auto__;
    return class_list.contains(class$__$1);
  } else {
    var temp__4126__auto__ = elem__$1.className;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var class_name = temp__4126__auto__;
      var temp__4126__auto____$1 = dommy.attrs.class_index.call(null, class_name, class$__$1);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var i = temp__4126__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.attrs.add_class_BANG_ = function() {
  var add_class_BANG_ = null;
  var add_class_BANG___2 = function(elem, classes) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var classes__$1 = clojure.string.trim.call(null, cljs.core.name.call(null, classes));
    if (cljs.core.seq.call(null, classes__$1)) {
      var temp__4124__auto___20591 = elem__$1.classList;
      if (cljs.core.truth_(temp__4124__auto___20591)) {
        var class_list_20592 = temp__4124__auto___20591;
        var seq__20579_20593 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__20580_20594 = null;
        var count__20581_20595 = 0;
        var i__20582_20596 = 0;
        while (true) {
          if (i__20582_20596 < count__20581_20595) {
            var class_20597 = cljs.core._nth.call(null, chunk__20580_20594, i__20582_20596);
            class_list_20592.add(class_20597);
            var G__20598 = seq__20579_20593;
            var G__20599 = chunk__20580_20594;
            var G__20600 = count__20581_20595;
            var G__20601 = i__20582_20596 + 1;
            seq__20579_20593 = G__20598;
            chunk__20580_20594 = G__20599;
            count__20581_20595 = G__20600;
            i__20582_20596 = G__20601;
            continue;
          } else {
            var temp__4126__auto___20602 = cljs.core.seq.call(null, seq__20579_20593);
            if (temp__4126__auto___20602) {
              var seq__20579_20603__$1 = temp__4126__auto___20602;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20579_20603__$1)) {
                var c__3783__auto___20604 = cljs.core.chunk_first.call(null, seq__20579_20603__$1);
                var G__20605 = cljs.core.chunk_rest.call(null, seq__20579_20603__$1);
                var G__20606 = c__3783__auto___20604;
                var G__20607 = cljs.core.count.call(null, c__3783__auto___20604);
                var G__20608 = 0;
                seq__20579_20593 = G__20605;
                chunk__20580_20594 = G__20606;
                count__20581_20595 = G__20607;
                i__20582_20596 = G__20608;
                continue;
              } else {
                var class_20609 = cljs.core.first.call(null, seq__20579_20603__$1);
                class_list_20592.add(class_20609);
                var G__20610 = cljs.core.next.call(null, seq__20579_20603__$1);
                var G__20611 = null;
                var G__20612 = 0;
                var G__20613 = 0;
                seq__20579_20593 = G__20610;
                chunk__20580_20594 = G__20611;
                count__20581_20595 = G__20612;
                i__20582_20596 = G__20613;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        var class_name_20614 = elem__$1.className;
        var seq__20583_20615 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__20584_20616 = null;
        var count__20585_20617 = 0;
        var i__20586_20618 = 0;
        while (true) {
          if (i__20586_20618 < count__20585_20617) {
            var class_20619 = cljs.core._nth.call(null, chunk__20584_20616, i__20586_20618);
            if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_20614, class_20619))) {
            } else {
              elem__$1.className = class_name_20614 === "" ? class_20619 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_20614) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_20619);
            }
            var G__20620 = seq__20583_20615;
            var G__20621 = chunk__20584_20616;
            var G__20622 = count__20585_20617;
            var G__20623 = i__20586_20618 + 1;
            seq__20583_20615 = G__20620;
            chunk__20584_20616 = G__20621;
            count__20585_20617 = G__20622;
            i__20586_20618 = G__20623;
            continue;
          } else {
            var temp__4126__auto___20624 = cljs.core.seq.call(null, seq__20583_20615);
            if (temp__4126__auto___20624) {
              var seq__20583_20625__$1 = temp__4126__auto___20624;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20583_20625__$1)) {
                var c__3783__auto___20626 = cljs.core.chunk_first.call(null, seq__20583_20625__$1);
                var G__20627 = cljs.core.chunk_rest.call(null, seq__20583_20625__$1);
                var G__20628 = c__3783__auto___20626;
                var G__20629 = cljs.core.count.call(null, c__3783__auto___20626);
                var G__20630 = 0;
                seq__20583_20615 = G__20627;
                chunk__20584_20616 = G__20628;
                count__20585_20617 = G__20629;
                i__20586_20618 = G__20630;
                continue;
              } else {
                var class_20631 = cljs.core.first.call(null, seq__20583_20625__$1);
                if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_20614, class_20631))) {
                } else {
                  elem__$1.className = class_name_20614 === "" ? class_20631 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_20614) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_20631);
                }
                var G__20632 = cljs.core.next.call(null, seq__20583_20625__$1);
                var G__20633 = null;
                var G__20634 = 0;
                var G__20635 = 0;
                seq__20583_20615 = G__20632;
                chunk__20584_20616 = G__20633;
                count__20585_20617 = G__20634;
                i__20586_20618 = G__20635;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
    } else {
    }
    return elem__$1;
  };
  var add_class_BANG___3 = function() {
    var G__20636__delegate = function(elem, classes, more_classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20587_20637 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
      var chunk__20588_20638 = null;
      var count__20589_20639 = 0;
      var i__20590_20640 = 0;
      while (true) {
        if (i__20590_20640 < count__20589_20639) {
          var c_20641 = cljs.core._nth.call(null, chunk__20588_20638, i__20590_20640);
          add_class_BANG_.call(null, elem__$1, c_20641);
          var G__20642 = seq__20587_20637;
          var G__20643 = chunk__20588_20638;
          var G__20644 = count__20589_20639;
          var G__20645 = i__20590_20640 + 1;
          seq__20587_20637 = G__20642;
          chunk__20588_20638 = G__20643;
          count__20589_20639 = G__20644;
          i__20590_20640 = G__20645;
          continue;
        } else {
          var temp__4126__auto___20646 = cljs.core.seq.call(null, seq__20587_20637);
          if (temp__4126__auto___20646) {
            var seq__20587_20647__$1 = temp__4126__auto___20646;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20587_20647__$1)) {
              var c__3783__auto___20648 = cljs.core.chunk_first.call(null, seq__20587_20647__$1);
              var G__20649 = cljs.core.chunk_rest.call(null, seq__20587_20647__$1);
              var G__20650 = c__3783__auto___20648;
              var G__20651 = cljs.core.count.call(null, c__3783__auto___20648);
              var G__20652 = 0;
              seq__20587_20637 = G__20649;
              chunk__20588_20638 = G__20650;
              count__20589_20639 = G__20651;
              i__20590_20640 = G__20652;
              continue;
            } else {
              var c_20653 = cljs.core.first.call(null, seq__20587_20647__$1);
              add_class_BANG_.call(null, elem__$1, c_20653);
              var G__20654 = cljs.core.next.call(null, seq__20587_20647__$1);
              var G__20655 = null;
              var G__20656 = 0;
              var G__20657 = 0;
              seq__20587_20637 = G__20654;
              chunk__20588_20638 = G__20655;
              count__20589_20639 = G__20656;
              i__20590_20640 = G__20657;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__20636 = function(elem, classes, var_args) {
      var more_classes = null;
      if (arguments.length > 2) {
        more_classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20636__delegate.call(this, elem, classes, more_classes);
    };
    G__20636.cljs$lang$maxFixedArity = 2;
    G__20636.cljs$lang$applyTo = function(arglist__20658) {
      var elem = cljs.core.first(arglist__20658);
      arglist__20658 = cljs.core.next(arglist__20658);
      var classes = cljs.core.first(arglist__20658);
      var more_classes = cljs.core.rest(arglist__20658);
      return G__20636__delegate(elem, classes, more_classes);
    };
    G__20636.cljs$core$IFn$_invoke$arity$variadic = G__20636__delegate;
    return G__20636;
  }();
  add_class_BANG_ = function(elem, classes, var_args) {
    var more_classes = var_args;
    switch(arguments.length) {
      case 2:
        return add_class_BANG___2.call(this, elem, classes);
      default:
        return add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, classes, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_class_BANG_.cljs$lang$maxFixedArity = 2;
  add_class_BANG_.cljs$lang$applyTo = add_class_BANG___3.cljs$lang$applyTo;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = add_class_BANG___2;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return add_class_BANG_;
}();
dommy.attrs.remove_class_str = function remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4124__auto__ = dommy.attrs.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var i = temp__4124__auto__;
      var G__20659 = function() {
        var end = i + class$.length;
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(end < class_len ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substring(0, i)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substr(end + 1)) : class_name.substring(0, i - 1));
      }();
      class_name = G__20659;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_ = function() {
  var remove_class_BANG_ = null;
  var remove_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___20668 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___20668)) {
      var class_list_20669 = temp__4124__auto___20668;
      class_list_20669.remove(class$__$1);
    } else {
      var class_name_20670 = elem__$1.className;
      var new_class_name_20671 = dommy.attrs.remove_class_str.call(null, class_name_20670, class$__$1);
      if (class_name_20670 === new_class_name_20671) {
      } else {
        elem__$1.className = new_class_name_20671;
      }
    }
    return elem__$1;
  };
  var remove_class_BANG___3 = function() {
    var G__20672__delegate = function(elem, class$, classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20664 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
      var chunk__20665 = null;
      var count__20666 = 0;
      var i__20667 = 0;
      while (true) {
        if (i__20667 < count__20666) {
          var c = cljs.core._nth.call(null, chunk__20665, i__20667);
          remove_class_BANG_.call(null, elem__$1, c);
          var G__20673 = seq__20664;
          var G__20674 = chunk__20665;
          var G__20675 = count__20666;
          var G__20676 = i__20667 + 1;
          seq__20664 = G__20673;
          chunk__20665 = G__20674;
          count__20666 = G__20675;
          i__20667 = G__20676;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__20664);
          if (temp__4126__auto__) {
            var seq__20664__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20664__$1)) {
              var c__3783__auto__ = cljs.core.chunk_first.call(null, seq__20664__$1);
              var G__20677 = cljs.core.chunk_rest.call(null, seq__20664__$1);
              var G__20678 = c__3783__auto__;
              var G__20679 = cljs.core.count.call(null, c__3783__auto__);
              var G__20680 = 0;
              seq__20664 = G__20677;
              chunk__20665 = G__20678;
              count__20666 = G__20679;
              i__20667 = G__20680;
              continue;
            } else {
              var c = cljs.core.first.call(null, seq__20664__$1);
              remove_class_BANG_.call(null, elem__$1, c);
              var G__20681 = cljs.core.next.call(null, seq__20664__$1);
              var G__20682 = null;
              var G__20683 = 0;
              var G__20684 = 0;
              seq__20664 = G__20681;
              chunk__20665 = G__20682;
              count__20666 = G__20683;
              i__20667 = G__20684;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
    var G__20672 = function(elem, class$, var_args) {
      var classes = null;
      if (arguments.length > 2) {
        classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20672__delegate.call(this, elem, class$, classes);
    };
    G__20672.cljs$lang$maxFixedArity = 2;
    G__20672.cljs$lang$applyTo = function(arglist__20685) {
      var elem = cljs.core.first(arglist__20685);
      arglist__20685 = cljs.core.next(arglist__20685);
      var class$ = cljs.core.first(arglist__20685);
      var classes = cljs.core.rest(arglist__20685);
      return G__20672__delegate(elem, class$, classes);
    };
    G__20672.cljs$core$IFn$_invoke$arity$variadic = G__20672__delegate;
    return G__20672;
  }();
  remove_class_BANG_ = function(elem, class$, var_args) {
    var classes = var_args;
    switch(arguments.length) {
      case 2:
        return remove_class_BANG___2.call(this, elem, class$);
      default:
        return remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, class$, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_class_BANG_.cljs$lang$maxFixedArity = 2;
  remove_class_BANG_.cljs$lang$applyTo = remove_class_BANG___3.cljs$lang$applyTo;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_class_BANG___2;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_class_BANG_;
}();
dommy.attrs.toggle_class_BANG_ = function() {
  var toggle_class_BANG_ = null;
  var toggle_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___20686 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___20686)) {
      var class_list_20687 = temp__4124__auto___20686;
      class_list_20687.toggle(class$__$1);
    } else {
      toggle_class_BANG_.call(null, elem__$1, class$__$1, !dommy.attrs.has_class_QMARK_.call(null, elem__$1, class$__$1));
    }
    return elem__$1;
  };
  var toggle_class_BANG___3 = function(elem, class$, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      dommy.attrs.add_class_BANG_.call(null, elem__$1, class$);
    } else {
      dommy.attrs.remove_class_BANG_.call(null, elem__$1, class$);
    }
    return elem__$1;
  };
  toggle_class_BANG_ = function(elem, class$, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_class_BANG___2.call(this, elem, class$);
      case 3:
        return toggle_class_BANG___3.call(this, elem, class$, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_class_BANG___2;
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_class_BANG___3;
  return toggle_class_BANG_;
}();
dommy.attrs.style_str = function style_str(x) {
  if (typeof x === "string") {
    return x;
  } else {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, function(p__20690) {
      var vec__20691 = p__20690;
      var k = cljs.core.nth.call(null, vec__20691, 0, null);
      var v = cljs.core.nth.call(null, vec__20691, 1, null);
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, k)) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, v)) + ";";
    }, x));
  }
};
dommy.attrs.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var style = elem__$1.style;
    var seq__20698_20704 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__20699_20705 = null;
    var count__20700_20706 = 0;
    var i__20701_20707 = 0;
    while (true) {
      if (i__20701_20707 < count__20700_20706) {
        var vec__20702_20708 = cljs.core._nth.call(null, chunk__20699_20705, i__20701_20707);
        var k_20709 = cljs.core.nth.call(null, vec__20702_20708, 0, null);
        var v_20710 = cljs.core.nth.call(null, vec__20702_20708, 1, null);
        style[cljs.core.name.call(null, k_20709)] = v_20710;
        var G__20711 = seq__20698_20704;
        var G__20712 = chunk__20699_20705;
        var G__20713 = count__20700_20706;
        var G__20714 = i__20701_20707 + 1;
        seq__20698_20704 = G__20711;
        chunk__20699_20705 = G__20712;
        count__20700_20706 = G__20713;
        i__20701_20707 = G__20714;
        continue;
      } else {
        var temp__4126__auto___20715 = cljs.core.seq.call(null, seq__20698_20704);
        if (temp__4126__auto___20715) {
          var seq__20698_20716__$1 = temp__4126__auto___20715;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20698_20716__$1)) {
            var c__3783__auto___20717 = cljs.core.chunk_first.call(null, seq__20698_20716__$1);
            var G__20718 = cljs.core.chunk_rest.call(null, seq__20698_20716__$1);
            var G__20719 = c__3783__auto___20717;
            var G__20720 = cljs.core.count.call(null, c__3783__auto___20717);
            var G__20721 = 0;
            seq__20698_20704 = G__20718;
            chunk__20699_20705 = G__20719;
            count__20700_20706 = G__20720;
            i__20701_20707 = G__20721;
            continue;
          } else {
            var vec__20703_20722 = cljs.core.first.call(null, seq__20698_20716__$1);
            var k_20723 = cljs.core.nth.call(null, vec__20703_20722, 0, null);
            var v_20724 = cljs.core.nth.call(null, vec__20703_20722, 1, null);
            style[cljs.core.name.call(null, k_20723)] = v_20724;
            var G__20725 = cljs.core.next.call(null, seq__20698_20716__$1);
            var G__20726 = null;
            var G__20727 = 0;
            var G__20728 = 0;
            seq__20698_20704 = G__20725;
            chunk__20699_20705 = G__20726;
            count__20700_20706 = G__20727;
            i__20701_20707 = G__20728;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_style_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_style_BANG___delegate.call(this, elem, kvs);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 1;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__20729) {
    var elem = cljs.core.first(arglist__20729);
    var kvs = cljs.core.rest(arglist__20729);
    return set_style_BANG___delegate(elem, kvs);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
dommy.attrs.style = function style(elem, k) {
  if (cljs.core.truth_(k)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "k", "k", -505765866, null))));
  }
  return window.getComputedStyle(dommy.template.__GT_node_like.call(null, elem))[cljs.core.name.call(null, k)];
};
dommy.attrs.set_px_BANG_ = function() {
  var set_px_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var seq__20736_20742 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__20737_20743 = null;
    var count__20738_20744 = 0;
    var i__20739_20745 = 0;
    while (true) {
      if (i__20739_20745 < count__20738_20744) {
        var vec__20740_20746 = cljs.core._nth.call(null, chunk__20737_20743, i__20739_20745);
        var k_20747 = cljs.core.nth.call(null, vec__20740_20746, 0, null);
        var v_20748 = cljs.core.nth.call(null, vec__20740_20746, 1, null);
        dommy.attrs.set_style_BANG_.call(null, elem__$1, k_20747, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_20748) + "px");
        var G__20749 = seq__20736_20742;
        var G__20750 = chunk__20737_20743;
        var G__20751 = count__20738_20744;
        var G__20752 = i__20739_20745 + 1;
        seq__20736_20742 = G__20749;
        chunk__20737_20743 = G__20750;
        count__20738_20744 = G__20751;
        i__20739_20745 = G__20752;
        continue;
      } else {
        var temp__4126__auto___20753 = cljs.core.seq.call(null, seq__20736_20742);
        if (temp__4126__auto___20753) {
          var seq__20736_20754__$1 = temp__4126__auto___20753;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20736_20754__$1)) {
            var c__3783__auto___20755 = cljs.core.chunk_first.call(null, seq__20736_20754__$1);
            var G__20756 = cljs.core.chunk_rest.call(null, seq__20736_20754__$1);
            var G__20757 = c__3783__auto___20755;
            var G__20758 = cljs.core.count.call(null, c__3783__auto___20755);
            var G__20759 = 0;
            seq__20736_20742 = G__20756;
            chunk__20737_20743 = G__20757;
            count__20738_20744 = G__20758;
            i__20739_20745 = G__20759;
            continue;
          } else {
            var vec__20741_20760 = cljs.core.first.call(null, seq__20736_20754__$1);
            var k_20761 = cljs.core.nth.call(null, vec__20741_20760, 0, null);
            var v_20762 = cljs.core.nth.call(null, vec__20741_20760, 1, null);
            dommy.attrs.set_style_BANG_.call(null, elem__$1, k_20761, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_20762) + "px");
            var G__20763 = cljs.core.next.call(null, seq__20736_20754__$1);
            var G__20764 = null;
            var G__20765 = 0;
            var G__20766 = 0;
            seq__20736_20742 = G__20763;
            chunk__20737_20743 = G__20764;
            count__20738_20744 = G__20765;
            i__20739_20745 = G__20766;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_px_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_px_BANG___delegate.call(this, elem, kvs);
  };
  set_px_BANG_.cljs$lang$maxFixedArity = 1;
  set_px_BANG_.cljs$lang$applyTo = function(arglist__20767) {
    var elem = cljs.core.first(arglist__20767);
    var kvs = cljs.core.rest(arglist__20767);
    return set_px_BANG___delegate(elem, kvs);
  };
  set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_px_BANG___delegate;
  return set_px_BANG_;
}();
dommy.attrs.px = function px(elem, k) {
  var pixels = dommy.attrs.style.call(null, dommy.template.__GT_node_like.call(null, elem), k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_ = function() {
  var set_attr_BANG_ = null;
  var set_attr_BANG___2 = function(elem, k) {
    return set_attr_BANG_.call(null, dommy.template.__GT_node_like.call(null, elem), k, "true");
  };
  var set_attr_BANG___3 = function(elem, k, v) {
    if (cljs.core.truth_(v)) {
      if (cljs.core.fn_QMARK_.call(null, v)) {
        var G__20776 = dommy.template.__GT_node_like.call(null, elem);
        G__20776[cljs.core.name.call(null, k)] = v;
        return G__20776;
      } else {
        var G__20777 = dommy.template.__GT_node_like.call(null, elem);
        G__20777.setAttribute(cljs.core.name.call(null, k), k === new cljs.core.Keyword(null, "style", "style", -496642736) ? dommy.attrs.style_str.call(null, v) : v);
        return G__20777;
      }
    } else {
      return null;
    }
  };
  var set_attr_BANG___4 = function() {
    var G__20784__delegate = function(elem, k, v, kvs) {
      if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null))))));
      }
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20778_20785 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
      var chunk__20779_20786 = null;
      var count__20780_20787 = 0;
      var i__20781_20788 = 0;
      while (true) {
        if (i__20781_20788 < count__20780_20787) {
          var vec__20782_20789 = cljs.core._nth.call(null, chunk__20779_20786, i__20781_20788);
          var k_20790__$1 = cljs.core.nth.call(null, vec__20782_20789, 0, null);
          var v_20791__$1 = cljs.core.nth.call(null, vec__20782_20789, 1, null);
          set_attr_BANG_.call(null, elem__$1, k_20790__$1, v_20791__$1);
          var G__20792 = seq__20778_20785;
          var G__20793 = chunk__20779_20786;
          var G__20794 = count__20780_20787;
          var G__20795 = i__20781_20788 + 1;
          seq__20778_20785 = G__20792;
          chunk__20779_20786 = G__20793;
          count__20780_20787 = G__20794;
          i__20781_20788 = G__20795;
          continue;
        } else {
          var temp__4126__auto___20796 = cljs.core.seq.call(null, seq__20778_20785);
          if (temp__4126__auto___20796) {
            var seq__20778_20797__$1 = temp__4126__auto___20796;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20778_20797__$1)) {
              var c__3783__auto___20798 = cljs.core.chunk_first.call(null, seq__20778_20797__$1);
              var G__20799 = cljs.core.chunk_rest.call(null, seq__20778_20797__$1);
              var G__20800 = c__3783__auto___20798;
              var G__20801 = cljs.core.count.call(null, c__3783__auto___20798);
              var G__20802 = 0;
              seq__20778_20785 = G__20799;
              chunk__20779_20786 = G__20800;
              count__20780_20787 = G__20801;
              i__20781_20788 = G__20802;
              continue;
            } else {
              var vec__20783_20803 = cljs.core.first.call(null, seq__20778_20797__$1);
              var k_20804__$1 = cljs.core.nth.call(null, vec__20783_20803, 0, null);
              var v_20805__$1 = cljs.core.nth.call(null, vec__20783_20803, 1, null);
              set_attr_BANG_.call(null, elem__$1, k_20804__$1, v_20805__$1);
              var G__20806 = cljs.core.next.call(null, seq__20778_20797__$1);
              var G__20807 = null;
              var G__20808 = 0;
              var G__20809 = 0;
              seq__20778_20785 = G__20806;
              chunk__20779_20786 = G__20807;
              count__20780_20787 = G__20808;
              i__20781_20788 = G__20809;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__20784 = function(elem, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20784__delegate.call(this, elem, k, v, kvs);
    };
    G__20784.cljs$lang$maxFixedArity = 3;
    G__20784.cljs$lang$applyTo = function(arglist__20810) {
      var elem = cljs.core.first(arglist__20810);
      arglist__20810 = cljs.core.next(arglist__20810);
      var k = cljs.core.first(arglist__20810);
      arglist__20810 = cljs.core.next(arglist__20810);
      var v = cljs.core.first(arglist__20810);
      var kvs = cljs.core.rest(arglist__20810);
      return G__20784__delegate(elem, k, v, kvs);
    };
    G__20784.cljs$core$IFn$_invoke$arity$variadic = G__20784__delegate;
    return G__20784;
  }();
  set_attr_BANG_ = function(elem, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 2:
        return set_attr_BANG___2.call(this, elem, k);
      case 3:
        return set_attr_BANG___3.call(this, elem, k, v);
      default:
        return set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic(elem, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 3;
  set_attr_BANG_.cljs$lang$applyTo = set_attr_BANG___4.cljs$lang$applyTo;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_attr_BANG___2;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_attr_BANG___3;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return set_attr_BANG_;
}();
dommy.attrs.remove_attr_BANG_ = function() {
  var remove_attr_BANG_ = null;
  var remove_attr_BANG___2 = function(elem, k) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), null, new cljs.core.Keyword(null, "classes", "classes", 2037804510), null], null), null)).call(null, k))) {
      elem__$1.className = "";
    } else {
      elem__$1.removeAttribute(cljs.core.name.call(null, k));
    }
    return elem__$1;
  };
  var remove_attr_BANG___3 = function() {
    var G__20819__delegate = function(elem, k, ks) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20815_20820 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
      var chunk__20816_20821 = null;
      var count__20817_20822 = 0;
      var i__20818_20823 = 0;
      while (true) {
        if (i__20818_20823 < count__20817_20822) {
          var k_20824__$1 = cljs.core._nth.call(null, chunk__20816_20821, i__20818_20823);
          remove_attr_BANG_.call(null, elem__$1, k_20824__$1);
          var G__20825 = seq__20815_20820;
          var G__20826 = chunk__20816_20821;
          var G__20827 = count__20817_20822;
          var G__20828 = i__20818_20823 + 1;
          seq__20815_20820 = G__20825;
          chunk__20816_20821 = G__20826;
          count__20817_20822 = G__20827;
          i__20818_20823 = G__20828;
          continue;
        } else {
          var temp__4126__auto___20829 = cljs.core.seq.call(null, seq__20815_20820);
          if (temp__4126__auto___20829) {
            var seq__20815_20830__$1 = temp__4126__auto___20829;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20815_20830__$1)) {
              var c__3783__auto___20831 = cljs.core.chunk_first.call(null, seq__20815_20830__$1);
              var G__20832 = cljs.core.chunk_rest.call(null, seq__20815_20830__$1);
              var G__20833 = c__3783__auto___20831;
              var G__20834 = cljs.core.count.call(null, c__3783__auto___20831);
              var G__20835 = 0;
              seq__20815_20820 = G__20832;
              chunk__20816_20821 = G__20833;
              count__20817_20822 = G__20834;
              i__20818_20823 = G__20835;
              continue;
            } else {
              var k_20836__$1 = cljs.core.first.call(null, seq__20815_20830__$1);
              remove_attr_BANG_.call(null, elem__$1, k_20836__$1);
              var G__20837 = cljs.core.next.call(null, seq__20815_20830__$1);
              var G__20838 = null;
              var G__20839 = 0;
              var G__20840 = 0;
              seq__20815_20820 = G__20837;
              chunk__20816_20821 = G__20838;
              count__20817_20822 = G__20839;
              i__20818_20823 = G__20840;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__20819 = function(elem, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20819__delegate.call(this, elem, k, ks);
    };
    G__20819.cljs$lang$maxFixedArity = 2;
    G__20819.cljs$lang$applyTo = function(arglist__20841) {
      var elem = cljs.core.first(arglist__20841);
      arglist__20841 = cljs.core.next(arglist__20841);
      var k = cljs.core.first(arglist__20841);
      var ks = cljs.core.rest(arglist__20841);
      return G__20819__delegate(elem, k, ks);
    };
    G__20819.cljs$core$IFn$_invoke$arity$variadic = G__20819__delegate;
    return G__20819;
  }();
  remove_attr_BANG_ = function(elem, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return remove_attr_BANG___2.call(this, elem, k);
      default:
        return remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
  remove_attr_BANG_.cljs$lang$applyTo = remove_attr_BANG___3.cljs$lang$applyTo;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_attr_BANG___2;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_attr_BANG_;
}();
dommy.attrs.attr = function attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return dommy.template.__GT_node_like.call(null, elem).getAttribute(cljs.core.name.call(null, k));
  } else {
    return null;
  }
};
dommy.attrs.toggle_attr_BANG_ = function() {
  var toggle_attr_BANG_ = null;
  var toggle_attr_BANG___2 = function(elem, k) {
    return toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.attrs.attr.call(null, elem, k)));
  };
  var toggle_attr_BANG___3 = function(elem, k, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      return dommy.attrs.set_attr_BANG_.call(null, elem__$1, k);
    } else {
      return dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k);
    }
  };
  toggle_attr_BANG_ = function(elem, k, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_attr_BANG___2.call(this, elem, k);
      case 3:
        return toggle_attr_BANG___3.call(this, elem, k, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_attr_BANG___2;
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_attr_BANG___3;
  return toggle_attr_BANG_;
}();
dommy.attrs.hidden_QMARK_ = function hidden_QMARK_(elem) {
  return "none" === dommy.template.__GT_node_like.call(null, elem).style.display;
};
dommy.attrs.toggle_BANG_ = function() {
  var toggle_BANG_ = null;
  var toggle_BANG___1 = function(elem) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    toggle_BANG_.call(null, elem__$1, dommy.attrs.hidden_QMARK_.call(null, elem__$1));
    return elem__$1;
  };
  var toggle_BANG___2 = function(elem, show_QMARK_) {
    var G__20843 = dommy.template.__GT_node_like.call(null, elem);
    G__20843.style.display = show_QMARK_ ? "" : "none";
    return G__20843;
  };
  toggle_BANG_ = function(elem, show_QMARK_) {
    switch(arguments.length) {
      case 1:
        return toggle_BANG___1.call(this, elem);
      case 2:
        return toggle_BANG___2.call(this, elem, show_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = toggle_BANG___1;
  toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_BANG___2;
  return toggle_BANG_;
}();
dommy.attrs.hide_BANG_ = function hide_BANG_(elem) {
  var G__20845 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__20845, false);
  return G__20845;
};
dommy.attrs.show_BANG_ = function show_BANG_(elem) {
  var G__20847 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__20847, true);
  return G__20847;
};
dommy.attrs.bounding_client_rect = function bounding_client_rect(elem) {
  return cljs.core.js__GT_clj.call(null, function() {
    var G__20849 = dommy.template.__GT_node_like.call(null, elem).getBoundingClientRect();
    G__20849["constructor"] = Object;
    return G__20849;
  }(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
};
dommy.attrs.scroll_into_view = function scroll_into_view(elem, align_with_top_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var top = (new cljs.core.Keyword(null, "top", "top", -1856271961)).cljs$core$IFn$_invoke$arity$1(dommy.attrs.bounding_client_rect.call(null, elem__$1));
  if (window.innerHeight < top + elem__$1.offsetHeight) {
    return elem__$1.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
goog.provide("dommy.template");
goog.require("cljs.core");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.template._PLUS_svg_ns_PLUS_ = "http://www.w3.org/2000/svg";
dommy.template._PLUS_svg_tags_PLUS_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["svg", null, "line", null], null), null);
dommy.template.PElement = function() {
  var obj20851 = {};
  return obj20851;
}();
dommy.template._elem = function _elem(this$) {
  if (function() {
    var and__3015__auto__ = this$;
    if (and__3015__auto__) {
      return this$.dommy$template$PElement$_elem$arity$1;
    } else {
      return and__3015__auto__;
    }
  }()) {
    return this$.dommy$template$PElement$_elem$arity$1(this$);
  } else {
    var x__3654__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3027__auto__ = dommy.template._elem[goog.typeOf(x__3654__auto__)];
      if (or__3027__auto__) {
        return or__3027__auto__;
      } else {
        var or__3027__auto____$1 = dommy.template._elem["_"];
        if (or__3027__auto____$1) {
          return or__3027__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PElement.-elem", this$);
        }
      }
    }().call(null, this$);
  }
};
dommy.template.next_css_index = function next_css_index(s, start_idx) {
  var id_idx = s.indexOf("#", start_idx);
  var class_idx = s.indexOf(".", start_idx);
  var idx = Math.min(id_idx, class_idx);
  if (idx < 0) {
    return Math.max(id_idx, class_idx);
  } else {
    return idx;
  }
};
dommy.template.base_element = function base_element(node_key) {
  var node_str = cljs.core.name.call(null, node_key);
  var base_idx = dommy.template.next_css_index.call(null, node_str, 0);
  var tag = base_idx > 0 ? node_str.substring(0, base_idx) : base_idx === 0 ? "div" : new cljs.core.Keyword(null, "else", "else", -1508377146) ? node_str : null;
  var node = cljs.core.truth_(dommy.template._PLUS_svg_tags_PLUS_.call(null, tag)) ? document.createElementNS(dommy.template._PLUS_svg_ns_PLUS_, tag) : document.createElement(tag);
  if (base_idx >= 0) {
    var str_20854 = node_str.substring(base_idx);
    while (true) {
      var next_idx_20855 = dommy.template.next_css_index.call(null, str_20854, 1);
      var frag_20856 = next_idx_20855 >= 0 ? str_20854.substring(0, next_idx_20855) : str_20854;
      var G__20853_20857 = frag_20856.charAt(0);
      switch(G__20853_20857) {
        case ".":
          dommy.attrs.add_class_BANG_.call(null, node, frag_20856.substring(1));
          break;
        case "#":
          node.setAttribute("id", frag_20856.substring(1));
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(frag_20856.charAt(0)));;
      }
      if (next_idx_20855 >= 0) {
        var G__20859 = str_20854.substring(next_idx_20855);
        str_20854 = G__20859;
        continue;
      } else {
      }
      break;
    }
  } else {
  }
  return node;
};
dommy.template.throw_unable_to_make_node = function throw_unable_to_make_node(node_data) {
  throw "Don't know how to make node from: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, node_data));
};
dommy.template.__GT_document_fragment = function() {
  var __GT_document_fragment = null;
  var __GT_document_fragment__1 = function(data) {
    return __GT_document_fragment.call(null, document.createDocumentFragment(), data);
  };
  var __GT_document_fragment__2 = function(result_frag, data) {
    if (function() {
      var G__20865 = data;
      if (G__20865) {
        var bit__3677__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3027__auto__ = bit__3677__auto__;
          if (cljs.core.truth_(or__3027__auto__)) {
            return or__3027__auto__;
          } else {
            return G__20865.dommy$template$PElement$;
          }
        }())) {
          return true;
        } else {
          if (!G__20865.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20865);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20865);
      }
    }()) {
      result_frag.appendChild(dommy.template._elem.call(null, data));
      return result_frag;
    } else {
      if (cljs.core.seq_QMARK_.call(null, data)) {
        var seq__20866_20870 = cljs.core.seq.call(null, data);
        var chunk__20867_20871 = null;
        var count__20868_20872 = 0;
        var i__20869_20873 = 0;
        while (true) {
          if (i__20869_20873 < count__20868_20872) {
            var child_20874 = cljs.core._nth.call(null, chunk__20867_20871, i__20869_20873);
            __GT_document_fragment.call(null, result_frag, child_20874);
            var G__20875 = seq__20866_20870;
            var G__20876 = chunk__20867_20871;
            var G__20877 = count__20868_20872;
            var G__20878 = i__20869_20873 + 1;
            seq__20866_20870 = G__20875;
            chunk__20867_20871 = G__20876;
            count__20868_20872 = G__20877;
            i__20869_20873 = G__20878;
            continue;
          } else {
            var temp__4126__auto___20879 = cljs.core.seq.call(null, seq__20866_20870);
            if (temp__4126__auto___20879) {
              var seq__20866_20880__$1 = temp__4126__auto___20879;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20866_20880__$1)) {
                var c__3783__auto___20881 = cljs.core.chunk_first.call(null, seq__20866_20880__$1);
                var G__20882 = cljs.core.chunk_rest.call(null, seq__20866_20880__$1);
                var G__20883 = c__3783__auto___20881;
                var G__20884 = cljs.core.count.call(null, c__3783__auto___20881);
                var G__20885 = 0;
                seq__20866_20870 = G__20882;
                chunk__20867_20871 = G__20883;
                count__20868_20872 = G__20884;
                i__20869_20873 = G__20885;
                continue;
              } else {
                var child_20886 = cljs.core.first.call(null, seq__20866_20880__$1);
                __GT_document_fragment.call(null, result_frag, child_20886);
                var G__20887 = cljs.core.next.call(null, seq__20866_20880__$1);
                var G__20888 = null;
                var G__20889 = 0;
                var G__20890 = 0;
                seq__20866_20870 = G__20887;
                chunk__20867_20871 = G__20888;
                count__20868_20872 = G__20889;
                i__20869_20873 = G__20890;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return result_frag;
      } else {
        if (data == null) {
          return result_frag;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return dommy.template.throw_unable_to_make_node.call(null, data);
          } else {
            return null;
          }
        }
      }
    }
  };
  __GT_document_fragment = function(result_frag, data) {
    switch(arguments.length) {
      case 1:
        return __GT_document_fragment__1.call(this, result_frag);
      case 2:
        return __GT_document_fragment__2.call(this, result_frag, data);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$1 = __GT_document_fragment__1;
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$2 = __GT_document_fragment__2;
  return __GT_document_fragment;
}();
dommy.template.__GT_node_like = function __GT_node_like(data) {
  if (function() {
    var G__20892 = data;
    if (G__20892) {
      var bit__3677__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3027__auto__ = bit__3677__auto__;
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          return G__20892.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__20892.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20892);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20892);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.__GT_document_fragment.call(null, data);
  }
};
dommy.template.compound_element = function compound_element(p__20893) {
  var vec__20913 = p__20893;
  var tag_name = cljs.core.nth.call(null, vec__20913, 0, null);
  var maybe_attrs = cljs.core.nth.call(null, vec__20913, 1, null);
  var children = cljs.core.nthnext.call(null, vec__20913, 2);
  var n = dommy.template.base_element.call(null, tag_name);
  var attrs = cljs.core.map_QMARK_.call(null, maybe_attrs) && !function() {
    var G__20915 = maybe_attrs;
    if (G__20915) {
      var bit__3677__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3027__auto__ = bit__3677__auto__;
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          return G__20915.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__20915.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20915);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20915);
    }
  }() ? maybe_attrs : null;
  var children__$1 = cljs.core.truth_(attrs) ? children : cljs.core.cons.call(null, maybe_attrs, children);
  var seq__20916_20932 = cljs.core.seq.call(null, attrs);
  var chunk__20917_20933 = null;
  var count__20918_20934 = 0;
  var i__20919_20935 = 0;
  while (true) {
    if (i__20919_20935 < count__20918_20934) {
      var vec__20920_20936 = cljs.core._nth.call(null, chunk__20917_20933, i__20919_20935);
      var k_20937 = cljs.core.nth.call(null, vec__20920_20936, 0, null);
      var v_20938 = cljs.core.nth.call(null, vec__20920_20936, 1, null);
      var G__20921_20939 = k_20937 instanceof cljs.core.Keyword ? k_20937.fqn : null;
      switch(G__20921_20939) {
        case "classes":
          var seq__20922_20941 = cljs.core.seq.call(null, v_20938);
          var chunk__20923_20942 = null;
          var count__20924_20943 = 0;
          var i__20925_20944 = 0;
          while (true) {
            if (i__20925_20944 < count__20924_20943) {
              var c_20945 = cljs.core._nth.call(null, chunk__20923_20942, i__20925_20944);
              dommy.attrs.add_class_BANG_.call(null, n, c_20945);
              var G__20946 = seq__20922_20941;
              var G__20947 = chunk__20923_20942;
              var G__20948 = count__20924_20943;
              var G__20949 = i__20925_20944 + 1;
              seq__20922_20941 = G__20946;
              chunk__20923_20942 = G__20947;
              count__20924_20943 = G__20948;
              i__20925_20944 = G__20949;
              continue;
            } else {
              var temp__4126__auto___20950 = cljs.core.seq.call(null, seq__20922_20941);
              if (temp__4126__auto___20950) {
                var seq__20922_20951__$1 = temp__4126__auto___20950;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__20922_20951__$1)) {
                  var c__3783__auto___20952 = cljs.core.chunk_first.call(null, seq__20922_20951__$1);
                  var G__20953 = cljs.core.chunk_rest.call(null, seq__20922_20951__$1);
                  var G__20954 = c__3783__auto___20952;
                  var G__20955 = cljs.core.count.call(null, c__3783__auto___20952);
                  var G__20956 = 0;
                  seq__20922_20941 = G__20953;
                  chunk__20923_20942 = G__20954;
                  count__20924_20943 = G__20955;
                  i__20925_20944 = G__20956;
                  continue;
                } else {
                  var c_20957 = cljs.core.first.call(null, seq__20922_20951__$1);
                  dommy.attrs.add_class_BANG_.call(null, n, c_20957);
                  var G__20958 = cljs.core.next.call(null, seq__20922_20951__$1);
                  var G__20959 = null;
                  var G__20960 = 0;
                  var G__20961 = 0;
                  seq__20922_20941 = G__20958;
                  chunk__20923_20942 = G__20959;
                  count__20924_20943 = G__20960;
                  i__20925_20944 = G__20961;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          break;
        case "class":
          dommy.attrs.add_class_BANG_.call(null, n, v_20938);
          break;
        default:
          dommy.attrs.set_attr_BANG_.call(null, n, k_20937, v_20938);
      }
      var G__20962 = seq__20916_20932;
      var G__20963 = chunk__20917_20933;
      var G__20964 = count__20918_20934;
      var G__20965 = i__20919_20935 + 1;
      seq__20916_20932 = G__20962;
      chunk__20917_20933 = G__20963;
      count__20918_20934 = G__20964;
      i__20919_20935 = G__20965;
      continue;
    } else {
      var temp__4126__auto___20966 = cljs.core.seq.call(null, seq__20916_20932);
      if (temp__4126__auto___20966) {
        var seq__20916_20967__$1 = temp__4126__auto___20966;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__20916_20967__$1)) {
          var c__3783__auto___20968 = cljs.core.chunk_first.call(null, seq__20916_20967__$1);
          var G__20969 = cljs.core.chunk_rest.call(null, seq__20916_20967__$1);
          var G__20970 = c__3783__auto___20968;
          var G__20971 = cljs.core.count.call(null, c__3783__auto___20968);
          var G__20972 = 0;
          seq__20916_20932 = G__20969;
          chunk__20917_20933 = G__20970;
          count__20918_20934 = G__20971;
          i__20919_20935 = G__20972;
          continue;
        } else {
          var vec__20926_20973 = cljs.core.first.call(null, seq__20916_20967__$1);
          var k_20974 = cljs.core.nth.call(null, vec__20926_20973, 0, null);
          var v_20975 = cljs.core.nth.call(null, vec__20926_20973, 1, null);
          var G__20927_20976 = k_20974 instanceof cljs.core.Keyword ? k_20974.fqn : null;
          switch(G__20927_20976) {
            case "classes":
              var seq__20928_20978 = cljs.core.seq.call(null, v_20975);
              var chunk__20929_20979 = null;
              var count__20930_20980 = 0;
              var i__20931_20981 = 0;
              while (true) {
                if (i__20931_20981 < count__20930_20980) {
                  var c_20982 = cljs.core._nth.call(null, chunk__20929_20979, i__20931_20981);
                  dommy.attrs.add_class_BANG_.call(null, n, c_20982);
                  var G__20983 = seq__20928_20978;
                  var G__20984 = chunk__20929_20979;
                  var G__20985 = count__20930_20980;
                  var G__20986 = i__20931_20981 + 1;
                  seq__20928_20978 = G__20983;
                  chunk__20929_20979 = G__20984;
                  count__20930_20980 = G__20985;
                  i__20931_20981 = G__20986;
                  continue;
                } else {
                  var temp__4126__auto___20987__$1 = cljs.core.seq.call(null, seq__20928_20978);
                  if (temp__4126__auto___20987__$1) {
                    var seq__20928_20988__$1 = temp__4126__auto___20987__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__20928_20988__$1)) {
                      var c__3783__auto___20989 = cljs.core.chunk_first.call(null, seq__20928_20988__$1);
                      var G__20990 = cljs.core.chunk_rest.call(null, seq__20928_20988__$1);
                      var G__20991 = c__3783__auto___20989;
                      var G__20992 = cljs.core.count.call(null, c__3783__auto___20989);
                      var G__20993 = 0;
                      seq__20928_20978 = G__20990;
                      chunk__20929_20979 = G__20991;
                      count__20930_20980 = G__20992;
                      i__20931_20981 = G__20993;
                      continue;
                    } else {
                      var c_20994 = cljs.core.first.call(null, seq__20928_20988__$1);
                      dommy.attrs.add_class_BANG_.call(null, n, c_20994);
                      var G__20995 = cljs.core.next.call(null, seq__20928_20988__$1);
                      var G__20996 = null;
                      var G__20997 = 0;
                      var G__20998 = 0;
                      seq__20928_20978 = G__20995;
                      chunk__20929_20979 = G__20996;
                      count__20930_20980 = G__20997;
                      i__20931_20981 = G__20998;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              break;
            case "class":
              dommy.attrs.add_class_BANG_.call(null, n, v_20975);
              break;
            default:
              dommy.attrs.set_attr_BANG_.call(null, n, k_20974, v_20975);
          }
          var G__20999 = cljs.core.next.call(null, seq__20916_20967__$1);
          var G__21000 = null;
          var G__21001 = 0;
          var G__21002 = 0;
          seq__20916_20932 = G__20999;
          chunk__20917_20933 = G__21000;
          count__20918_20934 = G__21001;
          i__20919_20935 = G__21002;
          continue;
        }
      } else {
      }
    }
    break;
  }
  n.appendChild(dommy.template.__GT_node_like.call(null, children__$1));
  return n;
};
dommy.template.PElement["string"] = true;
dommy.template._elem["string"] = function(this$) {
  if (this$ instanceof cljs.core.Keyword) {
    return dommy.template.base_element.call(null, this$);
  } else {
    return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
  }
};
dommy.template.PElement["number"] = true;
dommy.template._elem["number"] = function(this$) {
  return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
};
cljs.core.PersistentVector.prototype.dommy$template$PElement$ = true;
cljs.core.PersistentVector.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return dommy.template.compound_element.call(null, this$__$1);
};
SVGElement.prototype.dommy$template$PElement$ = true;
SVGElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Document.prototype.dommy$template$PElement$ = true;
Document.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Text.prototype.dommy$template$PElement$ = true;
Text.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
DocumentFragment.prototype.dommy$template$PElement$ = true;
DocumentFragment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
HTMLElement.prototype.dommy$template$PElement$ = true;
HTMLElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
try {
  Window.prototype.dommy$template$PElement$ = true;
  Window.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} catch (e21003) {
  if (e21003 instanceof ReferenceError) {
    var __21004 = e21003;
    console.log("PElement: js/Window not defined by browser, skipping it... (running on phantomjs?)");
  } else {
    if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
      throw e21003;
    } else {
    }
  }
}
dommy.template.node = function node(data) {
  if (function() {
    var G__21006 = data;
    if (G__21006) {
      var bit__3677__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3027__auto__ = bit__3677__auto__;
        if (cljs.core.truth_(or__3027__auto__)) {
          return or__3027__auto__;
        } else {
          return G__21006.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__21006.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__21006);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__21006);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.throw_unable_to_make_node.call(null, data);
  }
};
dommy.template.html__GT_nodes = function html__GT_nodes(html) {
  var parent = document.createElement("div");
  parent.insertAdjacentHTML("beforeend", html);
  return cljs.core.seq.call(null, Array.prototype.slice.call(parent.childNodes));
};
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dissoc_in(m, p__20563) {
  var vec__20565 = p__20563;
  var k = cljs.core.nth.call(null, vec__20565, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__20565, 1);
  if (cljs.core.truth_(m)) {
    var temp__4124__auto__ = function() {
      var and__3015__auto__ = ks;
      if (and__3015__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3015__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var res = temp__4124__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function __GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("dommy.template");
goog.require("dommy.template");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("dommy.utils");
goog.require("dommy.utils");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.core.has_class_QMARK_ = dommy.attrs.has_class_QMARK_;
dommy.core.add_class_BANG_ = dommy.attrs.add_class_BANG_;
dommy.core.remove_class_BANG_ = dommy.attrs.remove_class_BANG_;
dommy.core.toggle_class_BANG_ = dommy.attrs.toggle_class_BANG_;
dommy.core.set_attr_BANG_ = dommy.attrs.set_attr_BANG_;
dommy.core.set_style_BANG_ = dommy.attrs.set_style_BANG_;
dommy.core.set_px_BANG_ = dommy.attrs.set_px_BANG_;
dommy.core.px = dommy.attrs.px;
dommy.core.style_str = dommy.attrs.style_str;
dommy.core.style = dommy.attrs.style;
dommy.core.remove_attr_BANG_ = dommy.attrs.remove_attr_BANG_;
dommy.core.toggle_attr_BANG_ = dommy.attrs.toggle_attr_BANG_;
dommy.core.attr = dommy.attrs.attr;
dommy.core.hidden_QMARK_ = dommy.attrs.hidden_QMARK_;
dommy.core.toggle_BANG_ = dommy.attrs.toggle_BANG_;
dommy.core.hide_BANG_ = dommy.attrs.hide_BANG_;
dommy.core.show_BANG_ = dommy.attrs.show_BANG_;
dommy.core.bounding_client_rect = dommy.attrs.bounding_client_rect;
dommy.core.scroll_into_view = dommy.attrs.scroll_into_view;
dommy.core.dissoc_in = dommy.utils.dissoc_in;
dommy.core.__GT_Array = dommy.utils.__GT_Array;
dommy.core.set_html_BANG_ = function set_html_BANG_(elem, html) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.innerHTML = html;
  return elem__$1;
};
dommy.core.html = function html(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML;
};
dommy.core.set_text_BANG_ = function set_text_BANG_(elem, text) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var prop = cljs.core.truth_(elem__$1.textContent) ? "textContent" : "innerText";
  elem__$1[prop] = text;
  return elem__$1;
};
dommy.core.text = function text(elem) {
  var or__3027__auto__ = elem.textContent;
  if (cljs.core.truth_(or__3027__auto__)) {
    return or__3027__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.value = function value(elem) {
  return dommy.template.__GT_node_like.call(null, elem).value;
};
dommy.core.set_value_BANG_ = function set_value_BANG_(elem, value) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.value = value;
  return elem__$1;
};
dommy.core.append_BANG_ = function() {
  var append_BANG_ = null;
  var append_BANG___2 = function(parent, child) {
    var G__20159 = dommy.template.__GT_node_like.call(null, parent);
    G__20159.appendChild(dommy.template.__GT_node_like.call(null, child));
    return G__20159;
  };
  var append_BANG___3 = function() {
    var G__20164__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__20160_20165 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__20161_20166 = null;
      var count__20162_20167 = 0;
      var i__20163_20168 = 0;
      while (true) {
        if (i__20163_20168 < count__20162_20167) {
          var c_20169 = cljs.core._nth.call(null, chunk__20161_20166, i__20163_20168);
          append_BANG_.call(null, parent__$1, c_20169);
          var G__20170 = seq__20160_20165;
          var G__20171 = chunk__20161_20166;
          var G__20172 = count__20162_20167;
          var G__20173 = i__20163_20168 + 1;
          seq__20160_20165 = G__20170;
          chunk__20161_20166 = G__20171;
          count__20162_20167 = G__20172;
          i__20163_20168 = G__20173;
          continue;
        } else {
          var temp__4126__auto___20174 = cljs.core.seq.call(null, seq__20160_20165);
          if (temp__4126__auto___20174) {
            var seq__20160_20175__$1 = temp__4126__auto___20174;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20160_20175__$1)) {
              var c__3783__auto___20176 = cljs.core.chunk_first.call(null, seq__20160_20175__$1);
              var G__20177 = cljs.core.chunk_rest.call(null, seq__20160_20175__$1);
              var G__20178 = c__3783__auto___20176;
              var G__20179 = cljs.core.count.call(null, c__3783__auto___20176);
              var G__20180 = 0;
              seq__20160_20165 = G__20177;
              chunk__20161_20166 = G__20178;
              count__20162_20167 = G__20179;
              i__20163_20168 = G__20180;
              continue;
            } else {
              var c_20181 = cljs.core.first.call(null, seq__20160_20175__$1);
              append_BANG_.call(null, parent__$1, c_20181);
              var G__20182 = cljs.core.next.call(null, seq__20160_20175__$1);
              var G__20183 = null;
              var G__20184 = 0;
              var G__20185 = 0;
              seq__20160_20165 = G__20182;
              chunk__20161_20166 = G__20183;
              count__20162_20167 = G__20184;
              i__20163_20168 = G__20185;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__20164 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20164__delegate.call(this, parent, child, more_children);
    };
    G__20164.cljs$lang$maxFixedArity = 2;
    G__20164.cljs$lang$applyTo = function(arglist__20186) {
      var parent = cljs.core.first(arglist__20186);
      arglist__20186 = cljs.core.next(arglist__20186);
      var child = cljs.core.first(arglist__20186);
      var more_children = cljs.core.rest(arglist__20186);
      return G__20164__delegate(parent, child, more_children);
    };
    G__20164.cljs$core$IFn$_invoke$arity$variadic = G__20164__delegate;
    return G__20164;
  }();
  append_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return append_BANG___2.call(this, parent, child);
      default:
        return append_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  append_BANG_.cljs$lang$maxFixedArity = 2;
  append_BANG_.cljs$lang$applyTo = append_BANG___3.cljs$lang$applyTo;
  append_BANG_.cljs$core$IFn$_invoke$arity$2 = append_BANG___2;
  append_BANG_.cljs$core$IFn$_invoke$arity$variadic = append_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return append_BANG_;
}();
dommy.core.prepend_BANG_ = function() {
  var prepend_BANG_ = null;
  var prepend_BANG___2 = function(parent, child) {
    var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
    return parent__$1.insertBefore(dommy.template.__GT_node_like.call(null, child), parent__$1.firstChild);
  };
  var prepend_BANG___3 = function() {
    var G__20195__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__20191_20196 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__20192_20197 = null;
      var count__20193_20198 = 0;
      var i__20194_20199 = 0;
      while (true) {
        if (i__20194_20199 < count__20193_20198) {
          var c_20200 = cljs.core._nth.call(null, chunk__20192_20197, i__20194_20199);
          prepend_BANG_.call(null, parent__$1, c_20200);
          var G__20201 = seq__20191_20196;
          var G__20202 = chunk__20192_20197;
          var G__20203 = count__20193_20198;
          var G__20204 = i__20194_20199 + 1;
          seq__20191_20196 = G__20201;
          chunk__20192_20197 = G__20202;
          count__20193_20198 = G__20203;
          i__20194_20199 = G__20204;
          continue;
        } else {
          var temp__4126__auto___20205 = cljs.core.seq.call(null, seq__20191_20196);
          if (temp__4126__auto___20205) {
            var seq__20191_20206__$1 = temp__4126__auto___20205;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20191_20206__$1)) {
              var c__3783__auto___20207 = cljs.core.chunk_first.call(null, seq__20191_20206__$1);
              var G__20208 = cljs.core.chunk_rest.call(null, seq__20191_20206__$1);
              var G__20209 = c__3783__auto___20207;
              var G__20210 = cljs.core.count.call(null, c__3783__auto___20207);
              var G__20211 = 0;
              seq__20191_20196 = G__20208;
              chunk__20192_20197 = G__20209;
              count__20193_20198 = G__20210;
              i__20194_20199 = G__20211;
              continue;
            } else {
              var c_20212 = cljs.core.first.call(null, seq__20191_20206__$1);
              prepend_BANG_.call(null, parent__$1, c_20212);
              var G__20213 = cljs.core.next.call(null, seq__20191_20206__$1);
              var G__20214 = null;
              var G__20215 = 0;
              var G__20216 = 0;
              seq__20191_20196 = G__20213;
              chunk__20192_20197 = G__20214;
              count__20193_20198 = G__20215;
              i__20194_20199 = G__20216;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__20195 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20195__delegate.call(this, parent, child, more_children);
    };
    G__20195.cljs$lang$maxFixedArity = 2;
    G__20195.cljs$lang$applyTo = function(arglist__20217) {
      var parent = cljs.core.first(arglist__20217);
      arglist__20217 = cljs.core.next(arglist__20217);
      var child = cljs.core.first(arglist__20217);
      var more_children = cljs.core.rest(arglist__20217);
      return G__20195__delegate(parent, child, more_children);
    };
    G__20195.cljs$core$IFn$_invoke$arity$variadic = G__20195__delegate;
    return G__20195;
  }();
  prepend_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return prepend_BANG___2.call(this, parent, child);
      default:
        return prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prepend_BANG_.cljs$lang$maxFixedArity = 2;
  prepend_BANG_.cljs$lang$applyTo = prepend_BANG___3.cljs$lang$applyTo;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = prepend_BANG___2;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return prepend_BANG_;
}();
dommy.core.insert_before_BANG_ = function insert_before_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  if (cljs.core.truth_(other__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", -1418255893, null), new cljs.core.Symbol(null, "other", "other", -1658642225, null)))));
  }
  other__$1.parentNode.insertBefore(actual_node, other__$1);
  return actual_node;
};
dommy.core.insert_after_BANG_ = function insert_after_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  var parent = other__$1.parentNode;
  var temp__4124__auto___20218 = other__$1.nextSibling;
  if (cljs.core.truth_(temp__4124__auto___20218)) {
    var next_20219 = temp__4124__auto___20218;
    parent.insertBefore(actual_node, next_20219);
  } else {
    parent.appendChild(actual_node);
  }
  return actual_node;
};
dommy.core.replace_BANG_ = function replace_BANG_(elem, new$) {
  var new$__$1 = dommy.template.__GT_node_like.call(null, new$);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_(elem__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", -1418255893, null), new cljs.core.Symbol(null, "elem", "elem", -2035804713, null)))));
  }
  elem__$1.parentNode.replaceChild(new$__$1, elem__$1);
  return new$__$1;
};
dommy.core.replace_contents_BANG_ = function replace_contents_BANG_(parent, node_like) {
  var G__20221 = dommy.template.__GT_node_like.call(null, parent);
  G__20221.innerHTML = "";
  dommy.core.append_BANG_.call(null, G__20221, node_like);
  return G__20221;
};
dommy.core.remove_BANG_ = function remove_BANG_(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var G__20223 = elem__$1.parentNode;
  G__20223.removeChild(elem__$1);
  return G__20223;
};
dommy.core.clear_BANG_ = function clear_BANG_(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML = "";
};
dommy.core.selector = function selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.selector_map = function selector_map(template, key_selectors_map) {
  var container = dommy.template.__GT_node_like.call(null, template);
  if (!cljs.core.contains_QMARK_.call(null, key_selectors_map, new cljs.core.Keyword(null, "container", "container", -1736937707))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "key-selectors-map", "key-selectors-map", 1212911103, null), new cljs.core.Keyword(null, "container", "container", -1736937707))))));
  }
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "container", "container", -1736937707), container], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(container) {
    return function(p__20229) {
      var vec__20230 = p__20229;
      var k = cljs.core.nth.call(null, vec__20230, 0, null);
      var v = cljs.core.nth.call(null, vec__20230, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.truth_((new cljs.core.Keyword(null, "live", "live", -1610148039)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v))) ? function() {
        if (typeof dommy.core.t20231 !== "undefined") {
        } else {
          dommy.core.t20231 = function(v, k, vec__20230, p__20229, container, key_selectors_map, template, selector_map, meta20232) {
            this.v = v;
            this.k = k;
            this.vec__20230 = vec__20230;
            this.p__20229 = p__20229;
            this.container = container;
            this.key_selectors_map = key_selectors_map;
            this.template = template;
            this.selector_map = selector_map;
            this.meta20232 = meta20232;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 425984;
          };
          dommy.core.t20231.cljs$lang$type = true;
          dommy.core.t20231.cljs$lang$ctorStr = "dommy.core/t20231";
          dommy.core.t20231.cljs$lang$ctorPrWriter = function(vec__20230, k, v, container) {
            return function(this__3594__auto__, writer__3595__auto__, opt__3596__auto__) {
              return cljs.core._write.call(null, writer__3595__auto__, "dommy.core/t20231");
            };
          }(vec__20230, k, v, container);
          dommy.core.t20231.prototype.cljs$core$IDeref$_deref$arity$1 = function(vec__20230, k, v, container) {
            return function(this$) {
              var self__ = this;
              var this$__$1 = this;
              return dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, self__.container).querySelectorAll(dommy.core.selector.call(null, self__.v)));
            };
          }(vec__20230, k, v, container);
          dommy.core.t20231.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__20230, k, v, container) {
            return function(_20233) {
              var self__ = this;
              var _20233__$1 = this;
              return self__.meta20232;
            };
          }(vec__20230, k, v, container);
          dommy.core.t20231.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__20230, k, v, container) {
            return function(_20233, meta20232__$1) {
              var self__ = this;
              var _20233__$1 = this;
              return new dommy.core.t20231(self__.v, self__.k, self__.vec__20230, self__.p__20229, self__.container, self__.key_selectors_map, self__.template, self__.selector_map, meta20232__$1);
            };
          }(vec__20230, k, v, container);
          dommy.core.__GT_t20231 = function(vec__20230, k, v, container) {
            return function __GT_t20231(v__$1, k__$1, vec__20230__$1, p__20229__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta20232) {
              return new dommy.core.t20231(v__$1, k__$1, vec__20230__$1, p__20229__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta20232);
            };
          }(vec__20230, k, v, container);
        }
        return new dommy.core.t20231(v, k, vec__20230, p__20229, container, key_selectors_map, template, selector_map, null);
      }() : dommy.template.__GT_node_like.call(null, container).querySelector(dommy.core.selector.call(null, v))], null);
    };
  }(container), key_selectors_map)));
};
dommy.core.ancestor_nodes = function ancestor_nodes(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, function(p1__20234_SHARP_) {
    return p1__20234_SHARP_.parentNode;
  }, dommy.template.__GT_node_like.call(null, elem)));
};
dommy.core.matches_pred = function() {
  var matches_pred = null;
  var matches_pred__1 = function(selector) {
    return matches_pred.call(null, document, selector);
  };
  var matches_pred__2 = function(base, selector) {
    var matches = dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, dommy.template.__GT_node_like.call(null, base)).querySelectorAll(dommy.core.selector.call(null, selector)));
    return function(matches) {
      return function(elem) {
        return matches.indexOf(elem) >= 0;
      };
    }(matches);
  };
  matches_pred = function(base, selector) {
    switch(arguments.length) {
      case 1:
        return matches_pred__1.call(this, base);
      case 2:
        return matches_pred__2.call(this, base, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  matches_pred.cljs$core$IFn$_invoke$arity$1 = matches_pred__1;
  matches_pred.cljs$core$IFn$_invoke$arity$2 = matches_pred__2;
  return matches_pred;
}();
dommy.core.closest = function() {
  var closest = null;
  var closest__2 = function(elem, selector) {
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, selector), dommy.core.ancestor_nodes.call(null, dommy.template.__GT_node_like.call(null, elem))));
  };
  var closest__3 = function(base, elem, selector) {
    var base__$1 = dommy.template.__GT_node_like.call(null, base);
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base__$1, selector), cljs.core.take_while.call(null, function(base__$1, elem__$1) {
      return function(p1__20235_SHARP_) {
        return!(p1__20235_SHARP_ === base__$1);
      };
    }(base__$1, elem__$1), dommy.core.ancestor_nodes.call(null, elem__$1))));
  };
  closest = function(base, elem, selector) {
    switch(arguments.length) {
      case 2:
        return closest__2.call(this, base, elem);
      case 3:
        return closest__3.call(this, base, elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  closest.cljs$core$IFn$_invoke$arity$2 = closest__2;
  closest.cljs$core$IFn$_invoke$arity$3 = closest__3;
  return closest;
}();
dommy.core.descendant_QMARK_ = function descendant_QMARK_(descendant, ancestor) {
  var descendant__$1 = dommy.template.__GT_node_like.call(null, descendant);
  var ancestor__$1 = dommy.template.__GT_node_like.call(null, ancestor);
  if (cljs.core.truth_(ancestor__$1.contains)) {
    return ancestor__$1.contains(descendant__$1);
  } else {
    if (cljs.core.truth_(ancestor__$1.compareDocumentPosition)) {
      return(ancestor__$1.compareDocumentPosition(descendant__$1) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__20236) {
  var vec__20237 = p__20236;
  var special_mouse_event = cljs.core.nth.call(null, vec__20237, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__20237, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(vec__20237, special_mouse_event, real_mouse_event) {
    return function(f) {
      return function(vec__20237, special_mouse_event, real_mouse_event) {
        return function(event) {
          var related_target = event.relatedTarget;
          var listener_target = function() {
            var or__3027__auto__ = event.selectedTarget;
            if (cljs.core.truth_(or__3027__auto__)) {
              return or__3027__auto__;
            } else {
              return event.currentTarget;
            }
          }();
          if (cljs.core.truth_(function() {
            var and__3015__auto__ = related_target;
            if (cljs.core.truth_(and__3015__auto__)) {
              return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
            } else {
              return and__3015__auto__;
            }
          }())) {
            return null;
          } else {
            return f.call(null, event);
          }
        };
      }(vec__20237, special_mouse_event, real_mouse_event);
    };
  }(vec__20237, special_mouse_event, real_mouse_event)], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560), new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580), new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890)], null)));
dommy.core.live_listener = function live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, dommy.template.__GT_node_like.call(null, elem), event.target, selector);
    if (cljs.core.truth_(function() {
      var and__3015__auto__ = selected_target;
      if (cljs.core.truth_(and__3015__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", -1529784218)));
      } else {
        return and__3015__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function event_listeners(elem) {
  var or__3027__auto__ = dommy.template.__GT_node_like.call(null, elem).dommyEventListeners;
  if (cljs.core.truth_(or__3027__auto__)) {
    return or__3027__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function() {
  var update_event_listeners_BANG___delegate = function(elem, f, args) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
  };
  var update_event_listeners_BANG_ = function(elem, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return update_event_listeners_BANG___delegate.call(this, elem, f, args);
  };
  update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
  update_event_listeners_BANG_.cljs$lang$applyTo = function(arglist__20238) {
    var elem = cljs.core.first(arglist__20238);
    arglist__20238 = cljs.core.next(arglist__20238);
    var f = cljs.core.first(arglist__20238);
    var args = cljs.core.rest(arglist__20238);
    return update_event_listeners_BANG___delegate(elem, f, args);
  };
  update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = update_event_listeners_BANG___delegate;
  return update_event_listeners_BANG_;
}();
dommy.core.elem_and_selector = function elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, function(p1__20239_SHARP_) {
      return dommy.template.__GT_node_like.call(null, cljs.core.first.call(null, p1__20239_SHARP_));
    }, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [dommy.template.__GT_node_like.call(null, elem_sel), null], null);
  }
};
dommy.core.listen_BANG_ = function() {
  var listen_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null))))));
    }
    var vec__20263_20286 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_20287 = cljs.core.nth.call(null, vec__20263_20286, 0, null);
    var selector_20288 = cljs.core.nth.call(null, vec__20263_20286, 1, null);
    var seq__20264_20289 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__20271_20290 = null;
    var count__20272_20291 = 0;
    var i__20273_20292 = 0;
    while (true) {
      if (i__20273_20292 < count__20272_20291) {
        var vec__20280_20293 = cljs.core._nth.call(null, chunk__20271_20290, i__20273_20292);
        var orig_type_20294 = cljs.core.nth.call(null, vec__20280_20293, 0, null);
        var f_20295 = cljs.core.nth.call(null, vec__20280_20293, 1, null);
        var seq__20274_20296 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_20294, new cljs.core.PersistentArrayMap.fromArray([orig_type_20294, cljs.core.identity], true, false)));
        var chunk__20276_20297 = null;
        var count__20277_20298 = 0;
        var i__20278_20299 = 0;
        while (true) {
          if (i__20278_20299 < count__20277_20298) {
            var vec__20281_20300 = cljs.core._nth.call(null, chunk__20276_20297, i__20278_20299);
            var actual_type_20301 = cljs.core.nth.call(null, vec__20281_20300, 0, null);
            var factory_20302 = cljs.core.nth.call(null, vec__20281_20300, 1, null);
            var canonical_f_20303 = (cljs.core.truth_(selector_20288) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_20287, selector_20288) : cljs.core.identity).call(null, factory_20302.call(null, f_20295));
            dommy.core.update_event_listeners_BANG_.call(null, elem_20287, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_20288, actual_type_20301, f_20295], null), canonical_f_20303);
            if (cljs.core.truth_(elem_20287.addEventListener)) {
              elem_20287.addEventListener(cljs.core.name.call(null, actual_type_20301), canonical_f_20303);
            } else {
              elem_20287.attachEvent(cljs.core.name.call(null, actual_type_20301), canonical_f_20303);
            }
            var G__20304 = seq__20274_20296;
            var G__20305 = chunk__20276_20297;
            var G__20306 = count__20277_20298;
            var G__20307 = i__20278_20299 + 1;
            seq__20274_20296 = G__20304;
            chunk__20276_20297 = G__20305;
            count__20277_20298 = G__20306;
            i__20278_20299 = G__20307;
            continue;
          } else {
            var temp__4126__auto___20308 = cljs.core.seq.call(null, seq__20274_20296);
            if (temp__4126__auto___20308) {
              var seq__20274_20309__$1 = temp__4126__auto___20308;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20274_20309__$1)) {
                var c__3783__auto___20310 = cljs.core.chunk_first.call(null, seq__20274_20309__$1);
                var G__20311 = cljs.core.chunk_rest.call(null, seq__20274_20309__$1);
                var G__20312 = c__3783__auto___20310;
                var G__20313 = cljs.core.count.call(null, c__3783__auto___20310);
                var G__20314 = 0;
                seq__20274_20296 = G__20311;
                chunk__20276_20297 = G__20312;
                count__20277_20298 = G__20313;
                i__20278_20299 = G__20314;
                continue;
              } else {
                var vec__20282_20315 = cljs.core.first.call(null, seq__20274_20309__$1);
                var actual_type_20316 = cljs.core.nth.call(null, vec__20282_20315, 0, null);
                var factory_20317 = cljs.core.nth.call(null, vec__20282_20315, 1, null);
                var canonical_f_20318 = (cljs.core.truth_(selector_20288) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_20287, selector_20288) : cljs.core.identity).call(null, factory_20317.call(null, f_20295));
                dommy.core.update_event_listeners_BANG_.call(null, elem_20287, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_20288, actual_type_20316, f_20295], null), canonical_f_20318);
                if (cljs.core.truth_(elem_20287.addEventListener)) {
                  elem_20287.addEventListener(cljs.core.name.call(null, actual_type_20316), canonical_f_20318);
                } else {
                  elem_20287.attachEvent(cljs.core.name.call(null, actual_type_20316), canonical_f_20318);
                }
                var G__20319 = cljs.core.next.call(null, seq__20274_20309__$1);
                var G__20320 = null;
                var G__20321 = 0;
                var G__20322 = 0;
                seq__20274_20296 = G__20319;
                chunk__20276_20297 = G__20320;
                count__20277_20298 = G__20321;
                i__20278_20299 = G__20322;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__20323 = seq__20264_20289;
        var G__20324 = chunk__20271_20290;
        var G__20325 = count__20272_20291;
        var G__20326 = i__20273_20292 + 1;
        seq__20264_20289 = G__20323;
        chunk__20271_20290 = G__20324;
        count__20272_20291 = G__20325;
        i__20273_20292 = G__20326;
        continue;
      } else {
        var temp__4126__auto___20327 = cljs.core.seq.call(null, seq__20264_20289);
        if (temp__4126__auto___20327) {
          var seq__20264_20328__$1 = temp__4126__auto___20327;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20264_20328__$1)) {
            var c__3783__auto___20329 = cljs.core.chunk_first.call(null, seq__20264_20328__$1);
            var G__20330 = cljs.core.chunk_rest.call(null, seq__20264_20328__$1);
            var G__20331 = c__3783__auto___20329;
            var G__20332 = cljs.core.count.call(null, c__3783__auto___20329);
            var G__20333 = 0;
            seq__20264_20289 = G__20330;
            chunk__20271_20290 = G__20331;
            count__20272_20291 = G__20332;
            i__20273_20292 = G__20333;
            continue;
          } else {
            var vec__20283_20334 = cljs.core.first.call(null, seq__20264_20328__$1);
            var orig_type_20335 = cljs.core.nth.call(null, vec__20283_20334, 0, null);
            var f_20336 = cljs.core.nth.call(null, vec__20283_20334, 1, null);
            var seq__20265_20337 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_20335, new cljs.core.PersistentArrayMap.fromArray([orig_type_20335, cljs.core.identity], true, false)));
            var chunk__20267_20338 = null;
            var count__20268_20339 = 0;
            var i__20269_20340 = 0;
            while (true) {
              if (i__20269_20340 < count__20268_20339) {
                var vec__20284_20341 = cljs.core._nth.call(null, chunk__20267_20338, i__20269_20340);
                var actual_type_20342 = cljs.core.nth.call(null, vec__20284_20341, 0, null);
                var factory_20343 = cljs.core.nth.call(null, vec__20284_20341, 1, null);
                var canonical_f_20344 = (cljs.core.truth_(selector_20288) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_20287, selector_20288) : cljs.core.identity).call(null, factory_20343.call(null, f_20336));
                dommy.core.update_event_listeners_BANG_.call(null, elem_20287, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_20288, actual_type_20342, f_20336], null), canonical_f_20344);
                if (cljs.core.truth_(elem_20287.addEventListener)) {
                  elem_20287.addEventListener(cljs.core.name.call(null, actual_type_20342), canonical_f_20344);
                } else {
                  elem_20287.attachEvent(cljs.core.name.call(null, actual_type_20342), canonical_f_20344);
                }
                var G__20345 = seq__20265_20337;
                var G__20346 = chunk__20267_20338;
                var G__20347 = count__20268_20339;
                var G__20348 = i__20269_20340 + 1;
                seq__20265_20337 = G__20345;
                chunk__20267_20338 = G__20346;
                count__20268_20339 = G__20347;
                i__20269_20340 = G__20348;
                continue;
              } else {
                var temp__4126__auto___20349__$1 = cljs.core.seq.call(null, seq__20265_20337);
                if (temp__4126__auto___20349__$1) {
                  var seq__20265_20350__$1 = temp__4126__auto___20349__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__20265_20350__$1)) {
                    var c__3783__auto___20351 = cljs.core.chunk_first.call(null, seq__20265_20350__$1);
                    var G__20352 = cljs.core.chunk_rest.call(null, seq__20265_20350__$1);
                    var G__20353 = c__3783__auto___20351;
                    var G__20354 = cljs.core.count.call(null, c__3783__auto___20351);
                    var G__20355 = 0;
                    seq__20265_20337 = G__20352;
                    chunk__20267_20338 = G__20353;
                    count__20268_20339 = G__20354;
                    i__20269_20340 = G__20355;
                    continue;
                  } else {
                    var vec__20285_20356 = cljs.core.first.call(null, seq__20265_20350__$1);
                    var actual_type_20357 = cljs.core.nth.call(null, vec__20285_20356, 0, null);
                    var factory_20358 = cljs.core.nth.call(null, vec__20285_20356, 1, null);
                    var canonical_f_20359 = (cljs.core.truth_(selector_20288) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_20287, selector_20288) : cljs.core.identity).call(null, factory_20358.call(null, f_20336));
                    dommy.core.update_event_listeners_BANG_.call(null, elem_20287, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_20288, actual_type_20357, f_20336], null), canonical_f_20359);
                    if (cljs.core.truth_(elem_20287.addEventListener)) {
                      elem_20287.addEventListener(cljs.core.name.call(null, actual_type_20357), canonical_f_20359);
                    } else {
                      elem_20287.attachEvent(cljs.core.name.call(null, actual_type_20357), canonical_f_20359);
                    }
                    var G__20360 = cljs.core.next.call(null, seq__20265_20350__$1);
                    var G__20361 = null;
                    var G__20362 = 0;
                    var G__20363 = 0;
                    seq__20265_20337 = G__20360;
                    chunk__20267_20338 = G__20361;
                    count__20268_20339 = G__20362;
                    i__20269_20340 = G__20363;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__20364 = cljs.core.next.call(null, seq__20264_20328__$1);
            var G__20365 = null;
            var G__20366 = 0;
            var G__20367 = 0;
            seq__20264_20289 = G__20364;
            chunk__20271_20290 = G__20365;
            count__20272_20291 = G__20366;
            i__20273_20292 = G__20367;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_BANG_.cljs$lang$maxFixedArity = 1;
  listen_BANG_.cljs$lang$applyTo = function(arglist__20368) {
    var elem_sel = cljs.core.first(arglist__20368);
    var type_fs = cljs.core.rest(arglist__20368);
    return listen_BANG___delegate(elem_sel, type_fs);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_BANG___delegate;
  return listen_BANG_;
}();
dommy.core.unlisten_BANG_ = function() {
  var unlisten_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null))))));
    }
    var vec__20392_20415 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_20416 = cljs.core.nth.call(null, vec__20392_20415, 0, null);
    var selector_20417 = cljs.core.nth.call(null, vec__20392_20415, 1, null);
    var seq__20393_20418 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__20400_20419 = null;
    var count__20401_20420 = 0;
    var i__20402_20421 = 0;
    while (true) {
      if (i__20402_20421 < count__20401_20420) {
        var vec__20409_20422 = cljs.core._nth.call(null, chunk__20400_20419, i__20402_20421);
        var orig_type_20423 = cljs.core.nth.call(null, vec__20409_20422, 0, null);
        var f_20424 = cljs.core.nth.call(null, vec__20409_20422, 1, null);
        var seq__20403_20425 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_20423, new cljs.core.PersistentArrayMap.fromArray([orig_type_20423, cljs.core.identity], true, false)));
        var chunk__20405_20426 = null;
        var count__20406_20427 = 0;
        var i__20407_20428 = 0;
        while (true) {
          if (i__20407_20428 < count__20406_20427) {
            var vec__20410_20429 = cljs.core._nth.call(null, chunk__20405_20426, i__20407_20428);
            var actual_type_20430 = cljs.core.nth.call(null, vec__20410_20429, 0, null);
            var __20431 = cljs.core.nth.call(null, vec__20410_20429, 1, null);
            var keys_20432 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_20417, actual_type_20430, f_20424], null);
            var canonical_f_20433 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_20416), keys_20432);
            dommy.core.update_event_listeners_BANG_.call(null, elem_20416, dommy.utils.dissoc_in, keys_20432);
            if (cljs.core.truth_(elem_20416.removeEventListener)) {
              elem_20416.removeEventListener(cljs.core.name.call(null, actual_type_20430), canonical_f_20433);
            } else {
              elem_20416.detachEvent(cljs.core.name.call(null, actual_type_20430), canonical_f_20433);
            }
            var G__20434 = seq__20403_20425;
            var G__20435 = chunk__20405_20426;
            var G__20436 = count__20406_20427;
            var G__20437 = i__20407_20428 + 1;
            seq__20403_20425 = G__20434;
            chunk__20405_20426 = G__20435;
            count__20406_20427 = G__20436;
            i__20407_20428 = G__20437;
            continue;
          } else {
            var temp__4126__auto___20438 = cljs.core.seq.call(null, seq__20403_20425);
            if (temp__4126__auto___20438) {
              var seq__20403_20439__$1 = temp__4126__auto___20438;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20403_20439__$1)) {
                var c__3783__auto___20440 = cljs.core.chunk_first.call(null, seq__20403_20439__$1);
                var G__20441 = cljs.core.chunk_rest.call(null, seq__20403_20439__$1);
                var G__20442 = c__3783__auto___20440;
                var G__20443 = cljs.core.count.call(null, c__3783__auto___20440);
                var G__20444 = 0;
                seq__20403_20425 = G__20441;
                chunk__20405_20426 = G__20442;
                count__20406_20427 = G__20443;
                i__20407_20428 = G__20444;
                continue;
              } else {
                var vec__20411_20445 = cljs.core.first.call(null, seq__20403_20439__$1);
                var actual_type_20446 = cljs.core.nth.call(null, vec__20411_20445, 0, null);
                var __20447 = cljs.core.nth.call(null, vec__20411_20445, 1, null);
                var keys_20448 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_20417, actual_type_20446, f_20424], null);
                var canonical_f_20449 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_20416), keys_20448);
                dommy.core.update_event_listeners_BANG_.call(null, elem_20416, dommy.utils.dissoc_in, keys_20448);
                if (cljs.core.truth_(elem_20416.removeEventListener)) {
                  elem_20416.removeEventListener(cljs.core.name.call(null, actual_type_20446), canonical_f_20449);
                } else {
                  elem_20416.detachEvent(cljs.core.name.call(null, actual_type_20446), canonical_f_20449);
                }
                var G__20450 = cljs.core.next.call(null, seq__20403_20439__$1);
                var G__20451 = null;
                var G__20452 = 0;
                var G__20453 = 0;
                seq__20403_20425 = G__20450;
                chunk__20405_20426 = G__20451;
                count__20406_20427 = G__20452;
                i__20407_20428 = G__20453;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__20454 = seq__20393_20418;
        var G__20455 = chunk__20400_20419;
        var G__20456 = count__20401_20420;
        var G__20457 = i__20402_20421 + 1;
        seq__20393_20418 = G__20454;
        chunk__20400_20419 = G__20455;
        count__20401_20420 = G__20456;
        i__20402_20421 = G__20457;
        continue;
      } else {
        var temp__4126__auto___20458 = cljs.core.seq.call(null, seq__20393_20418);
        if (temp__4126__auto___20458) {
          var seq__20393_20459__$1 = temp__4126__auto___20458;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20393_20459__$1)) {
            var c__3783__auto___20460 = cljs.core.chunk_first.call(null, seq__20393_20459__$1);
            var G__20461 = cljs.core.chunk_rest.call(null, seq__20393_20459__$1);
            var G__20462 = c__3783__auto___20460;
            var G__20463 = cljs.core.count.call(null, c__3783__auto___20460);
            var G__20464 = 0;
            seq__20393_20418 = G__20461;
            chunk__20400_20419 = G__20462;
            count__20401_20420 = G__20463;
            i__20402_20421 = G__20464;
            continue;
          } else {
            var vec__20412_20465 = cljs.core.first.call(null, seq__20393_20459__$1);
            var orig_type_20466 = cljs.core.nth.call(null, vec__20412_20465, 0, null);
            var f_20467 = cljs.core.nth.call(null, vec__20412_20465, 1, null);
            var seq__20394_20468 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_20466, new cljs.core.PersistentArrayMap.fromArray([orig_type_20466, cljs.core.identity], true, false)));
            var chunk__20396_20469 = null;
            var count__20397_20470 = 0;
            var i__20398_20471 = 0;
            while (true) {
              if (i__20398_20471 < count__20397_20470) {
                var vec__20413_20472 = cljs.core._nth.call(null, chunk__20396_20469, i__20398_20471);
                var actual_type_20473 = cljs.core.nth.call(null, vec__20413_20472, 0, null);
                var __20474 = cljs.core.nth.call(null, vec__20413_20472, 1, null);
                var keys_20475 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_20417, actual_type_20473, f_20467], null);
                var canonical_f_20476 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_20416), keys_20475);
                dommy.core.update_event_listeners_BANG_.call(null, elem_20416, dommy.utils.dissoc_in, keys_20475);
                if (cljs.core.truth_(elem_20416.removeEventListener)) {
                  elem_20416.removeEventListener(cljs.core.name.call(null, actual_type_20473), canonical_f_20476);
                } else {
                  elem_20416.detachEvent(cljs.core.name.call(null, actual_type_20473), canonical_f_20476);
                }
                var G__20477 = seq__20394_20468;
                var G__20478 = chunk__20396_20469;
                var G__20479 = count__20397_20470;
                var G__20480 = i__20398_20471 + 1;
                seq__20394_20468 = G__20477;
                chunk__20396_20469 = G__20478;
                count__20397_20470 = G__20479;
                i__20398_20471 = G__20480;
                continue;
              } else {
                var temp__4126__auto___20481__$1 = cljs.core.seq.call(null, seq__20394_20468);
                if (temp__4126__auto___20481__$1) {
                  var seq__20394_20482__$1 = temp__4126__auto___20481__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__20394_20482__$1)) {
                    var c__3783__auto___20483 = cljs.core.chunk_first.call(null, seq__20394_20482__$1);
                    var G__20484 = cljs.core.chunk_rest.call(null, seq__20394_20482__$1);
                    var G__20485 = c__3783__auto___20483;
                    var G__20486 = cljs.core.count.call(null, c__3783__auto___20483);
                    var G__20487 = 0;
                    seq__20394_20468 = G__20484;
                    chunk__20396_20469 = G__20485;
                    count__20397_20470 = G__20486;
                    i__20398_20471 = G__20487;
                    continue;
                  } else {
                    var vec__20414_20488 = cljs.core.first.call(null, seq__20394_20482__$1);
                    var actual_type_20489 = cljs.core.nth.call(null, vec__20414_20488, 0, null);
                    var __20490 = cljs.core.nth.call(null, vec__20414_20488, 1, null);
                    var keys_20491 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_20417, actual_type_20489, f_20467], null);
                    var canonical_f_20492 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_20416), keys_20491);
                    dommy.core.update_event_listeners_BANG_.call(null, elem_20416, dommy.utils.dissoc_in, keys_20491);
                    if (cljs.core.truth_(elem_20416.removeEventListener)) {
                      elem_20416.removeEventListener(cljs.core.name.call(null, actual_type_20489), canonical_f_20492);
                    } else {
                      elem_20416.detachEvent(cljs.core.name.call(null, actual_type_20489), canonical_f_20492);
                    }
                    var G__20493 = cljs.core.next.call(null, seq__20394_20482__$1);
                    var G__20494 = null;
                    var G__20495 = 0;
                    var G__20496 = 0;
                    seq__20394_20468 = G__20493;
                    chunk__20396_20469 = G__20494;
                    count__20397_20470 = G__20495;
                    i__20398_20471 = G__20496;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__20497 = cljs.core.next.call(null, seq__20393_20459__$1);
            var G__20498 = null;
            var G__20499 = 0;
            var G__20500 = 0;
            seq__20393_20418 = G__20497;
            chunk__20400_20419 = G__20498;
            count__20401_20420 = G__20499;
            i__20402_20421 = G__20500;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var unlisten_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return unlisten_BANG___delegate.call(this, elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$lang$maxFixedArity = 1;
  unlisten_BANG_.cljs$lang$applyTo = function(arglist__20501) {
    var elem_sel = cljs.core.first(arglist__20501);
    var type_fs = cljs.core.rest(arglist__20501);
    return unlisten_BANG___delegate(elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = unlisten_BANG___delegate;
  return unlisten_BANG_;
}();
dommy.core.listen_once_BANG_ = function() {
  var listen_once_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null))))));
    }
    var vec__20509_20516 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_20517 = cljs.core.nth.call(null, vec__20509_20516, 0, null);
    var selector_20518 = cljs.core.nth.call(null, vec__20509_20516, 1, null);
    var seq__20510_20519 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__20511_20520 = null;
    var count__20512_20521 = 0;
    var i__20513_20522 = 0;
    while (true) {
      if (i__20513_20522 < count__20512_20521) {
        var vec__20514_20523 = cljs.core._nth.call(null, chunk__20511_20520, i__20513_20522);
        var type_20524 = cljs.core.nth.call(null, vec__20514_20523, 0, null);
        var f_20525 = cljs.core.nth.call(null, vec__20514_20523, 1, null);
        dommy.core.listen_BANG_.call(null, elem_sel, type_20524, function(seq__20510_20519, chunk__20511_20520, count__20512_20521, i__20513_20522, vec__20514_20523, type_20524, f_20525, vec__20509_20516, elem_20517, selector_20518) {
          return function this_fn(e) {
            dommy.core.unlisten_BANG_.call(null, elem_sel, type_20524, this_fn);
            return f_20525.call(null, e);
          };
        }(seq__20510_20519, chunk__20511_20520, count__20512_20521, i__20513_20522, vec__20514_20523, type_20524, f_20525, vec__20509_20516, elem_20517, selector_20518));
        var G__20526 = seq__20510_20519;
        var G__20527 = chunk__20511_20520;
        var G__20528 = count__20512_20521;
        var G__20529 = i__20513_20522 + 1;
        seq__20510_20519 = G__20526;
        chunk__20511_20520 = G__20527;
        count__20512_20521 = G__20528;
        i__20513_20522 = G__20529;
        continue;
      } else {
        var temp__4126__auto___20530 = cljs.core.seq.call(null, seq__20510_20519);
        if (temp__4126__auto___20530) {
          var seq__20510_20531__$1 = temp__4126__auto___20530;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20510_20531__$1)) {
            var c__3783__auto___20532 = cljs.core.chunk_first.call(null, seq__20510_20531__$1);
            var G__20533 = cljs.core.chunk_rest.call(null, seq__20510_20531__$1);
            var G__20534 = c__3783__auto___20532;
            var G__20535 = cljs.core.count.call(null, c__3783__auto___20532);
            var G__20536 = 0;
            seq__20510_20519 = G__20533;
            chunk__20511_20520 = G__20534;
            count__20512_20521 = G__20535;
            i__20513_20522 = G__20536;
            continue;
          } else {
            var vec__20515_20537 = cljs.core.first.call(null, seq__20510_20531__$1);
            var type_20538 = cljs.core.nth.call(null, vec__20515_20537, 0, null);
            var f_20539 = cljs.core.nth.call(null, vec__20515_20537, 1, null);
            dommy.core.listen_BANG_.call(null, elem_sel, type_20538, function(seq__20510_20519, chunk__20511_20520, count__20512_20521, i__20513_20522, vec__20515_20537, type_20538, f_20539, seq__20510_20531__$1, temp__4126__auto___20530, vec__20509_20516, elem_20517, selector_20518) {
              return function this_fn(e) {
                dommy.core.unlisten_BANG_.call(null, elem_sel, type_20538, this_fn);
                return f_20539.call(null, e);
              };
            }(seq__20510_20519, chunk__20511_20520, count__20512_20521, i__20513_20522, vec__20515_20537, type_20538, f_20539, seq__20510_20531__$1, temp__4126__auto___20530, vec__20509_20516, elem_20517, selector_20518));
            var G__20540 = cljs.core.next.call(null, seq__20510_20531__$1);
            var G__20541 = null;
            var G__20542 = 0;
            var G__20543 = 0;
            seq__20510_20519 = G__20540;
            chunk__20511_20520 = G__20541;
            count__20512_20521 = G__20542;
            i__20513_20522 = G__20543;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_once_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_once_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$lang$maxFixedArity = 1;
  listen_once_BANG_.cljs$lang$applyTo = function(arglist__20544) {
    var elem_sel = cljs.core.first(arglist__20544);
    var type_fs = cljs.core.rest(arglist__20544);
    return listen_once_BANG___delegate(elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_once_BANG___delegate;
  return listen_once_BANG_;
}();
dommy.core.fire_BANG_ = function() {
  var fire_BANG___delegate = function(node, event_type, p__20545) {
    var vec__20547 = p__20545;
    var update_event_BANG_ = cljs.core.nth.call(null, vec__20547, 0, null);
    if (dommy.core.descendant_QMARK_.call(null, node, document.documentElement)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "descendant?", "descendant?", -1027057938, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol("js", "document.documentElement", "js/document.documentElement", 1597931428, null)))));
    }
    var update_event_BANG___$1 = function() {
      var or__3027__auto__ = update_event_BANG_;
      if (cljs.core.truth_(or__3027__auto__)) {
        return or__3027__auto__;
      } else {
        return cljs.core.identity;
      }
    }();
    if (cljs.core.truth_(document.createEvent)) {
      var event = document.createEvent("Event");
      event.initEvent(cljs.core.name.call(null, event_type), true, true);
      return node.dispatchEvent(update_event_BANG___$1.call(null, event));
    } else {
      return node.fireEvent("on" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, event_type)), update_event_BANG___$1.call(null, document.createEventObject()));
    }
  };
  var fire_BANG_ = function(node, event_type, var_args) {
    var p__20545 = null;
    if (arguments.length > 2) {
      p__20545 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return fire_BANG___delegate.call(this, node, event_type, p__20545);
  };
  fire_BANG_.cljs$lang$maxFixedArity = 2;
  fire_BANG_.cljs$lang$applyTo = function(arglist__20548) {
    var node = cljs.core.first(arglist__20548);
    arglist__20548 = cljs.core.next(arglist__20548);
    var event_type = cljs.core.first(arglist__20548);
    var p__20545 = cljs.core.rest(arglist__20548);
    return fire_BANG___delegate(node, event_type, p__20545);
  };
  fire_BANG_.cljs$core$IFn$_invoke$arity$variadic = fire_BANG___delegate;
  return fire_BANG_;
}();
goog.provide("muzak.event_handlers");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("dommy.core");
goog.require("dommy.core");
goog.require("cljs.core.async");
cljs.core.enable_console_print_BANG_.call(null);
muzak.event_handlers.search_map = cljs.core.PersistentArrayMap.EMPTY;
muzak.event_handlers.toggle_value = function toggle_value(hash_key) {
  var value = cljs.core.get.call(null, muzak.event_handlers.search_map, hash_key);
  var new_value = cljs.core.not.call(null, value);
  muzak.event_handlers.search_map = cljs.core.assoc.call(null, muzak.event_handlers.search_map, hash_key, new_value);
};
muzak.event_handlers.sort_type = new cljs.core.Keyword(null, "popularity", "popularity", 924297410);
muzak.event_handlers.sort_options = cljs.core.PersistentHashMap.fromArrays.call(null, [new cljs.core.Keyword(null, "popularity", "popularity", 924297410), new cljs.core.Keyword(null, "hotness", "hotness", -1713569332), new cljs.core.Keyword(null, "tempo", "tempo", -1555208453), new cljs.core.Keyword(null, "dance", "dance", -305925787)], ["#popularity", "#hotness", "#tempo", "#dance"]);
muzak.event_handlers.change_sort_type = function change_sort_type(new_sort_type) {
  dommy.core.remove_class_BANG_.call(null, document.querySelector(dommy.core.selector.call(null, cljs.core.get.call(null, muzak.event_handlers.sort_options, muzak.event_handlers.sort_type))), new cljs.core.Keyword(null, "active", "active", 1895962068));
  muzak.event_handlers.sort_type = new_sort_type;
  return dommy.core.add_class_BANG_.call(null, document.querySelector(dommy.core.selector.call(null, cljs.core.get.call(null, muzak.event_handlers.sort_options, muzak.event_handlers.sort_type))), new cljs.core.Keyword(null, "active", "active", 1895962068));
};
muzak.event_handlers.with_click_handler_toggle_map = function with_click_handler_toggle_map($button, hash_key) {
  return dommy.core.listen_BANG_.call(null, $button, new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
    muzak.event_handlers.toggle_value.call(null, hash_key);
    return cljs.core.println.call(null, muzak.event_handlers.search_map);
  });
};
muzak.event_handlers.with_click_handler_toggle_sort = function with_click_handler_toggle_sort($li, new_sort_type) {
  return dommy.core.listen_BANG_.call(null, $li, new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
    return muzak.event_handlers.change_sort_type.call(null, new_sort_type);
  });
};
muzak.event_handlers.with_click_handler_search = function with_click_handler_search($button, new_event_ch) {
  return dommy.core.listen_BANG_.call(null, $button, new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
    var msg = cljs.core.PersistentHashMap.fromArrays.call(null, [new cljs.core.Keyword(null, "event", "event", 301435442), new cljs.core.Keyword(null, "data", "data", -232669377)], ["parse", muzak.event_handlers.search_map]);
    return cljs.core.async.put_BANG_.call(null, new_event_ch, msg);
  });
};
muzak.event_handlers.bpm_button = function bpm_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom17445 = document.createElement("input");
    if ("button") {
      dom17445.setAttribute("type", "button");
    } else {
    }
    if ("btn filter-button") {
      dom17445.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17445.className) + " btn filter-button").trim();
    } else {
    }
    if ("BPM") {
      dom17445.setAttribute("value", "BPM");
    } else {
    }
    return dom17445;
  }(), new cljs.core.Keyword(null, "BPM", "BPM", -686901081));
};
muzak.event_handlers.classical_button = function classical_button(new_event_ch) {
  muzak.event_handlers.toggle_value.call(null, new cljs.core.Keyword(null, "CLASSICAL", "CLASSICAL", -1768639824));
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom17447 = document.createElement("input");
    if ("button") {
      dom17447.setAttribute("type", "button");
    } else {
    }
    if ("btn filter-button") {
      dom17447.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17447.className) + " btn filter-button").trim();
    } else {
    }
    if ("Classical") {
      dom17447.setAttribute("value", "Classical");
    } else {
    }
    return dom17447;
  }(), new cljs.core.Keyword(null, "CLASSICAL", "CLASSICAL", -1768639824));
};
muzak.event_handlers.rock_button = function rock_button(new_event_ch) {
  muzak.event_handlers.toggle_value.call(null, new cljs.core.Keyword(null, "ROCK", "ROCK", 689705274));
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom17449 = document.createElement("input");
    if ("button") {
      dom17449.setAttribute("type", "button");
    } else {
    }
    if ("btn filter-button") {
      dom17449.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17449.className) + " btn filter-button").trim();
    } else {
    }
    if ("Rock") {
      dom17449.setAttribute("value", "Rock");
    } else {
    }
    return dom17449;
  }(), new cljs.core.Keyword(null, "ROCK", "ROCK", 689705274));
};
muzak.event_handlers.pop_button = function pop_button(new_event_ch) {
  muzak.event_handlers.toggle_value.call(null, new cljs.core.Keyword(null, "POP", "POP", 997989906));
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom17451 = document.createElement("input");
    if ("button") {
      dom17451.setAttribute("type", "button");
    } else {
    }
    if ("btn filter-button") {
      dom17451.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17451.className) + " btn filter-button").trim();
    } else {
    }
    if ("Pop") {
      dom17451.setAttribute("value", "Pop");
    } else {
    }
    return dom17451;
  }(), new cljs.core.Keyword(null, "POP", "POP", 997989906));
};
muzak.event_handlers.popularity_button = function popularity_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_sort.call(null, function() {
    var dom17454 = document.createElement("li");
    if ("active") {
      dom17454.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17454.className) + " active").trim();
    } else {
    }
    if ("popularity") {
      dom17454.setAttribute("id", "popularity");
    } else {
    }
    dom17454.appendChild(function() {
      var dom17455 = document.createElement("a");
      dom17455.appendChild(document.createTextNode("Popularity"));
      return dom17455;
    }());
    return dom17454;
  }(), new cljs.core.Keyword(null, "popularity", "popularity", 924297410));
};
muzak.event_handlers.hottness_button = function hottness_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_sort.call(null, function() {
    var dom17458 = document.createElement("li");
    if ("hotness") {
      dom17458.setAttribute("id", "hotness");
    } else {
    }
    dom17458.appendChild(function() {
      var dom17459 = document.createElement("a");
      dom17459.appendChild(document.createTextNode("Hottness"));
      return dom17459;
    }());
    return dom17458;
  }(), new cljs.core.Keyword(null, "hotness", "hotness", -1713569332));
};
muzak.event_handlers.tempo_button = function tempo_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_sort.call(null, function() {
    var dom17462 = document.createElement("li");
    if ("tempo") {
      dom17462.setAttribute("id", "tempo");
    } else {
    }
    dom17462.appendChild(function() {
      var dom17463 = document.createElement("a");
      dom17463.appendChild(document.createTextNode("Tempo"));
      return dom17463;
    }());
    return dom17462;
  }(), new cljs.core.Keyword(null, "tempo", "tempo", -1555208453));
};
muzak.event_handlers.dance_ability_button = function dance_ability_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_sort.call(null, function() {
    var dom17466 = document.createElement("li");
    if ("dance") {
      dom17466.setAttribute("id", "dance");
    } else {
    }
    dom17466.appendChild(function() {
      var dom17467 = document.createElement("a");
      dom17467.appendChild(document.createTextNode("Dance-ability"));
      return dom17467;
    }());
    return dom17466;
  }(), new cljs.core.Keyword(null, "dance", "dance", -305925787));
};
muzak.event_handlers.search_button = function search_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_search.call(null, function() {
    var dom17470 = document.createElement("button");
    if ("button") {
      dom17470.setAttribute("type:", "button");
    } else {
    }
    if ("btn btn-warning") {
      dom17470.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17470.className) + " btn btn-warning").trim();
    } else {
    }
    if ("search-button") {
      dom17470.setAttribute("id", "search-button");
    } else {
    }
    dom17470.appendChild(function() {
      var dom17471 = document.createElement("i");
      if ("icon-search") {
        dom17471.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17471.className) + " icon-search").trim();
      } else {
      }
      if ("true") {
        dom17471.setAttribute("aria-hidden", "true");
      } else {
      }
      return dom17471;
    }());
    return dom17470;
  }(), new_event_ch);
};
muzak.event_handlers.update_state = function update_state(new_state) {
  muzak.event_handlers.search_map = new_state;
};
muzak.event_handlers.page_body = function page_body(new_event_ch) {
  var dom17483 = document.createElement("div");
  dom17483.appendChild(function() {
    var dom17484 = document.createElement("h1");
    dom17484.setAttribute("id", "million");
    dom17484.appendChild(document.createTextNode("Million Song Search"));
    return dom17484;
  }());
  dom17483.appendChild(function() {
    var dom17485 = document.createElement("p");
    dom17485.appendChild(document.createTextNode("Select Filters:"));
    return dom17485;
  }());
  dom17483.appendChild(function() {
    var dom17486 = document.createElement("div");
    if ("wrapper text-center") {
      dom17486.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17486.className) + " wrapper text-center").trim();
    } else {
    }
    dom17486.appendChild(function() {
      var dom17487 = document.createElement("div");
      if ("btn-grp") {
        dom17487.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17487.className) + " btn-grp").trim();
      } else {
      }
      if ("filters") {
        dom17487.setAttribute("id", "filters");
      } else {
      }
      if ("buttons-checkbox") {
        dom17487.setAttribute("data-toggle", "buttons-checkbox");
      } else {
      }
      dom17487.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.bpm_button.call(null, new_event_ch)));
      dom17487.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.classical_button.call(null, new_event_ch)));
      dom17487.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.rock_button.call(null, new_event_ch)));
      dom17487.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.pop_button.call(null, new_event_ch)));
      return dom17487;
    }());
    dom17486.appendChild(function() {
      var dom17488 = document.createElement("div");
      if ("search-button-container") {
        dom17488.setAttribute("id", "search-button-container");
      } else {
      }
      dom17488.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.search_button.call(null, new_event_ch)));
      return dom17488;
    }());
    return dom17486;
  }());
  dom17483.appendChild(function() {
    var dom17489 = document.createElement("div");
    dom17489.setAttribute("id", "bubble-chart");
    dom17489.appendChild(function() {
      var dom17490 = document.createElement("div");
      dom17490.setAttribute("id", "chart-body");
      return dom17490;
    }());
    return dom17489;
  }());
  dom17483.appendChild(function() {
    var dom17491 = document.createElement("p");
    dom17491.appendChild(document.createTextNode("Sort By:"));
    return dom17491;
  }());
  dom17483.appendChild(function() {
    var dom17492 = document.createElement("div");
    if ("wrapper text-center") {
      dom17492.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17492.className) + " wrapper text-center").trim();
    } else {
    }
    dom17492.appendChild(function() {
      var dom17493 = document.createElement("ul");
      if ("nav nav-pills sort-bar") {
        dom17493.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom17493.className) + " nav nav-pills sort-bar").trim();
      } else {
      }
      dom17493.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.popularity_button.call(null, new_event_ch)));
      dom17493.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.hottness_button.call(null, new_event_ch)));
      dom17493.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.tempo_button.call(null, new_event_ch)));
      dom17493.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.dance_ability_button.call(null, new_event_ch)));
      return dom17493;
    }());
    return dom17492;
  }());
  return dom17483;
};
muzak.event_handlers.page_component = function page_component(_BANG_events, new_event_ch) {
  var dom17495 = document.createElement("div");
  dom17495.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.page_body.call(null, new_event_ch)));
  return dom17495;
};
goog.provide("mrhyde.guts");
goog.require("cljs.core");
mrhyde.guts.hyde_proto_array_marker = "$cljs$mrhyde$isarray";
mrhyde.guts.hyde_proto_object_marker = "$cljs$mrhyde$isobject";
mrhyde.guts.get_store_cur_js_fn = function get_store_cur_js_fn(o, field_name) {
  var cur_fn = o[field_name];
  var js_fn_name = "_js_" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(field_name);
  var root_fn = o[js_fn_name];
  if (cljs.core._EQ_.call(null, undefined, root_fn)) {
    o[js_fn_name] = cur_fn;
  } else {
  }
  return cur_fn;
};
mrhyde.guts.restore_original_js_fn = function restore_original_js_fn(o, field_name) {
  var js_fn_name = "_js_" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(field_name);
  var root_fn = o[js_fn_name];
  if (cljs.core.not_EQ_.call(null, undefined, root_fn)) {
    o[field_name] = root_fn;
  } else {
  }
  return root_fn;
};
goog.provide("mrhyde.mrhyde");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("mrhyde.guts");
goog.require("clojure.string");
goog.require("mrhyde.guts");
goog.require("cljs.reader");
goog.require("clojure.string");
mrhyde.mrhyde.IHyde = function() {
  var obj16850 = {};
  return obj16850;
}();
mrhyde.mrhyde.has_cache_QMARK_ = function has_cache_QMARK_(this$) {
  if (function() {
    var and__3038__auto__ = this$;
    if (and__3038__auto__) {
      return this$.mrhyde$mrhyde$IHyde$has_cache_QMARK_$arity$1;
    } else {
      return and__3038__auto__;
    }
  }()) {
    return this$.mrhyde$mrhyde$IHyde$has_cache_QMARK_$arity$1(this$);
  } else {
    var x__3677__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3050__auto__ = mrhyde.mrhyde.has_cache_QMARK_[goog.typeOf(x__3677__auto__)];
      if (or__3050__auto__) {
        return or__3050__auto__;
      } else {
        var or__3050__auto____$1 = mrhyde.mrhyde.has_cache_QMARK_["_"];
        if (or__3050__auto____$1) {
          return or__3050__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHyde.has-cache?", this$);
        }
      }
    }().call(null, this$);
  }
};
mrhyde.mrhyde.from_cache = function from_cache(this$) {
  if (function() {
    var and__3038__auto__ = this$;
    if (and__3038__auto__) {
      return this$.mrhyde$mrhyde$IHyde$from_cache$arity$1;
    } else {
      return and__3038__auto__;
    }
  }()) {
    return this$.mrhyde$mrhyde$IHyde$from_cache$arity$1(this$);
  } else {
    var x__3677__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3050__auto__ = mrhyde.mrhyde.from_cache[goog.typeOf(x__3677__auto__)];
      if (or__3050__auto__) {
        return or__3050__auto__;
      } else {
        var or__3050__auto____$1 = mrhyde.mrhyde.from_cache["_"];
        if (or__3050__auto____$1) {
          return or__3050__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHyde.from-cache", this$);
        }
      }
    }().call(null, this$);
  }
};
mrhyde.mrhyde.hyde_QMARK_ = function hyde_QMARK_(x) {
  var G__16852 = x;
  if (G__16852) {
    var bit__3700__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3050__auto__ = bit__3700__auto__;
      if (cljs.core.truth_(or__3050__auto__)) {
        return or__3050__auto__;
      } else {
        return G__16852.mrhyde$mrhyde$IHyde$;
      }
    }())) {
      return true;
    } else {
      if (!G__16852.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, mrhyde.mrhyde.IHyde, G__16852);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, mrhyde.mrhyde.IHyde, G__16852);
  }
};
mrhyde.mrhyde.hyde_array_QMARK_ = function hyde_array_QMARK_(x) {
  var and__3038__auto__ = function() {
    var G__16856 = x;
    if (G__16856) {
      var bit__3700__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3050__auto__ = bit__3700__auto__;
        if (cljs.core.truth_(or__3050__auto__)) {
          return or__3050__auto__;
        } else {
          return G__16856.mrhyde$mrhyde$IHyde$;
        }
      }())) {
        return true;
      } else {
        if (!G__16856.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, mrhyde.mrhyde.IHyde, G__16856);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, mrhyde.mrhyde.IHyde, G__16856);
    }
  }();
  if (and__3038__auto__) {
    return x[mrhyde.guts.hyde_proto_array_marker];
  } else {
    return and__3038__auto__;
  }
};
mrhyde.mrhyde.hyde_object_QMARK_ = function hyde_object_QMARK_(x) {
  var and__3038__auto__ = function() {
    var G__16860 = x;
    if (G__16860) {
      var bit__3700__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3050__auto__ = bit__3700__auto__;
        if (cljs.core.truth_(or__3050__auto__)) {
          return or__3050__auto__;
        } else {
          return G__16860.mrhyde$mrhyde$IHyde$;
        }
      }())) {
        return true;
      } else {
        if (!G__16860.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, mrhyde.mrhyde.IHyde, G__16860);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, mrhyde.mrhyde.IHyde, G__16860);
    }
  }();
  if (and__3038__auto__) {
    return x[mrhyde.guts.hyde_proto_object_marker];
  } else {
    return and__3038__auto__;
  }
};
mrhyde.mrhyde.toclj = function toclj(x) {
  return cljs.core.js__GT_clj.call(null, x, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
};
goog.exportSymbol("mrhyde.mrhyde.toclj", mrhyde.mrhyde.toclj);
mrhyde.mrhyde.tojs = function tojs(x) {
  return cljs.core.clj__GT_js.call(null, x);
};
goog.exportSymbol("mrhyde.mrhyde.tojs", mrhyde.mrhyde.tojs);
mrhyde.mrhyde.cljread = function cljread(x) {
  return cljs.reader.read_string.call(null, x);
};
goog.exportSymbol("mrhyde.mrhyde.cljread", mrhyde.mrhyde.cljread);
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(max) {
    return function(p1__16819_SHARP_) {
      return max === p1__16819_SHARP_;
    };
  }(max), coll));
};
clojure.set.union = function() {
  var union = null;
  var union__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var union__1 = function(s1) {
    return s1;
  };
  var union__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
    }
  };
  var union__3 = function() {
    var G__16820__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__16820 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16820__delegate.call(this, s1, s2, sets);
    };
    G__16820.cljs$lang$maxFixedArity = 2;
    G__16820.cljs$lang$applyTo = function(arglist__16821) {
      var s1 = cljs.core.first(arglist__16821);
      arglist__16821 = cljs.core.next(arglist__16821);
      var s2 = cljs.core.first(arglist__16821);
      var sets = cljs.core.rest(arglist__16821);
      return G__16820__delegate(s1, s2, sets);
    };
    G__16820.cljs$core$IFn$_invoke$arity$variadic = G__16820__delegate;
    return G__16820;
  }();
  union = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 0:
        return union__0.call(this);
      case 1:
        return union__1.call(this, s1);
      case 2:
        return union__2.call(this, s1, s2);
      default:
        return union__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  union.cljs$lang$maxFixedArity = 2;
  union.cljs$lang$applyTo = union__3.cljs$lang$applyTo;
  union.cljs$core$IFn$_invoke$arity$0 = union__0;
  union.cljs$core$IFn$_invoke$arity$1 = union__1;
  union.cljs$core$IFn$_invoke$arity$2 = union__2;
  union.cljs$core$IFn$_invoke$arity$variadic = union__3.cljs$core$IFn$_invoke$arity$variadic;
  return union;
}();
clojure.set.intersection = function() {
  var intersection = null;
  var intersection__1 = function(s1) {
    return s1;
  };
  var intersection__2 = function(s1, s2) {
    while (true) {
      if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
        var G__16823 = s2;
        var G__16824 = s1;
        s1 = G__16823;
        s2 = G__16824;
        continue;
      } else {
        return cljs.core.reduce.call(null, function(s1, s2) {
          return function(result, item) {
            if (cljs.core.contains_QMARK_.call(null, s2, item)) {
              return result;
            } else {
              return cljs.core.disj.call(null, result, item);
            }
          };
        }(s1, s2), s1, s1);
      }
      break;
    }
  };
  var intersection__3 = function() {
    var G__16825__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__16822_SHARP_) {
        return-cljs.core.count.call(null, p1__16822_SHARP_);
      }, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__16825 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16825__delegate.call(this, s1, s2, sets);
    };
    G__16825.cljs$lang$maxFixedArity = 2;
    G__16825.cljs$lang$applyTo = function(arglist__16826) {
      var s1 = cljs.core.first(arglist__16826);
      arglist__16826 = cljs.core.next(arglist__16826);
      var s2 = cljs.core.first(arglist__16826);
      var sets = cljs.core.rest(arglist__16826);
      return G__16825__delegate(s1, s2, sets);
    };
    G__16825.cljs$core$IFn$_invoke$arity$variadic = G__16825__delegate;
    return G__16825;
  }();
  intersection = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return intersection__1.call(this, s1);
      case 2:
        return intersection__2.call(this, s1, s2);
      default:
        return intersection__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  intersection.cljs$lang$maxFixedArity = 2;
  intersection.cljs$lang$applyTo = intersection__3.cljs$lang$applyTo;
  intersection.cljs$core$IFn$_invoke$arity$1 = intersection__1;
  intersection.cljs$core$IFn$_invoke$arity$2 = intersection__2;
  intersection.cljs$core$IFn$_invoke$arity$variadic = intersection__3.cljs$core$IFn$_invoke$arity$variadic;
  return intersection;
}();
clojure.set.difference = function() {
  var difference = null;
  var difference__1 = function(s1) {
    return s1;
  };
  var difference__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, function(result, item) {
        if (cljs.core.contains_QMARK_.call(null, s2, item)) {
          return cljs.core.disj.call(null, result, item);
        } else {
          return result;
        }
      }, s1, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
    }
  };
  var difference__3 = function() {
    var G__16827__delegate = function(s1, s2, sets) {
      return cljs.core.reduce.call(null, difference, s1, cljs.core.conj.call(null, sets, s2));
    };
    var G__16827 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16827__delegate.call(this, s1, s2, sets);
    };
    G__16827.cljs$lang$maxFixedArity = 2;
    G__16827.cljs$lang$applyTo = function(arglist__16828) {
      var s1 = cljs.core.first(arglist__16828);
      arglist__16828 = cljs.core.next(arglist__16828);
      var s2 = cljs.core.first(arglist__16828);
      var sets = cljs.core.rest(arglist__16828);
      return G__16827__delegate(s1, s2, sets);
    };
    G__16827.cljs$core$IFn$_invoke$arity$variadic = G__16827__delegate;
    return G__16827;
  }();
  difference = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return difference__1.call(this, s1);
      case 2:
        return difference__2.call(this, s1, s2);
      default:
        return difference__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  difference.cljs$lang$maxFixedArity = 2;
  difference.cljs$lang$applyTo = difference__3.cljs$lang$applyTo;
  difference.cljs$core$IFn$_invoke$arity$1 = difference__1;
  difference.cljs$core$IFn$_invoke$arity$2 = difference__2;
  difference.cljs$core$IFn$_invoke$arity$variadic = difference__3.cljs$core$IFn$_invoke$arity$variadic;
  return difference;
}();
clojure.set.select = function select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__16829_SHARP_) {
    return cljs.core.select_keys.call(null, p1__16829_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__16832) {
    var vec__16833 = p__16832;
    var old = cljs.core.nth.call(null, vec__16833, 0, null);
    var new$ = cljs.core.nth.call(null, vec__16833, 1, null);
    if (cljs.core.contains_QMARK_.call(null, map, old)) {
      return cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, map, old));
    } else {
      return m;
    }
  }, cljs.core.apply.call(null, cljs.core.dissoc, map, cljs.core.keys.call(null, kmap)), kmap);
};
clojure.set.rename = function rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__16834_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__16834_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__16837) {
    var vec__16838 = p__16837;
    var k = cljs.core.nth.call(null, vec__16838, 0, null);
    var v = cljs.core.nth.call(null, vec__16838, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function() {
  var join = null;
  var join__2 = function(xrel, yrel) {
    if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
      var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
      var vec__16845 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
      var r = cljs.core.nth.call(null, vec__16845, 0, null);
      var s = cljs.core.nth.call(null, vec__16845, 1, null);
      var idx = clojure.set.index.call(null, r, ks);
      return cljs.core.reduce.call(null, function(ks, vec__16845, r, s, idx) {
        return function(ret, x) {
          var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
          if (cljs.core.truth_(found)) {
            return cljs.core.reduce.call(null, function(found, ks, vec__16845, r, s, idx) {
              return function(p1__16839_SHARP_, p2__16840_SHARP_) {
                return cljs.core.conj.call(null, p1__16839_SHARP_, cljs.core.merge.call(null, p2__16840_SHARP_, x));
              };
            }(found, ks, vec__16845, r, s, idx), ret, found);
          } else {
            return ret;
          }
        };
      }(ks, vec__16845, r, s, idx), cljs.core.PersistentHashSet.EMPTY, s);
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  };
  var join__3 = function(xrel, yrel, km) {
    var vec__16846 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
    var r = cljs.core.nth.call(null, vec__16846, 0, null);
    var s = cljs.core.nth.call(null, vec__16846, 1, null);
    var k = cljs.core.nth.call(null, vec__16846, 2, null);
    var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
    return cljs.core.reduce.call(null, function(vec__16846, r, s, k, idx) {
      return function(ret, x) {
        var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(found, vec__16846, r, s, k, idx) {
            return function(p1__16841_SHARP_, p2__16842_SHARP_) {
              return cljs.core.conj.call(null, p1__16841_SHARP_, cljs.core.merge.call(null, p2__16842_SHARP_, x));
            };
          }(found, vec__16846, r, s, k, idx), ret, found);
        } else {
          return ret;
        }
      };
    }(vec__16846, r, s, k, idx), cljs.core.PersistentHashSet.EMPTY, s);
  };
  join = function(xrel, yrel, km) {
    switch(arguments.length) {
      case 2:
        return join__2.call(this, xrel, yrel);
      case 3:
        return join__3.call(this, xrel, yrel, km);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  join.cljs$core$IFn$_invoke$arity$3 = join__3;
  return join;
}();
clojure.set.subset_QMARK_ = function subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__16847_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__16847_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__16848_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__16848_SHARP_);
  }, set2);
};
goog.provide("mrhyde.typepatcher");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("mrhyde.mrhyde");
goog.require("mrhyde.guts");
goog.require("clojure.set");
goog.require("mrhyde.guts");
goog.require("mrhyde.mrhyde");
mrhyde.typepatcher.dp = function() {
  var dp__delegate = function(args) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, args));
  };
  var dp = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dp__delegate.call(this, args);
  };
  dp.cljs$lang$maxFixedArity = 0;
  dp.cljs$lang$applyTo = function(arglist__16543) {
    var args = cljs.core.seq(arglist__16543);
    return dp__delegate(args);
  };
  dp.cljs$core$IFn$_invoke$arity$variadic = dp__delegate;
  return dp;
}();
mrhyde.typepatcher.install_js_get_prop = function() {
  var reusable_descriptor = function() {
    var obj16545 = {};
    return obj16545;
  }();
  reusable_descriptor["configurable"] = true;
  reusable_descriptor["enumerable"] = true;
  return function(reusable_descriptor) {
    return function internal_js_getset_prop(obj, nam, getfn) {
      reusable_descriptor["get"] = getfn;
      return Object.defineProperty(obj, nam, reusable_descriptor);
    };
  }(reusable_descriptor);
}.call(null);
mrhyde.typepatcher.install_js_hidden_get_prop = function() {
  var reusable_descriptor = function() {
    var obj16547 = {};
    return obj16547;
  }();
  reusable_descriptor["configurable"] = true;
  reusable_descriptor["enumerable"] = false;
  return function(reusable_descriptor) {
    return function internal_js_getset_prop(obj, nam, getfn) {
      reusable_descriptor["get"] = getfn;
      return Object.defineProperty(obj, nam, reusable_descriptor);
    };
  }(reusable_descriptor);
}.call(null);
mrhyde.typepatcher.hide_js_props = function() {
  var reusable_descriptor = function() {
    var obj16549 = {};
    return obj16549;
  }();
  reusable_descriptor["enumerable"] = false;
  return function(reusable_descriptor) {
    return function internal_js_getset_prop(obj, s) {
      var seq__16554 = cljs.core.seq.call(null, s);
      var chunk__16555 = null;
      var count__16556 = 0;
      var i__16557 = 0;
      while (true) {
        if (i__16557 < count__16556) {
          var nam = cljs.core._nth.call(null, chunk__16555, i__16557);
          Object.defineProperty(obj, nam, reusable_descriptor);
          var G__16558 = seq__16554;
          var G__16559 = chunk__16555;
          var G__16560 = count__16556;
          var G__16561 = i__16557 + 1;
          seq__16554 = G__16558;
          chunk__16555 = G__16559;
          count__16556 = G__16560;
          i__16557 = G__16561;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__16554);
          if (temp__4126__auto__) {
            var seq__16554__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__16554__$1)) {
              var c__3806__auto__ = cljs.core.chunk_first.call(null, seq__16554__$1);
              var G__16562 = cljs.core.chunk_rest.call(null, seq__16554__$1);
              var G__16563 = c__3806__auto__;
              var G__16564 = cljs.core.count.call(null, c__3806__auto__);
              var G__16565 = 0;
              seq__16554 = G__16562;
              chunk__16555 = G__16563;
              count__16556 = G__16564;
              i__16557 = G__16565;
              continue;
            } else {
              var nam = cljs.core.first.call(null, seq__16554__$1);
              Object.defineProperty(obj, nam, reusable_descriptor);
              var G__16566 = cljs.core.next.call(null, seq__16554__$1);
              var G__16567 = null;
              var G__16568 = 0;
              var G__16569 = 0;
              seq__16554 = G__16566;
              chunk__16555 = G__16567;
              count__16556 = G__16568;
              i__16557 = G__16569;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  }(reusable_descriptor);
}.call(null);
mrhyde.typepatcher.install_js_getset_prop = function() {
  var reusable_descriptor = function() {
    var obj16571 = {};
    return obj16571;
  }();
  reusable_descriptor["configurable"] = true;
  reusable_descriptor["enumerable"] = true;
  return function(reusable_descriptor) {
    return function internal_js_getset_prop(obj, nam, getfn, setfn) {
      reusable_descriptor["get"] = getfn;
      reusable_descriptor["set"] = setfn;
      return Object.defineProperty(obj, nam, reusable_descriptor);
    };
  }(reusable_descriptor);
}.call(null);
mrhyde.typepatcher.install_js_hidden_getset_prop = function() {
  var reusable_descriptor = function() {
    var obj16573 = {};
    return obj16573;
  }();
  reusable_descriptor["configurable"] = true;
  reusable_descriptor["enumerable"] = false;
  return function(reusable_descriptor) {
    return function internal_js_getset_prop(obj, nam, getfn, setfn) {
      reusable_descriptor["get"] = getfn;
      reusable_descriptor["set"] = setfn;
      return Object.defineProperty(obj, nam, reusable_descriptor);
    };
  }(reusable_descriptor);
}.call(null);
mrhyde.typepatcher.aset_hidden = function aset_hidden(o, nam, p) {
  o[nam] = p;
  return mrhyde.typepatcher.hide_js_props.call(null, o, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [nam], null));
};
mrhyde.typepatcher.hyde_cache_key = "$cljs$mrhyde$cache";
mrhyde.typepatcher.hyde_access_key = "$cljs$mrhyde$acccess";
mrhyde.typepatcher.hyde_keylist_key = "$cljs$mrhyde$keylist";
mrhyde.typepatcher.hyde_keyset_key = "$cljs$mrhyde$keyset";
mrhyde.typepatcher.cljs_partition_key = "cljs$lang$protocol_mask$partition0$";
mrhyde.typepatcher.hyde_parition_key = "$cljs$mrhyde$" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(mrhyde.typepatcher.cljs_partition_key);
mrhyde.typepatcher.hyde_array_ensure_cached = function hyde_array_ensure_cached(h) {
  if (cljs.core.not.call(null, goog.object.containsKey(h, mrhyde.typepatcher.hyde_cache_key))) {
    return mrhyde.typepatcher.aset_hidden.call(null, h, mrhyde.typepatcher.hyde_cache_key, cljs.core.apply.call(null, cljs.core.array, h));
  } else {
    return null;
  }
};
mrhyde.typepatcher.hyde_array_pop = function() {
  var hyde_array_pop__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method pop");
  };
  var hyde_array_pop = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_pop__delegate.call(this, args);
  };
  hyde_array_pop.cljs$lang$maxFixedArity = 0;
  hyde_array_pop.cljs$lang$applyTo = function(arglist__16574) {
    var args = cljs.core.seq(arglist__16574);
    return hyde_array_pop__delegate(args);
  };
  hyde_array_pop.cljs$core$IFn$_invoke$arity$variadic = hyde_array_pop__delegate;
  return hyde_array_pop;
}();
mrhyde.typepatcher.hyde_array_push = function() {
  var hyde_array_push__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method push");
  };
  var hyde_array_push = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_push__delegate.call(this, args);
  };
  hyde_array_push.cljs$lang$maxFixedArity = 0;
  hyde_array_push.cljs$lang$applyTo = function(arglist__16575) {
    var args = cljs.core.seq(arglist__16575);
    return hyde_array_push__delegate(args);
  };
  hyde_array_push.cljs$core$IFn$_invoke$arity$variadic = hyde_array_push__delegate;
  return hyde_array_push;
}();
mrhyde.typepatcher.hyde_array_reverse = function() {
  var hyde_array_reverse__delegate = function(args) {
    var t = this;
    mrhyde.typepatcher.hyde_array_ensure_cached.call(null, t);
    var c = t[mrhyde.typepatcher.hyde_cache_key];
    c.reverse();
    return t;
  };
  var hyde_array_reverse = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_reverse__delegate.call(this, args);
  };
  hyde_array_reverse.cljs$lang$maxFixedArity = 0;
  hyde_array_reverse.cljs$lang$applyTo = function(arglist__16576) {
    var args = cljs.core.seq(arglist__16576);
    return hyde_array_reverse__delegate(args);
  };
  hyde_array_reverse.cljs$core$IFn$_invoke$arity$variadic = hyde_array_reverse__delegate;
  return hyde_array_reverse;
}();
mrhyde.typepatcher.hyde_array_shift = function() {
  var hyde_array_shift__delegate = function(args) {
    var t = this;
    mrhyde.typepatcher.hyde_array_ensure_cached.call(null, t);
    var c = t[mrhyde.typepatcher.hyde_cache_key];
    return c.shift();
  };
  var hyde_array_shift = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_shift__delegate.call(this, args);
  };
  hyde_array_shift.cljs$lang$maxFixedArity = 0;
  hyde_array_shift.cljs$lang$applyTo = function(arglist__16577) {
    var args = cljs.core.seq(arglist__16577);
    return hyde_array_shift__delegate(args);
  };
  hyde_array_shift.cljs$core$IFn$_invoke$arity$variadic = hyde_array_shift__delegate;
  return hyde_array_shift;
}();
mrhyde.typepatcher.hyde_array_sort = function() {
  var hyde_array_sort__delegate = function(args) {
    var t = this;
    mrhyde.typepatcher.hyde_array_ensure_cached.call(null, t);
    var c = t[mrhyde.typepatcher.hyde_cache_key];
    c.sort();
    return t;
  };
  var hyde_array_sort = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_sort__delegate.call(this, args);
  };
  hyde_array_sort.cljs$lang$maxFixedArity = 0;
  hyde_array_sort.cljs$lang$applyTo = function(arglist__16578) {
    var args = cljs.core.seq(arglist__16578);
    return hyde_array_sort__delegate(args);
  };
  hyde_array_sort.cljs$core$IFn$_invoke$arity$variadic = hyde_array_sort__delegate;
  return hyde_array_sort;
}();
mrhyde.typepatcher.hyde_array_splice = function() {
  var hyde_array_splice__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method splice");
  };
  var hyde_array_splice = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_splice__delegate.call(this, args);
  };
  hyde_array_splice.cljs$lang$maxFixedArity = 0;
  hyde_array_splice.cljs$lang$applyTo = function(arglist__16579) {
    var args = cljs.core.seq(arglist__16579);
    return hyde_array_splice__delegate(args);
  };
  hyde_array_splice.cljs$core$IFn$_invoke$arity$variadic = hyde_array_splice__delegate;
  return hyde_array_splice;
}();
mrhyde.typepatcher.hyde_array_unshift = function() {
  var hyde_array_unshift__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method unshift");
  };
  var hyde_array_unshift = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_unshift__delegate.call(this, args);
  };
  hyde_array_unshift.cljs$lang$maxFixedArity = 0;
  hyde_array_unshift.cljs$lang$applyTo = function(arglist__16580) {
    var args = cljs.core.seq(arglist__16580);
    return hyde_array_unshift__delegate(args);
  };
  hyde_array_unshift.cljs$core$IFn$_invoke$arity$variadic = hyde_array_unshift__delegate;
  return hyde_array_unshift;
}();
mrhyde.typepatcher.hyde_array_concat = function() {
  var hyde_array_concat__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method concat");
  };
  var hyde_array_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_concat__delegate.call(this, args);
  };
  hyde_array_concat.cljs$lang$maxFixedArity = 0;
  hyde_array_concat.cljs$lang$applyTo = function(arglist__16581) {
    var args = cljs.core.seq(arglist__16581);
    return hyde_array_concat__delegate(args);
  };
  hyde_array_concat.cljs$core$IFn$_invoke$arity$variadic = hyde_array_concat__delegate;
  return hyde_array_concat;
}();
mrhyde.typepatcher.hyde_array_join = function() {
  var hyde_array_join__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method join");
  };
  var hyde_array_join = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_join__delegate.call(this, args);
  };
  hyde_array_join.cljs$lang$maxFixedArity = 0;
  hyde_array_join.cljs$lang$applyTo = function(arglist__16582) {
    var args = cljs.core.seq(arglist__16582);
    return hyde_array_join__delegate(args);
  };
  hyde_array_join.cljs$core$IFn$_invoke$arity$variadic = hyde_array_join__delegate;
  return hyde_array_join;
}();
mrhyde.typepatcher.hyde_array_concat = function() {
  var hyde_array_concat__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method concat");
  };
  var hyde_array_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_concat__delegate.call(this, args);
  };
  hyde_array_concat.cljs$lang$maxFixedArity = 0;
  hyde_array_concat.cljs$lang$applyTo = function(arglist__16583) {
    var args = cljs.core.seq(arglist__16583);
    return hyde_array_concat__delegate(args);
  };
  hyde_array_concat.cljs$core$IFn$_invoke$arity$variadic = hyde_array_concat__delegate;
  return hyde_array_concat;
}();
mrhyde.typepatcher.hyde_array_concat = function() {
  var hyde_array_concat__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method concat");
  };
  var hyde_array_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_concat__delegate.call(this, args);
  };
  hyde_array_concat.cljs$lang$maxFixedArity = 0;
  hyde_array_concat.cljs$lang$applyTo = function(arglist__16584) {
    var args = cljs.core.seq(arglist__16584);
    return hyde_array_concat__delegate(args);
  };
  hyde_array_concat.cljs$core$IFn$_invoke$arity$variadic = hyde_array_concat__delegate;
  return hyde_array_concat;
}();
mrhyde.typepatcher.hyde_array_concat = function() {
  var hyde_array_concat__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method concat");
  };
  var hyde_array_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_concat__delegate.call(this, args);
  };
  hyde_array_concat.cljs$lang$maxFixedArity = 0;
  hyde_array_concat.cljs$lang$applyTo = function(arglist__16585) {
    var args = cljs.core.seq(arglist__16585);
    return hyde_array_concat__delegate(args);
  };
  hyde_array_concat.cljs$core$IFn$_invoke$arity$variadic = hyde_array_concat__delegate;
  return hyde_array_concat;
}();
mrhyde.typepatcher.hyde_array_concat = function() {
  var hyde_array_concat__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method concat");
  };
  var hyde_array_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_concat__delegate.call(this, args);
  };
  hyde_array_concat.cljs$lang$maxFixedArity = 0;
  hyde_array_concat.cljs$lang$applyTo = function(arglist__16586) {
    var args = cljs.core.seq(arglist__16586);
    return hyde_array_concat__delegate(args);
  };
  hyde_array_concat.cljs$core$IFn$_invoke$arity$variadic = hyde_array_concat__delegate;
  return hyde_array_concat;
}();
mrhyde.typepatcher.hyde_array_slice = function() {
  var hyde_array_slice__delegate = function(args) {
    var this$ = this;
    var begin = cljs.core.first.call(null, args);
    var end = cljs.core.second.call(null, args);
    if (end == null) {
      return cljs.core.drop.call(null, begin, this$);
    } else {
      return cljs.core.take.call(null, end - begin, cljs.core.drop.call(null, begin, this$));
    }
  };
  var hyde_array_slice = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_slice__delegate.call(this, args);
  };
  hyde_array_slice.cljs$lang$maxFixedArity = 0;
  hyde_array_slice.cljs$lang$applyTo = function(arglist__16587) {
    var args = cljs.core.seq(arglist__16587);
    return hyde_array_slice__delegate(args);
  };
  hyde_array_slice.cljs$core$IFn$_invoke$arity$variadic = hyde_array_slice__delegate;
  return hyde_array_slice;
}();
mrhyde.typepatcher.hyde_array_vector_slice = function() {
  var hyde_array_vector_slice__delegate = function(args) {
    console.log("note: calling untested hyde-array vector-slice");
    var this$ = this;
    return cljs.core.apply.call(null, cljs.core.subvec, this$, args);
  };
  var hyde_array_vector_slice = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_vector_slice__delegate.call(this, args);
  };
  hyde_array_vector_slice.cljs$lang$maxFixedArity = 0;
  hyde_array_vector_slice.cljs$lang$applyTo = function(arglist__16588) {
    var args = cljs.core.seq(arglist__16588);
    return hyde_array_vector_slice__delegate(args);
  };
  hyde_array_vector_slice.cljs$core$IFn$_invoke$arity$variadic = hyde_array_vector_slice__delegate;
  return hyde_array_vector_slice;
}();
mrhyde.typepatcher.hyde_array_to_source = function() {
  var hyde_array_to_source__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method toSource");
  };
  var hyde_array_to_source = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_to_source__delegate.call(this, args);
  };
  hyde_array_to_source.cljs$lang$maxFixedArity = 0;
  hyde_array_to_source.cljs$lang$applyTo = function(arglist__16589) {
    var args = cljs.core.seq(arglist__16589);
    return hyde_array_to_source__delegate(args);
  };
  hyde_array_to_source.cljs$core$IFn$_invoke$arity$variadic = hyde_array_to_source__delegate;
  return hyde_array_to_source;
}();
mrhyde.typepatcher.hyde_array_to_string = function() {
  var hyde_array_to_string__delegate = function(args) {
    var this$ = this;
    return clojure.string.join.call(null, ", ", this$);
  };
  var hyde_array_to_string = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_to_string__delegate.call(this, args);
  };
  hyde_array_to_string.cljs$lang$maxFixedArity = 0;
  hyde_array_to_string.cljs$lang$applyTo = function(arglist__16590) {
    var args = cljs.core.seq(arglist__16590);
    return hyde_array_to_string__delegate(args);
  };
  hyde_array_to_string.cljs$core$IFn$_invoke$arity$variadic = hyde_array_to_string__delegate;
  return hyde_array_to_string;
}();
mrhyde.typepatcher.hyde_array_index_of = function() {
  var hyde_array_index_of__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method indexOf");
  };
  var hyde_array_index_of = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_index_of__delegate.call(this, args);
  };
  hyde_array_index_of.cljs$lang$maxFixedArity = 0;
  hyde_array_index_of.cljs$lang$applyTo = function(arglist__16591) {
    var args = cljs.core.seq(arglist__16591);
    return hyde_array_index_of__delegate(args);
  };
  hyde_array_index_of.cljs$core$IFn$_invoke$arity$variadic = hyde_array_index_of__delegate;
  return hyde_array_index_of;
}();
mrhyde.typepatcher.hyde_array_last_index_of = function() {
  var hyde_array_last_index_of__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method lastIndexOf");
  };
  var hyde_array_last_index_of = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_last_index_of__delegate.call(this, args);
  };
  hyde_array_last_index_of.cljs$lang$maxFixedArity = 0;
  hyde_array_last_index_of.cljs$lang$applyTo = function(arglist__16592) {
    var args = cljs.core.seq(arglist__16592);
    return hyde_array_last_index_of__delegate(args);
  };
  hyde_array_last_index_of.cljs$core$IFn$_invoke$arity$variadic = hyde_array_last_index_of__delegate;
  return hyde_array_last_index_of;
}();
mrhyde.typepatcher.hyde_array_every = function() {
  var hyde_array_every__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method every");
  };
  var hyde_array_every = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_every__delegate.call(this, args);
  };
  hyde_array_every.cljs$lang$maxFixedArity = 0;
  hyde_array_every.cljs$lang$applyTo = function(arglist__16593) {
    var args = cljs.core.seq(arglist__16593);
    return hyde_array_every__delegate(args);
  };
  hyde_array_every.cljs$core$IFn$_invoke$arity$variadic = hyde_array_every__delegate;
  return hyde_array_every;
}();
mrhyde.typepatcher.hyde_array_some = function() {
  var hyde_array_some__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method some");
  };
  var hyde_array_some = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_some__delegate.call(this, args);
  };
  hyde_array_some.cljs$lang$maxFixedArity = 0;
  hyde_array_some.cljs$lang$applyTo = function(arglist__16594) {
    var args = cljs.core.seq(arglist__16594);
    return hyde_array_some__delegate(args);
  };
  hyde_array_some.cljs$core$IFn$_invoke$arity$variadic = hyde_array_some__delegate;
  return hyde_array_some;
}();
mrhyde.typepatcher.hyde_array_filter = function() {
  var hyde_array_filter__delegate = function(args) {
    var ct = this;
    var v = cljs.core.vec.call(null, args);
    var f = cljs.core.get.call(null, v, 0, cljs.core.identity);
    var t = cljs.core.get.call(null, v, 1, undefined);
    return cljs.core.vec.call(null, cljs.core.doall.call(null, cljs.core.filter.call(null, function(v, f, t, ct) {
      return function(p1__16595_SHARP_) {
        return f.call(t, p1__16595_SHARP_);
      };
    }(v, f, t, ct), cljs.core.seq.call(null, ct))));
  };
  var hyde_array_filter = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_filter__delegate.call(this, args);
  };
  hyde_array_filter.cljs$lang$maxFixedArity = 0;
  hyde_array_filter.cljs$lang$applyTo = function(arglist__16596) {
    var args = cljs.core.seq(arglist__16596);
    return hyde_array_filter__delegate(args);
  };
  hyde_array_filter.cljs$core$IFn$_invoke$arity$variadic = hyde_array_filter__delegate;
  return hyde_array_filter;
}();
mrhyde.typepatcher.hyde_array_map = function() {
  var hyde_array_map__delegate = function(args) {
    var ct = this;
    var v = cljs.core.vec.call(null, args);
    var f = cljs.core.get.call(null, v, 0, cljs.core.identity);
    var t = cljs.core.get.call(null, v, 1, undefined);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(v, f, t, ct) {
      return function(p1__16597_SHARP_, p2__16598_SHARP_) {
        return f.call(t, p1__16597_SHARP_, p2__16598_SHARP_, ct);
      };
    }(v, f, t, ct), cljs.core.seq.call(null, ct), cljs.core.range.call(null)));
  };
  var hyde_array_map = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_map__delegate.call(this, args);
  };
  hyde_array_map.cljs$lang$maxFixedArity = 0;
  hyde_array_map.cljs$lang$applyTo = function(arglist__16599) {
    var args = cljs.core.seq(arglist__16599);
    return hyde_array_map__delegate(args);
  };
  hyde_array_map.cljs$core$IFn$_invoke$arity$variadic = hyde_array_map__delegate;
  return hyde_array_map;
}();
mrhyde.typepatcher.hyde_array_for_each = function() {
  var hyde_array_for_each__delegate = function(args) {
    var ct_16600 = this;
    mrhyde.typepatcher.hyde_array_map.call(ct_16600, cljs.core.first.call(null, args), cljs.core.second.call(null, args));
    return null;
  };
  var hyde_array_for_each = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_for_each__delegate.call(this, args);
  };
  hyde_array_for_each.cljs$lang$maxFixedArity = 0;
  hyde_array_for_each.cljs$lang$applyTo = function(arglist__16601) {
    var args = cljs.core.seq(arglist__16601);
    return hyde_array_for_each__delegate(args);
  };
  hyde_array_for_each.cljs$core$IFn$_invoke$arity$variadic = hyde_array_for_each__delegate;
  return hyde_array_for_each;
}();
mrhyde.typepatcher.hyde_array_reduce = function() {
  var hyde_array_reduce__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method reduce");
  };
  var hyde_array_reduce = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_reduce__delegate.call(this, args);
  };
  hyde_array_reduce.cljs$lang$maxFixedArity = 0;
  hyde_array_reduce.cljs$lang$applyTo = function(arglist__16602) {
    var args = cljs.core.seq(arglist__16602);
    return hyde_array_reduce__delegate(args);
  };
  hyde_array_reduce.cljs$core$IFn$_invoke$arity$variadic = hyde_array_reduce__delegate;
  return hyde_array_reduce;
}();
mrhyde.typepatcher.hyde_array_reduce_right = function() {
  var hyde_array_reduce_right__delegate = function(args) {
    return console.log("WARNING: someone has called unsupported hyde-array method reduce-Right");
  };
  var hyde_array_reduce_right = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hyde_array_reduce_right__delegate.call(this, args);
  };
  hyde_array_reduce_right.cljs$lang$maxFixedArity = 0;
  hyde_array_reduce_right.cljs$lang$applyTo = function(arglist__16603) {
    var args = cljs.core.seq(arglist__16603);
    return hyde_array_reduce_right__delegate(args);
  };
  hyde_array_reduce_right.cljs$core$IFn$_invoke$arity$variadic = hyde_array_reduce_right__delegate;
  return hyde_array_reduce_right;
}();
mrhyde.typepatcher.strkey = function strkey(x) {
  if (x instanceof cljs.core.Keyword) {
    return cljs.core.name.call(null, x);
  } else {
    return x;
  }
};
mrhyde.typepatcher.gen_map_getter = function gen_map_getter(k) {
  return function() {
    var t = this;
    return cljs.core.get.call(null, t[mrhyde.typepatcher.hyde_access_key], k);
  };
};
mrhyde.typepatcher.gen_map_setter = function gen_map_setter(k) {
  return function(v) {
    var t = this;
    if (cljs.core.not.call(null, goog.object.containsKey(t, mrhyde.typepatcher.hyde_cache_key))) {
      var c_16604 = cljs.core.transient$.call(null, t);
      mrhyde.typepatcher.aset_hidden.call(null, t, mrhyde.typepatcher.hyde_access_key, c_16604);
      mrhyde.typepatcher.aset_hidden.call(null, t, mrhyde.typepatcher.hyde_cache_key, c_16604);
    } else {
    }
    var c = t[mrhyde.typepatcher.hyde_cache_key];
    return cljs.core.assoc_BANG_.call(null, c, k, v);
  };
};
mrhyde.typepatcher.patch_map = function patch_map(m) {
  mrhyde.typepatcher.aset_hidden.call(null, m, mrhyde.typepatcher.hyde_access_key, m);
  mrhyde.typepatcher.hide_js_props.call(null, m, Object.keys(m));
  var seq__16609_16613 = cljs.core.seq.call(null, cljs.core.keys.call(null, m));
  var chunk__16610_16614 = null;
  var count__16611_16615 = 0;
  var i__16612_16616 = 0;
  while (true) {
    if (i__16612_16616 < count__16611_16615) {
      var k_16617 = cljs.core._nth.call(null, chunk__16610_16614, i__16612_16616);
      if (k_16617 instanceof cljs.core.Keyword && cljs.core.not.call(null, goog.object.containsKey(m, cljs.core.name.call(null, k_16617)))) {
        mrhyde.typepatcher.install_js_getset_prop.call(null, m, cljs.core.name.call(null, k_16617), mrhyde.typepatcher.gen_map_getter.call(null, k_16617), mrhyde.typepatcher.gen_map_setter.call(null, k_16617));
      } else {
      }
      var G__16618 = seq__16609_16613;
      var G__16619 = chunk__16610_16614;
      var G__16620 = count__16611_16615;
      var G__16621 = i__16612_16616 + 1;
      seq__16609_16613 = G__16618;
      chunk__16610_16614 = G__16619;
      count__16611_16615 = G__16620;
      i__16612_16616 = G__16621;
      continue;
    } else {
      var temp__4126__auto___16622 = cljs.core.seq.call(null, seq__16609_16613);
      if (temp__4126__auto___16622) {
        var seq__16609_16623__$1 = temp__4126__auto___16622;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16609_16623__$1)) {
          var c__3806__auto___16624 = cljs.core.chunk_first.call(null, seq__16609_16623__$1);
          var G__16625 = cljs.core.chunk_rest.call(null, seq__16609_16623__$1);
          var G__16626 = c__3806__auto___16624;
          var G__16627 = cljs.core.count.call(null, c__3806__auto___16624);
          var G__16628 = 0;
          seq__16609_16613 = G__16625;
          chunk__16610_16614 = G__16626;
          count__16611_16615 = G__16627;
          i__16612_16616 = G__16628;
          continue;
        } else {
          var k_16629 = cljs.core.first.call(null, seq__16609_16623__$1);
          if (k_16629 instanceof cljs.core.Keyword && cljs.core.not.call(null, goog.object.containsKey(m, cljs.core.name.call(null, k_16629)))) {
            mrhyde.typepatcher.install_js_getset_prop.call(null, m, cljs.core.name.call(null, k_16629), mrhyde.typepatcher.gen_map_getter.call(null, k_16629), mrhyde.typepatcher.gen_map_setter.call(null, k_16629));
          } else {
          }
          var G__16630 = cljs.core.next.call(null, seq__16609_16623__$1);
          var G__16631 = null;
          var G__16632 = 0;
          var G__16633 = 0;
          seq__16609_16613 = G__16630;
          chunk__16610_16614 = G__16631;
          count__16611_16615 = G__16632;
          i__16612_16616 = G__16633;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.keyword_QMARK_, cljs.core.keys.call(null, m)))) {
    mrhyde.typepatcher.aset_hidden.call(null, m, mrhyde.typepatcher.hyde_keylist_key, false);
    mrhyde.typepatcher.aset_hidden.call(null, m, mrhyde.typepatcher.hyde_keyset_key, false);
    mrhyde.typepatcher.aset_hidden.call(null, m, mrhyde.typepatcher.hyde_keylist_key, Object.keys(m));
  } else {
  }
  return m;
};
mrhyde.typepatcher.have_patched_js_with_key_lookup = cljs.core.atom.call(null, false);
mrhyde.typepatcher.patch_js_with_key_lookup = function patch_js_with_key_lookup() {
  if (cljs.core.not.call(null, cljs.core.deref.call(null, mrhyde.typepatcher.have_patched_js_with_key_lookup))) {
    cljs.core.reset_BANG_.call(null, mrhyde.typepatcher.have_patched_js_with_key_lookup, true);
    cljs.core.ILookup["object"] = true;
    return cljs.core._lookup["object"] = function() {
      var G__16634 = null;
      var G__16634__2 = function(o, k) {
        return o[mrhyde.typepatcher.strkey.call(null, k)];
      };
      var G__16634__3 = function(o, k, not_found) {
        var s = mrhyde.typepatcher.strkey.call(null, k);
        if (cljs.core.truth_(goog.object.containsKey(o, s))) {
          return o[s];
        } else {
          return not_found;
        }
      };
      G__16634 = function(o, k, not_found) {
        switch(arguments.length) {
          case 2:
            return G__16634__2.call(this, o, k);
          case 3:
            return G__16634__3.call(this, o, k, not_found);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      return G__16634;
    }();
  } else {
    return null;
  }
};
mrhyde.typepatcher.MAXLEN = function() {
  var or__3050__auto__ = function() {
    var ct = this;
    return ct["mrhyde_maxseqlen"];
  }();
  if (cljs.core.truth_(or__3050__auto__)) {
    return or__3050__auto__;
  } else {
    return 5E3;
  }
}();
mrhyde.typepatcher.patch_seq_object = function patch_seq_object(o) {
  return null;
};
mrhyde.typepatcher.patch_map_object = function patch_map_object(o) {
  mrhyde.typepatcher.patch_map.call(null, o);
  return null;
};
mrhyde.typepatcher.patch_core_seq_type = function patch_core_seq_type(s) {
  var orig_fn = cljs.core[s];
  var orig_keys = Object.keys(orig_fn);
  var new_fn = function(orig_fn, orig_keys) {
    return function() {
      var G__16643__delegate = function(args) {
        var nargs = cljs.core.apply.call(null, cljs.core.array, cljs.core.cons.call(null, null, args));
        var binder = Function.prototype.bind.apply(orig_fn, nargs);
        var that = new binder;
        mrhyde.typepatcher.patch_seq_object.call(null, that);
        return that;
      };
      var G__16643 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16643__delegate.call(this, args);
      };
      G__16643.cljs$lang$maxFixedArity = 0;
      G__16643.cljs$lang$applyTo = function(arglist__16644) {
        var args = cljs.core.seq(arglist__16644);
        return G__16643__delegate(args);
      };
      G__16643.cljs$core$IFn$_invoke$arity$variadic = G__16643__delegate;
      return G__16643;
    }();
  }(orig_fn, orig_keys);
  var seq__16639_16645 = cljs.core.seq.call(null, orig_keys);
  var chunk__16640_16646 = null;
  var count__16641_16647 = 0;
  var i__16642_16648 = 0;
  while (true) {
    if (i__16642_16648 < count__16641_16647) {
      var k_16649 = cljs.core._nth.call(null, chunk__16640_16646, i__16642_16648);
      new_fn[k_16649] = orig_fn[k_16649];
      var G__16650 = seq__16639_16645;
      var G__16651 = chunk__16640_16646;
      var G__16652 = count__16641_16647;
      var G__16653 = i__16642_16648 + 1;
      seq__16639_16645 = G__16650;
      chunk__16640_16646 = G__16651;
      count__16641_16647 = G__16652;
      i__16642_16648 = G__16653;
      continue;
    } else {
      var temp__4126__auto___16654 = cljs.core.seq.call(null, seq__16639_16645);
      if (temp__4126__auto___16654) {
        var seq__16639_16655__$1 = temp__4126__auto___16654;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16639_16655__$1)) {
          var c__3806__auto___16656 = cljs.core.chunk_first.call(null, seq__16639_16655__$1);
          var G__16657 = cljs.core.chunk_rest.call(null, seq__16639_16655__$1);
          var G__16658 = c__3806__auto___16656;
          var G__16659 = cljs.core.count.call(null, c__3806__auto___16656);
          var G__16660 = 0;
          seq__16639_16645 = G__16657;
          chunk__16640_16646 = G__16658;
          count__16641_16647 = G__16659;
          i__16642_16648 = G__16660;
          continue;
        } else {
          var k_16661 = cljs.core.first.call(null, seq__16639_16655__$1);
          new_fn[k_16661] = orig_fn[k_16661];
          var G__16662 = cljs.core.next.call(null, seq__16639_16655__$1);
          var G__16663 = null;
          var G__16664 = 0;
          var G__16665 = 0;
          seq__16639_16645 = G__16662;
          chunk__16640_16646 = G__16663;
          count__16641_16647 = G__16664;
          i__16642_16648 = G__16665;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core[s] = new_fn;
};
mrhyde.typepatcher.patch_core_map_type = function patch_core_map_type(s) {
  var orig_fn = cljs.core[s];
  var orig_keys = Object.keys(orig_fn);
  var new_fn = function(orig_fn, orig_keys) {
    return function() {
      var G__16674__delegate = function(args) {
        var nargs = cljs.core.apply.call(null, cljs.core.array, cljs.core.cons.call(null, null, args));
        var binder = Function.prototype.bind.apply(orig_fn, nargs);
        var that = new binder;
        mrhyde.typepatcher.patch_map_object.call(null, that);
        return that;
      };
      var G__16674 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16674__delegate.call(this, args);
      };
      G__16674.cljs$lang$maxFixedArity = 0;
      G__16674.cljs$lang$applyTo = function(arglist__16675) {
        var args = cljs.core.seq(arglist__16675);
        return G__16674__delegate(args);
      };
      G__16674.cljs$core$IFn$_invoke$arity$variadic = G__16674__delegate;
      return G__16674;
    }();
  }(orig_fn, orig_keys);
  var seq__16670_16676 = cljs.core.seq.call(null, orig_keys);
  var chunk__16671_16677 = null;
  var count__16672_16678 = 0;
  var i__16673_16679 = 0;
  while (true) {
    if (i__16673_16679 < count__16672_16678) {
      var k_16680 = cljs.core._nth.call(null, chunk__16671_16677, i__16673_16679);
      new_fn[k_16680] = orig_fn[k_16680];
      var G__16681 = seq__16670_16676;
      var G__16682 = chunk__16671_16677;
      var G__16683 = count__16672_16678;
      var G__16684 = i__16673_16679 + 1;
      seq__16670_16676 = G__16681;
      chunk__16671_16677 = G__16682;
      count__16672_16678 = G__16683;
      i__16673_16679 = G__16684;
      continue;
    } else {
      var temp__4126__auto___16685 = cljs.core.seq.call(null, seq__16670_16676);
      if (temp__4126__auto___16685) {
        var seq__16670_16686__$1 = temp__4126__auto___16685;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16670_16686__$1)) {
          var c__3806__auto___16687 = cljs.core.chunk_first.call(null, seq__16670_16686__$1);
          var G__16688 = cljs.core.chunk_rest.call(null, seq__16670_16686__$1);
          var G__16689 = c__3806__auto___16687;
          var G__16690 = cljs.core.count.call(null, c__3806__auto___16687);
          var G__16691 = 0;
          seq__16670_16676 = G__16688;
          chunk__16671_16677 = G__16689;
          count__16672_16678 = G__16690;
          i__16673_16679 = G__16691;
          continue;
        } else {
          var k_16692 = cljs.core.first.call(null, seq__16670_16686__$1);
          new_fn[k_16692] = orig_fn[k_16692];
          var G__16693 = cljs.core.next.call(null, seq__16670_16686__$1);
          var G__16694 = null;
          var G__16695 = 0;
          var G__16696 = 0;
          seq__16670_16676 = G__16693;
          chunk__16671_16677 = G__16694;
          count__16672_16678 = G__16695;
          i__16673_16679 = G__16696;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core[s] = new_fn;
};
mrhyde.typepatcher.gen_seq_getter = function gen_seq_getter(n) {
  return function() {
    var t = this;
    var src = cljs.core.truth_(goog.object.containsKey(t, mrhyde.typepatcher.hyde_cache_key)) ? t[mrhyde.typepatcher.hyde_cache_key] : t;
    return cljs.core.nth.call(null, src, n, undefined);
  };
};
mrhyde.typepatcher.gen_seq_setter = function gen_seq_setter(n) {
  return function(v) {
    var t = this;
    mrhyde.typepatcher.hyde_array_ensure_cached.call(null, t);
    var c = t[mrhyde.typepatcher.hyde_cache_key];
    return c[n] = v;
  };
};
mrhyde.typepatcher.patch_prototype_as_array = function patch_prototype_as_array(p, o, is_vect) {
  mrhyde.typepatcher.aset_hidden.call(null, p, mrhyde.guts.hyde_proto_array_marker, true);
  mrhyde.typepatcher.install_js_hidden_get_prop.call(null, p, "length", function() {
    var t = this;
    return cljs.core.count.call(null, cljs.core.take.call(null, mrhyde.typepatcher.MAXLEN, t));
  });
  var n__3906__auto___16697 = mrhyde.typepatcher.MAXLEN;
  var n_16698 = 0;
  while (true) {
    if (n_16698 < n__3906__auto___16697) {
      mrhyde.typepatcher.install_js_hidden_getset_prop.call(null, p, n_16698, mrhyde.typepatcher.gen_seq_getter.call(null, n_16698), mrhyde.typepatcher.gen_seq_setter.call(null, n_16698));
      var G__16699 = n_16698 + 1;
      n_16698 = G__16699;
      continue;
    } else {
    }
    break;
  }
  mrhyde.typepatcher.aset_hidden.call(null, p, "__ArrayLike", true);
  mrhyde.typepatcher.aset_hidden.call(null, p, "toCljString", p.toString);
  mrhyde.typepatcher.aset_hidden.call(null, p, "pop", mrhyde.typepatcher.hyde_array_pop);
  mrhyde.typepatcher.aset_hidden.call(null, p, "push", mrhyde.typepatcher.hyde_array_push);
  mrhyde.typepatcher.aset_hidden.call(null, p, "reverse", mrhyde.typepatcher.hyde_array_reverse);
  mrhyde.typepatcher.aset_hidden.call(null, p, "shift", mrhyde.typepatcher.hyde_array_shift);
  mrhyde.typepatcher.aset_hidden.call(null, p, "sort", mrhyde.typepatcher.hyde_array_sort);
  mrhyde.typepatcher.aset_hidden.call(null, p, "splice", mrhyde.typepatcher.hyde_array_splice);
  mrhyde.typepatcher.aset_hidden.call(null, p, "unshift", mrhyde.typepatcher.hyde_array_unshift);
  mrhyde.typepatcher.aset_hidden.call(null, p, "concat", mrhyde.typepatcher.hyde_array_concat);
  mrhyde.typepatcher.aset_hidden.call(null, p, "join", mrhyde.typepatcher.hyde_array_pop);
  mrhyde.typepatcher.aset_hidden.call(null, p, "slice", cljs.core.truth_(is_vect) ? mrhyde.typepatcher.hyde_array_vector_slice : mrhyde.typepatcher.hyde_array_slice);
  mrhyde.typepatcher.aset_hidden.call(null, p, "toSource", mrhyde.typepatcher.hyde_array_to_source);
  mrhyde.typepatcher.aset_hidden.call(null, p, "toString", mrhyde.typepatcher.hyde_array_to_string);
  mrhyde.typepatcher.aset_hidden.call(null, p, "indexOf", mrhyde.typepatcher.hyde_array_index_of);
  mrhyde.typepatcher.aset_hidden.call(null, p, "lastIndexOf", mrhyde.typepatcher.hyde_array_last_index_of);
  mrhyde.typepatcher.aset_hidden.call(null, p, "forEach", mrhyde.typepatcher.hyde_array_for_each);
  mrhyde.typepatcher.aset_hidden.call(null, p, "every", mrhyde.typepatcher.hyde_array_every);
  mrhyde.typepatcher.aset_hidden.call(null, p, "some", mrhyde.typepatcher.hyde_array_some);
  mrhyde.typepatcher.aset_hidden.call(null, p, "filter", mrhyde.typepatcher.hyde_array_filter);
  mrhyde.typepatcher.aset_hidden.call(null, p, "map", mrhyde.typepatcher.hyde_array_map);
  mrhyde.typepatcher.aset_hidden.call(null, p, "reduce", mrhyde.typepatcher.hyde_array_reduce);
  return mrhyde.typepatcher.aset_hidden.call(null, p, "reduceRight", mrhyde.typepatcher.hyde_array_reduce_right);
};
mrhyde.typepatcher.patch_prototype_as_map = function patch_prototype_as_map(p, o) {
  return mrhyde.typepatcher.aset_hidden.call(null, p, mrhyde.guts.hyde_proto_object_marker, true);
};
mrhyde.typepatcher.add_hyde_protocol_to_seq = function add_hyde_protocol_to_seq(s) {
  s.prototype.mrhyde$mrhyde$IHyde$ = true;
  s.prototype.mrhyde$mrhyde$IHyde$has_cache_QMARK_$arity$1 = function(this$) {
    var this$__$1 = this;
    return goog.object.containsKey(this$__$1, mrhyde.typepatcher.hyde_cache_key);
  };
  return s.prototype.mrhyde$mrhyde$IHyde$from_cache$arity$1 = function(this$) {
    var this$__$1 = this;
    var temp__4124__auto__ = this$__$1[mrhyde.typepatcher.hyde_cache_key];
    if (cljs.core.truth_(temp__4124__auto__)) {
      var c = temp__4124__auto__;
      return cljs.core.vec.call(null, c);
    } else {
      return this$__$1;
    }
  };
};
mrhyde.typepatcher.filtered_keylist_set = function filtered_keylist_set(l) {
  return cljs.core.set.call(null, cljs.core.remove.call(null, function(p1__16700_SHARP_) {
    return cljs.core.re_find.call(null, /cljs\$/, p1__16700_SHARP_);
  }, l));
};
mrhyde.typepatcher.lazy_init_hyde_setset = function lazy_init_hyde_setset(m) {
  if (cljs.core.truth_(function() {
    var and__3038__auto__ = cljs.core.not.call(null, m[mrhyde.typepatcher.hyde_keyset_key]);
    if (and__3038__auto__) {
      return m[mrhyde.typepatcher.hyde_keylist_key];
    } else {
      return and__3038__auto__;
    }
  }())) {
    return mrhyde.typepatcher.aset_hidden.call(null, m, mrhyde.typepatcher.hyde_keyset_key, mrhyde.typepatcher.filtered_keylist_set.call(null, m[mrhyde.typepatcher.hyde_keylist_key]));
  } else {
    return null;
  }
};
mrhyde.typepatcher.add_hyde_protocol_to_map = function add_hyde_protocol_to_map(m) {
  m.prototype.mrhyde$mrhyde$IHyde$ = true;
  m.prototype.mrhyde$mrhyde$IHyde$has_cache_QMARK_$arity$1 = function(this$) {
    var this$__$1 = this;
    mrhyde.typepatcher.lazy_init_hyde_setset.call(null, this$__$1);
    var or__3050__auto__ = goog.object.containsKey(this$__$1, mrhyde.typepatcher.hyde_cache_key);
    if (cljs.core.truth_(or__3050__auto__)) {
      return or__3050__auto__;
    } else {
      return cljs.core.not_EQ_.call(null, this$__$1[mrhyde.typepatcher.hyde_keyset_key], mrhyde.typepatcher.filtered_keylist_set.call(null, Object.keys(this$__$1)));
    }
  };
  m.prototype.mrhyde$mrhyde$IHyde$from_cache$arity$1 = function(this$) {
    var this$__$1 = this;
    mrhyde.typepatcher.lazy_init_hyde_setset.call(null, this$__$1);
    var cur_keyset = clojure.set.difference.call(null, mrhyde.typepatcher.filtered_keylist_set.call(null, Object.keys(this$__$1)), cljs.core.PersistentHashSet.fromArray([mrhyde.typepatcher.hyde_cache_key], true));
    var new_keys = clojure.set.difference.call(null, cur_keyset, this$__$1[mrhyde.typepatcher.hyde_keyset_key]);
    var new_map = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__3775__auto__ = function(cur_keyset, new_keys, this$__$1) {
        return function iter__16705(s__16706) {
          return new cljs.core.LazySeq(null, function(cur_keyset, new_keys, this$__$1) {
            return function() {
              var s__16706__$1 = s__16706;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__16706__$1);
                if (temp__4126__auto__) {
                  var s__16706__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__16706__$2)) {
                    var c__3773__auto__ = cljs.core.chunk_first.call(null, s__16706__$2);
                    var size__3774__auto__ = cljs.core.count.call(null, c__3773__auto__);
                    var b__16708 = cljs.core.chunk_buffer.call(null, size__3774__auto__);
                    if (function() {
                      var i__16707 = 0;
                      while (true) {
                        if (i__16707 < size__3774__auto__) {
                          var k = cljs.core._nth.call(null, c__3773__auto__, i__16707);
                          cljs.core.chunk_append.call(null, b__16708, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), this$__$1[k]], null));
                          var G__16709 = i__16707 + 1;
                          i__16707 = G__16709;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16708), iter__16705.call(null, cljs.core.chunk_rest.call(null, s__16706__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16708), null);
                    }
                  } else {
                    var k = cljs.core.first.call(null, s__16706__$2);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), this$__$1[k]], null), iter__16705.call(null, cljs.core.rest.call(null, s__16706__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(cur_keyset, new_keys, this$__$1), null, null);
        };
      }(cur_keyset, new_keys, this$__$1);
      return iter__3775__auto__.call(null, new_keys);
    }());
    var cache = this$__$1[mrhyde.typepatcher.hyde_cache_key];
    if (cljs.core.truth_(cache)) {
      var p = cljs.core.persistent_BANG_.call(null, cache);
      mrhyde.typepatcher.aset_hidden.call(null, this$__$1, mrhyde.typepatcher.hyde_cache_key, cljs.core.transient$.call(null, p));
      return cljs.core.merge.call(null, p, new_map);
    } else {
      return cljs.core.merge.call(null, this$__$1, new_map);
    }
  };
  var p = m["prototype"];
  return mrhyde.typepatcher.hide_js_props.call(null, p, Object.keys(p));
};
mrhyde.typepatcher.from_cache_if_has_cache = function from_cache_if_has_cache(x) {
  if (cljs.core.truth_(function() {
    var and__3038__auto__ = mrhyde.mrhyde.hyde_QMARK_.call(null, x);
    if (and__3038__auto__) {
      return mrhyde.mrhyde.has_cache_QMARK_.call(null, x);
    } else {
      return and__3038__auto__;
    }
  }())) {
    return mrhyde.mrhyde.from_cache.call(null, x);
  } else {
    return x;
  }
};
mrhyde.typepatcher.recurse_from_hyde_cache = function() {
  var recurse_from_hyde_cache__delegate = function(xo, opts) {
    var opts_map = cljs.core.apply.call(null, cljs.core.array_map, opts);
    var skippers = cljs.core.get.call(null, opts_map, new cljs.core.Keyword(null, "skip", "skip", 602715391), cljs.core.PersistentVector.EMPTY);
    var skiplist = skippers instanceof cljs.core.Keyword ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [skippers], null) : skippers;
    var skipset = cljs.core.set.call(null, skiplist);
    return function(opts_map, skippers, skiplist, skipset) {
      return function internal_recurse(x) {
        if (cljs.core.truth_(goog.isArray(x))) {
          return cljs.core.vec.call(null, cljs.core.map.call(null, internal_recurse, x));
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var c = mrhyde.typepatcher.from_cache_if_has_cache.call(null, x);
            return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
              var iter__3775__auto__ = function(c, opts_map, skippers, skiplist, skipset) {
                return function iter__16734(s__16735) {
                  return new cljs.core.LazySeq(null, function(c, opts_map, skippers, skiplist, skipset) {
                    return function() {
                      var s__16735__$1 = s__16735;
                      while (true) {
                        var temp__4126__auto__ = cljs.core.seq.call(null, s__16735__$1);
                        if (temp__4126__auto__) {
                          var s__16735__$2 = temp__4126__auto__;
                          if (cljs.core.chunked_seq_QMARK_.call(null, s__16735__$2)) {
                            var c__3773__auto__ = cljs.core.chunk_first.call(null, s__16735__$2);
                            var size__3774__auto__ = cljs.core.count.call(null, c__3773__auto__);
                            var b__16737 = cljs.core.chunk_buffer.call(null, size__3774__auto__);
                            if (function() {
                              var i__16736 = 0;
                              while (true) {
                                if (i__16736 < size__3774__auto__) {
                                  var vec__16740 = cljs.core._nth.call(null, c__3773__auto__, i__16736);
                                  var k = cljs.core.nth.call(null, vec__16740, 0, null);
                                  var v = cljs.core.nth.call(null, vec__16740, 1, null);
                                  cljs.core.chunk_append.call(null, b__16737, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [internal_recurse.call(null, k), cljs.core.truth_(skipset.call(null, k)) ? v : internal_recurse.call(null, v)], null));
                                  var G__16742 = i__16736 + 1;
                                  i__16736 = G__16742;
                                  continue;
                                } else {
                                  return true;
                                }
                                break;
                              }
                            }()) {
                              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16737), iter__16734.call(null, cljs.core.chunk_rest.call(null, s__16735__$2)));
                            } else {
                              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16737), null);
                            }
                          } else {
                            var vec__16741 = cljs.core.first.call(null, s__16735__$2);
                            var k = cljs.core.nth.call(null, vec__16741, 0, null);
                            var v = cljs.core.nth.call(null, vec__16741, 1, null);
                            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [internal_recurse.call(null, k), cljs.core.truth_(skipset.call(null, k)) ? v : internal_recurse.call(null, v)], null), iter__16734.call(null, cljs.core.rest.call(null, s__16735__$2)));
                          }
                        } else {
                          return null;
                        }
                        break;
                      }
                    };
                  }(c, opts_map, skippers, skiplist, skipset), null, null);
                };
              }(c, opts_map, skippers, skiplist, skipset);
              return iter__3775__auto__.call(null, c);
            }());
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var c = mrhyde.typepatcher.from_cache_if_has_cache.call(null, x);
              return cljs.core.into.call(null, cljs.core.empty.call(null, c), cljs.core.map.call(null, internal_recurse, c));
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return mrhyde.typepatcher.from_cache_if_has_cache.call(null, x);
              } else {
                return null;
              }
            }
          }
        }
      };
    }(opts_map, skippers, skiplist, skipset).call(null, xo);
  };
  var recurse_from_hyde_cache = function(xo, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return recurse_from_hyde_cache__delegate.call(this, xo, opts);
  };
  recurse_from_hyde_cache.cljs$lang$maxFixedArity = 1;
  recurse_from_hyde_cache.cljs$lang$applyTo = function(arglist__16743) {
    var xo = cljs.core.first(arglist__16743);
    var opts = cljs.core.rest(arglist__16743);
    return recurse_from_hyde_cache__delegate(xo, opts);
  };
  recurse_from_hyde_cache.cljs$core$IFn$_invoke$arity$variadic = recurse_from_hyde_cache__delegate;
  return recurse_from_hyde_cache;
}();
mrhyde.typepatcher.repersist = function() {
  var repersist__delegate = function(x, opts) {
    if (cljs.core.truth_(goog.isFunction(x))) {
      return function() {
        var G__16744__delegate = function(args) {
          return cljs.core.apply.call(null, repersist, function() {
            var t = this;
            return x.apply(t, cljs.core.apply.call(null, cljs.core.array, args));
          }(), opts);
        };
        var G__16744 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16744__delegate.call(this, args);
        };
        G__16744.cljs$lang$maxFixedArity = 0;
        G__16744.cljs$lang$applyTo = function(arglist__16745) {
          var args = cljs.core.seq(arglist__16745);
          return G__16744__delegate(args);
        };
        G__16744.cljs$core$IFn$_invoke$arity$variadic = G__16744__delegate;
        return G__16744;
      }();
    } else {
      return cljs.core.apply.call(null, mrhyde.typepatcher.recurse_from_hyde_cache, x, opts);
    }
  };
  var repersist = function(x, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return repersist__delegate.call(this, x, opts);
  };
  repersist.cljs$lang$maxFixedArity = 1;
  repersist.cljs$lang$applyTo = function(arglist__16746) {
    var x = cljs.core.first(arglist__16746);
    var opts = cljs.core.rest(arglist__16746);
    return repersist__delegate(x, opts);
  };
  repersist.cljs$core$IFn$_invoke$arity$variadic = repersist__delegate;
  return repersist;
}();
mrhyde.typepatcher.have_patched_arrayish_flag = cljs.core.atom.call(null, false);
mrhyde.typepatcher.have_patched_mappish_flag = cljs.core.atom.call(null, false);
mrhyde.typepatcher.patch_sequential_type = function patch_sequential_type(t) {
  if (mrhyde.mrhyde.hyde_array_QMARK_.call(null, t["prototype"])) {
    return null;
  } else {
    mrhyde.typepatcher.patch_prototype_as_array.call(null, t["prototype"], t, false);
    return mrhyde.typepatcher.add_hyde_protocol_to_seq.call(null, t);
  }
};
mrhyde.typepatcher.patch_vector_type = function patch_vector_type(t) {
  if (mrhyde.mrhyde.hyde_array_QMARK_.call(null, t["prototype"])) {
    return null;
  } else {
    mrhyde.typepatcher.patch_prototype_as_array.call(null, t["prototype"], t, true);
    return mrhyde.typepatcher.add_hyde_protocol_to_seq.call(null, t);
  }
};
mrhyde.typepatcher.patch_map_type = function patch_map_type(p__16747) {
  var vec__16749 = p__16747;
  var t = cljs.core.nth.call(null, vec__16749, 0, null);
  var s = cljs.core.nth.call(null, vec__16749, 1, null);
  if (mrhyde.mrhyde.hyde_object_QMARK_.call(null, t["prototype"])) {
    return mrhyde.typepatcher.dp.call(null, "already a hyde-object: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(t));
  } else {
    mrhyde.typepatcher.patch_prototype_as_map.call(null, t["prototype"], t);
    mrhyde.typepatcher.add_hyde_protocol_to_map.call(null, t);
    return mrhyde.typepatcher.patch_core_map_type.call(null, s);
  }
};
mrhyde.typepatcher.patch_known_sequential_types = function patch_known_sequential_types() {
  var seq__16754 = cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.List, cljs.core.LazySeq, cljs.core.IndexedSeq, cljs.core.Cons, cljs.core.Range, cljs.core.ArrayNodeSeq, cljs.core.ChunkedSeq], null));
  var chunk__16755 = null;
  var count__16756 = 0;
  var i__16757 = 0;
  while (true) {
    if (i__16757 < count__16756) {
      var t = cljs.core._nth.call(null, chunk__16755, i__16757);
      mrhyde.typepatcher.patch_sequential_type.call(null, t);
      var G__16758 = seq__16754;
      var G__16759 = chunk__16755;
      var G__16760 = count__16756;
      var G__16761 = i__16757 + 1;
      seq__16754 = G__16758;
      chunk__16755 = G__16759;
      count__16756 = G__16760;
      i__16757 = G__16761;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16754);
      if (temp__4126__auto__) {
        var seq__16754__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16754__$1)) {
          var c__3806__auto__ = cljs.core.chunk_first.call(null, seq__16754__$1);
          var G__16762 = cljs.core.chunk_rest.call(null, seq__16754__$1);
          var G__16763 = c__3806__auto__;
          var G__16764 = cljs.core.count.call(null, c__3806__auto__);
          var G__16765 = 0;
          seq__16754 = G__16762;
          chunk__16755 = G__16763;
          count__16756 = G__16764;
          i__16757 = G__16765;
          continue;
        } else {
          var t = cljs.core.first.call(null, seq__16754__$1);
          mrhyde.typepatcher.patch_sequential_type.call(null, t);
          var G__16766 = cljs.core.next.call(null, seq__16754__$1);
          var G__16767 = null;
          var G__16768 = 0;
          var G__16769 = 0;
          seq__16754 = G__16766;
          chunk__16755 = G__16767;
          count__16756 = G__16768;
          i__16757 = G__16769;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
mrhyde.typepatcher.patch_known_vector_types = function patch_known_vector_types() {
  var seq__16774 = cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector, cljs.core.Subvec], null));
  var chunk__16775 = null;
  var count__16776 = 0;
  var i__16777 = 0;
  while (true) {
    if (i__16777 < count__16776) {
      var t = cljs.core._nth.call(null, chunk__16775, i__16777);
      mrhyde.typepatcher.patch_vector_type.call(null, t);
      var G__16778 = seq__16774;
      var G__16779 = chunk__16775;
      var G__16780 = count__16776;
      var G__16781 = i__16777 + 1;
      seq__16774 = G__16778;
      chunk__16775 = G__16779;
      count__16776 = G__16780;
      i__16777 = G__16781;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16774);
      if (temp__4126__auto__) {
        var seq__16774__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16774__$1)) {
          var c__3806__auto__ = cljs.core.chunk_first.call(null, seq__16774__$1);
          var G__16782 = cljs.core.chunk_rest.call(null, seq__16774__$1);
          var G__16783 = c__3806__auto__;
          var G__16784 = cljs.core.count.call(null, c__3806__auto__);
          var G__16785 = 0;
          seq__16774 = G__16782;
          chunk__16775 = G__16783;
          count__16776 = G__16784;
          i__16777 = G__16785;
          continue;
        } else {
          var t = cljs.core.first.call(null, seq__16774__$1);
          mrhyde.typepatcher.patch_vector_type.call(null, t);
          var G__16786 = cljs.core.next.call(null, seq__16774__$1);
          var G__16787 = null;
          var G__16788 = 0;
          var G__16789 = 0;
          seq__16774 = G__16786;
          chunk__16775 = G__16787;
          count__16776 = G__16788;
          i__16777 = G__16789;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
mrhyde.typepatcher.patch_known_mappish_types = function patch_known_mappish_types() {
  mrhyde.typepatcher.patch_sequential_type.call(null, cljs.core.LazySeq);
  var seq__16794_16798 = cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.ObjMap, "ObjMap"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentHashMap, "PersistentHashMap"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap, 
  "PersistentArrayMap"], null)], null));
  var chunk__16795_16799 = null;
  var count__16796_16800 = 0;
  var i__16797_16801 = 0;
  while (true) {
    if (i__16797_16801 < count__16796_16800) {
      var t_16802 = cljs.core._nth.call(null, chunk__16795_16799, i__16797_16801);
      if (cljs.core._EQ_.call(null, cljs.core.first.call(null, t_16802), cljs.core[cljs.core.second.call(null, t_16802)])) {
        mrhyde.typepatcher.patch_map_type.call(null, t_16802);
      } else {
      }
      var G__16803 = seq__16794_16798;
      var G__16804 = chunk__16795_16799;
      var G__16805 = count__16796_16800;
      var G__16806 = i__16797_16801 + 1;
      seq__16794_16798 = G__16803;
      chunk__16795_16799 = G__16804;
      count__16796_16800 = G__16805;
      i__16797_16801 = G__16806;
      continue;
    } else {
      var temp__4126__auto___16807 = cljs.core.seq.call(null, seq__16794_16798);
      if (temp__4126__auto___16807) {
        var seq__16794_16808__$1 = temp__4126__auto___16807;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16794_16808__$1)) {
          var c__3806__auto___16809 = cljs.core.chunk_first.call(null, seq__16794_16808__$1);
          var G__16810 = cljs.core.chunk_rest.call(null, seq__16794_16808__$1);
          var G__16811 = c__3806__auto___16809;
          var G__16812 = cljs.core.count.call(null, c__3806__auto___16809);
          var G__16813 = 0;
          seq__16794_16798 = G__16810;
          chunk__16795_16799 = G__16811;
          count__16796_16800 = G__16812;
          i__16797_16801 = G__16813;
          continue;
        } else {
          var t_16814 = cljs.core.first.call(null, seq__16794_16808__$1);
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, t_16814), cljs.core[cljs.core.second.call(null, t_16814)])) {
            mrhyde.typepatcher.patch_map_type.call(null, t_16814);
          } else {
          }
          var G__16815 = cljs.core.next.call(null, seq__16794_16808__$1);
          var G__16816 = null;
          var G__16817 = 0;
          var G__16818 = 0;
          seq__16794_16798 = G__16815;
          chunk__16795_16799 = G__16816;
          count__16796_16800 = G__16817;
          i__16797_16801 = G__16818;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.ObjMap.EMPTY = mrhyde.typepatcher.patch_map.call(null, cljs.core.ObjMap.EMPTY);
};
mrhyde.typepatcher.get_partition_key = function get_partition_key() {
  var t = this;
  return t[mrhyde.typepatcher.hyde_parition_key];
};
mrhyde.typepatcher.set_partition_key = function set_partition_key(k) {
  var t = this;
  mrhyde.typepatcher.aset_hidden.call(null, t, mrhyde.typepatcher.hyde_parition_key, k);
  window["side"] = "effect";
  if (cljs.core._EQ_.call(null, 16123663, k)) {
    console.log("matches");
  } else {
  }
  console.log(k);
  return console.log(t);
};
mrhyde.typepatcher.patch_obj_spy_on_partition = function patch_obj_spy_on_partition() {
  console.log(mrhyde.typepatcher.set_partition_key);
  return mrhyde.typepatcher.install_js_hidden_getset_prop.call(null, cljs.core.PersistentHashMap.prototype, mrhyde.typepatcher.cljs_partition_key, mrhyde.typepatcher.get_partition_key, mrhyde.typepatcher.set_partition_key);
};
goog.provide("mrhyde.funpatcher");
goog.require("cljs.core");
goog.require("mrhyde.mrhyde");
goog.require("mrhyde.guts");
goog.require("mrhyde.guts");
goog.require("mrhyde.mrhyde");
mrhyde.funpatcher.patch_return_value_to_clj = function patch_return_value_to_clj(o, field_name) {
  var orig_fn = mrhyde.guts.get_store_cur_js_fn.call(null, o, field_name);
  return o[field_name] = function(orig_fn) {
    return function() {
      var G__16861__delegate = function(args) {
        return cljs.core.js__GT_clj.call(null, function() {
          var ct = this;
          return orig_fn.apply(ct, args);
        }());
      };
      var G__16861 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16861__delegate.call(this, args);
      };
      G__16861.cljs$lang$maxFixedArity = 0;
      G__16861.cljs$lang$applyTo = function(arglist__16862) {
        var args = cljs.core.seq(arglist__16862);
        return G__16861__delegate(args);
      };
      G__16861.cljs$core$IFn$_invoke$arity$variadic = G__16861__delegate;
      return G__16861;
    }();
  }(orig_fn);
};
mrhyde.funpatcher.patch_return_value_recurse_from_cache = function patch_return_value_recurse_from_cache(o, field_name) {
  var orig_fn = mrhyde.guts.get_store_cur_js_fn.call(null, o, field_name);
  return o[field_name] = function(orig_fn) {
    return function() {
      var G__16863__delegate = function(args) {
        return mrhyde.mrhyde.recurse_from_hyde_cache.call(null, function() {
          var ct = this;
          return orig_fn.apply(ct, args);
        }());
      };
      var G__16863 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16863__delegate.call(this, args);
      };
      G__16863.cljs$lang$maxFixedArity = 0;
      G__16863.cljs$lang$applyTo = function(arglist__16864) {
        var args = cljs.core.seq(arglist__16864);
        return G__16863__delegate(args);
      };
      G__16863.cljs$core$IFn$_invoke$arity$variadic = G__16863__delegate;
      return G__16863;
    }();
  }(orig_fn);
};
mrhyde.funpatcher.patch_return_value_recurse_from_cache_as_function = function patch_return_value_recurse_from_cache_as_function(o, field_name) {
  var orig_fn = mrhyde.guts.get_store_cur_js_fn.call(null, o, field_name);
  return o[field_name] = function(orig_fn) {
    return function() {
      var G__16865__delegate = function(args) {
        var dyn_fun = function() {
          var ct = this;
          return orig_fn.apply(ct, args);
        }();
        return function(dyn_fun, orig_fn) {
          return function() {
            var G__16866__delegate = function(nargs) {
              var ct = this;
              return dyn_fun.apply(ct, nargs);
            };
            var G__16866 = function(var_args) {
              var nargs = null;
              if (arguments.length > 0) {
                nargs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
              }
              return G__16866__delegate.call(this, nargs);
            };
            G__16866.cljs$lang$maxFixedArity = 0;
            G__16866.cljs$lang$applyTo = function(arglist__16867) {
              var nargs = cljs.core.seq(arglist__16867);
              return G__16866__delegate(nargs);
            };
            G__16866.cljs$core$IFn$_invoke$arity$variadic = G__16866__delegate;
            return G__16866;
          }();
        }(dyn_fun, orig_fn);
      };
      var G__16865 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16865__delegate.call(this, args);
      };
      G__16865.cljs$lang$maxFixedArity = 0;
      G__16865.cljs$lang$applyTo = function(arglist__16868) {
        var args = cljs.core.seq(arglist__16868);
        return G__16865__delegate(args);
      };
      G__16865.cljs$core$IFn$_invoke$arity$variadic = G__16865__delegate;
      return G__16865;
    }();
  }(orig_fn);
};
mrhyde.funpatcher.recurse_from_hyde_cache_maybe_fn = function recurse_from_hyde_cache_maybe_fn(x) {
  if (cljs.core.truth_(goog.isFunction(x))) {
    return function() {
      var G__16869__delegate = function(args) {
        return mrhyde.mrhyde.recurse_from_hyde_cache.call(null, function() {
          var ct = this;
          return x.apply(ct, args);
        }());
      };
      var G__16869 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16869__delegate.call(this, args);
      };
      G__16869.cljs$lang$maxFixedArity = 0;
      G__16869.cljs$lang$applyTo = function(arglist__16870) {
        var args = cljs.core.seq(arglist__16870);
        return G__16869__delegate(args);
      };
      G__16869.cljs$core$IFn$_invoke$arity$variadic = G__16869__delegate;
      return G__16869;
    }();
  } else {
    return mrhyde.mrhyde.recurse_from_hyde_cache.call(null, x);
  }
};
mrhyde.funpatcher.patch_args_recurse_from_cache = function() {
  var patch_args_recurse_from_cache__delegate = function(o, field_name, fields) {
    var orig_fn = mrhyde.guts.get_store_cur_js_fn.call(null, o, field_name);
    var arg_filter = cljs.core.empty_QMARK_.call(null, fields) ? function(orig_fn) {
      return function() {
        return cljs.core.identity.call(null, true);
      };
    }(orig_fn) : cljs.core.set.call(null, fields);
    return o[field_name] = function(orig_fn, arg_filter) {
      return function() {
        var G__16873__delegate = function(args) {
          var nargs = cljs.core.map.call(null, function(orig_fn, arg_filter) {
            return function(p1__16871_SHARP_, p2__16872_SHARP_) {
              if (cljs.core.truth_(arg_filter.call(null, p1__16871_SHARP_))) {
                return mrhyde.funpatcher.recurse_from_hyde_cache_maybe_fn.call(null, p2__16872_SHARP_);
              } else {
                return p2__16872_SHARP_;
              }
            };
          }(orig_fn, arg_filter), cljs.core.range.call(null), args);
          var ct = this;
          return orig_fn.apply(ct, nargs);
        };
        var G__16873 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16873__delegate.call(this, args);
        };
        G__16873.cljs$lang$maxFixedArity = 0;
        G__16873.cljs$lang$applyTo = function(arglist__16874) {
          var args = cljs.core.seq(arglist__16874);
          return G__16873__delegate(args);
        };
        G__16873.cljs$core$IFn$_invoke$arity$variadic = G__16873__delegate;
        return G__16873;
      }();
    }(orig_fn, arg_filter);
  };
  var patch_args_recurse_from_cache = function(o, field_name, var_args) {
    var fields = null;
    if (arguments.length > 2) {
      fields = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return patch_args_recurse_from_cache__delegate.call(this, o, field_name, fields);
  };
  patch_args_recurse_from_cache.cljs$lang$maxFixedArity = 2;
  patch_args_recurse_from_cache.cljs$lang$applyTo = function(arglist__16875) {
    var o = cljs.core.first(arglist__16875);
    arglist__16875 = cljs.core.next(arglist__16875);
    var field_name = cljs.core.first(arglist__16875);
    var fields = cljs.core.rest(arglist__16875);
    return patch_args_recurse_from_cache__delegate(o, field_name, fields);
  };
  patch_args_recurse_from_cache.cljs$core$IFn$_invoke$arity$variadic = patch_args_recurse_from_cache__delegate;
  return patch_args_recurse_from_cache;
}();
mrhyde.funpatcher.patch_args_keyword_to_fn = function() {
  var patch_args_keyword_to_fn__delegate = function(o, field_name, fields) {
    var orig_fn = mrhyde.guts.get_store_cur_js_fn.call(null, o, field_name);
    var arg_filter = cljs.core.empty_QMARK_.call(null, fields) ? function(orig_fn) {
      return function() {
        return cljs.core.identity.call(null, true);
      };
    }(orig_fn) : cljs.core.set.call(null, fields);
    return o[field_name] = function(orig_fn, arg_filter) {
      return function() {
        var G__16877__delegate = function(args) {
          var nargs = cljs.core.map.call(null, function(orig_fn, arg_filter) {
            return function(c, x) {
              if (cljs.core.truth_(function() {
                var and__3038__auto__ = arg_filter.call(null, c);
                if (cljs.core.truth_(and__3038__auto__)) {
                  return x instanceof cljs.core.Keyword;
                } else {
                  return and__3038__auto__;
                }
              }())) {
                return function(orig_fn, arg_filter) {
                  return function(p1__16876_SHARP_) {
                    return x.call(null, p1__16876_SHARP_);
                  };
                }(orig_fn, arg_filter);
              } else {
                return x;
              }
            };
          }(orig_fn, arg_filter), cljs.core.range.call(null), args);
          var ct = this;
          return orig_fn.apply(ct, nargs);
        };
        var G__16877 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16877__delegate.call(this, args);
        };
        G__16877.cljs$lang$maxFixedArity = 0;
        G__16877.cljs$lang$applyTo = function(arglist__16878) {
          var args = cljs.core.seq(arglist__16878);
          return G__16877__delegate(args);
        };
        G__16877.cljs$core$IFn$_invoke$arity$variadic = G__16877__delegate;
        return G__16877;
      }();
    }(orig_fn, arg_filter);
  };
  var patch_args_keyword_to_fn = function(o, field_name, var_args) {
    var fields = null;
    if (arguments.length > 2) {
      fields = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return patch_args_keyword_to_fn__delegate.call(this, o, field_name, fields);
  };
  patch_args_keyword_to_fn.cljs$lang$maxFixedArity = 2;
  patch_args_keyword_to_fn.cljs$lang$applyTo = function(arglist__16879) {
    var o = cljs.core.first(arglist__16879);
    arglist__16879 = cljs.core.next(arglist__16879);
    var field_name = cljs.core.first(arglist__16879);
    var fields = cljs.core.rest(arglist__16879);
    return patch_args_keyword_to_fn__delegate(o, field_name, fields);
  };
  patch_args_keyword_to_fn.cljs$core$IFn$_invoke$arity$variadic = patch_args_keyword_to_fn__delegate;
  return patch_args_keyword_to_fn;
}();
mrhyde.funpatcher.patch_args_map_to_obj = function() {
  var patch_args_map_to_obj__delegate = function(o, field_name, fields) {
    var orig_fn = mrhyde.guts.get_store_cur_js_fn.call(null, o, field_name);
    var arg_filter = cljs.core.empty_QMARK_.call(null, fields) ? function(orig_fn) {
      return function() {
        return cljs.core.identity.call(null, true);
      };
    }(orig_fn) : cljs.core.set.call(null, fields);
    return o[field_name] = function(orig_fn, arg_filter) {
      return function() {
        var G__16880__delegate = function(args) {
          var nargs = cljs.core.map.call(null, function(orig_fn, arg_filter) {
            return function(c, x) {
              if (cljs.core.truth_(function() {
                var and__3038__auto__ = arg_filter.call(null, c);
                if (cljs.core.truth_(and__3038__auto__)) {
                  return cljs.core.map_QMARK_.call(null, x);
                } else {
                  return and__3038__auto__;
                }
              }())) {
                return cljs.core.clj__GT_js.call(null, x);
              } else {
                return x;
              }
            };
          }(orig_fn, arg_filter), cljs.core.range.call(null), args);
          var ct = this;
          return orig_fn.apply(ct, nargs);
        };
        var G__16880 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16880__delegate.call(this, args);
        };
        G__16880.cljs$lang$maxFixedArity = 0;
        G__16880.cljs$lang$applyTo = function(arglist__16881) {
          var args = cljs.core.seq(arglist__16881);
          return G__16880__delegate(args);
        };
        G__16880.cljs$core$IFn$_invoke$arity$variadic = G__16880__delegate;
        return G__16880;
      }();
    }(orig_fn, arg_filter);
  };
  var patch_args_map_to_obj = function(o, field_name, var_args) {
    var fields = null;
    if (arguments.length > 2) {
      fields = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return patch_args_map_to_obj__delegate.call(this, o, field_name, fields);
  };
  patch_args_map_to_obj.cljs$lang$maxFixedArity = 2;
  patch_args_map_to_obj.cljs$lang$applyTo = function(arglist__16882) {
    var o = cljs.core.first(arglist__16882);
    arglist__16882 = cljs.core.next(arglist__16882);
    var field_name = cljs.core.first(arglist__16882);
    var fields = cljs.core.rest(arglist__16882);
    return patch_args_map_to_obj__delegate(o, field_name, fields);
  };
  patch_args_map_to_obj.cljs$core$IFn$_invoke$arity$variadic = patch_args_map_to_obj__delegate;
  return patch_args_map_to_obj;
}();
mrhyde.funpatcher.patch_args_seq_to_array = function() {
  var patch_args_seq_to_array__delegate = function(o, field_name, fields) {
    var orig_fn = mrhyde.guts.get_store_cur_js_fn.call(null, o, field_name);
    var arg_filter = cljs.core.empty_QMARK_.call(null, fields) ? function(orig_fn) {
      return function() {
        return cljs.core.identity.call(null, true);
      };
    }(orig_fn) : cljs.core.set.call(null, fields);
    return o[field_name] = function(orig_fn, arg_filter) {
      return function() {
        var G__16885__delegate = function(args) {
          var nargs = cljs.core.map.call(null, function(orig_fn, arg_filter) {
            return function(p1__16883_SHARP_, p2__16884_SHARP_) {
              if (cljs.core.truth_(function() {
                var and__3038__auto__ = arg_filter.call(null, p1__16883_SHARP_);
                if (cljs.core.truth_(and__3038__auto__)) {
                  return cljs.core.sequential_QMARK_.call(null, p2__16884_SHARP_);
                } else {
                  return and__3038__auto__;
                }
              }())) {
                return cljs.core.apply.call(null, cljs.core.array, p2__16884_SHARP_);
              } else {
                return p2__16884_SHARP_;
              }
            };
          }(orig_fn, arg_filter), cljs.core.range.call(null), args);
          var ct = this;
          return orig_fn.apply(ct, nargs);
        };
        var G__16885 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16885__delegate.call(this, args);
        };
        G__16885.cljs$lang$maxFixedArity = 0;
        G__16885.cljs$lang$applyTo = function(arglist__16886) {
          var args = cljs.core.seq(arglist__16886);
          return G__16885__delegate(args);
        };
        G__16885.cljs$core$IFn$_invoke$arity$variadic = G__16885__delegate;
        return G__16885;
      }();
    }(orig_fn, arg_filter);
  };
  var patch_args_seq_to_array = function(o, field_name, var_args) {
    var fields = null;
    if (arguments.length > 2) {
      fields = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return patch_args_seq_to_array__delegate.call(this, o, field_name, fields);
  };
  patch_args_seq_to_array.cljs$lang$maxFixedArity = 2;
  patch_args_seq_to_array.cljs$lang$applyTo = function(arglist__16887) {
    var o = cljs.core.first(arglist__16887);
    arglist__16887 = cljs.core.next(arglist__16887);
    var field_name = cljs.core.first(arglist__16887);
    var fields = cljs.core.rest(arglist__16887);
    return patch_args_seq_to_array__delegate(o, field_name, fields);
  };
  patch_args_seq_to_array.cljs$core$IFn$_invoke$arity$variadic = patch_args_seq_to_array__delegate;
  return patch_args_seq_to_array;
}();
mrhyde.funpatcher.patch_args_clj_to_js = function() {
  var patch_args_clj_to_js__delegate = function(o, field_name, fields) {
    var orig_fn = mrhyde.guts.get_store_cur_js_fn.call(null, o, field_name);
    var arg_filter = cljs.core.empty_QMARK_.call(null, fields) ? function(orig_fn) {
      return function() {
        return cljs.core.identity.call(null, true);
      };
    }(orig_fn) : cljs.core.set.call(null, fields);
    return o[field_name] = function(orig_fn, arg_filter) {
      return function() {
        var G__16890__delegate = function(args) {
          var nargs = cljs.core.map.call(null, function(orig_fn, arg_filter) {
            return function(p1__16888_SHARP_, p2__16889_SHARP_) {
              if (cljs.core.truth_(arg_filter.call(null, p1__16888_SHARP_))) {
                return cljs.core.clj__GT_js.call(null, p2__16889_SHARP_);
              } else {
                return p2__16889_SHARP_;
              }
            };
          }(orig_fn, arg_filter), cljs.core.range.call(null), args);
          var ct = this;
          return orig_fn.apply(ct, cljs.core.apply.call(null, cljs.core.array, nargs));
        };
        var G__16890 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16890__delegate.call(this, args);
        };
        G__16890.cljs$lang$maxFixedArity = 0;
        G__16890.cljs$lang$applyTo = function(arglist__16891) {
          var args = cljs.core.seq(arglist__16891);
          return G__16890__delegate(args);
        };
        G__16890.cljs$core$IFn$_invoke$arity$variadic = G__16890__delegate;
        return G__16890;
      }();
    }(orig_fn, arg_filter);
  };
  var patch_args_clj_to_js = function(o, field_name, var_args) {
    var fields = null;
    if (arguments.length > 2) {
      fields = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return patch_args_clj_to_js__delegate.call(this, o, field_name, fields);
  };
  patch_args_clj_to_js.cljs$lang$maxFixedArity = 2;
  patch_args_clj_to_js.cljs$lang$applyTo = function(arglist__16892) {
    var o = cljs.core.first(arglist__16892);
    arglist__16892 = cljs.core.next(arglist__16892);
    var field_name = cljs.core.first(arglist__16892);
    var fields = cljs.core.rest(arglist__16892);
    return patch_args_clj_to_js__delegate(o, field_name, fields);
  };
  patch_args_clj_to_js.cljs$core$IFn$_invoke$arity$variadic = patch_args_clj_to_js__delegate;
  return patch_args_clj_to_js;
}();
mrhyde.funpatcher.patch_tostring_sequential_isarray = function patch_tostring_sequential_isarray(o, field_name) {
  var orig_fn = mrhyde.guts.get_store_cur_js_fn.call(null, o, field_name);
  return o[field_name] = function(orig_fn) {
    return function() {
      var G__16893__delegate = function(args) {
        var ct = this;
        if (mrhyde.mrhyde.hyde_array_QMARK_.call(null, ct)) {
          return "[object Array]";
        } else {
          return orig_fn.apply(ct, args);
        }
      };
      var G__16893 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16893__delegate.call(this, args);
      };
      G__16893.cljs$lang$maxFixedArity = 0;
      G__16893.cljs$lang$applyTo = function(arglist__16894) {
        var args = cljs.core.seq(arglist__16894);
        return G__16893__delegate(args);
      };
      G__16893.cljs$core$IFn$_invoke$arity$variadic = G__16893__delegate;
      return G__16893;
    }();
  }(orig_fn);
};
mrhyde.funpatcher.patch_tostring_hydearray_is_array = function patch_tostring_hydearray_is_array() {
  return mrhyde.funpatcher.patch_tostring_sequential_isarray.call(null, Object.prototype, "toString");
};
goog.provide("mrhyde.core");
goog.require("cljs.core");
goog.require("mrhyde.typepatcher");
goog.require("mrhyde.typepatcher");
mrhyde.core.bootstrap = function() {
  var bootstrap__delegate = function(opts) {
    mrhyde.typepatcher.patch_known_vector_types.call(null);
    return mrhyde.typepatcher.patch_known_mappish_types.call(null);
  };
  var bootstrap = function(var_args) {
    var opts = null;
    if (arguments.length > 0) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bootstrap__delegate.call(this, opts);
  };
  bootstrap.cljs$lang$maxFixedArity = 0;
  bootstrap.cljs$lang$applyTo = function(arglist__16542) {
    var opts = cljs.core.seq(arglist__16542);
    return bootstrap__delegate(opts);
  };
  bootstrap.cljs$core$IFn$_invoke$arity$variadic = bootstrap__delegate;
  return bootstrap;
}();
goog.exportSymbol("mrhyde.core.bootstrap", mrhyde.core.bootstrap);
goog.provide("strokes");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("mrhyde.funpatcher");
goog.require("cljs.reader");
goog.require("mrhyde.funpatcher");
goog.require("mrhyde.core");
goog.require("mrhyde.core");
strokes.d3 = function() {
  var ct = this;
  return ct["d3"];
}();
strokes.edn_parser_callback = function edn_parser_callback(request) {
  return cljs.reader.read_string.call(null, request.responseText);
};
strokes.fetch_edn = function fetch_edn(url, callback) {
  return strokes.d3.xhr(url, "application/octet-stream", callback).response(strokes.edn_parser_callback);
};
strokes.bootstrap = function() {
  var bootstrap__delegate = function(opts) {
    mrhyde.core.bootstrap.call(null);
    if (cljs.core.truth_(strokes.d3)) {
      mrhyde.funpatcher.patch_args_keyword_to_fn.call(null, strokes.d3.selection.prototype, "attr", 1);
      mrhyde.funpatcher.patch_args_keyword_to_fn.call(null, strokes.d3.selection.prototype, "text", 0);
      mrhyde.funpatcher.patch_args_keyword_to_fn.call(null, strokes.d3.layout.pack.prototype, "value", 0);
      mrhyde.funpatcher.patch_args_keyword_to_fn.call(null, strokes.d3.layout.pack.prototype, "children", 0);
      return mrhyde.funpatcher.patch_args_keyword_to_fn.call(null, strokes.d3.selection.prototype, "data", 1);
    } else {
      return null;
    }
  };
  var bootstrap = function(var_args) {
    var opts = null;
    if (arguments.length > 0) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bootstrap__delegate.call(this, opts);
  };
  bootstrap.cljs$lang$maxFixedArity = 0;
  bootstrap.cljs$lang$applyTo = function(arglist__16541) {
    var opts = cljs.core.seq(arglist__16541);
    return bootstrap__delegate(opts);
  };
  bootstrap.cljs$core$IFn$_invoke$arity$variadic = bootstrap__delegate;
  return bootstrap;
}();
goog.exportSymbol("strokes.bootstrap", strokes.bootstrap);
if (cljs.core.truth_(strokes.d3)) {
  strokes.timer = strokes.d3.timer;
  strokes.arc = strokes.d3.svg.arc;
  strokes.polygon = strokes.d3.geom.polygon;
  strokes.voronoi = strokes.d3.geom.voronoi;
  strokes.category10 = strokes.d3.scale.category10;
  strokes.category20 = strokes.d3.scale.category20;
  strokes.category20b = strokes.d3.scale.category20b;
  strokes.category20c = strokes.d3.scale.category20c;
} else {
}
;goog.provide("muzak.bubble_chart");
goog.require("cljs.core");
goog.require("mrhyde.typepatcher");
goog.require("strokes");
goog.require("clidget.widget");
goog.require("mrhyde.typepatcher");
goog.require("strokes");
strokes.bootstrap.call(null);
muzak.bubble_chart.bubble_chart = function() {
  var bubble_chart__delegate = function(system__10515__auto__, params__10516__auto__) {
    return clidget.widget.updated_widget.call(null, cljs.core.assoc.call(null, system__10515__auto__, new cljs.core.Keyword("clidget", "widget-type", "clidget/widget-type", 981736725), new cljs.core.Symbol(null, "widget17086", "widget17086", -2084976697, null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "val-key", "val-key", 1135580325), new cljs.core.Keyword(null, "msgs", "msgs", -1176489773), 
    new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458), new cljs.core.Keyword(null, "!msgs", "!msgs", 1863868512)], null)], null), cljs.core.PersistentArrayMap.EMPTY, function(resolved_state__10517__auto__) {
      var map__17089 = resolved_state__10517__auto__;
      var map__17089__$1 = cljs.core.seq_QMARK_.call(null, map__17089) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17089) : map__17089;
      var msgs = cljs.core.get.call(null, map__17089__$1, new cljs.core.Keyword(null, "msgs", "msgs", -1176489773));
      var vec__17090 = params__10516__auto__;
      muzak.bubble_chart.diameter = 960;
      muzak.bubble_chart.formatfn = strokes.d3.format(",d");
      muzak.bubble_chart.pack = strokes.d3.layout.pack().size(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [muzak.bubble_chart.diameter - 4, muzak.bubble_chart.diameter - 4], null)).value(new cljs.core.Keyword(null, "size", "size", 1098693007));
      muzak.bubble_chart.svg = strokes.d3.select("#chart-body").append("svg").attr("width", muzak.bubble_chart.diameter).attr("height", muzak.bubble_chart.diameter).append("g").attr("transform", "translate(2,2)");
      strokes.fetch_edn.call(null, "flare.edn", function(map__17089, map__17089__$1, msgs, vec__17090) {
        return function(error, root) {
          var node = muzak.bubble_chart.svg.datum(root).selectAll(".node").data(mrhyde.typepatcher.repersist.call(null, muzak.bubble_chart.pack.nodes, new cljs.core.Keyword(null, "skip", "skip", 602715391), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.Keyword(null, "parent", "parent", -878878779)], null))).enter().append("g").attr("class", function(map__17089, map__17089__$1, msgs, 
          vec__17090) {
            return function(p1__17081_SHARP_) {
              if (cljs.core.contains_QMARK_.call(null, p1__17081_SHARP_, new cljs.core.Keyword(null, "children", "children", -940561982))) {
                return "node";
              } else {
                return "leaf node";
              }
            };
          }(map__17089, map__17089__$1, msgs, vec__17090)).attr("transform", function(map__17089, map__17089__$1, msgs, vec__17090) {
            return function(p1__17082_SHARP_) {
              return "translate(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "x", "x", 2099068185)).cljs$core$IFn$_invoke$arity$1(p1__17082_SHARP_)) + "," + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "y", "y", -1757859776)).cljs$core$IFn$_invoke$arity$1(p1__17082_SHARP_)) + ")";
            };
          }(map__17089, map__17089__$1, msgs, vec__17090));
          node.append("title").text(function(node, map__17089, map__17089__$1, msgs, vec__17090) {
            return function(p1__17083_SHARP_) {
              return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(p1__17083_SHARP_)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.contains_QMARK_.call(null, p1__17083_SHARP_, new cljs.core.Keyword(null, "children", "children", -940561982)) ? "" : muzak.bubble_chart.formatfn.call(null, (new cljs.core.Keyword(null, "size", "size", 1098693007)).cljs$core$IFn$_invoke$arity$1(p1__17083_SHARP_)));
            };
          }(node, map__17089, map__17089__$1, msgs, vec__17090));
          node.append("circle").attr("r", new cljs.core.Keyword(null, "r", "r", -471384190)).style("fill", "#3182bd");
          return node.filter(function(node, map__17089, map__17089__$1, msgs, vec__17090) {
            return function(p1__17084_SHARP_) {
              return cljs.core.not.call(null, (new cljs.core.Keyword(null, "children", "children", -940561982)).cljs$core$IFn$_invoke$arity$1(p1__17084_SHARP_));
            };
          }(node, map__17089, map__17089__$1, msgs, vec__17090)).append("text").attr("dy", ".3em").style("text-anchor", "middle").text(function(node, map__17089, map__17089__$1, msgs, vec__17090) {
            return function(p1__17085_SHARP_) {
              return cljs.core.subs.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(p1__17085_SHARP_), 0, (new cljs.core.Keyword(null, "r", "r", -471384190)).cljs$core$IFn$_invoke$arity$1(p1__17085_SHARP_) / 3);
            };
          }(node, map__17089, map__17089__$1, msgs, vec__17090));
        };
      }(map__17089, map__17089__$1, msgs, vec__17090));
      return strokes.d3.select(self.frameElement).style("height", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(muzak.bubble_chart.diameter) + "px");
    });
  };
  var bubble_chart = function(system__10515__auto__, var_args) {
    var params__10516__auto__ = null;
    if (arguments.length > 1) {
      params__10516__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bubble_chart__delegate.call(this, system__10515__auto__, params__10516__auto__);
  };
  bubble_chart.cljs$lang$maxFixedArity = 1;
  bubble_chart.cljs$lang$applyTo = function(arglist__17091) {
    var system__10515__auto__ = cljs.core.first(arglist__17091);
    var params__10516__auto__ = cljs.core.rest(arglist__17091);
    return bubble_chart__delegate(system__10515__auto__, params__10516__auto__);
  };
  bubble_chart.cljs$core$IFn$_invoke$arity$variadic = bubble_chart__delegate;
  return bubble_chart;
}();
goog.provide("muzak.front_end");
goog.require("cljs.core");
goog.require("muzak.bubble_chart");
goog.require("chord.client");
goog.require("muzak.event_handlers");
goog.require("cljs.core.async");
goog.require("clidget.widget");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("dommy.core");
goog.require("dommy.core");
goog.require("cljs.core.async");
goog.require("muzak.bubble_chart");
goog.require("muzak.event_handlers");
goog.require("chord.client");
cljs.core.enable_console_print_BANG_.call(null);
muzak.front_end.add_msg = function add_msg(msgs, new_msg) {
  return cljs.core.take.call(null, 10, cljs.core.cons.call(null, new_msg, msgs));
};
muzak.front_end.receive_msgs_BANG_ = function receive_msgs_BANG_(_BANG_msgs, server_ch) {
  var c__11964__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11964__auto__) {
    return function() {
      var f__11965__auto__ = function() {
        var switch__11899__auto__ = function(c__11964__auto__) {
          return function(state_16742) {
            var state_val_16743 = state_16742[1];
            if (state_val_16743 === 7) {
              var inst_16738 = state_16742[2];
              var state_16742__$1 = state_16742;
              var statearr_16744_16772 = state_16742__$1;
              statearr_16744_16772[2] = inst_16738;
              statearr_16744_16772[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16743 === 1) {
                var state_16742__$1 = state_16742;
                var statearr_16745_16773 = state_16742__$1;
                statearr_16745_16773[2] = null;
                statearr_16745_16773[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16743 === 4) {
                  var inst_16710 = state_16742[7];
                  var inst_16710__$1 = state_16742[2];
                  var state_16742__$1 = function() {
                    var statearr_16746 = state_16742;
                    statearr_16746[7] = inst_16710__$1;
                    return statearr_16746;
                  }();
                  if (cljs.core.truth_(inst_16710__$1)) {
                    var statearr_16747_16774 = state_16742__$1;
                    statearr_16747_16774[1] = 5;
                  } else {
                    var statearr_16748_16775 = state_16742__$1;
                    statearr_16748_16775[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16743 === 15) {
                    var state_16742__$1 = state_16742;
                    var statearr_16749_16776 = state_16742__$1;
                    statearr_16749_16776[2] = null;
                    statearr_16749_16776[1] = 16;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16743 === 13) {
                      var inst_16732 = state_16742[2];
                      var state_16742__$1 = state_16742;
                      var statearr_16750_16777 = state_16742__$1;
                      statearr_16750_16777[2] = inst_16732;
                      statearr_16750_16777[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16743 === 6) {
                        var state_16742__$1 = state_16742;
                        var statearr_16751_16778 = state_16742__$1;
                        statearr_16751_16778[2] = null;
                        statearr_16751_16778[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16743 === 3) {
                          var inst_16740 = state_16742[2];
                          var state_16742__$1 = state_16742;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16742__$1, inst_16740);
                        } else {
                          if (state_val_16743 === 12) {
                            var state_16742__$1 = state_16742;
                            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                              var statearr_16752_16779 = state_16742__$1;
                              statearr_16752_16779[1] = 14;
                            } else {
                              var statearr_16753_16780 = state_16742__$1;
                              statearr_16753_16780[1] = 15;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16743 === 2) {
                              var state_16742__$1 = state_16742;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16742__$1, 4, server_ch);
                            } else {
                              if (state_val_16743 === 11) {
                                var inst_16710 = state_16742[7];
                                var inst_16724 = cljs.core.swap_BANG_.call(null, _BANG_msgs, muzak.front_end.add_msg, inst_16710);
                                var state_16742__$1 = state_16742;
                                var statearr_16754_16781 = state_16742__$1;
                                statearr_16754_16781[2] = inst_16724;
                                statearr_16754_16781[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16743 === 9) {
                                  var inst_16714 = state_16742[8];
                                  var inst_16722 = cljs.core._EQ_.call(null, inst_16714, "result");
                                  var state_16742__$1 = state_16742;
                                  if (inst_16722) {
                                    var statearr_16755_16782 = state_16742__$1;
                                    statearr_16755_16782[1] = 11;
                                  } else {
                                    var statearr_16756_16783 = state_16742__$1;
                                    statearr_16756_16783[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16743 === 5) {
                                    var inst_16710 = state_16742[7];
                                    var inst_16714 = state_16742[8];
                                    var inst_16712 = [new cljs.core.Keyword(null, "message", "message", -406056002), new cljs.core.Keyword(null, "event", "event", 301435442)];
                                    var inst_16713 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_16712, null);
                                    var inst_16714__$1 = cljs.core.get_in.call(null, inst_16710, inst_16713);
                                    var inst_16715 = [new cljs.core.Keyword(null, "message", "message", -406056002), new cljs.core.Keyword(null, "data", "data", -232669377)];
                                    var inst_16716 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_16715, null);
                                    var inst_16717 = cljs.core.get_in.call(null, inst_16710, inst_16716);
                                    var inst_16718 = cljs.core._EQ_.call(null, inst_16714__$1, "state");
                                    var state_16742__$1 = function() {
                                      var statearr_16757 = state_16742;
                                      statearr_16757[9] = inst_16717;
                                      statearr_16757[8] = inst_16714__$1;
                                      return statearr_16757;
                                    }();
                                    if (inst_16718) {
                                      var statearr_16758_16784 = state_16742__$1;
                                      statearr_16758_16784[1] = 8;
                                    } else {
                                      var statearr_16759_16785 = state_16742__$1;
                                      statearr_16759_16785[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16743 === 14) {
                                      var inst_16710 = state_16742[7];
                                      var inst_16727 = cljs.core.swap_BANG_.call(null, _BANG_msgs, muzak.front_end.add_msg, inst_16710);
                                      var state_16742__$1 = state_16742;
                                      var statearr_16760_16786 = state_16742__$1;
                                      statearr_16760_16786[2] = inst_16727;
                                      statearr_16760_16786[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16743 === 16) {
                                        var inst_16730 = state_16742[2];
                                        var state_16742__$1 = state_16742;
                                        var statearr_16761_16787 = state_16742__$1;
                                        statearr_16761_16787[2] = inst_16730;
                                        statearr_16761_16787[1] = 13;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16743 === 10) {
                                          var inst_16734 = state_16742[2];
                                          var state_16742__$1 = function() {
                                            var statearr_16762 = state_16742;
                                            statearr_16762[10] = inst_16734;
                                            return statearr_16762;
                                          }();
                                          var statearr_16763_16788 = state_16742__$1;
                                          statearr_16763_16788[2] = null;
                                          statearr_16763_16788[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_16743 === 8) {
                                            var inst_16717 = state_16742[9];
                                            var inst_16720 = muzak.event_handlers.update_state.call(null, inst_16717);
                                            var state_16742__$1 = state_16742;
                                            var statearr_16764_16789 = state_16742__$1;
                                            statearr_16764_16789[2] = inst_16720;
                                            statearr_16764_16789[1] = 10;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11964__auto__);
        return function(switch__11899__auto__, c__11964__auto__) {
          return function() {
            var state_machine__11900__auto__ = null;
            var state_machine__11900__auto____0 = function() {
              var statearr_16768 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_16768[0] = state_machine__11900__auto__;
              statearr_16768[1] = 1;
              return statearr_16768;
            };
            var state_machine__11900__auto____1 = function(state_16742) {
              while (true) {
                var ret_value__11901__auto__ = function() {
                  try {
                    while (true) {
                      var result__11902__auto__ = switch__11899__auto__.call(null, state_16742);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11902__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11902__auto__;
                      }
                      break;
                    }
                  } catch (e16769) {
                    if (e16769 instanceof Object) {
                      var ex__11903__auto__ = e16769;
                      var statearr_16770_16790 = state_16742;
                      statearr_16770_16790[5] = ex__11903__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16742);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e16769;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16791 = state_16742;
                  state_16742 = G__16791;
                  continue;
                } else {
                  return ret_value__11901__auto__;
                }
                break;
              }
            };
            state_machine__11900__auto__ = function(state_16742) {
              switch(arguments.length) {
                case 0:
                  return state_machine__11900__auto____0.call(this);
                case 1:
                  return state_machine__11900__auto____1.call(this, state_16742);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__11900__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11900__auto____0;
            state_machine__11900__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11900__auto____1;
            return state_machine__11900__auto__;
          }();
        }(switch__11899__auto__, c__11964__auto__);
      }();
      var state__11966__auto__ = function() {
        var statearr_16771 = f__11965__auto__.call(null);
        statearr_16771[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11964__auto__;
        return statearr_16771;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11966__auto__);
    };
  }(c__11964__auto__));
  return c__11964__auto__;
};
muzak.front_end.send_msgs_BANG_ = function send_msgs_BANG_(new_msg_ch, server_ch) {
  var c__11964__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11964__auto__) {
    return function() {
      var f__11965__auto__ = function() {
        var switch__11899__auto__ = function(c__11964__auto__) {
          return function(state_16835) {
            var state_val_16836 = state_16835[1];
            if (state_val_16836 === 8) {
              var inst_16827 = state_16835[2];
              var state_16835__$1 = function() {
                var statearr_16837 = state_16835;
                statearr_16837[7] = inst_16827;
                return statearr_16837;
              }();
              var statearr_16838_16852 = state_16835__$1;
              statearr_16838_16852[2] = null;
              statearr_16838_16852[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16836 === 7) {
                var inst_16831 = state_16835[2];
                var state_16835__$1 = state_16835;
                var statearr_16839_16853 = state_16835__$1;
                statearr_16839_16853[2] = inst_16831;
                statearr_16839_16853[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16836 === 6) {
                  var state_16835__$1 = state_16835;
                  var statearr_16840_16854 = state_16835__$1;
                  statearr_16840_16854[2] = null;
                  statearr_16840_16854[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16836 === 5) {
                    var inst_16824 = state_16835[8];
                    var state_16835__$1 = state_16835;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16835__$1, 8, server_ch, inst_16824);
                  } else {
                    if (state_val_16836 === 4) {
                      var inst_16824 = state_16835[8];
                      var inst_16824__$1 = state_16835[2];
                      var state_16835__$1 = function() {
                        var statearr_16841 = state_16835;
                        statearr_16841[8] = inst_16824__$1;
                        return statearr_16841;
                      }();
                      if (cljs.core.truth_(inst_16824__$1)) {
                        var statearr_16842_16855 = state_16835__$1;
                        statearr_16842_16855[1] = 5;
                      } else {
                        var statearr_16843_16856 = state_16835__$1;
                        statearr_16843_16856[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16836 === 3) {
                        var inst_16833 = state_16835[2];
                        var state_16835__$1 = state_16835;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16835__$1, inst_16833);
                      } else {
                        if (state_val_16836 === 2) {
                          var state_16835__$1 = state_16835;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16835__$1, 4, new_msg_ch);
                        } else {
                          if (state_val_16836 === 1) {
                            var state_16835__$1 = state_16835;
                            var statearr_16844_16857 = state_16835__$1;
                            statearr_16844_16857[2] = null;
                            statearr_16844_16857[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11964__auto__);
        return function(switch__11899__auto__, c__11964__auto__) {
          return function() {
            var state_machine__11900__auto__ = null;
            var state_machine__11900__auto____0 = function() {
              var statearr_16848 = [null, null, null, null, null, null, null, null, null];
              statearr_16848[0] = state_machine__11900__auto__;
              statearr_16848[1] = 1;
              return statearr_16848;
            };
            var state_machine__11900__auto____1 = function(state_16835) {
              while (true) {
                var ret_value__11901__auto__ = function() {
                  try {
                    while (true) {
                      var result__11902__auto__ = switch__11899__auto__.call(null, state_16835);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11902__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11902__auto__;
                      }
                      break;
                    }
                  } catch (e16849) {
                    if (e16849 instanceof Object) {
                      var ex__11903__auto__ = e16849;
                      var statearr_16850_16858 = state_16835;
                      statearr_16850_16858[5] = ex__11903__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16835);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e16849;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16859 = state_16835;
                  state_16835 = G__16859;
                  continue;
                } else {
                  return ret_value__11901__auto__;
                }
                break;
              }
            };
            state_machine__11900__auto__ = function(state_16835) {
              switch(arguments.length) {
                case 0:
                  return state_machine__11900__auto____0.call(this);
                case 1:
                  return state_machine__11900__auto____1.call(this, state_16835);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__11900__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11900__auto____0;
            state_machine__11900__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11900__auto____1;
            return state_machine__11900__auto__;
          }();
        }(switch__11899__auto__, c__11964__auto__);
      }();
      var state__11966__auto__ = function() {
        var statearr_16851 = f__11965__auto__.call(null);
        statearr_16851[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11964__auto__;
        return statearr_16851;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11966__auto__);
    };
  }(c__11964__auto__));
  return c__11964__auto__;
};
window.onload = function() {
  var c__11964__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11964__auto__) {
    return function() {
      var f__11965__auto__ = function() {
        var switch__11899__auto__ = function(c__11964__auto__) {
          return function(state_16902) {
            var state_val_16903 = state_16902[1];
            if (state_val_16903 === 8) {
              var inst_16900 = state_16902[2];
              var state_16902__$1 = state_16902;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16902__$1, inst_16900);
            } else {
              if (state_val_16903 === 7) {
                var inst_16874 = state_16902[7];
                var inst_16887 = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
                var inst_16888 = muzak.front_end.receive_msgs_BANG_.call(null, inst_16887, inst_16874);
                var inst_16890 = cljs.core.async.chan.call(null);
                var inst_16891 = muzak.front_end.send_msgs_BANG_.call(null, inst_16890, inst_16874);
                var inst_16892 = document.getElementById("content");
                var inst_16893 = muzak.event_handlers.page_component.call(null, inst_16887, inst_16890);
                var inst_16894 = dommy.core.replace_contents_BANG_.call(null, inst_16892, inst_16893);
                var inst_16895 = [new cljs.core.Keyword(null, "!msgs", "!msgs", 1863868512)];
                var inst_16896 = [inst_16887];
                var inst_16897 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_16895, inst_16896);
                var inst_16898 = muzak.bubble_chart.bubble_chart.call(null, inst_16897);
                var state_16902__$1 = function() {
                  var statearr_16904 = state_16902;
                  statearr_16904[8] = inst_16894;
                  statearr_16904[9] = inst_16888;
                  statearr_16904[10] = inst_16891;
                  return statearr_16904;
                }();
                var statearr_16905_16923 = state_16902__$1;
                statearr_16905_16923[2] = inst_16898;
                statearr_16905_16923[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16903 === 6) {
                  var inst_16873 = state_16902[11];
                  var inst_16876 = document.getElementById("content");
                  var inst_16878 = document.createElement("div");
                  var inst_16879 = document.createTextNode("Couldn't connect to websocket: ");
                  var inst_16880 = inst_16878.appendChild(inst_16879);
                  var inst_16881 = cljs.core.pr_str.call(null, inst_16873);
                  var inst_16882 = dommy.template.__GT_node_like.call(null, inst_16881);
                  var inst_16883 = inst_16878.appendChild(inst_16882);
                  var inst_16884 = dommy.core.replace_contents_BANG_.call(null, inst_16876, inst_16878);
                  var state_16902__$1 = function() {
                    var statearr_16906 = state_16902;
                    statearr_16906[12] = inst_16883;
                    statearr_16906[13] = inst_16880;
                    return statearr_16906;
                  }();
                  var statearr_16907_16924 = state_16902__$1;
                  statearr_16907_16924[2] = inst_16884;
                  statearr_16907_16924[1] = 8;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16903 === 5) {
                    var inst_16873 = state_16902[11];
                    var inst_16872 = state_16902[2];
                    var inst_16873__$1 = cljs.core.get.call(null, inst_16872, new cljs.core.Keyword(null, "error", "error", -978969032));
                    var inst_16874 = cljs.core.get.call(null, inst_16872, new cljs.core.Keyword(null, "ws-channel", "ws-channel", 1643892174));
                    var state_16902__$1 = function() {
                      var statearr_16908 = state_16902;
                      statearr_16908[11] = inst_16873__$1;
                      statearr_16908[7] = inst_16874;
                      return statearr_16908;
                    }();
                    if (cljs.core.truth_(inst_16873__$1)) {
                      var statearr_16909_16925 = state_16902__$1;
                      statearr_16909_16925[1] = 6;
                    } else {
                      var statearr_16910_16926 = state_16902__$1;
                      statearr_16910_16926[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16903 === 4) {
                      var inst_16866 = state_16902[14];
                      var state_16902__$1 = state_16902;
                      var statearr_16911_16927 = state_16902__$1;
                      statearr_16911_16927[2] = inst_16866;
                      statearr_16911_16927[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16903 === 3) {
                        var inst_16866 = state_16902[14];
                        var inst_16869 = cljs.core.apply.call(null, cljs.core.hash_map, inst_16866);
                        var state_16902__$1 = state_16902;
                        var statearr_16912_16928 = state_16902__$1;
                        statearr_16912_16928[2] = inst_16869;
                        statearr_16912_16928[1] = 5;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16903 === 2) {
                          var inst_16866 = state_16902[14];
                          var inst_16866__$1 = state_16902[2];
                          var inst_16867 = cljs.core.seq_QMARK_.call(null, inst_16866__$1);
                          var state_16902__$1 = function() {
                            var statearr_16913 = state_16902;
                            statearr_16913[14] = inst_16866__$1;
                            return statearr_16913;
                          }();
                          if (inst_16867) {
                            var statearr_16914_16929 = state_16902__$1;
                            statearr_16914_16929[1] = 3;
                          } else {
                            var statearr_16915_16930 = state_16902__$1;
                            statearr_16915_16930[1] = 4;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16903 === 1) {
                            var inst_16861 = [new cljs.core.Keyword(null, "format", "format", -1306924766)];
                            var inst_16862 = [new cljs.core.Keyword(null, "json-kw", "json-kw", 341203175)];
                            var inst_16863 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_16861, inst_16862);
                            var inst_16864 = chord.client.ws_ch.call(null, "ws://localhost:3000/ws", inst_16863);
                            var state_16902__$1 = state_16902;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16902__$1, 2, inst_16864);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11964__auto__);
        return function(switch__11899__auto__, c__11964__auto__) {
          return function() {
            var state_machine__11900__auto__ = null;
            var state_machine__11900__auto____0 = function() {
              var statearr_16919 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16919[0] = state_machine__11900__auto__;
              statearr_16919[1] = 1;
              return statearr_16919;
            };
            var state_machine__11900__auto____1 = function(state_16902) {
              while (true) {
                var ret_value__11901__auto__ = function() {
                  try {
                    while (true) {
                      var result__11902__auto__ = switch__11899__auto__.call(null, state_16902);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11902__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11902__auto__;
                      }
                      break;
                    }
                  } catch (e16920) {
                    if (e16920 instanceof Object) {
                      var ex__11903__auto__ = e16920;
                      var statearr_16921_16931 = state_16902;
                      statearr_16921_16931[5] = ex__11903__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16902);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e16920;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16932 = state_16902;
                  state_16902 = G__16932;
                  continue;
                } else {
                  return ret_value__11901__auto__;
                }
                break;
              }
            };
            state_machine__11900__auto__ = function(state_16902) {
              switch(arguments.length) {
                case 0:
                  return state_machine__11900__auto____0.call(this);
                case 1:
                  return state_machine__11900__auto____1.call(this, state_16902);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__11900__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__11900__auto____0;
            state_machine__11900__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__11900__auto____1;
            return state_machine__11900__auto__;
          }();
        }(switch__11899__auto__, c__11964__auto__);
      }();
      var state__11966__auto__ = function() {
        var statearr_16922 = f__11965__auto__.call(null);
        statearr_16922[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11964__auto__;
        return statearr_16922;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11966__auto__);
    };
  }(c__11964__auto__));
  return c__11964__auto__;
};
