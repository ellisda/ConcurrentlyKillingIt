var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_DEFINES;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.DEBUG) {
    if (!caller) {
      throw Error("arguments.caller not defined.  goog.base() expects not " + "to be running in strict mode. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
    }
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;").replace(goog.string.singleQuoteRe_, "\x26#39;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.singleQuoteRe_, "\x26#39;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /"/g;
goog.string.singleQuoteRe_ = /'/g;
goog.string.allRe_ = /[&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2268";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15781__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__15781 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15781__delegate.call(this, args);
    };
    G__15781.cljs$lang$maxFixedArity = 0;
    G__15781.cljs$lang$applyTo = function(arglist__15782) {
      var args = cljs.core.seq(arglist__15782);
      return G__15781__delegate(args);
    };
    G__15781.cljs$core$IFn$_invoke$arity$variadic = G__15781__delegate;
    return G__15781;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3027__auto__ = ty;
    if (cljs.core.truth_(and__3027__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3027__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__3895__auto___15783 = len;
  var i_15784 = 0;
  while (true) {
    if (i_15784 < n__3895__auto___15783) {
      new_arr[i_15784] = arr[i_15784];
      var G__15785 = i_15784 + 1;
      i_15784 = G__15785;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__15786__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__15786 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15786__delegate.call(this, array, i, idxs);
    };
    G__15786.cljs$lang$maxFixedArity = 2;
    G__15786.cljs$lang$applyTo = function(arglist__15787) {
      var array = cljs.core.first(arglist__15787);
      arglist__15787 = cljs.core.next(arglist__15787);
      var i = cljs.core.first(arglist__15787);
      var idxs = cljs.core.rest(arglist__15787);
      return G__15786__delegate(array, i, idxs);
    };
    G__15786.cljs$core$IFn$_invoke$arity$variadic = G__15786__delegate;
    return G__15786;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__15788__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__15788 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15788__delegate.call(this, array, idx, idx2, idxv);
    };
    G__15788.cljs$lang$maxFixedArity = 3;
    G__15788.cljs$lang$applyTo = function(arglist__15789) {
      var array = cljs.core.first(arglist__15789);
      arglist__15789 = cljs.core.next(arglist__15789);
      var idx = cljs.core.first(arglist__15789);
      arglist__15789 = cljs.core.next(arglist__15789);
      var idx2 = cljs.core.first(arglist__15789);
      var idxv = cljs.core.rest(arglist__15789);
      return G__15788__delegate(array, idx, idx2, idxv);
    };
    G__15788.cljs$core$IFn$_invoke$arity$variadic = G__15788__delegate;
    return G__15788;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj15791 = {};
  return obj15791;
}();
cljs.core.IFn = function() {
  var obj15793 = {};
  return obj15793;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3027__auto__ = this$;
      if (and__3027__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__3666__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3039__auto__ = cljs.core._invoke[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._invoke["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj15795 = {};
  return obj15795;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3027__auto__ = value;
    if (and__3027__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__3666__auto__ = value == null ? null : value;
    return function() {
      var or__3039__auto__ = cljs.core._clone[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._clone["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj15797 = {};
  return obj15797;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._count[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._count["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj15799 = {};
  return obj15799;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._empty[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._empty["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj15801 = {};
  return obj15801;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._conj[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._conj["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj15803 = {};
  return obj15803;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3027__auto__ = coll;
      if (and__3027__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__3666__auto__ = coll == null ? null : coll;
      return function() {
        var or__3039__auto__ = cljs.core._nth[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._nth["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3027__auto__ = coll;
      if (and__3027__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__3666__auto__ = coll == null ? null : coll;
      return function() {
        var or__3039__auto__ = cljs.core._nth[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._nth["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj15805 = {};
  return obj15805;
}();
cljs.core.ISeq = function() {
  var obj15807 = {};
  return obj15807;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._first[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._first["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._rest[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._rest["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj15809 = {};
  return obj15809;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._next[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._next["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj15811 = {};
  return obj15811;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3027__auto__ = o;
      if (and__3027__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__3666__auto__ = o == null ? null : o;
      return function() {
        var or__3039__auto__ = cljs.core._lookup[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._lookup["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3027__auto__ = o;
      if (and__3027__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__3666__auto__ = o == null ? null : o;
      return function() {
        var or__3039__auto__ = cljs.core._lookup[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._lookup["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj15813 = {};
  return obj15813;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._assoc[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._assoc["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj15815 = {};
  return obj15815;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._dissoc[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._dissoc["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj15817 = {};
  return obj15817;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._key[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._key["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._val[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._val["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj15819 = {};
  return obj15819;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._disjoin[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._disjoin["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj15821 = {};
  return obj15821;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._peek[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._peek["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._pop[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._pop["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj15823 = {};
  return obj15823;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._assoc_n[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj15825 = {};
  return obj15825;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3027__auto__ = o;
    if (and__3027__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__3666__auto__ = o == null ? null : o;
    return function() {
      var or__3039__auto__ = cljs.core._deref[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._deref["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15827 = {};
  return obj15827;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3027__auto__ = o;
    if (and__3027__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__3666__auto__ = o == null ? null : o;
    return function() {
      var or__3039__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj15829 = {};
  return obj15829;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3027__auto__ = o;
    if (and__3027__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__3666__auto__ = o == null ? null : o;
    return function() {
      var or__3039__auto__ = cljs.core._meta[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._meta["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj15831 = {};
  return obj15831;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3027__auto__ = o;
    if (and__3027__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__3666__auto__ = o == null ? null : o;
    return function() {
      var or__3039__auto__ = cljs.core._with_meta[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._with_meta["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj15833 = {};
  return obj15833;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3027__auto__ = coll;
      if (and__3027__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__3666__auto__ = coll == null ? null : coll;
      return function() {
        var or__3039__auto__ = cljs.core._reduce[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._reduce["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3027__auto__ = coll;
      if (and__3027__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__3666__auto__ = coll == null ? null : coll;
      return function() {
        var or__3039__auto__ = cljs.core._reduce[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._reduce["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj15835 = {};
  return obj15835;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._kv_reduce[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj15837 = {};
  return obj15837;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3027__auto__ = o;
    if (and__3027__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__3666__auto__ = o == null ? null : o;
    return function() {
      var or__3039__auto__ = cljs.core._equiv[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._equiv["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj15839 = {};
  return obj15839;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3027__auto__ = o;
    if (and__3027__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__3666__auto__ = o == null ? null : o;
    return function() {
      var or__3039__auto__ = cljs.core._hash[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._hash["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj15841 = {};
  return obj15841;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3027__auto__ = o;
    if (and__3027__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__3666__auto__ = o == null ? null : o;
    return function() {
      var or__3039__auto__ = cljs.core._seq[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._seq["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj15843 = {};
  return obj15843;
}();
cljs.core.IList = function() {
  var obj15845 = {};
  return obj15845;
}();
cljs.core.IRecord = function() {
  var obj15847 = {};
  return obj15847;
}();
cljs.core.IReversible = function() {
  var obj15849 = {};
  return obj15849;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._rseq[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._rseq["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj15851 = {};
  return obj15851;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._sorted_seq[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._entry_key[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._entry_key["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._comparator[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._comparator["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj15853 = {};
  return obj15853;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3027__auto__ = writer;
    if (and__3027__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__3666__auto__ = writer == null ? null : writer;
    return function() {
      var or__3039__auto__ = cljs.core._write[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._write["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3027__auto__ = writer;
    if (and__3027__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__3666__auto__ = writer == null ? null : writer;
    return function() {
      var or__3039__auto__ = cljs.core._flush[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._flush["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj15855 = {};
  return obj15855;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3027__auto__ = o;
    if (and__3027__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__3666__auto__ = o == null ? null : o;
    return function() {
      var or__3039__auto__ = cljs.core._pr_writer[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj15857 = {};
  return obj15857;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3027__auto__ = d;
    if (and__3027__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__3666__auto__ = d == null ? null : d;
    return function() {
      var or__3039__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj15859 = {};
  return obj15859;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3027__auto__ = this$;
    if (and__3027__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__3666__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3039__auto__ = cljs.core._notify_watches[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3027__auto__ = this$;
    if (and__3027__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__3666__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3039__auto__ = cljs.core._add_watch[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._add_watch["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3027__auto__ = this$;
    if (and__3027__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__3666__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3039__auto__ = cljs.core._remove_watch[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj15861 = {};
  return obj15861;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._as_transient[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._as_transient["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj15863 = {};
  return obj15863;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3027__auto__ = tcoll;
    if (and__3027__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__3666__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3039__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3027__auto__ = tcoll;
    if (and__3027__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__3666__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3039__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj15865 = {};
  return obj15865;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3027__auto__ = tcoll;
    if (and__3027__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__3666__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3039__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj15867 = {};
  return obj15867;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3027__auto__ = tcoll;
    if (and__3027__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__3666__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3039__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj15869 = {};
  return obj15869;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3027__auto__ = tcoll;
    if (and__3027__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__3666__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3039__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3027__auto__ = tcoll;
    if (and__3027__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__3666__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3039__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj15871 = {};
  return obj15871;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3027__auto__ = tcoll;
    if (and__3027__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__3666__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3039__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj15873 = {};
  return obj15873;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3027__auto__ = x;
    if (and__3027__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__3666__auto__ = x == null ? null : x;
    return function() {
      var or__3039__auto__ = cljs.core._compare[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._compare["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj15875 = {};
  return obj15875;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._drop_first[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._drop_first["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15877 = {};
  return obj15877;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._chunked_first[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._chunked_rest[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj15879 = {};
  return obj15879;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3027__auto__ = coll;
    if (and__3027__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__3666__auto__ = coll == null ? null : coll;
    return function() {
      var or__3039__auto__ = cljs.core._chunked_next[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj15881 = {};
  return obj15881;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3027__auto__ = x;
    if (and__3027__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__3666__auto__ = x == null ? null : x;
    return function() {
      var or__3039__auto__ = cljs.core._name[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._name["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3027__auto__ = x;
    if (and__3027__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__3666__auto__ = x == null ? null : x;
    return function() {
      var or__3039__auto__ = cljs.core._namespace[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._namespace["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__15882 = i + 2;
        var G__15883 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__15882;
        h1 = G__15883;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj15885 = {};
  return obj15885;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__15886 = i + 1;
          var G__15887 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__15886;
          hash = G__15887;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj15891 = {};
      return obj15891;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__15893 = o;
    if (G__15893) {
      var bit__3682__auto__ = G__15893.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__3682__auto__ || G__15893.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3027__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3027__auto__) {
        return b.ns;
      } else {
        return and__3027__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", -1987822328)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3450__auto__ = self__._hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__15895 = null;
  var G__15895__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__15895__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__15895 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15895__2.call(this, self__, coll);
      case 3:
        return G__15895__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15895;
}();
cljs.core.Symbol.prototype.apply = function(self__, args15894) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15894)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__15897 = value;
  if (G__15897) {
    var bit__3689__auto__ = G__15897.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__3689__auto__ || G__15897.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__15897.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15897);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15897);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15899 = coll;
      if (G__15899) {
        var bit__3682__auto__ = G__15899.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__3682__auto__ || G__15899.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15901 = coll;
      if (G__15901) {
        var bit__3682__auto__ = G__15901.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__3682__auto__ || G__15901.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15903 = coll;
      if (G__15903) {
        var bit__3682__auto__ = G__15903.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__3682__auto__ || G__15903.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15905 = coll;
      if (G__15905) {
        var bit__3682__auto__ = G__15905.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__3682__auto__ || G__15905.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__15906__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__15907 = y;
            var G__15908 = cljs.core.first.call(null, more);
            var G__15909 = cljs.core.next.call(null, more);
            x = G__15907;
            y = G__15908;
            more = G__15909;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15906 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15906__delegate.call(this, x, y, more);
    };
    G__15906.cljs$lang$maxFixedArity = 2;
    G__15906.cljs$lang$applyTo = function(arglist__15910) {
      var x = cljs.core.first(arglist__15910);
      arglist__15910 = cljs.core.next(arglist__15910);
      var y = cljs.core.first(arglist__15910);
      var more = cljs.core.rest(arglist__15910);
      return G__15906__delegate(x, y, more);
    };
    G__15906.cljs$core$IFn$_invoke$arity$variadic = G__15906__delegate;
    return G__15906;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15911 = n + 1;
      var G__15912 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__15913 = cljs.core.next.call(null, coll__$1);
      n = G__15911;
      hash_code = G__15912;
      coll__$1 = G__15913;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15914 = n + 1;
      var G__15915 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__15916 = cljs.core.next.call(null, coll__$1);
      n = G__15914;
      hash_code = G__15915;
      coll__$1 = G__15916;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15917 = nval;
            var G__15918 = n + 1;
            val = G__15917;
            n = G__15918;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15919 = nval;
          var G__15920 = n + 1;
          val__$1 = G__15919;
          n = G__15920;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15921 = nval;
          var G__15922 = n + 1;
          val__$1 = G__15921;
          n = G__15922;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15923 = nval;
            var G__15924 = n + 1;
            val = G__15923;
            n = G__15924;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15925 = nval;
          var G__15926 = n + 1;
          val__$1 = G__15925;
          n = G__15926;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15927 = nval;
          var G__15928 = n + 1;
          val__$1 = G__15927;
          n = G__15928;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__15930 = x;
  if (G__15930) {
    var bit__3689__auto__ = G__15930.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__3689__auto__ || G__15930.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__15930.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15930);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15930);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__15932 = x;
  if (G__15932) {
    var bit__3689__auto__ = G__15932.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__3689__auto__ || G__15932.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__15932.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15932);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15932);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__15933 = sn;
      s = G__15933;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__15934__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__15935 = conj.call(null, coll, x);
          var G__15936 = cljs.core.first.call(null, xs);
          var G__15937 = cljs.core.next.call(null, xs);
          coll = G__15935;
          x = G__15936;
          xs = G__15937;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__15934 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15934__delegate.call(this, coll, x, xs);
    };
    G__15934.cljs$lang$maxFixedArity = 2;
    G__15934.cljs$lang$applyTo = function(arglist__15938) {
      var coll = cljs.core.first(arglist__15938);
      arglist__15938 = cljs.core.next(arglist__15938);
      var x = cljs.core.first(arglist__15938);
      var xs = cljs.core.rest(arglist__15938);
      return G__15934__delegate(coll, x, xs);
    };
    G__15934.cljs$core$IFn$_invoke$arity$variadic = G__15934__delegate;
    return G__15934;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__15939 = cljs.core.next.call(null, s);
      var G__15940 = acc + 1;
      s = G__15939;
      acc = G__15940;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15942 = coll;
      if (G__15942) {
        var bit__3682__auto__ = G__15942.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__3682__auto__ || G__15942.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15943 = cljs.core.next.call(null, coll);
              var G__15944 = n - 1;
              coll = G__15943;
              n = G__15944;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15945 = cljs.core.next.call(null, coll);
              var G__15946 = n - 1;
              var G__15947 = not_found;
              coll = G__15945;
              n = G__15946;
              not_found = G__15947;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__15952 = coll;
          if (G__15952) {
            var bit__3682__auto__ = G__15952.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__3682__auto__ || G__15952.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__15953 = coll;
                  if (G__15953) {
                    var bit__3689__auto__ = G__15953.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__3689__auto__ || G__15953.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15953.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15953);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15953);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__15954 = coll;
          if (G__15954) {
            var bit__3682__auto__ = G__15954.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__3682__auto__ || G__15954.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__15955 = coll;
                  if (G__15955) {
                    var bit__3689__auto__ = G__15955.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__3689__auto__ || G__15955.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15955.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15955);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15955);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__15958 = o;
        if (G__15958) {
          var bit__3682__auto__ = G__15958.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__3682__auto__ || G__15958.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__15959 = o;
        if (G__15959) {
          var bit__3682__auto__ = G__15959.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__3682__auto__ || G__15959.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__15960__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__15961 = ret;
          var G__15962 = cljs.core.first.call(null, kvs);
          var G__15963 = cljs.core.second.call(null, kvs);
          var G__15964 = cljs.core.nnext.call(null, kvs);
          coll = G__15961;
          k = G__15962;
          v = G__15963;
          kvs = G__15964;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__15960 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15960__delegate.call(this, coll, k, v, kvs);
    };
    G__15960.cljs$lang$maxFixedArity = 3;
    G__15960.cljs$lang$applyTo = function(arglist__15965) {
      var coll = cljs.core.first(arglist__15965);
      arglist__15965 = cljs.core.next(arglist__15965);
      var k = cljs.core.first(arglist__15965);
      arglist__15965 = cljs.core.next(arglist__15965);
      var v = cljs.core.first(arglist__15965);
      var kvs = cljs.core.rest(arglist__15965);
      return G__15960__delegate(coll, k, v, kvs);
    };
    G__15960.cljs$core$IFn$_invoke$arity$variadic = G__15960__delegate;
    return G__15960;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__15966__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15967 = ret;
            var G__15968 = cljs.core.first.call(null, ks);
            var G__15969 = cljs.core.next.call(null, ks);
            coll = G__15967;
            k = G__15968;
            ks = G__15969;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15966 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15966__delegate.call(this, coll, k, ks);
    };
    G__15966.cljs$lang$maxFixedArity = 2;
    G__15966.cljs$lang$applyTo = function(arglist__15970) {
      var coll = cljs.core.first(arglist__15970);
      arglist__15970 = cljs.core.next(arglist__15970);
      var k = cljs.core.first(arglist__15970);
      var ks = cljs.core.rest(arglist__15970);
      return G__15966__delegate(coll, k, ks);
    };
    G__15966.cljs$core$IFn$_invoke$arity$variadic = G__15966__delegate;
    return G__15966;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3039__auto__ = goog.isFunction(f);
  if (or__3039__auto__) {
    return or__3039__auto__;
  } else {
    var G__15974 = f;
    if (G__15974) {
      var bit__3689__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3039__auto____$1 = bit__3689__auto__;
        if (cljs.core.truth_(or__3039__auto____$1)) {
          return or__3039__auto____$1;
        } else {
          return G__15974.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__15974.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15974);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15974);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__15976 = null;
  var G__15976__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__15976__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__15976__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__15976__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__15976__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__15976__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__15976__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__15976__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__15976__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__15976__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__15976__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__15976__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__15976__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__15976__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__15976__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__15976__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__15976__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__15976__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__15976__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__15976__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__15976__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__15976__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__15976 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__15976__1.call(this, self__);
      case 2:
        return G__15976__2.call(this, self__, a);
      case 3:
        return G__15976__3.call(this, self__, a, b);
      case 4:
        return G__15976__4.call(this, self__, a, b, c);
      case 5:
        return G__15976__5.call(this, self__, a, b, c, d);
      case 6:
        return G__15976__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__15976__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__15976__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__15976__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__15976__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__15976__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__15976__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__15976__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__15976__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__15976__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__15976__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__15976__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__15976__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__15976__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__15976__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__15976__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__15976__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15976;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args15975) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15975)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__15980 = o;
    if (G__15980) {
      var bit__3689__auto__ = G__15980.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__3689__auto__ || G__15980.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15980.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15980);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15980);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3027__auto__ = !(o == null);
    if (and__3027__auto__) {
      var G__15984 = o;
      if (G__15984) {
        var bit__3689__auto__ = G__15984.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__3689__auto__ || G__15984.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__15984.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15984);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15984);
      }
    } else {
      return and__3027__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__15985__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15986 = ret;
            var G__15987 = cljs.core.first.call(null, ks);
            var G__15988 = cljs.core.next.call(null, ks);
            coll = G__15986;
            k = G__15987;
            ks = G__15988;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15985 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15985__delegate.call(this, coll, k, ks);
    };
    G__15985.cljs$lang$maxFixedArity = 2;
    G__15985.cljs$lang$applyTo = function(arglist__15989) {
      var coll = cljs.core.first(arglist__15989);
      arglist__15989 = cljs.core.next(arglist__15989);
      var k = cljs.core.first(arglist__15989);
      var ks = cljs.core.rest(arglist__15989);
      return G__15985__delegate(coll, k, ks);
    };
    G__15985.cljs$core$IFn$_invoke$arity$variadic = G__15985__delegate;
    return G__15985;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15991 = x;
    if (G__15991) {
      var bit__3689__auto__ = G__15991.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__3689__auto__ || G__15991.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__15991.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15991);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15991);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15993 = x;
    if (G__15993) {
      var bit__3689__auto__ = G__15993.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__3689__auto__ || G__15993.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__15993.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15993);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15993);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__15995 = x;
  if (G__15995) {
    var bit__3689__auto__ = G__15995.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__3689__auto__ || G__15995.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__15995.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15995);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15995);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__15997 = x;
  if (G__15997) {
    var bit__3689__auto__ = G__15997.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__3689__auto__ || G__15997.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__15997.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15997);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15997);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__15999 = x;
  if (G__15999) {
    var bit__3689__auto__ = G__15999.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__3689__auto__ || G__15999.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__15999.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15999);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15999);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__16001 = x;
  if (G__16001) {
    var bit__3689__auto__ = G__16001.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__3689__auto__ || G__16001.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__16001.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__16001);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__16001);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16003 = x;
    if (G__16003) {
      var bit__3689__auto__ = G__16003.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__3689__auto__ || G__16003.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__16003.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__16003);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__16003);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__16005 = x;
  if (G__16005) {
    var bit__3689__auto__ = G__16005.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__3689__auto__ || G__16005.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__16005.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__16005);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__16005);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__16007 = x;
  if (G__16007) {
    var bit__3682__auto__ = G__16007.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__3682__auto__ || G__16007.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj16011 = {};
    return obj16011;
  };
  var js_obj__1 = function() {
    var G__16012__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__16012 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16012__delegate.call(this, keyvals);
    };
    G__16012.cljs$lang$maxFixedArity = 0;
    G__16012.cljs$lang$applyTo = function(arglist__16013) {
      var keyvals = cljs.core.seq(arglist__16013);
      return G__16012__delegate(keyvals);
    };
    G__16012.cljs$core$IFn$_invoke$arity$variadic = G__16012__delegate;
    return G__16012;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16014 = i__$1 + 1;
      var G__16015 = j__$1 + 1;
      var G__16016 = len__$1 - 1;
      i__$1 = G__16014;
      j__$1 = G__16015;
      len__$1 = G__16016;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16017 = i__$1 - 1;
      var G__16018 = j__$1 - 1;
      var G__16019 = len__$1 - 1;
      i__$1 = G__16017;
      j__$1 = G__16018;
      len__$1 = G__16019;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj16021 = {};
  return obj16021;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__16023 = s;
    if (G__16023) {
      var bit__3689__auto__ = G__16023.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__3689__auto__ || G__16023.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__16023.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16023);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16023);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__16025 = s;
  if (G__16025) {
    var bit__3689__auto__ = G__16025.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__3689__auto__ || G__16025.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__16025.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16025);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16025);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3039__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3039__auto__) {
    return or__3039__auto__;
  } else {
    var G__16029 = f;
    if (G__16029) {
      var bit__3689__auto__ = G__16029.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__3689__auto__ || G__16029.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__16029.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16029);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16029);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__16030__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__16031 = cljs.core.conj.call(null, s, x__$1);
              var G__16032 = etc;
              s = G__16031;
              xs = G__16032;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__16030 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16030__delegate.call(this, x, y, more);
    };
    G__16030.cljs$lang$maxFixedArity = 2;
    G__16030.cljs$lang$applyTo = function(arglist__16033) {
      var x = cljs.core.first(arglist__16033);
      arglist__16033 = cljs.core.next(arglist__16033);
      var y = cljs.core.first(arglist__16033);
      var more = cljs.core.rest(arglist__16033);
      return G__16030__delegate(x, y, more);
    };
    G__16030.cljs$core$IFn$_invoke$arity$variadic = G__16030__delegate;
    return G__16030;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3039__auto__ = cljs.core.seq.call(null, coll);
    if (or__3039__auto__) {
      return or__3039__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__16035 = x;
            if (G__16035) {
              var bit__3682__auto__ = G__16035.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__3682__auto__ || G__16035.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__16036 = xs;
        var G__16037 = ys;
        var G__16038 = len;
        var G__16039 = n + 1;
        xs = G__16036;
        ys = G__16037;
        len = G__16038;
        n = G__16039;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16040 = nval;
          var G__16041 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__16040;
          coll__$1 = G__16041;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__16044 = coll;
      if (G__16044) {
        var bit__3682__auto__ = G__16044.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__3682__auto__ || G__16044.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__16045 = coll;
      if (G__16045) {
        var bit__3682__auto__ = G__16045.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__3682__auto__ || G__16045.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__16046__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__16046 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16046__delegate.call(this, x, y, more);
    };
    G__16046.cljs$lang$maxFixedArity = 2;
    G__16046.cljs$lang$applyTo = function(arglist__16047) {
      var x = cljs.core.first(arglist__16047);
      arglist__16047 = cljs.core.next(arglist__16047);
      var y = cljs.core.first(arglist__16047);
      var more = cljs.core.rest(arglist__16047);
      return G__16046__delegate(x, y, more);
    };
    G__16046.cljs$core$IFn$_invoke$arity$variadic = G__16046__delegate;
    return G__16046;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__16048__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__16048 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16048__delegate.call(this, x, y, more);
    };
    G__16048.cljs$lang$maxFixedArity = 2;
    G__16048.cljs$lang$applyTo = function(arglist__16049) {
      var x = cljs.core.first(arglist__16049);
      arglist__16049 = cljs.core.next(arglist__16049);
      var y = cljs.core.first(arglist__16049);
      var more = cljs.core.rest(arglist__16049);
      return G__16048__delegate(x, y, more);
    };
    G__16048.cljs$core$IFn$_invoke$arity$variadic = G__16048__delegate;
    return G__16048;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__16050__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__16050 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16050__delegate.call(this, x, y, more);
    };
    G__16050.cljs$lang$maxFixedArity = 2;
    G__16050.cljs$lang$applyTo = function(arglist__16051) {
      var x = cljs.core.first(arglist__16051);
      arglist__16051 = cljs.core.next(arglist__16051);
      var y = cljs.core.first(arglist__16051);
      var more = cljs.core.rest(arglist__16051);
      return G__16050__delegate(x, y, more);
    };
    G__16050.cljs$core$IFn$_invoke$arity$variadic = G__16050__delegate;
    return G__16050;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__16052__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__16052 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16052__delegate.call(this, x, y, more);
    };
    G__16052.cljs$lang$maxFixedArity = 2;
    G__16052.cljs$lang$applyTo = function(arglist__16053) {
      var x = cljs.core.first(arglist__16053);
      arglist__16053 = cljs.core.next(arglist__16053);
      var y = cljs.core.first(arglist__16053);
      var more = cljs.core.rest(arglist__16053);
      return G__16052__delegate(x, y, more);
    };
    G__16052.cljs$core$IFn$_invoke$arity$variadic = G__16052__delegate;
    return G__16052;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__16054__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__16055 = y;
            var G__16056 = cljs.core.first.call(null, more);
            var G__16057 = cljs.core.next.call(null, more);
            x = G__16055;
            y = G__16056;
            more = G__16057;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16054 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16054__delegate.call(this, x, y, more);
    };
    G__16054.cljs$lang$maxFixedArity = 2;
    G__16054.cljs$lang$applyTo = function(arglist__16058) {
      var x = cljs.core.first(arglist__16058);
      arglist__16058 = cljs.core.next(arglist__16058);
      var y = cljs.core.first(arglist__16058);
      var more = cljs.core.rest(arglist__16058);
      return G__16054__delegate(x, y, more);
    };
    G__16054.cljs$core$IFn$_invoke$arity$variadic = G__16054__delegate;
    return G__16054;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__16059__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16060 = y;
            var G__16061 = cljs.core.first.call(null, more);
            var G__16062 = cljs.core.next.call(null, more);
            x = G__16060;
            y = G__16061;
            more = G__16062;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16059 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16059__delegate.call(this, x, y, more);
    };
    G__16059.cljs$lang$maxFixedArity = 2;
    G__16059.cljs$lang$applyTo = function(arglist__16063) {
      var x = cljs.core.first(arglist__16063);
      arglist__16063 = cljs.core.next(arglist__16063);
      var y = cljs.core.first(arglist__16063);
      var more = cljs.core.rest(arglist__16063);
      return G__16059__delegate(x, y, more);
    };
    G__16059.cljs$core$IFn$_invoke$arity$variadic = G__16059__delegate;
    return G__16059;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__16064__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__16065 = y;
            var G__16066 = cljs.core.first.call(null, more);
            var G__16067 = cljs.core.next.call(null, more);
            x = G__16065;
            y = G__16066;
            more = G__16067;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16064 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16064__delegate.call(this, x, y, more);
    };
    G__16064.cljs$lang$maxFixedArity = 2;
    G__16064.cljs$lang$applyTo = function(arglist__16068) {
      var x = cljs.core.first(arglist__16068);
      arglist__16068 = cljs.core.next(arglist__16068);
      var y = cljs.core.first(arglist__16068);
      var more = cljs.core.rest(arglist__16068);
      return G__16064__delegate(x, y, more);
    };
    G__16064.cljs$core$IFn$_invoke$arity$variadic = G__16064__delegate;
    return G__16064;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__16069__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16070 = y;
            var G__16071 = cljs.core.first.call(null, more);
            var G__16072 = cljs.core.next.call(null, more);
            x = G__16070;
            y = G__16071;
            more = G__16072;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16069 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16069__delegate.call(this, x, y, more);
    };
    G__16069.cljs$lang$maxFixedArity = 2;
    G__16069.cljs$lang$applyTo = function(arglist__16073) {
      var x = cljs.core.first(arglist__16073);
      arglist__16073 = cljs.core.next(arglist__16073);
      var y = cljs.core.first(arglist__16073);
      var more = cljs.core.rest(arglist__16073);
      return G__16069__delegate(x, y, more);
    };
    G__16069.cljs$core$IFn$_invoke$arity$variadic = G__16069__delegate;
    return G__16069;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3346__auto__ = x;
    var y__3347__auto__ = y;
    return x__3346__auto__ > y__3347__auto__ ? x__3346__auto__ : y__3347__auto__;
  };
  var max__3 = function() {
    var G__16074__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3346__auto__ = x;
        var y__3347__auto__ = y;
        return x__3346__auto__ > y__3347__auto__ ? x__3346__auto__ : y__3347__auto__;
      }(), more);
    };
    var G__16074 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16074__delegate.call(this, x, y, more);
    };
    G__16074.cljs$lang$maxFixedArity = 2;
    G__16074.cljs$lang$applyTo = function(arglist__16075) {
      var x = cljs.core.first(arglist__16075);
      arglist__16075 = cljs.core.next(arglist__16075);
      var y = cljs.core.first(arglist__16075);
      var more = cljs.core.rest(arglist__16075);
      return G__16074__delegate(x, y, more);
    };
    G__16074.cljs$core$IFn$_invoke$arity$variadic = G__16074__delegate;
    return G__16074;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3353__auto__ = x;
    var y__3354__auto__ = y;
    return x__3353__auto__ < y__3354__auto__ ? x__3353__auto__ : y__3354__auto__;
  };
  var min__3 = function() {
    var G__16076__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3353__auto__ = x;
        var y__3354__auto__ = y;
        return x__3353__auto__ < y__3354__auto__ ? x__3353__auto__ : y__3354__auto__;
      }(), more);
    };
    var G__16076 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16076__delegate.call(this, x, y, more);
    };
    G__16076.cljs$lang$maxFixedArity = 2;
    G__16076.cljs$lang$applyTo = function(arglist__16077) {
      var x = cljs.core.first(arglist__16077);
      arglist__16077 = cljs.core.next(arglist__16077);
      var y = cljs.core.first(arglist__16077);
      var more = cljs.core.rest(arglist__16077);
      return G__16076__delegate(x, y, more);
    };
    G__16076.cljs$core$IFn$_invoke$arity$variadic = G__16076__delegate;
    return G__16076;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__16078__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__16078 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16078__delegate.call(this, x, y, more);
    };
    G__16078.cljs$lang$maxFixedArity = 2;
    G__16078.cljs$lang$applyTo = function(arglist__16079) {
      var x = cljs.core.first(arglist__16079);
      arglist__16079 = cljs.core.next(arglist__16079);
      var y = cljs.core.first(arglist__16079);
      var more = cljs.core.rest(arglist__16079);
      return G__16078__delegate(x, y, more);
    };
    G__16078.cljs$core$IFn$_invoke$arity$variadic = G__16078__delegate;
    return G__16078;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__16080__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__16080 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16080__delegate.call(this, x, y, more);
    };
    G__16080.cljs$lang$maxFixedArity = 2;
    G__16080.cljs$lang$applyTo = function(arglist__16081) {
      var x = cljs.core.first(arglist__16081);
      arglist__16081 = cljs.core.next(arglist__16081);
      var y = cljs.core.first(arglist__16081);
      var more = cljs.core.rest(arglist__16081);
      return G__16080__delegate(x, y, more);
    };
    G__16080.cljs$core$IFn$_invoke$arity$variadic = G__16080__delegate;
    return G__16080;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__16082__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__16082 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16082__delegate.call(this, x, y, more);
    };
    G__16082.cljs$lang$maxFixedArity = 2;
    G__16082.cljs$lang$applyTo = function(arglist__16083) {
      var x = cljs.core.first(arglist__16083);
      arglist__16083 = cljs.core.next(arglist__16083);
      var y = cljs.core.first(arglist__16083);
      var more = cljs.core.rest(arglist__16083);
      return G__16082__delegate(x, y, more);
    };
    G__16082.cljs$core$IFn$_invoke$arity$variadic = G__16082__delegate;
    return G__16082;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__16084__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__16084 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16084__delegate.call(this, x, y, more);
    };
    G__16084.cljs$lang$maxFixedArity = 2;
    G__16084.cljs$lang$applyTo = function(arglist__16085) {
      var x = cljs.core.first(arglist__16085);
      arglist__16085 = cljs.core.next(arglist__16085);
      var y = cljs.core.first(arglist__16085);
      var more = cljs.core.rest(arglist__16085);
      return G__16084__delegate(x, y, more);
    };
    G__16084.cljs$core$IFn$_invoke$arity$variadic = G__16084__delegate;
    return G__16084;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__16086__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__16086 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16086__delegate.call(this, x, y, more);
    };
    G__16086.cljs$lang$maxFixedArity = 2;
    G__16086.cljs$lang$applyTo = function(arglist__16087) {
      var x = cljs.core.first(arglist__16087);
      arglist__16087 = cljs.core.next(arglist__16087);
      var y = cljs.core.first(arglist__16087);
      var more = cljs.core.rest(arglist__16087);
      return G__16086__delegate(x, y, more);
    };
    G__16086.cljs$core$IFn$_invoke$arity$variadic = G__16086__delegate;
    return G__16086;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__16088__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__16088 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16088__delegate.call(this, x, y, more);
    };
    G__16088.cljs$lang$maxFixedArity = 2;
    G__16088.cljs$lang$applyTo = function(arglist__16089) {
      var x = cljs.core.first(arglist__16089);
      arglist__16089 = cljs.core.next(arglist__16089);
      var y = cljs.core.first(arglist__16089);
      var more = cljs.core.rest(arglist__16089);
      return G__16088__delegate(x, y, more);
    };
    G__16088.cljs$core$IFn$_invoke$arity$variadic = G__16088__delegate;
    return G__16088;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__16090__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__16090 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16090__delegate.call(this, x, y, more);
    };
    G__16090.cljs$lang$maxFixedArity = 2;
    G__16090.cljs$lang$applyTo = function(arglist__16091) {
      var x = cljs.core.first(arglist__16091);
      arglist__16091 = cljs.core.next(arglist__16091);
      var y = cljs.core.first(arglist__16091);
      var more = cljs.core.rest(arglist__16091);
      return G__16090__delegate(x, y, more);
    };
    G__16090.cljs$core$IFn$_invoke$arity$variadic = G__16090__delegate;
    return G__16090;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__16092__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__16093 = y;
            var G__16094 = cljs.core.first.call(null, more);
            var G__16095 = cljs.core.next.call(null, more);
            x = G__16093;
            y = G__16094;
            more = G__16095;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16092 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16092__delegate.call(this, x, y, more);
    };
    G__16092.cljs$lang$maxFixedArity = 2;
    G__16092.cljs$lang$applyTo = function(arglist__16096) {
      var x = cljs.core.first(arglist__16096);
      arglist__16096 = cljs.core.next(arglist__16096);
      var y = cljs.core.first(arglist__16096);
      var more = cljs.core.rest(arglist__16096);
      return G__16092__delegate(x, y, more);
    };
    G__16092.cljs$core$IFn$_invoke$arity$variadic = G__16092__delegate;
    return G__16092;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__16097 = n__$1 - 1;
      var G__16098 = cljs.core.next.call(null, xs);
      n__$1 = G__16097;
      xs = G__16098;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__16099__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__16100 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__16101 = cljs.core.next.call(null, more);
          sb = G__16100;
          more = G__16101;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__16099 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16099__delegate.call(this, x, ys);
    };
    G__16099.cljs$lang$maxFixedArity = 1;
    G__16099.cljs$lang$applyTo = function(arglist__16102) {
      var x = cljs.core.first(arglist__16102);
      var ys = cljs.core.rest(arglist__16102);
      return G__16099__delegate(x, ys);
    };
    G__16099.cljs$core$IFn$_invoke$arity$variadic = G__16099__delegate;
    return G__16099;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__16103 = cljs.core.next.call(null, xs);
            var G__16104 = cljs.core.next.call(null, ys);
            xs = G__16103;
            ys = G__16104;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__16105 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__16106 = cljs.core.next.call(null, s);
        res = G__16105;
        s = G__16106;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__16107 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__16108 = cljs.core.next.call(null, s);
      h = G__16107;
      s = G__16108;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__16109 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__16110 = cljs.core.next.call(null, s__$1);
      h = G__16109;
      s__$1 = G__16110;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__16117_16123 = cljs.core.seq.call(null, fn_map);
  var chunk__16118_16124 = null;
  var count__16119_16125 = 0;
  var i__16120_16126 = 0;
  while (true) {
    if (i__16120_16126 < count__16119_16125) {
      var vec__16121_16127 = cljs.core._nth.call(null, chunk__16118_16124, i__16120_16126);
      var key_name_16128 = cljs.core.nth.call(null, vec__16121_16127, 0, null);
      var f_16129 = cljs.core.nth.call(null, vec__16121_16127, 1, null);
      var str_name_16130 = cljs.core.name.call(null, key_name_16128);
      obj[str_name_16130] = f_16129;
      var G__16131 = seq__16117_16123;
      var G__16132 = chunk__16118_16124;
      var G__16133 = count__16119_16125;
      var G__16134 = i__16120_16126 + 1;
      seq__16117_16123 = G__16131;
      chunk__16118_16124 = G__16132;
      count__16119_16125 = G__16133;
      i__16120_16126 = G__16134;
      continue;
    } else {
      var temp__4126__auto___16135 = cljs.core.seq.call(null, seq__16117_16123);
      if (temp__4126__auto___16135) {
        var seq__16117_16136__$1 = temp__4126__auto___16135;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16117_16136__$1)) {
          var c__3795__auto___16137 = cljs.core.chunk_first.call(null, seq__16117_16136__$1);
          var G__16138 = cljs.core.chunk_rest.call(null, seq__16117_16136__$1);
          var G__16139 = c__3795__auto___16137;
          var G__16140 = cljs.core.count.call(null, c__3795__auto___16137);
          var G__16141 = 0;
          seq__16117_16123 = G__16138;
          chunk__16118_16124 = G__16139;
          count__16119_16125 = G__16140;
          i__16120_16126 = G__16141;
          continue;
        } else {
          var vec__16122_16142 = cljs.core.first.call(null, seq__16117_16136__$1);
          var key_name_16143 = cljs.core.nth.call(null, vec__16122_16142, 0, null);
          var f_16144 = cljs.core.nth.call(null, vec__16122_16142, 1, null);
          var str_name_16145 = cljs.core.name.call(null, key_name_16143);
          obj[str_name_16145] = f_16144;
          var G__16146 = cljs.core.next.call(null, seq__16117_16136__$1);
          var G__16147 = null;
          var G__16148 = 0;
          var G__16149 = 0;
          seq__16117_16123 = G__16146;
          chunk__16118_16124 = G__16147;
          count__16119_16125 = G__16148;
          i__16120_16126 = G__16149;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__16151 = coll;
  if (G__16151) {
    var bit__3689__auto__ = G__16151.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__3689__auto__ || G__16151.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__16151.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16151);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16151);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__16152 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__16152;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__16153 = i - 1;
        var G__16154 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__16153;
        r = G__16154;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__16155) {
    var xs = cljs.core.seq(arglist__16155);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3039__auto__ = coll == null;
    if (or__3039__auto__) {
      return or__3039__auto__;
    } else {
      var G__16159 = coll;
      if (G__16159) {
        var bit__3682__auto__ = G__16159.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__3682__auto__ || G__16159.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__16161 = x;
  if (G__16161) {
    var bit__3689__auto__ = G__16161.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__3689__auto__ || G__16161.cljs$core$IList$) {
      return true;
    } else {
      if (!G__16161.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16161);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16161);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__3450__auto__ = self__._hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__16163 = null;
  var G__16163__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__16163__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__16163 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16163__2.call(this, self__, coll);
      case 3:
        return G__16163__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16163;
}();
cljs.core.Keyword.prototype.apply = function(self__, args16162) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16162)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__16165 = x;
    if (G__16165) {
      var bit__3682__auto__ = G__16165.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__3682__auto__ || G__16165.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__16166 = ls.sval();
        ls = G__16166;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__16168 = s;
    if (G__16168) {
      var bit__3682__auto__ = G__16168.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__3682__auto__ || G__16168.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__16169 = cljs.core.next.call(null, s__$1);
      s__$1 = G__16169;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_16170 = 0;
  var xs_16171 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_16171) {
      ret[i_16170] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_16171));
      var G__16172 = i_16170 + 1;
      var G__16173 = cljs.core.next.call(null, xs_16171);
      i_16170 = G__16172;
      xs_16171 = G__16173;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16174 = i + 1;
          var G__16175 = cljs.core.next.call(null, s__$1);
          i = G__16174;
          s__$1 = G__16175;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3895__auto___16176 = size;
      var i_16177 = 0;
      while (true) {
        if (i_16177 < n__3895__auto___16176) {
          a[i_16177] = init_val_or_seq;
          var G__16178 = i_16177 + 1;
          i_16177 = G__16178;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16179 = i + 1;
          var G__16180 = cljs.core.next.call(null, s__$1);
          i = G__16179;
          s__$1 = G__16180;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3895__auto___16181 = size;
      var i_16182 = 0;
      while (true) {
        if (i_16182 < n__3895__auto___16181) {
          a[i_16182] = init_val_or_seq;
          var G__16183 = i_16182 + 1;
          i_16182 = G__16183;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16184 = i + 1;
          var G__16185 = cljs.core.next.call(null, s__$1);
          i = G__16184;
          s__$1 = G__16185;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3895__auto___16186 = size;
      var i_16187 = 0;
      while (true) {
        if (i_16187 < n__3895__auto___16186) {
          a[i_16187] = init_val_or_seq;
          var G__16188 = i_16187 + 1;
          i_16187 = G__16188;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16189 = i + 1;
          var G__16190 = cljs.core.next.call(null, s__$1);
          i = G__16189;
          s__$1 = G__16190;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__3895__auto___16191 = size;
      var i_16192 = 0;
      while (true) {
        if (i_16192 < n__3895__auto___16191) {
          a[i_16192] = init_val_or_seq;
          var G__16193 = i_16192 + 1;
          i_16192 = G__16193;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__16194 = cljs.core.next.call(null, s__$1);
        var G__16195 = i - 1;
        var G__16196 = sum + 1;
        s__$1 = G__16194;
        i = G__16195;
        sum = G__16196;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__16197__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__16197 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16197__delegate.call(this, x, y, zs);
    };
    G__16197.cljs$lang$maxFixedArity = 2;
    G__16197.cljs$lang$applyTo = function(arglist__16198) {
      var x = cljs.core.first(arglist__16198);
      arglist__16198 = cljs.core.next(arglist__16198);
      var y = cljs.core.first(arglist__16198);
      var zs = cljs.core.rest(arglist__16198);
      return G__16197__delegate(x, y, zs);
    };
    G__16197.cljs$core$IFn$_invoke$arity$variadic = G__16197__delegate;
    return G__16197;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__16199__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__16199 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16199__delegate.call(this, a, b, c, d, more);
    };
    G__16199.cljs$lang$maxFixedArity = 4;
    G__16199.cljs$lang$applyTo = function(arglist__16200) {
      var a = cljs.core.first(arglist__16200);
      arglist__16200 = cljs.core.next(arglist__16200);
      var b = cljs.core.first(arglist__16200);
      arglist__16200 = cljs.core.next(arglist__16200);
      var c = cljs.core.first(arglist__16200);
      arglist__16200 = cljs.core.next(arglist__16200);
      var d = cljs.core.first(arglist__16200);
      var more = cljs.core.rest(arglist__16200);
      return G__16199__delegate(a, b, c, d, more);
    };
    G__16199.cljs$core$IFn$_invoke$arity$variadic = G__16199__delegate;
    return G__16199;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__16201__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16202 = ntcoll;
          var G__16203 = cljs.core.first.call(null, vals);
          var G__16204 = cljs.core.next.call(null, vals);
          tcoll = G__16202;
          val = G__16203;
          vals = G__16204;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16201 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16201__delegate.call(this, tcoll, val, vals);
    };
    G__16201.cljs$lang$maxFixedArity = 2;
    G__16201.cljs$lang$applyTo = function(arglist__16205) {
      var tcoll = cljs.core.first(arglist__16205);
      arglist__16205 = cljs.core.next(arglist__16205);
      var val = cljs.core.first(arglist__16205);
      var vals = cljs.core.rest(arglist__16205);
      return G__16201__delegate(tcoll, val, vals);
    };
    G__16201.cljs$core$IFn$_invoke$arity$variadic = G__16201__delegate;
    return G__16201;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__16206__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__16207 = ntcoll;
          var G__16208 = cljs.core.first.call(null, kvs);
          var G__16209 = cljs.core.second.call(null, kvs);
          var G__16210 = cljs.core.nnext.call(null, kvs);
          tcoll = G__16207;
          key = G__16208;
          val = G__16209;
          kvs = G__16210;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16206 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16206__delegate.call(this, tcoll, key, val, kvs);
    };
    G__16206.cljs$lang$maxFixedArity = 3;
    G__16206.cljs$lang$applyTo = function(arglist__16211) {
      var tcoll = cljs.core.first(arglist__16211);
      arglist__16211 = cljs.core.next(arglist__16211);
      var key = cljs.core.first(arglist__16211);
      arglist__16211 = cljs.core.next(arglist__16211);
      var val = cljs.core.first(arglist__16211);
      var kvs = cljs.core.rest(arglist__16211);
      return G__16206__delegate(tcoll, key, val, kvs);
    };
    G__16206.cljs$core$IFn$_invoke$arity$variadic = G__16206__delegate;
    return G__16206;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__16212__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__16213 = ntcoll;
          var G__16214 = cljs.core.first.call(null, ks);
          var G__16215 = cljs.core.next.call(null, ks);
          tcoll = G__16213;
          key = G__16214;
          ks = G__16215;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16212 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16212__delegate.call(this, tcoll, key, ks);
    };
    G__16212.cljs$lang$maxFixedArity = 2;
    G__16212.cljs$lang$applyTo = function(arglist__16216) {
      var tcoll = cljs.core.first(arglist__16216);
      arglist__16216 = cljs.core.next(arglist__16216);
      var key = cljs.core.first(arglist__16216);
      var ks = cljs.core.rest(arglist__16216);
      return G__16212__delegate(tcoll, key, ks);
    };
    G__16212.cljs$core$IFn$_invoke$arity$variadic = G__16212__delegate;
    return G__16212;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__16217__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16218 = ntcoll;
          var G__16219 = cljs.core.first.call(null, vals);
          var G__16220 = cljs.core.next.call(null, vals);
          tcoll = G__16218;
          val = G__16219;
          vals = G__16220;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16217 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16217__delegate.call(this, tcoll, val, vals);
    };
    G__16217.cljs$lang$maxFixedArity = 2;
    G__16217.cljs$lang$applyTo = function(arglist__16221) {
      var tcoll = cljs.core.first(arglist__16221);
      arglist__16221 = cljs.core.next(arglist__16221);
      var val = cljs.core.first(arglist__16221);
      var vals = cljs.core.rest(arglist__16221);
      return G__16217__delegate(tcoll, val, vals);
    };
    G__16217.cljs$core$IFn$_invoke$arity$variadic = G__16217__delegate;
    return G__16217;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a3939 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a3939);
      } else {
        return f.call(null, a3939);
      }
    } else {
      var b3940 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a3939, b3940);
        } else {
          return f.call(null, a3939, b3940);
        }
      } else {
        var c3941 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a3939, b3940, c3941);
          } else {
            return f.call(null, a3939, b3940, c3941);
          }
        } else {
          var d3942 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a3939, b3940, c3941, d3942);
            } else {
              return f.call(null, a3939, b3940, c3941, d3942);
            }
          } else {
            var e3943 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a3939, b3940, c3941, d3942, e3943);
              } else {
                return f.call(null, a3939, b3940, c3941, d3942, e3943);
              }
            } else {
              var f3944 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a3939, b3940, c3941, d3942, e3943, f3944);
                } else {
                  return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944);
                }
              } else {
                var g3945 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a3939, b3940, c3941, d3942, e3943, f3944, g3945);
                  } else {
                    return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945);
                  }
                } else {
                  var h3946 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946);
                    } else {
                      return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946);
                    }
                  } else {
                    var i3947 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947);
                      } else {
                        return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947);
                      }
                    } else {
                      var j3948 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948);
                        } else {
                          return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948);
                        }
                      } else {
                        var k3949 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949);
                          } else {
                            return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949);
                          }
                        } else {
                          var l3950 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950);
                            } else {
                              return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950);
                            }
                          } else {
                            var m3951 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951);
                              } else {
                                return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951);
                              }
                            } else {
                              var n3952 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952);
                                } else {
                                  return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952);
                                }
                              } else {
                                var o3953 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953);
                                  } else {
                                    return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953);
                                  }
                                } else {
                                  var p3954 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954);
                                    } else {
                                      return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954);
                                    }
                                  } else {
                                    var q3955 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954, q3955);
                                      } else {
                                        return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954, q3955);
                                      }
                                    } else {
                                      var r3956 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954, q3955, r3956);
                                        } else {
                                          return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954, q3955, r3956);
                                        }
                                      } else {
                                        var s3957 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954, q3955, r3956, s3957);
                                          } else {
                                            return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954, q3955, r3956, s3957);
                                          }
                                        } else {
                                          var t3958 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954, q3955, r3956, s3957, t3958);
                                            } else {
                                              return f.call(null, a3939, b3940, c3941, d3942, e3943, f3944, g3945, h3946, i3947, j3948, k3949, l3950, m3951, n3952, o3953, p3954, q3955, r3956, s3957, t3958);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__16222__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__16222 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__16222__delegate.call(this, f, a, b, c, d, args);
    };
    G__16222.cljs$lang$maxFixedArity = 5;
    G__16222.cljs$lang$applyTo = function(arglist__16223) {
      var f = cljs.core.first(arglist__16223);
      arglist__16223 = cljs.core.next(arglist__16223);
      var a = cljs.core.first(arglist__16223);
      arglist__16223 = cljs.core.next(arglist__16223);
      var b = cljs.core.first(arglist__16223);
      arglist__16223 = cljs.core.next(arglist__16223);
      var c = cljs.core.first(arglist__16223);
      arglist__16223 = cljs.core.next(arglist__16223);
      var d = cljs.core.first(arglist__16223);
      var args = cljs.core.rest(arglist__16223);
      return G__16222__delegate(f, a, b, c, d, args);
    };
    G__16222.cljs$core$IFn$_invoke$arity$variadic = G__16222__delegate;
    return G__16222;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__16224__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__16224 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16224__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__16224.cljs$lang$maxFixedArity = 6;
    G__16224.cljs$lang$applyTo = function(arglist__16225) {
      var obj = cljs.core.first(arglist__16225);
      arglist__16225 = cljs.core.next(arglist__16225);
      var f = cljs.core.first(arglist__16225);
      arglist__16225 = cljs.core.next(arglist__16225);
      var a = cljs.core.first(arglist__16225);
      arglist__16225 = cljs.core.next(arglist__16225);
      var b = cljs.core.first(arglist__16225);
      arglist__16225 = cljs.core.next(arglist__16225);
      var c = cljs.core.first(arglist__16225);
      arglist__16225 = cljs.core.next(arglist__16225);
      var d = cljs.core.first(arglist__16225);
      var args = cljs.core.rest(arglist__16225);
      return G__16224__delegate(obj, f, a, b, c, d, args);
    };
    G__16224.cljs$core$IFn$_invoke$arity$variadic = G__16224__delegate;
    return G__16224;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__16226__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__16226 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16226__delegate.call(this, x, y, more);
    };
    G__16226.cljs$lang$maxFixedArity = 2;
    G__16226.cljs$lang$applyTo = function(arglist__16227) {
      var x = cljs.core.first(arglist__16227);
      arglist__16227 = cljs.core.next(arglist__16227);
      var y = cljs.core.first(arglist__16227);
      var more = cljs.core.rest(arglist__16227);
      return G__16226__delegate(x, y, more);
    };
    G__16226.cljs$core$IFn$_invoke$arity$variadic = G__16226__delegate;
    return G__16226;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__16228 = pred;
        var G__16229 = cljs.core.next.call(null, coll);
        pred = G__16228;
        coll = G__16229;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3039__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        var G__16230 = pred;
        var G__16231 = cljs.core.next.call(null, coll);
        pred = G__16230;
        coll = G__16231;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__16232 = null;
    var G__16232__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__16232__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__16232__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__16232__3 = function() {
      var G__16233__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__16233 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__16233__delegate.call(this, x, y, zs);
      };
      G__16233.cljs$lang$maxFixedArity = 2;
      G__16233.cljs$lang$applyTo = function(arglist__16234) {
        var x = cljs.core.first(arglist__16234);
        arglist__16234 = cljs.core.next(arglist__16234);
        var y = cljs.core.first(arglist__16234);
        var zs = cljs.core.rest(arglist__16234);
        return G__16233__delegate(x, y, zs);
      };
      G__16233.cljs$core$IFn$_invoke$arity$variadic = G__16233__delegate;
      return G__16233;
    }();
    G__16232 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__16232__0.call(this);
        case 1:
          return G__16232__1.call(this, x);
        case 2:
          return G__16232__2.call(this, x, y);
        default:
          return G__16232__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16232.cljs$lang$maxFixedArity = 2;
    G__16232.cljs$lang$applyTo = G__16232__3.cljs$lang$applyTo;
    return G__16232;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__16235__delegate = function(args) {
      return x;
    };
    var G__16235 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16235__delegate.call(this, args);
    };
    G__16235.cljs$lang$maxFixedArity = 0;
    G__16235.cljs$lang$applyTo = function(arglist__16236) {
      var args = cljs.core.seq(arglist__16236);
      return G__16235__delegate(args);
    };
    G__16235.cljs$core$IFn$_invoke$arity$variadic = G__16235__delegate;
    return G__16235;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__16237 = null;
      var G__16237__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__16237__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__16237__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__16237__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__16237__4 = function() {
        var G__16238__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__16238 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16238__delegate.call(this, x, y, z, args);
        };
        G__16238.cljs$lang$maxFixedArity = 3;
        G__16238.cljs$lang$applyTo = function(arglist__16239) {
          var x = cljs.core.first(arglist__16239);
          arglist__16239 = cljs.core.next(arglist__16239);
          var y = cljs.core.first(arglist__16239);
          arglist__16239 = cljs.core.next(arglist__16239);
          var z = cljs.core.first(arglist__16239);
          var args = cljs.core.rest(arglist__16239);
          return G__16238__delegate(x, y, z, args);
        };
        G__16238.cljs$core$IFn$_invoke$arity$variadic = G__16238__delegate;
        return G__16238;
      }();
      G__16237 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16237__0.call(this);
          case 1:
            return G__16237__1.call(this, x);
          case 2:
            return G__16237__2.call(this, x, y);
          case 3:
            return G__16237__3.call(this, x, y, z);
          default:
            return G__16237__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16237.cljs$lang$maxFixedArity = 3;
      G__16237.cljs$lang$applyTo = G__16237__4.cljs$lang$applyTo;
      return G__16237;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__16240 = null;
      var G__16240__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__16240__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__16240__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__16240__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__16240__4 = function() {
        var G__16241__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__16241 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16241__delegate.call(this, x, y, z, args);
        };
        G__16241.cljs$lang$maxFixedArity = 3;
        G__16241.cljs$lang$applyTo = function(arglist__16242) {
          var x = cljs.core.first(arglist__16242);
          arglist__16242 = cljs.core.next(arglist__16242);
          var y = cljs.core.first(arglist__16242);
          arglist__16242 = cljs.core.next(arglist__16242);
          var z = cljs.core.first(arglist__16242);
          var args = cljs.core.rest(arglist__16242);
          return G__16241__delegate(x, y, z, args);
        };
        G__16241.cljs$core$IFn$_invoke$arity$variadic = G__16241__delegate;
        return G__16241;
      }();
      G__16240 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16240__0.call(this);
          case 1:
            return G__16240__1.call(this, x);
          case 2:
            return G__16240__2.call(this, x, y);
          case 3:
            return G__16240__3.call(this, x, y, z);
          default:
            return G__16240__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16240.cljs$lang$maxFixedArity = 3;
      G__16240.cljs$lang$applyTo = G__16240__4.cljs$lang$applyTo;
      return G__16240;
    }();
  };
  var comp__4 = function() {
    var G__16243__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__16244__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__16245 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__16246 = cljs.core.next.call(null, fs__$2);
                ret = G__16245;
                fs__$2 = G__16246;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__16244 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__16244__delegate.call(this, args);
          };
          G__16244.cljs$lang$maxFixedArity = 0;
          G__16244.cljs$lang$applyTo = function(arglist__16247) {
            var args = cljs.core.seq(arglist__16247);
            return G__16244__delegate(args);
          };
          G__16244.cljs$core$IFn$_invoke$arity$variadic = G__16244__delegate;
          return G__16244;
        }();
      }(fs__$1);
    };
    var G__16243 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16243__delegate.call(this, f1, f2, f3, fs);
    };
    G__16243.cljs$lang$maxFixedArity = 3;
    G__16243.cljs$lang$applyTo = function(arglist__16248) {
      var f1 = cljs.core.first(arglist__16248);
      arglist__16248 = cljs.core.next(arglist__16248);
      var f2 = cljs.core.first(arglist__16248);
      arglist__16248 = cljs.core.next(arglist__16248);
      var f3 = cljs.core.first(arglist__16248);
      var fs = cljs.core.rest(arglist__16248);
      return G__16243__delegate(f1, f2, f3, fs);
    };
    G__16243.cljs$core$IFn$_invoke$arity$variadic = G__16243__delegate;
    return G__16243;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__16249__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__16249 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16249__delegate.call(this, args);
      };
      G__16249.cljs$lang$maxFixedArity = 0;
      G__16249.cljs$lang$applyTo = function(arglist__16250) {
        var args = cljs.core.seq(arglist__16250);
        return G__16249__delegate(args);
      };
      G__16249.cljs$core$IFn$_invoke$arity$variadic = G__16249__delegate;
      return G__16249;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__16251__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__16251 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16251__delegate.call(this, args);
      };
      G__16251.cljs$lang$maxFixedArity = 0;
      G__16251.cljs$lang$applyTo = function(arglist__16252) {
        var args = cljs.core.seq(arglist__16252);
        return G__16251__delegate(args);
      };
      G__16251.cljs$core$IFn$_invoke$arity$variadic = G__16251__delegate;
      return G__16251;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__16253__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__16253 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16253__delegate.call(this, args);
      };
      G__16253.cljs$lang$maxFixedArity = 0;
      G__16253.cljs$lang$applyTo = function(arglist__16254) {
        var args = cljs.core.seq(arglist__16254);
        return G__16253__delegate(args);
      };
      G__16253.cljs$core$IFn$_invoke$arity$variadic = G__16253__delegate;
      return G__16253;
    }();
  };
  var partial__5 = function() {
    var G__16255__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__16256__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__16256 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16256__delegate.call(this, args);
        };
        G__16256.cljs$lang$maxFixedArity = 0;
        G__16256.cljs$lang$applyTo = function(arglist__16257) {
          var args = cljs.core.seq(arglist__16257);
          return G__16256__delegate(args);
        };
        G__16256.cljs$core$IFn$_invoke$arity$variadic = G__16256__delegate;
        return G__16256;
      }();
    };
    var G__16255 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16255__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__16255.cljs$lang$maxFixedArity = 4;
    G__16255.cljs$lang$applyTo = function(arglist__16258) {
      var f = cljs.core.first(arglist__16258);
      arglist__16258 = cljs.core.next(arglist__16258);
      var arg1 = cljs.core.first(arglist__16258);
      arglist__16258 = cljs.core.next(arglist__16258);
      var arg2 = cljs.core.first(arglist__16258);
      arglist__16258 = cljs.core.next(arglist__16258);
      var arg3 = cljs.core.first(arglist__16258);
      var more = cljs.core.rest(arglist__16258);
      return G__16255__delegate(f, arg1, arg2, arg3, more);
    };
    G__16255.cljs$core$IFn$_invoke$arity$variadic = G__16255__delegate;
    return G__16255;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__16259 = null;
      var G__16259__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__16259__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__16259__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__16259__4 = function() {
        var G__16260__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__16260 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16260__delegate.call(this, a, b, c, ds);
        };
        G__16260.cljs$lang$maxFixedArity = 3;
        G__16260.cljs$lang$applyTo = function(arglist__16261) {
          var a = cljs.core.first(arglist__16261);
          arglist__16261 = cljs.core.next(arglist__16261);
          var b = cljs.core.first(arglist__16261);
          arglist__16261 = cljs.core.next(arglist__16261);
          var c = cljs.core.first(arglist__16261);
          var ds = cljs.core.rest(arglist__16261);
          return G__16260__delegate(a, b, c, ds);
        };
        G__16260.cljs$core$IFn$_invoke$arity$variadic = G__16260__delegate;
        return G__16260;
      }();
      G__16259 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__16259__1.call(this, a);
          case 2:
            return G__16259__2.call(this, a, b);
          case 3:
            return G__16259__3.call(this, a, b, c);
          default:
            return G__16259__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16259.cljs$lang$maxFixedArity = 3;
      G__16259.cljs$lang$applyTo = G__16259__4.cljs$lang$applyTo;
      return G__16259;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__16262 = null;
      var G__16262__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16262__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__16262__4 = function() {
        var G__16263__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__16263 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16263__delegate.call(this, a, b, c, ds);
        };
        G__16263.cljs$lang$maxFixedArity = 3;
        G__16263.cljs$lang$applyTo = function(arglist__16264) {
          var a = cljs.core.first(arglist__16264);
          arglist__16264 = cljs.core.next(arglist__16264);
          var b = cljs.core.first(arglist__16264);
          arglist__16264 = cljs.core.next(arglist__16264);
          var c = cljs.core.first(arglist__16264);
          var ds = cljs.core.rest(arglist__16264);
          return G__16263__delegate(a, b, c, ds);
        };
        G__16263.cljs$core$IFn$_invoke$arity$variadic = G__16263__delegate;
        return G__16263;
      }();
      G__16262 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16262__2.call(this, a, b);
          case 3:
            return G__16262__3.call(this, a, b, c);
          default:
            return G__16262__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16262.cljs$lang$maxFixedArity = 3;
      G__16262.cljs$lang$applyTo = G__16262__4.cljs$lang$applyTo;
      return G__16262;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__16265 = null;
      var G__16265__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16265__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__16265__4 = function() {
        var G__16266__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__16266 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16266__delegate.call(this, a, b, c, ds);
        };
        G__16266.cljs$lang$maxFixedArity = 3;
        G__16266.cljs$lang$applyTo = function(arglist__16267) {
          var a = cljs.core.first(arglist__16267);
          arglist__16267 = cljs.core.next(arglist__16267);
          var b = cljs.core.first(arglist__16267);
          arglist__16267 = cljs.core.next(arglist__16267);
          var c = cljs.core.first(arglist__16267);
          var ds = cljs.core.rest(arglist__16267);
          return G__16266__delegate(a, b, c, ds);
        };
        G__16266.cljs$core$IFn$_invoke$arity$variadic = G__16266__delegate;
        return G__16266;
      }();
      G__16265 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16265__2.call(this, a, b);
          case 3:
            return G__16265__3.call(this, a, b, c);
          default:
            return G__16265__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16265.cljs$lang$maxFixedArity = 3;
      G__16265.cljs$lang$applyTo = G__16265__4.cljs$lang$applyTo;
      return G__16265;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3895__auto___16268 = size;
          var i_16269 = 0;
          while (true) {
            if (i_16269 < n__3895__auto___16268) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_16269, cljs.core._nth.call(null, c, i_16269)));
              var G__16270 = i_16269 + 1;
              i_16269 = G__16270;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__3895__auto___16271 = size;
        var i_16272 = 0;
        while (true) {
          if (i_16272 < n__3895__auto___16271) {
            var x_16273 = f.call(null, cljs.core._nth.call(null, c, i_16272));
            if (x_16273 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_16273);
            }
            var G__16274 = i_16272 + 1;
            i_16272 = G__16274;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3895__auto___16275 = size;
          var i_16276 = 0;
          while (true) {
            if (i_16276 < n__3895__auto___16275) {
              var x_16277 = f.call(null, idx + i_16276, cljs.core._nth.call(null, c, i_16276));
              if (x_16277 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_16277);
              }
              var G__16278 = i_16276 + 1;
              i_16276 = G__16278;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3027__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3027__auto__)) {
            return p.call(null, y);
          } else {
            return and__3027__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3027__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3027__auto__)) {
            var and__3027__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3027__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3027__auto____$1;
            }
          } else {
            return and__3027__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__16285__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__16285 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16285__delegate.call(this, x, y, z, args);
        };
        G__16285.cljs$lang$maxFixedArity = 3;
        G__16285.cljs$lang$applyTo = function(arglist__16286) {
          var x = cljs.core.first(arglist__16286);
          arglist__16286 = cljs.core.next(arglist__16286);
          var y = cljs.core.first(arglist__16286);
          arglist__16286 = cljs.core.next(arglist__16286);
          var z = cljs.core.first(arglist__16286);
          var args = cljs.core.rest(arglist__16286);
          return G__16285__delegate(x, y, z, args);
        };
        G__16285.cljs$core$IFn$_invoke$arity$variadic = G__16285__delegate;
        return G__16285;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3027__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3027__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3027__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3027__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3027__auto__)) {
            var and__3027__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3027__auto____$1)) {
              var and__3027__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3027__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3027__auto____$2;
              }
            } else {
              return and__3027__auto____$1;
            }
          } else {
            return and__3027__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3027__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3027__auto__)) {
            var and__3027__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3027__auto____$1)) {
              var and__3027__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3027__auto____$2)) {
                var and__3027__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3027__auto____$3)) {
                  var and__3027__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3027__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3027__auto____$4;
                  }
                } else {
                  return and__3027__auto____$3;
                }
              } else {
                return and__3027__auto____$2;
              }
            } else {
              return and__3027__auto____$1;
            }
          } else {
            return and__3027__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__16287__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16279_SHARP_) {
            var and__3027__auto__ = p1.call(null, p1__16279_SHARP_);
            if (cljs.core.truth_(and__3027__auto__)) {
              return p2.call(null, p1__16279_SHARP_);
            } else {
              return and__3027__auto__;
            }
          }, args));
        };
        var G__16287 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16287__delegate.call(this, x, y, z, args);
        };
        G__16287.cljs$lang$maxFixedArity = 3;
        G__16287.cljs$lang$applyTo = function(arglist__16288) {
          var x = cljs.core.first(arglist__16288);
          arglist__16288 = cljs.core.next(arglist__16288);
          var y = cljs.core.first(arglist__16288);
          arglist__16288 = cljs.core.next(arglist__16288);
          var z = cljs.core.first(arglist__16288);
          var args = cljs.core.rest(arglist__16288);
          return G__16287__delegate(x, y, z, args);
        };
        G__16287.cljs$core$IFn$_invoke$arity$variadic = G__16287__delegate;
        return G__16287;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3027__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3027__auto__)) {
            var and__3027__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3027__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3027__auto____$1;
            }
          } else {
            return and__3027__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3027__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3027__auto__)) {
            var and__3027__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3027__auto____$1)) {
              var and__3027__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3027__auto____$2)) {
                var and__3027__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3027__auto____$3)) {
                  var and__3027__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3027__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3027__auto____$4;
                  }
                } else {
                  return and__3027__auto____$3;
                }
              } else {
                return and__3027__auto____$2;
              }
            } else {
              return and__3027__auto____$1;
            }
          } else {
            return and__3027__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3027__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3027__auto__)) {
            var and__3027__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3027__auto____$1)) {
              var and__3027__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3027__auto____$2)) {
                var and__3027__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3027__auto____$3)) {
                  var and__3027__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3027__auto____$4)) {
                    var and__3027__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3027__auto____$5)) {
                      var and__3027__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3027__auto____$6)) {
                        var and__3027__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3027__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3027__auto____$7;
                        }
                      } else {
                        return and__3027__auto____$6;
                      }
                    } else {
                      return and__3027__auto____$5;
                    }
                  } else {
                    return and__3027__auto____$4;
                  }
                } else {
                  return and__3027__auto____$3;
                }
              } else {
                return and__3027__auto____$2;
              }
            } else {
              return and__3027__auto____$1;
            }
          } else {
            return and__3027__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__16289__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16280_SHARP_) {
            var and__3027__auto__ = p1.call(null, p1__16280_SHARP_);
            if (cljs.core.truth_(and__3027__auto__)) {
              var and__3027__auto____$1 = p2.call(null, p1__16280_SHARP_);
              if (cljs.core.truth_(and__3027__auto____$1)) {
                return p3.call(null, p1__16280_SHARP_);
              } else {
                return and__3027__auto____$1;
              }
            } else {
              return and__3027__auto__;
            }
          }, args));
        };
        var G__16289 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16289__delegate.call(this, x, y, z, args);
        };
        G__16289.cljs$lang$maxFixedArity = 3;
        G__16289.cljs$lang$applyTo = function(arglist__16290) {
          var x = cljs.core.first(arglist__16290);
          arglist__16290 = cljs.core.next(arglist__16290);
          var y = cljs.core.first(arglist__16290);
          arglist__16290 = cljs.core.next(arglist__16290);
          var z = cljs.core.first(arglist__16290);
          var args = cljs.core.rest(arglist__16290);
          return G__16289__delegate(x, y, z, args);
        };
        G__16289.cljs$core$IFn$_invoke$arity$variadic = G__16289__delegate;
        return G__16289;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__16291__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16281_SHARP_) {
                return p1__16281_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16282_SHARP_) {
                var and__3027__auto__ = p1__16282_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3027__auto__)) {
                  return p1__16282_SHARP_.call(null, y);
                } else {
                  return and__3027__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16283_SHARP_) {
                var and__3027__auto__ = p1__16283_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3027__auto__)) {
                  var and__3027__auto____$1 = p1__16283_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3027__auto____$1)) {
                    return p1__16283_SHARP_.call(null, z);
                  } else {
                    return and__3027__auto____$1;
                  }
                } else {
                  return and__3027__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__16292__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__16284_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__16284_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__16292 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16292__delegate.call(this, x, y, z, args);
            };
            G__16292.cljs$lang$maxFixedArity = 3;
            G__16292.cljs$lang$applyTo = function(arglist__16293) {
              var x = cljs.core.first(arglist__16293);
              arglist__16293 = cljs.core.next(arglist__16293);
              var y = cljs.core.first(arglist__16293);
              arglist__16293 = cljs.core.next(arglist__16293);
              var z = cljs.core.first(arglist__16293);
              var args = cljs.core.rest(arglist__16293);
              return G__16292__delegate(x, y, z, args);
            };
            G__16292.cljs$core$IFn$_invoke$arity$variadic = G__16292__delegate;
            return G__16292;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__16291 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16291__delegate.call(this, p1, p2, p3, ps);
    };
    G__16291.cljs$lang$maxFixedArity = 3;
    G__16291.cljs$lang$applyTo = function(arglist__16294) {
      var p1 = cljs.core.first(arglist__16294);
      arglist__16294 = cljs.core.next(arglist__16294);
      var p2 = cljs.core.first(arglist__16294);
      arglist__16294 = cljs.core.next(arglist__16294);
      var p3 = cljs.core.first(arglist__16294);
      var ps = cljs.core.rest(arglist__16294);
      return G__16291__delegate(p1, p2, p3, ps);
    };
    G__16291.cljs$core$IFn$_invoke$arity$variadic = G__16291__delegate;
    return G__16291;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3039__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3039__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3039__auto____$1)) {
            return or__3039__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__16301__delegate = function(x, y, z, args) {
          var or__3039__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3039__auto__)) {
            return or__3039__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__16301 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16301__delegate.call(this, x, y, z, args);
        };
        G__16301.cljs$lang$maxFixedArity = 3;
        G__16301.cljs$lang$applyTo = function(arglist__16302) {
          var x = cljs.core.first(arglist__16302);
          arglist__16302 = cljs.core.next(arglist__16302);
          var y = cljs.core.first(arglist__16302);
          arglist__16302 = cljs.core.next(arglist__16302);
          var z = cljs.core.first(arglist__16302);
          var args = cljs.core.rest(arglist__16302);
          return G__16301__delegate(x, y, z, args);
        };
        G__16301.cljs$core$IFn$_invoke$arity$variadic = G__16301__delegate;
        return G__16301;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3039__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3039__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3039__auto____$1)) {
            return or__3039__auto____$1;
          } else {
            var or__3039__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3039__auto____$2)) {
              return or__3039__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3039__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3039__auto____$1)) {
            return or__3039__auto____$1;
          } else {
            var or__3039__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3039__auto____$2)) {
              return or__3039__auto____$2;
            } else {
              var or__3039__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3039__auto____$3)) {
                return or__3039__auto____$3;
              } else {
                var or__3039__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3039__auto____$4)) {
                  return or__3039__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__16303__delegate = function(x, y, z, args) {
          var or__3039__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3039__auto__)) {
            return or__3039__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3039__auto__) {
              return function(p1__16295_SHARP_) {
                var or__3039__auto____$1 = p1.call(null, p1__16295_SHARP_);
                if (cljs.core.truth_(or__3039__auto____$1)) {
                  return or__3039__auto____$1;
                } else {
                  return p2.call(null, p1__16295_SHARP_);
                }
              };
            }(or__3039__auto__), args);
          }
        };
        var G__16303 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16303__delegate.call(this, x, y, z, args);
        };
        G__16303.cljs$lang$maxFixedArity = 3;
        G__16303.cljs$lang$applyTo = function(arglist__16304) {
          var x = cljs.core.first(arglist__16304);
          arglist__16304 = cljs.core.next(arglist__16304);
          var y = cljs.core.first(arglist__16304);
          arglist__16304 = cljs.core.next(arglist__16304);
          var z = cljs.core.first(arglist__16304);
          var args = cljs.core.rest(arglist__16304);
          return G__16303__delegate(x, y, z, args);
        };
        G__16303.cljs$core$IFn$_invoke$arity$variadic = G__16303__delegate;
        return G__16303;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3039__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3039__auto____$1)) {
            return or__3039__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3039__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3039__auto____$1)) {
            return or__3039__auto____$1;
          } else {
            var or__3039__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3039__auto____$2)) {
              return or__3039__auto____$2;
            } else {
              var or__3039__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3039__auto____$3)) {
                return or__3039__auto____$3;
              } else {
                var or__3039__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3039__auto____$4)) {
                  return or__3039__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3039__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3039__auto____$1)) {
            return or__3039__auto____$1;
          } else {
            var or__3039__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3039__auto____$2)) {
              return or__3039__auto____$2;
            } else {
              var or__3039__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3039__auto____$3)) {
                return or__3039__auto____$3;
              } else {
                var or__3039__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3039__auto____$4)) {
                  return or__3039__auto____$4;
                } else {
                  var or__3039__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3039__auto____$5)) {
                    return or__3039__auto____$5;
                  } else {
                    var or__3039__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3039__auto____$6)) {
                      return or__3039__auto____$6;
                    } else {
                      var or__3039__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3039__auto____$7)) {
                        return or__3039__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__16305__delegate = function(x, y, z, args) {
          var or__3039__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3039__auto__)) {
            return or__3039__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3039__auto__) {
              return function(p1__16296_SHARP_) {
                var or__3039__auto____$1 = p1.call(null, p1__16296_SHARP_);
                if (cljs.core.truth_(or__3039__auto____$1)) {
                  return or__3039__auto____$1;
                } else {
                  var or__3039__auto____$2 = p2.call(null, p1__16296_SHARP_);
                  if (cljs.core.truth_(or__3039__auto____$2)) {
                    return or__3039__auto____$2;
                  } else {
                    return p3.call(null, p1__16296_SHARP_);
                  }
                }
              };
            }(or__3039__auto__), args);
          }
        };
        var G__16305 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16305__delegate.call(this, x, y, z, args);
        };
        G__16305.cljs$lang$maxFixedArity = 3;
        G__16305.cljs$lang$applyTo = function(arglist__16306) {
          var x = cljs.core.first(arglist__16306);
          arglist__16306 = cljs.core.next(arglist__16306);
          var y = cljs.core.first(arglist__16306);
          arglist__16306 = cljs.core.next(arglist__16306);
          var z = cljs.core.first(arglist__16306);
          var args = cljs.core.rest(arglist__16306);
          return G__16305__delegate(x, y, z, args);
        };
        G__16305.cljs$core$IFn$_invoke$arity$variadic = G__16305__delegate;
        return G__16305;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__16307__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16297_SHARP_) {
                return p1__16297_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16298_SHARP_) {
                var or__3039__auto__ = p1__16298_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3039__auto__)) {
                  return or__3039__auto__;
                } else {
                  return p1__16298_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16299_SHARP_) {
                var or__3039__auto__ = p1__16299_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3039__auto__)) {
                  return or__3039__auto__;
                } else {
                  var or__3039__auto____$1 = p1__16299_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3039__auto____$1)) {
                    return or__3039__auto____$1;
                  } else {
                    return p1__16299_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__16308__delegate = function(x, y, z, args) {
              var or__3039__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3039__auto__)) {
                return or__3039__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3039__auto__, ps__$1) {
                  return function(p1__16300_SHARP_) {
                    return cljs.core.some.call(null, p1__16300_SHARP_, args);
                  };
                }(or__3039__auto__, ps__$1), ps__$1);
              }
            };
            var G__16308 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16308__delegate.call(this, x, y, z, args);
            };
            G__16308.cljs$lang$maxFixedArity = 3;
            G__16308.cljs$lang$applyTo = function(arglist__16309) {
              var x = cljs.core.first(arglist__16309);
              arglist__16309 = cljs.core.next(arglist__16309);
              var y = cljs.core.first(arglist__16309);
              arglist__16309 = cljs.core.next(arglist__16309);
              var z = cljs.core.first(arglist__16309);
              var args = cljs.core.rest(arglist__16309);
              return G__16308__delegate(x, y, z, args);
            };
            G__16308.cljs$core$IFn$_invoke$arity$variadic = G__16308__delegate;
            return G__16308;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__16307 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16307__delegate.call(this, p1, p2, p3, ps);
    };
    G__16307.cljs$lang$maxFixedArity = 3;
    G__16307.cljs$lang$applyTo = function(arglist__16310) {
      var p1 = cljs.core.first(arglist__16310);
      arglist__16310 = cljs.core.next(arglist__16310);
      var p2 = cljs.core.first(arglist__16310);
      arglist__16310 = cljs.core.next(arglist__16310);
      var p3 = cljs.core.first(arglist__16310);
      var ps = cljs.core.rest(arglist__16310);
      return G__16307__delegate(p1, p2, p3, ps);
    };
    G__16307.cljs$core$IFn$_invoke$arity$variadic = G__16307__delegate;
    return G__16307;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3895__auto___16312 = size;
          var i_16313 = 0;
          while (true) {
            if (i_16313 < n__3895__auto___16312) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_16313)));
              var G__16314 = i_16313 + 1;
              i_16313 = G__16314;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__16315__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__16311_SHARP_) {
          return cljs.core.apply.call(null, f, p1__16311_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__16315 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16315__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16315.cljs$lang$maxFixedArity = 4;
    G__16315.cljs$lang$applyTo = function(arglist__16316) {
      var f = cljs.core.first(arglist__16316);
      arglist__16316 = cljs.core.next(arglist__16316);
      var c1 = cljs.core.first(arglist__16316);
      arglist__16316 = cljs.core.next(arglist__16316);
      var c2 = cljs.core.first(arglist__16316);
      arglist__16316 = cljs.core.next(arglist__16316);
      var c3 = cljs.core.first(arglist__16316);
      var colls = cljs.core.rest(arglist__16316);
      return G__16315__delegate(f, c1, c2, c3, colls);
    };
    G__16315.cljs$core$IFn$_invoke$arity$variadic = G__16315__delegate;
    return G__16315;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__16317 = n__$1 - 1;
        var G__16318 = cljs.core.rest.call(null, s);
        n__$1 = G__16317;
        coll__$1 = G__16318;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, n, coll);
    };
  }(step), null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__16319 = cljs.core.next.call(null, s);
      var G__16320 = cljs.core.next.call(null, lead);
      s = G__16319;
      lead = G__16320;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3027__auto__ = s;
        if (and__3027__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3027__auto__;
        }
      }())) {
        var G__16321 = pred__$1;
        var G__16322 = cljs.core.rest.call(null, s);
        pred__$1 = G__16321;
        coll__$1 = G__16322;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, pred, coll);
    };
  }(step), null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__16323__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__16323 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16323__delegate.call(this, c1, c2, colls);
    };
    G__16323.cljs$lang$maxFixedArity = 2;
    G__16323.cljs$lang$applyTo = function(arglist__16324) {
      var c1 = cljs.core.first(arglist__16324);
      arglist__16324 = cljs.core.next(arglist__16324);
      var c2 = cljs.core.first(arglist__16324);
      var colls = cljs.core.rest(arglist__16324);
      return G__16323__delegate(c1, c2, colls);
    };
    G__16323.cljs$core$IFn$_invoke$arity$variadic = G__16323__delegate;
    return G__16323;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__16325__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__16325 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16325__delegate.call(this, f, coll, colls);
    };
    G__16325.cljs$lang$maxFixedArity = 2;
    G__16325.cljs$lang$applyTo = function(arglist__16326) {
      var f = cljs.core.first(arglist__16326);
      arglist__16326 = cljs.core.next(arglist__16326);
      var coll = cljs.core.first(arglist__16326);
      var colls = cljs.core.rest(arglist__16326);
      return G__16325__delegate(f, coll, colls);
    };
    G__16325.cljs$core$IFn$_invoke$arity$variadic = G__16325__delegate;
    return G__16325;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__3895__auto___16327 = size;
        var i_16328 = 0;
        while (true) {
          if (i_16328 < n__3895__auto___16327) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_16328)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_16328));
            } else {
            }
            var G__16329 = i_16328 + 1;
            i_16328 = G__16329;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__16330_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__16330_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__16332 = to;
      if (G__16332) {
        var bit__3682__auto__ = G__16332.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__3682__auto__ || G__16332.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__16333__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__16333 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16333__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16333.cljs$lang$maxFixedArity = 4;
    G__16333.cljs$lang$applyTo = function(arglist__16334) {
      var f = cljs.core.first(arglist__16334);
      arglist__16334 = cljs.core.next(arglist__16334);
      var c1 = cljs.core.first(arglist__16334);
      arglist__16334 = cljs.core.next(arglist__16334);
      var c2 = cljs.core.first(arglist__16334);
      arglist__16334 = cljs.core.next(arglist__16334);
      var c3 = cljs.core.first(arglist__16334);
      var colls = cljs.core.rest(arglist__16334);
      return G__16333__delegate(f, c1, c2, c3, colls);
    };
    G__16333.cljs$core$IFn$_invoke$arity$variadic = G__16333__delegate;
    return G__16333;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__16336 = m__$1;
          if (G__16336) {
            var bit__3689__auto__ = G__16336.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__3689__auto__ || G__16336.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__16336.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16336);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16336);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__16337 = sentinel;
            var G__16338 = m__$2;
            var G__16339 = cljs.core.next.call(null, ks__$1);
            sentinel = G__16337;
            m__$1 = G__16338;
            ks__$1 = G__16339;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__16340, v) {
  var vec__16342 = p__16340;
  var k = cljs.core.nth.call(null, vec__16342, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__16342, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__16343, f) {
    var vec__16353 = p__16343;
    var k = cljs.core.nth.call(null, vec__16353, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16353, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__16344, f, a) {
    var vec__16354 = p__16344;
    var k = cljs.core.nth.call(null, vec__16354, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16354, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__16345, f, a, b) {
    var vec__16355 = p__16345;
    var k = cljs.core.nth.call(null, vec__16355, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16355, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__16346, f, a, b, c) {
    var vec__16356 = p__16346;
    var k = cljs.core.nth.call(null, vec__16356, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16356, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__16358__delegate = function(m, p__16347, f, a, b, c, args) {
      var vec__16357 = p__16347;
      var k = cljs.core.nth.call(null, vec__16357, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__16357, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__16358 = function(m, p__16347, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16358__delegate.call(this, m, p__16347, f, a, b, c, args);
    };
    G__16358.cljs$lang$maxFixedArity = 6;
    G__16358.cljs$lang$applyTo = function(arglist__16359) {
      var m = cljs.core.first(arglist__16359);
      arglist__16359 = cljs.core.next(arglist__16359);
      var p__16347 = cljs.core.first(arglist__16359);
      arglist__16359 = cljs.core.next(arglist__16359);
      var f = cljs.core.first(arglist__16359);
      arglist__16359 = cljs.core.next(arglist__16359);
      var a = cljs.core.first(arglist__16359);
      arglist__16359 = cljs.core.next(arglist__16359);
      var b = cljs.core.first(arglist__16359);
      arglist__16359 = cljs.core.next(arglist__16359);
      var c = cljs.core.first(arglist__16359);
      var args = cljs.core.rest(arglist__16359);
      return G__16358__delegate(m, p__16347, f, a, b, c, args);
    };
    G__16358.cljs$core$IFn$_invoke$arity$variadic = G__16358__delegate;
    return G__16358;
  }();
  update_in = function(m, p__16347, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__16347, f);
      case 4:
        return update_in__4.call(this, m, p__16347, f, a);
      case 5:
        return update_in__5.call(this, m, p__16347, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__16347, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__16347, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3609__auto__, writer__3610__auto__, opts__3611__auto__) {
  return cljs.core._write.call(null, writer__3610__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__16360 = ll - 5;
      var G__16361 = r;
      ll = G__16360;
      ret = G__16361;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__16362 = cljs.core.pv_aget.call(null, node, 0);
      var G__16363 = level - 5;
      node = G__16362;
      level = G__16363;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__16364 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__16365 = level - 5;
        node = G__16364;
        level = G__16365;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__16367 = j + 1;
              var G__16368 = init__$2;
              j = G__16367;
              init__$1 = G__16368;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__16369 = i + step_init[0];
        i = G__16369;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__3895__auto___16370 = len;
    var i_16371 = 0;
    while (true) {
      if (i_16371 < n__3895__auto___16370) {
        new_tail[i_16371] = self__.tail[i_16371];
        var G__16372 = i_16371 + 1;
        i_16371 = G__16372;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__16373 = null;
  var G__16373__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16373__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16373 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16373__2.call(this, self__, k);
      case 3:
        return G__16373__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16373;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args16366) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16366)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__16374 = i + 1;
        var G__16375 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__16374;
        out = G__16375;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__16376) {
    var args = cljs.core.seq(arglist__16376);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3346__auto__ = self__.end;
    var y__3347__auto__ = v_pos + 1;
    return x__3346__auto__ > y__3347__auto__ ? x__3346__auto__ : y__3347__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__16378 = null;
  var G__16378__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16378__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16378 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16378__2.call(this, self__, k);
      case 3:
        return G__16378__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16378;
}();
cljs.core.Subvec.prototype.apply = function(self__, args16377) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16377)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__16379 = meta;
      var G__16380 = v.v;
      var G__16381 = v.start + start;
      var G__16382 = v.start + end;
      var G__16383 = __hash;
      meta = G__16379;
      v = G__16380;
      start = G__16381;
      end = G__16382;
      __hash = G__16383;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj16387 = {};
    return obj16387;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__16388 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__16389 = level - 5;
        node = G__16388;
        level = G__16389;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__16391 = null;
  var G__16391__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16391__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16391 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16391__2.call(this, self__, k);
      case 3:
        return G__16391__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16391;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args16390) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16390)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3039__auto__ = self__.front;
    if (cljs.core.truth_(or__3039__auto__)) {
      return or__3039__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3039__auto__ = self__.rear;
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__16392 = i + incr;
        i = G__16392;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__16393 = i + 1;
      var G__16394 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__16393;
      out = G__16394;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj16398 = {};
    return obj16398;
  }();
  var l = ks.length;
  var i_16399 = 0;
  while (true) {
    if (i_16399 < l) {
      var k_16400 = ks[i_16399];
      new_obj[k_16400] = obj[k_16400];
      var G__16401 = i_16399 + 1;
      i_16399 = G__16401;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16404 = cljs.core.rest.call(null, keys__$1);
        var G__16405 = init__$2;
        keys__$1 = G__16404;
        init__$1 = G__16405;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__16402_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16402_SHARP_, self__.strobj[p1__16402_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__16406 = null;
  var G__16406__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16406__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16406 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16406__2.call(this, self__, k);
      case 3:
        return G__16406__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16406;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args16403) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16403)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj16408 = {};
  return obj16408;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.Iterator = function(s) {
  this.s = s;
};
cljs.core.Iterator.cljs$lang$type = true;
cljs.core.Iterator.cljs$lang$ctorStr = "cljs.core/Iterator";
cljs.core.Iterator.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/Iterator");
};
cljs.core.Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_Iterator = function __GT_Iterator(s) {
  return new cljs.core.Iterator(s);
};
cljs.core.iterator = function iterator(coll) {
  return new cljs.core.Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.EntriesIterator.cljs$lang$type = true;
cljs.core.EntriesIterator.cljs$lang$ctorStr = "cljs.core/EntriesIterator";
cljs.core.EntriesIterator.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/EntriesIterator");
};
cljs.core.EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__16409 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__16409, 0, null);
    var v = cljs.core.nth.call(null, vec__16409, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_EntriesIterator = function __GT_EntriesIterator(s) {
  return new cljs.core.EntriesIterator(s);
};
cljs.core.entries_iterator = function entries_iterator(coll) {
  return new cljs.core.EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.SetEntriesIterator.cljs$lang$type = true;
cljs.core.SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/SetEntriesIterator";
cljs.core.SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/SetEntriesIterator");
};
cljs.core.SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_SetEntriesIterator = function __GT_SetEntriesIterator(s) {
  return new cljs.core.SetEntriesIterator(s);
};
cljs.core.set_entries_iterator = function set_entries_iterator(coll) {
  return new cljs.core.SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16410 = i + 2;
          i = G__16410;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16411 = i + 2;
          i = G__16411;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16412 = i + 2;
          i = G__16412;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16413 = i + 2;
          i = G__16413;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__16414 = i + 2;
          i = G__16414;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_16415 = 0;
  while (true) {
    if (i_16415 < l) {
      narr[i_16415] = arr[i_16415];
      var G__16416 = i_16415 + 1;
      i_16415 = G__16416;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16418 = cljs.core.seq.call(null, coll);
  var chunk__16419 = null;
  var count__16420 = 0;
  var i__16421 = 0;
  while (true) {
    if (i__16421 < count__16420) {
      var vec__16422 = cljs.core._nth.call(null, chunk__16419, i__16421);
      var k = cljs.core.nth.call(null, vec__16422, 0, null);
      var v = cljs.core.nth.call(null, vec__16422, 1, null);
      f.call(null, v, k);
      var G__16427 = seq__16418;
      var G__16428 = chunk__16419;
      var G__16429 = count__16420;
      var G__16430 = i__16421 + 1;
      seq__16418 = G__16427;
      chunk__16419 = G__16428;
      count__16420 = G__16429;
      i__16421 = G__16430;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16418);
      if (temp__4126__auto__) {
        var seq__16418__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16418__$1)) {
          var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__16418__$1);
          var G__16431 = cljs.core.chunk_rest.call(null, seq__16418__$1);
          var G__16432 = c__3795__auto__;
          var G__16433 = cljs.core.count.call(null, c__3795__auto__);
          var G__16434 = 0;
          seq__16418 = G__16431;
          chunk__16419 = G__16432;
          count__16420 = G__16433;
          i__16421 = G__16434;
          continue;
        } else {
          var vec__16423 = cljs.core.first.call(null, seq__16418__$1);
          var k = cljs.core.nth.call(null, vec__16423, 0, null);
          var v = cljs.core.nth.call(null, vec__16423, 1, null);
          f.call(null, v, k);
          var G__16435 = cljs.core.next.call(null, seq__16418__$1);
          var G__16436 = null;
          var G__16437 = 0;
          var G__16438 = 0;
          seq__16418 = G__16435;
          chunk__16419 = G__16436;
          count__16420 = G__16437;
          i__16421 = G__16438;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16439 = i + 2;
        var G__16440 = init__$2;
        i = G__16439;
        init__$1 = G__16440;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj16425 = {};
    return obj16425;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__16441 = s + 2;
            var G__16442 = d;
            s = G__16441;
            d = G__16442;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__16443 = s + 2;
              var G__16444 = d + 2;
              s = G__16443;
              d = G__16444;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var arr__$1 = function() {
          var G__16426 = cljs.core.aclone.call(null, self__.arr);
          G__16426[idx + 1] = v;
          return G__16426;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16445 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16446 = cljs.core.next.call(null, es);
          ret = G__16445;
          es = G__16446;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__16447 = null;
  var G__16447__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16447__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16447 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16447__2.call(this, self__, k);
      case 3:
        return G__16447__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16447;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args16417) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16417)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16448 = i + 2;
        var G__16449 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__16448;
        ret = G__16449;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__16450_16452 = self__.arr;
      G__16450_16452.pop();
      G__16450_16452.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__16451 = o;
      if (G__16451) {
        var bit__3689__auto__ = G__16451.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__3689__auto__ || G__16451.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16451.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16451);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16451);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__16453 = cljs.core.next.call(null, es);
          var G__16454 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16453;
          tcoll__$2 = G__16454;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__16455 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__16456 = i + 2;
      out = G__16455;
      i = G__16456;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3609__auto__, writer__3610__auto__, opts__3611__auto__) {
  return cljs.core._write.call(null, writer__3610__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__16459 = cljs.core.aclone.call(null, arr);
    G__16459[i] = a;
    return G__16459;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__16460 = cljs.core.aclone.call(null, arr);
    G__16460[i] = a;
    G__16460[j] = b;
    return G__16460;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16461 = i + 2;
        var G__16462 = init__$2;
        i = G__16461;
        init__$1 = G__16462;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_16463 = 0;
        var j_16464 = 0;
        while (true) {
          if (i_16463 < 32) {
            if ((self__.bitmap >>> i_16463 & 1) === 0) {
              var G__16465 = i_16463 + 1;
              var G__16466 = j_16464;
              i_16463 = G__16465;
              j_16464 = G__16466;
              continue;
            } else {
              nodes[i_16463] = !(self__.arr[j_16464] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_16464]), self__.arr[j_16464], self__.arr[j_16464 + 1], added_leaf_QMARK_) : self__.arr[j_16464 + 1];
              var G__16467 = i_16463 + 1;
              var G__16468 = j_16464 + 2;
              i_16463 = G__16467;
              j_16464 = G__16468;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_16469 = 0;
      var j_16470 = 0;
      while (true) {
        if (i_16469 < 32) {
          if ((self__.bitmap >>> i_16469 & 1) === 0) {
            var G__16471 = i_16469 + 1;
            var G__16472 = j_16470;
            i_16469 = G__16471;
            j_16470 = G__16472;
            continue;
          } else {
            nodes[i_16469] = !(self__.arr[j_16470] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_16470]), self__.arr[j_16470], self__.arr[j_16470 + 1], added_leaf_QMARK_) : self__.arr[j_16470 + 1];
            var G__16473 = i_16469 + 1;
            var G__16474 = j_16470 + 2;
            i_16469 = G__16473;
            j_16470 = G__16474;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__16475 = i + 1;
        var G__16476 = j + 2;
        var G__16477 = bitmap | 1 << i;
        i = G__16475;
        j = G__16476;
        bitmap = G__16477;
        continue;
      } else {
        var G__16478 = i + 1;
        var G__16479 = j;
        var G__16480 = bitmap;
        i = G__16478;
        j = G__16479;
        bitmap = G__16480;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__16481 = i + 1;
          var G__16482 = init__$2;
          i = G__16481;
          init__$1 = G__16482;
          continue;
        }
      } else {
        var G__16483 = i + 1;
        var G__16484 = init__$1;
        i = G__16483;
        init__$1 = G__16484;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__16485 = i + 2;
        i = G__16485;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__16486 = j + 2;
                j = G__16486;
                continue;
              }
            } else {
              var G__16487 = j + 2;
              j = G__16487;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__16488 = j + 1;
              j = G__16488;
              continue;
            }
          } else {
            var G__16489 = j + 1;
            j = G__16489;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16491 = cljs.core.seq.call(null, coll);
  var chunk__16492 = null;
  var count__16493 = 0;
  var i__16494 = 0;
  while (true) {
    if (i__16494 < count__16493) {
      var vec__16495 = cljs.core._nth.call(null, chunk__16492, i__16494);
      var k = cljs.core.nth.call(null, vec__16495, 0, null);
      var v = cljs.core.nth.call(null, vec__16495, 1, null);
      f.call(null, v, k);
      var G__16499 = seq__16491;
      var G__16500 = chunk__16492;
      var G__16501 = count__16493;
      var G__16502 = i__16494 + 1;
      seq__16491 = G__16499;
      chunk__16492 = G__16500;
      count__16493 = G__16501;
      i__16494 = G__16502;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16491);
      if (temp__4126__auto__) {
        var seq__16491__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16491__$1)) {
          var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__16491__$1);
          var G__16503 = cljs.core.chunk_rest.call(null, seq__16491__$1);
          var G__16504 = c__3795__auto__;
          var G__16505 = cljs.core.count.call(null, c__3795__auto__);
          var G__16506 = 0;
          seq__16491 = G__16503;
          chunk__16492 = G__16504;
          count__16493 = G__16505;
          i__16494 = G__16506;
          continue;
        } else {
          var vec__16496 = cljs.core.first.call(null, seq__16491__$1);
          var k = cljs.core.nth.call(null, vec__16496, 0, null);
          var v = cljs.core.nth.call(null, vec__16496, 1, null);
          f.call(null, v, k);
          var G__16507 = cljs.core.next.call(null, seq__16491__$1);
          var G__16508 = null;
          var G__16509 = 0;
          var G__16510 = 0;
          seq__16491 = G__16507;
          chunk__16492 = G__16508;
          count__16493 = G__16509;
          i__16494 = G__16510;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj16498 = {};
    return obj16498;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16511 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16512 = cljs.core.next.call(null, es);
          ret = G__16511;
          es = G__16512;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__16513 = null;
  var G__16513__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16513__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16513 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16513__2.call(this, self__, k);
      case 3:
        return G__16513__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16513;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args16490) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16490)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__16514 = i + 1;
      var G__16515 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__16514;
      out = G__16515;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__16516 = o;
      if (G__16516) {
        var bit__3689__auto__ = G__16516.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__3689__auto__ || G__16516.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16516.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16516);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16516);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__16517 = cljs.core.next.call(null, es);
          var G__16518 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16517;
          tcoll__$1 = G__16518;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__16519 = ascending_QMARK_ ? t.left : t.right;
      var G__16520 = cljs.core.conj.call(null, stack__$1, t);
      t = G__16519;
      stack__$1 = G__16520;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__16522 = null;
  var G__16522__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16522__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16522 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16522__2.call(this, self__, k);
      case 3:
        return G__16522__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16522;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args16521) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16521)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__16524 = null;
  var G__16524__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16524__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16524 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16524__2.call(this, self__, k);
      case 3:
        return G__16524__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16524;
}();
cljs.core.RedNode.prototype.apply = function(self__, args16523) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16523)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16526 = cljs.core.seq.call(null, coll);
  var chunk__16527 = null;
  var count__16528 = 0;
  var i__16529 = 0;
  while (true) {
    if (i__16529 < count__16528) {
      var vec__16530 = cljs.core._nth.call(null, chunk__16527, i__16529);
      var k = cljs.core.nth.call(null, vec__16530, 0, null);
      var v = cljs.core.nth.call(null, vec__16530, 1, null);
      f.call(null, v, k);
      var G__16532 = seq__16526;
      var G__16533 = chunk__16527;
      var G__16534 = count__16528;
      var G__16535 = i__16529 + 1;
      seq__16526 = G__16532;
      chunk__16527 = G__16533;
      count__16528 = G__16534;
      i__16529 = G__16535;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16526);
      if (temp__4126__auto__) {
        var seq__16526__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16526__$1)) {
          var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__16526__$1);
          var G__16536 = cljs.core.chunk_rest.call(null, seq__16526__$1);
          var G__16537 = c__3795__auto__;
          var G__16538 = cljs.core.count.call(null, c__3795__auto__);
          var G__16539 = 0;
          seq__16526 = G__16536;
          chunk__16527 = G__16537;
          count__16528 = G__16538;
          i__16529 = G__16539;
          continue;
        } else {
          var vec__16531 = cljs.core.first.call(null, seq__16526__$1);
          var k = cljs.core.nth.call(null, vec__16531, 0, null);
          var v = cljs.core.nth.call(null, vec__16531, 1, null);
          f.call(null, v, k);
          var G__16540 = cljs.core.next.call(null, seq__16526__$1);
          var G__16541 = null;
          var G__16542 = 0;
          var G__16543 = 0;
          seq__16526 = G__16540;
          chunk__16527 = G__16541;
          count__16528 = G__16542;
          i__16529 = G__16543;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__16544 = t.left;
          t = G__16544;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var G__16545 = t.right;
            t = G__16545;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16546 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16547 = cljs.core.next.call(null, es);
          ret = G__16546;
          es = G__16547;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__16548 = null;
  var G__16548__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16548__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16548 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16548__2.call(this, self__, k);
      case 3:
        return G__16548__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16548;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args16525) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16525)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__16549 = cljs.core.conj.call(null, stack, t);
              var G__16550 = t.left;
              stack = G__16549;
              t = G__16550;
              continue;
            } else {
              var G__16551 = stack;
              var G__16552 = t.right;
              stack = G__16551;
              t = G__16552;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              if (c > 0) {
                var G__16553 = cljs.core.conj.call(null, stack, t);
                var G__16554 = t.right;
                stack = G__16553;
                t = G__16554;
                continue;
              } else {
                var G__16555 = stack;
                var G__16556 = t.left;
                stack = G__16555;
                t = G__16556;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__16557 = cljs.core.nnext.call(null, in$);
        var G__16558 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16557;
        out = G__16558;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__16559) {
    var keyvals = cljs.core.seq(arglist__16559);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__16560) {
    var keyvals = cljs.core.seq(arglist__16560);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj16564 = {};
      return obj16564;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__16565 = cljs.core.nnext.call(null, kvs);
        kvs = G__16565;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__16566) {
    var keyvals = cljs.core.seq(arglist__16566);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__16567 = cljs.core.nnext.call(null, in$);
        var G__16568 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16567;
        out = G__16568;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__16569) {
    var keyvals = cljs.core.seq(arglist__16569);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__16570 = cljs.core.nnext.call(null, in$);
        var G__16571 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16570;
        out = G__16571;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__16572) {
    var comparator = cljs.core.first(arglist__16572);
    var keyvals = cljs.core.rest(arglist__16572);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16573 = self__.mseq;
    if (G__16573) {
      var bit__3689__auto__ = G__16573.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3689__auto__ || G__16573.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16573.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16573);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16573);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16574 = self__.mseq;
    if (G__16574) {
      var bit__3689__auto__ = G__16574.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3689__auto__ || G__16574.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16574.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16574);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16574);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16575 = self__.mseq;
    if (G__16575) {
      var bit__3689__auto__ = G__16575.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3689__auto__ || G__16575.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16575.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16575);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16575);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16576 = self__.mseq;
    if (G__16576) {
      var bit__3689__auto__ = G__16576.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__3689__auto__ || G__16576.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16576.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16576);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16576);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__16577_SHARP_, p2__16578_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3039__auto__ = p1__16577_SHARP_;
          if (cljs.core.truth_(or__3039__auto__)) {
            return or__3039__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__16578_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__16579) {
    var maps = cljs.core.seq(arglist__16579);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3039__auto__ = m1;
            if (cljs.core.truth_(or__3039__auto__)) {
              return or__3039__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__16580) {
    var f = cljs.core.first(arglist__16580);
    var maps = cljs.core.rest(arglist__16580);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__16581 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__16582 = cljs.core.next.call(null, keys);
      ret = G__16581;
      keys = G__16582;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16585 = cljs.core.seq.call(null, coll);
  var chunk__16586 = null;
  var count__16587 = 0;
  var i__16588 = 0;
  while (true) {
    if (i__16588 < count__16587) {
      var vec__16589 = cljs.core._nth.call(null, chunk__16586, i__16588);
      var k = cljs.core.nth.call(null, vec__16589, 0, null);
      var v = cljs.core.nth.call(null, vec__16589, 1, null);
      f.call(null, v, k);
      var G__16591 = seq__16585;
      var G__16592 = chunk__16586;
      var G__16593 = count__16587;
      var G__16594 = i__16588 + 1;
      seq__16585 = G__16591;
      chunk__16586 = G__16592;
      count__16587 = G__16593;
      i__16588 = G__16594;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16585);
      if (temp__4126__auto__) {
        var seq__16585__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16585__$1)) {
          var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__16585__$1);
          var G__16595 = cljs.core.chunk_rest.call(null, seq__16585__$1);
          var G__16596 = c__3795__auto__;
          var G__16597 = cljs.core.count.call(null, c__3795__auto__);
          var G__16598 = 0;
          seq__16585 = G__16595;
          chunk__16586 = G__16596;
          count__16587 = G__16597;
          i__16588 = G__16598;
          continue;
        } else {
          var vec__16590 = cljs.core.first.call(null, seq__16585__$1);
          var k = cljs.core.nth.call(null, vec__16590, 0, null);
          var v = cljs.core.nth.call(null, vec__16590, 1, null);
          f.call(null, v, k);
          var G__16599 = cljs.core.next.call(null, seq__16585__$1);
          var G__16600 = null;
          var G__16601 = 0;
          var G__16602 = 0;
          seq__16585 = G__16599;
          chunk__16586 = G__16600;
          count__16587 = G__16601;
          i__16588 = G__16602;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16583_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16583_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__16603 = null;
  var G__16603__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16603__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16603 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16603__2.call(this, self__, k);
      case 3:
        return G__16603__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16603;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args16584) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16584)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16604 = i + 1;
        var G__16605 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__16604;
        out = G__16605;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__16606 = i + 1;
        var G__16607 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__16606;
        out = G__16607;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__16609 = null;
  var G__16609__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__16609__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__16609 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16609__2.call(this, self__, k);
      case 3:
        return G__16609__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16609;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args16608) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16608)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16612 = cljs.core.seq.call(null, coll);
  var chunk__16613 = null;
  var count__16614 = 0;
  var i__16615 = 0;
  while (true) {
    if (i__16615 < count__16614) {
      var vec__16616 = cljs.core._nth.call(null, chunk__16613, i__16615);
      var k = cljs.core.nth.call(null, vec__16616, 0, null);
      var v = cljs.core.nth.call(null, vec__16616, 1, null);
      f.call(null, v, k);
      var G__16618 = seq__16612;
      var G__16619 = chunk__16613;
      var G__16620 = count__16614;
      var G__16621 = i__16615 + 1;
      seq__16612 = G__16618;
      chunk__16613 = G__16619;
      count__16614 = G__16620;
      i__16615 = G__16621;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16612);
      if (temp__4126__auto__) {
        var seq__16612__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16612__$1)) {
          var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__16612__$1);
          var G__16622 = cljs.core.chunk_rest.call(null, seq__16612__$1);
          var G__16623 = c__3795__auto__;
          var G__16624 = cljs.core.count.call(null, c__3795__auto__);
          var G__16625 = 0;
          seq__16612 = G__16622;
          chunk__16613 = G__16623;
          count__16614 = G__16624;
          i__16615 = G__16625;
          continue;
        } else {
          var vec__16617 = cljs.core.first.call(null, seq__16612__$1);
          var k = cljs.core.nth.call(null, vec__16617, 0, null);
          var v = cljs.core.nth.call(null, vec__16617, 1, null);
          f.call(null, v, k);
          var G__16626 = cljs.core.next.call(null, seq__16612__$1);
          var G__16627 = null;
          var G__16628 = 0;
          var G__16629 = 0;
          seq__16612 = G__16626;
          chunk__16613 = G__16627;
          count__16614 = G__16628;
          i__16615 = G__16629;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16610_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16610_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__16630 = null;
  var G__16630__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16630__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16630 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16630__2.call(this, self__, k);
      case 3:
        return G__16630__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16630;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args16611) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16611)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__3889__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__3889__auto__.length) {
        var G__16631 = i + 1;
        var G__16632 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__16631;
        res = G__16632;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__16633 = cljs.core._next.call(null, in$__$1);
            var G__16634 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__16633;
            out = G__16634;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__16635__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__16635 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16635__delegate.call(this, keys);
    };
    G__16635.cljs$lang$maxFixedArity = 0;
    G__16635.cljs$lang$applyTo = function(arglist__16636) {
      var keys = cljs.core.seq(arglist__16636);
      return G__16635__delegate(keys);
    };
    G__16635.cljs$core$IFn$_invoke$arity$variadic = G__16635__delegate;
    return G__16635;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__16637) {
    var keys = cljs.core.seq(arglist__16637);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__16638) {
    var comparator = cljs.core.first(arglist__16638);
    var keys = cljs.core.rest(arglist__16638);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(n) {
      return function(v, i) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__16639_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__16639_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__16639_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__16646, seen__$1) {
        while (true) {
          var vec__16647 = p__16646;
          var f = cljs.core.nth.call(null, vec__16647, 0, null);
          var xs__$1 = vec__16647;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__16648 = cljs.core.rest.call(null, s);
              var G__16649 = seen__$1;
              p__16646 = G__16648;
              seen__$1 = G__16649;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__16650 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__16651 = cljs.core.next.call(null, s__$1);
      ret = G__16650;
      s__$1 = G__16651;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__16653 = x;
    if (G__16653) {
      var bit__3682__auto__ = G__16653.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__3682__auto__ || G__16653.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__16654 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__16655 = cljs.core.next.call(null, ks);
      var G__16656 = cljs.core.next.call(null, vs);
      map = G__16654;
      ks = G__16655;
      vs = G__16656;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__16659__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16657_SHARP_, p2__16658_SHARP_) {
        return max_key.call(null, k, p1__16657_SHARP_, p2__16658_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__16659 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16659__delegate.call(this, k, x, y, more);
    };
    G__16659.cljs$lang$maxFixedArity = 3;
    G__16659.cljs$lang$applyTo = function(arglist__16660) {
      var k = cljs.core.first(arglist__16660);
      arglist__16660 = cljs.core.next(arglist__16660);
      var x = cljs.core.first(arglist__16660);
      arglist__16660 = cljs.core.next(arglist__16660);
      var y = cljs.core.first(arglist__16660);
      var more = cljs.core.rest(arglist__16660);
      return G__16659__delegate(k, x, y, more);
    };
    G__16659.cljs$core$IFn$_invoke$arity$variadic = G__16659__delegate;
    return G__16659;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__16663__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16661_SHARP_, p2__16662_SHARP_) {
        return min_key.call(null, k, p1__16661_SHARP_, p2__16662_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__16663 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16663__delegate.call(this, k, x, y, more);
    };
    G__16663.cljs$lang$maxFixedArity = 3;
    G__16663.cljs$lang$applyTo = function(arglist__16664) {
      var k = cljs.core.first(arglist__16664);
      arglist__16664 = cljs.core.next(arglist__16664);
      var x = cljs.core.first(arglist__16664);
      arglist__16664 = cljs.core.next(arglist__16664);
      var y = cljs.core.first(arglist__16664);
      var more = cljs.core.rest(arglist__16664);
      return G__16663__delegate(k, x, y, more);
    };
    G__16663.cljs$core$IFn$_invoke$arity$variadic = G__16663__delegate;
    return G__16663;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16667 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16667, 0, null);
        var s = vec__16667;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16668 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16668, 0, null);
      var s = vec__16668;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16671 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16671, 0, null);
        var s = vec__16671;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16672 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16672, 0, null);
      var s = vec__16672;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
        return function(p1__16673_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__16673_SHARP_));
        };
      }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__16684 = null;
      var G__16684__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__16684__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__16684__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__16684__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__16684__4 = function() {
        var G__16685__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__16685 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16685__delegate.call(this, x, y, z, args);
        };
        G__16685.cljs$lang$maxFixedArity = 3;
        G__16685.cljs$lang$applyTo = function(arglist__16686) {
          var x = cljs.core.first(arglist__16686);
          arglist__16686 = cljs.core.next(arglist__16686);
          var y = cljs.core.first(arglist__16686);
          arglist__16686 = cljs.core.next(arglist__16686);
          var z = cljs.core.first(arglist__16686);
          var args = cljs.core.rest(arglist__16686);
          return G__16685__delegate(x, y, z, args);
        };
        G__16685.cljs$core$IFn$_invoke$arity$variadic = G__16685__delegate;
        return G__16685;
      }();
      G__16684 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16684__0.call(this);
          case 1:
            return G__16684__1.call(this, x);
          case 2:
            return G__16684__2.call(this, x, y);
          case 3:
            return G__16684__3.call(this, x, y, z);
          default:
            return G__16684__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16684.cljs$lang$maxFixedArity = 3;
      G__16684.cljs$lang$applyTo = G__16684__4.cljs$lang$applyTo;
      return G__16684;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__16687 = null;
      var G__16687__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__16687__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__16687__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__16687__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__16687__4 = function() {
        var G__16688__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__16688 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16688__delegate.call(this, x, y, z, args);
        };
        G__16688.cljs$lang$maxFixedArity = 3;
        G__16688.cljs$lang$applyTo = function(arglist__16689) {
          var x = cljs.core.first(arglist__16689);
          arglist__16689 = cljs.core.next(arglist__16689);
          var y = cljs.core.first(arglist__16689);
          arglist__16689 = cljs.core.next(arglist__16689);
          var z = cljs.core.first(arglist__16689);
          var args = cljs.core.rest(arglist__16689);
          return G__16688__delegate(x, y, z, args);
        };
        G__16688.cljs$core$IFn$_invoke$arity$variadic = G__16688__delegate;
        return G__16688;
      }();
      G__16687 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16687__0.call(this);
          case 1:
            return G__16687__1.call(this, x);
          case 2:
            return G__16687__2.call(this, x, y);
          case 3:
            return G__16687__3.call(this, x, y, z);
          default:
            return G__16687__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16687.cljs$lang$maxFixedArity = 3;
      G__16687.cljs$lang$applyTo = G__16687__4.cljs$lang$applyTo;
      return G__16687;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__16690 = null;
      var G__16690__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__16690__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__16690__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__16690__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__16690__4 = function() {
        var G__16691__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__16691 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16691__delegate.call(this, x, y, z, args);
        };
        G__16691.cljs$lang$maxFixedArity = 3;
        G__16691.cljs$lang$applyTo = function(arglist__16692) {
          var x = cljs.core.first(arglist__16692);
          arglist__16692 = cljs.core.next(arglist__16692);
          var y = cljs.core.first(arglist__16692);
          arglist__16692 = cljs.core.next(arglist__16692);
          var z = cljs.core.first(arglist__16692);
          var args = cljs.core.rest(arglist__16692);
          return G__16691__delegate(x, y, z, args);
        };
        G__16691.cljs$core$IFn$_invoke$arity$variadic = G__16691__delegate;
        return G__16691;
      }();
      G__16690 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16690__0.call(this);
          case 1:
            return G__16690__1.call(this, x);
          case 2:
            return G__16690__2.call(this, x, y);
          case 3:
            return G__16690__3.call(this, x, y, z);
          default:
            return G__16690__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16690.cljs$lang$maxFixedArity = 3;
      G__16690.cljs$lang$applyTo = G__16690__4.cljs$lang$applyTo;
      return G__16690;
    }();
  };
  var juxt__4 = function() {
    var G__16693__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__16694 = null;
          var G__16694__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16674_SHARP_, p2__16675_SHARP_) {
                return cljs.core.conj.call(null, p1__16674_SHARP_, p2__16675_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16694__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16676_SHARP_, p2__16677_SHARP_) {
                return cljs.core.conj.call(null, p1__16676_SHARP_, p2__16677_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16694__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16678_SHARP_, p2__16679_SHARP_) {
                return cljs.core.conj.call(null, p1__16678_SHARP_, p2__16679_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16694__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16680_SHARP_, p2__16681_SHARP_) {
                return cljs.core.conj.call(null, p1__16680_SHARP_, p2__16681_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16694__4 = function() {
            var G__16695__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__16682_SHARP_, p2__16683_SHARP_) {
                  return cljs.core.conj.call(null, p1__16682_SHARP_, cljs.core.apply.call(null, p2__16683_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__16695 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16695__delegate.call(this, x, y, z, args);
            };
            G__16695.cljs$lang$maxFixedArity = 3;
            G__16695.cljs$lang$applyTo = function(arglist__16696) {
              var x = cljs.core.first(arglist__16696);
              arglist__16696 = cljs.core.next(arglist__16696);
              var y = cljs.core.first(arglist__16696);
              arglist__16696 = cljs.core.next(arglist__16696);
              var z = cljs.core.first(arglist__16696);
              var args = cljs.core.rest(arglist__16696);
              return G__16695__delegate(x, y, z, args);
            };
            G__16695.cljs$core$IFn$_invoke$arity$variadic = G__16695__delegate;
            return G__16695;
          }();
          G__16694 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__16694__0.call(this);
              case 1:
                return G__16694__1.call(this, x);
              case 2:
                return G__16694__2.call(this, x, y);
              case 3:
                return G__16694__3.call(this, x, y, z);
              default:
                return G__16694__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16694.cljs$lang$maxFixedArity = 3;
          G__16694.cljs$lang$applyTo = G__16694__4.cljs$lang$applyTo;
          return G__16694;
        }();
      }(fs__$1);
    };
    var G__16693 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16693__delegate.call(this, f, g, h, fs);
    };
    G__16693.cljs$lang$maxFixedArity = 3;
    G__16693.cljs$lang$applyTo = function(arglist__16697) {
      var f = cljs.core.first(arglist__16697);
      arglist__16697 = cljs.core.next(arglist__16697);
      var g = cljs.core.first(arglist__16697);
      arglist__16697 = cljs.core.next(arglist__16697);
      var h = cljs.core.first(arglist__16697);
      var fs = cljs.core.rest(arglist__16697);
      return G__16693__delegate(f, g, h, fs);
    };
    G__16693.cljs$core$IFn$_invoke$arity$variadic = G__16693__delegate;
    return G__16693;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__16698 = cljs.core.next.call(null, coll);
        coll = G__16698;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__16699 = n - 1;
        var G__16700 = cljs.core.next.call(null, coll);
        n = G__16699;
        coll = G__16700;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__16702 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__16702, 0, null);
  var flags = cljs.core.nth.call(null, vec__16702, 1, null);
  var pattern = cljs.core.nth.call(null, vec__16702, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_16704 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_16705__$1 = cljs.core.next.call(null, coll);
      var n_16706 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_16705__$1 && (n_16706 == null || !(n_16706 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_16705__$1), writer, opts);
          var G__16707 = cljs.core.next.call(null, coll_16705__$1);
          var G__16708 = n_16706 - 1;
          coll_16705__$1 = G__16707;
          n_16706 = G__16708;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_16705__$1) && n_16706 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_16704;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__16713 = cljs.core.seq.call(null, ss);
    var chunk__16714 = null;
    var count__16715 = 0;
    var i__16716 = 0;
    while (true) {
      if (i__16716 < count__16715) {
        var s = cljs.core._nth.call(null, chunk__16714, i__16716);
        cljs.core._write.call(null, writer, s);
        var G__16717 = seq__16713;
        var G__16718 = chunk__16714;
        var G__16719 = count__16715;
        var G__16720 = i__16716 + 1;
        seq__16713 = G__16717;
        chunk__16714 = G__16718;
        count__16715 = G__16719;
        i__16716 = G__16720;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__16713);
        if (temp__4126__auto__) {
          var seq__16713__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__16713__$1)) {
            var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__16713__$1);
            var G__16721 = cljs.core.chunk_rest.call(null, seq__16713__$1);
            var G__16722 = c__3795__auto__;
            var G__16723 = cljs.core.count.call(null, c__3795__auto__);
            var G__16724 = 0;
            seq__16713 = G__16721;
            chunk__16714 = G__16722;
            count__16715 = G__16723;
            i__16716 = G__16724;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__16713__$1);
            cljs.core._write.call(null, writer, s);
            var G__16725 = cljs.core.next.call(null, seq__16713__$1);
            var G__16726 = null;
            var G__16727 = 0;
            var G__16728 = 0;
            seq__16713 = G__16725;
            chunk__16714 = G__16726;
            count__16715 = G__16727;
            i__16716 = G__16728;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__16729) {
    var writer = cljs.core.first(arglist__16729);
    var ss = cljs.core.rest(arglist__16729);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj16731 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj16731;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        if (cljs.core.truth_(function() {
          var and__3027__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
          if (cljs.core.truth_(and__3027__auto__)) {
            var and__3027__auto____$1 = function() {
              var G__16737 = obj;
              if (G__16737) {
                var bit__3689__auto__ = G__16737.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__3689__auto__ || G__16737.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__16737.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16737);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16737);
              }
            }();
            if (and__3027__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3027__auto____$1;
            }
          } else {
            return and__3027__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__16738 = obj;
              if (G__16738) {
                var bit__3682__auto__ = G__16738.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__3682__auto__ || G__16738.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__16740 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                                ns = G__16740;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__16739 = obj;
                              if (G__16739) {
                                var bit__3689__auto__ = G__16739.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__3689__auto__ || G__16739.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__16739.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16739);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16739);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__16745 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__16746 = null;
  var count__16747 = 0;
  var i__16748 = 0;
  while (true) {
    if (i__16748 < count__16747) {
      var obj = cljs.core._nth.call(null, chunk__16746, i__16748);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__16749 = seq__16745;
      var G__16750 = chunk__16746;
      var G__16751 = count__16747;
      var G__16752 = i__16748 + 1;
      seq__16745 = G__16749;
      chunk__16746 = G__16750;
      count__16747 = G__16751;
      i__16748 = G__16752;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16745);
      if (temp__4126__auto__) {
        var seq__16745__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16745__$1)) {
          var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__16745__$1);
          var G__16753 = cljs.core.chunk_rest.call(null, seq__16745__$1);
          var G__16754 = c__3795__auto__;
          var G__16755 = cljs.core.count.call(null, c__3795__auto__);
          var G__16756 = 0;
          seq__16745 = G__16753;
          chunk__16746 = G__16754;
          count__16747 = G__16755;
          i__16748 = G__16756;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__16745__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__16757 = cljs.core.next.call(null, seq__16745__$1);
          var G__16758 = null;
          var G__16759 = 0;
          var G__16760 = 0;
          seq__16745 = G__16757;
          chunk__16746 = G__16758;
          count__16747 = G__16759;
          i__16748 = G__16760;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__16761) {
    var objs = cljs.core.seq(arglist__16761);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__16762) {
    var objs = cljs.core.seq(arglist__16762);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__16763) {
    var objs = cljs.core.seq(arglist__16763);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__16764) {
    var objs = cljs.core.seq(arglist__16764);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__16765) {
    var objs = cljs.core.seq(arglist__16765);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__16766) {
    var objs = cljs.core.seq(arglist__16766);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__16767) {
    var objs = cljs.core.seq(arglist__16767);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__16768) {
    var objs = cljs.core.seq(arglist__16768);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj16770 = {};
  return obj16770;
}();
cljs.core.IReset = function() {
  var obj16772 = {};
  return obj16772;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3027__auto__ = o;
    if (and__3027__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__3666__auto__ = o == null ? null : o;
    return function() {
      var or__3039__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj16774 = {};
  return obj16774;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3027__auto__ = o;
      if (and__3027__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__3666__auto__ = o == null ? null : o;
      return function() {
        var or__3039__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3027__auto__ = o;
      if (and__3027__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__3666__auto__ = o == null ? null : o;
      return function() {
        var or__3039__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3027__auto__ = o;
      if (and__3027__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__3666__auto__ = o == null ? null : o;
      return function() {
        var or__3039__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3027__auto__ = o;
      if (and__3027__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__3666__auto__ = o == null ? null : o;
      return function() {
        var or__3039__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__16775 = cljs.core.seq.call(null, self__.watches);
  var chunk__16776 = null;
  var count__16777 = 0;
  var i__16778 = 0;
  while (true) {
    if (i__16778 < count__16777) {
      var vec__16779 = cljs.core._nth.call(null, chunk__16776, i__16778);
      var key = cljs.core.nth.call(null, vec__16779, 0, null);
      var f = cljs.core.nth.call(null, vec__16779, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__16781 = seq__16775;
      var G__16782 = chunk__16776;
      var G__16783 = count__16777;
      var G__16784 = i__16778 + 1;
      seq__16775 = G__16781;
      chunk__16776 = G__16782;
      count__16777 = G__16783;
      i__16778 = G__16784;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16775);
      if (temp__4126__auto__) {
        var seq__16775__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16775__$1)) {
          var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__16775__$1);
          var G__16785 = cljs.core.chunk_rest.call(null, seq__16775__$1);
          var G__16786 = c__3795__auto__;
          var G__16787 = cljs.core.count.call(null, c__3795__auto__);
          var G__16788 = 0;
          seq__16775 = G__16785;
          chunk__16776 = G__16786;
          count__16777 = G__16787;
          i__16778 = G__16788;
          continue;
        } else {
          var vec__16780 = cljs.core.first.call(null, seq__16775__$1);
          var key = cljs.core.nth.call(null, vec__16780, 0, null);
          var f = cljs.core.nth.call(null, vec__16780, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__16789 = cljs.core.next.call(null, seq__16775__$1);
          var G__16790 = null;
          var G__16791 = 0;
          var G__16792 = 0;
          seq__16775 = G__16789;
          chunk__16776 = G__16790;
          count__16777 = G__16791;
          i__16778 = G__16792;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__16796__delegate = function(x, p__16793) {
      var map__16795 = p__16793;
      var map__16795__$1 = cljs.core.seq_QMARK_.call(null, map__16795) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16795) : map__16795;
      var validator = cljs.core.get.call(null, map__16795__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__16795__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__16796 = function(x, var_args) {
      var p__16793 = null;
      if (arguments.length > 1) {
        p__16793 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16796__delegate.call(this, x, p__16793);
    };
    G__16796.cljs$lang$maxFixedArity = 1;
    G__16796.cljs$lang$applyTo = function(arglist__16797) {
      var x = cljs.core.first(arglist__16797);
      var p__16793 = cljs.core.rest(arglist__16797);
      return G__16796__delegate(x, p__16793);
    };
    G__16796.cljs$core$IFn$_invoke$arity$variadic = G__16796__delegate;
    return G__16796;
  }();
  atom = function(x, var_args) {
    var p__16793 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__16798__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__16798 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16798__delegate.call(this, a, f, x, y, more);
    };
    G__16798.cljs$lang$maxFixedArity = 4;
    G__16798.cljs$lang$applyTo = function(arglist__16799) {
      var a = cljs.core.first(arglist__16799);
      arglist__16799 = cljs.core.next(arglist__16799);
      var f = cljs.core.first(arglist__16799);
      arglist__16799 = cljs.core.next(arglist__16799);
      var x = cljs.core.first(arglist__16799);
      arglist__16799 = cljs.core.next(arglist__16799);
      var y = cljs.core.first(arglist__16799);
      var more = cljs.core.rest(arglist__16799);
      return G__16798__delegate(a, f, x, y, more);
    };
    G__16798.cljs$core$IFn$_invoke$arity$variadic = G__16798__delegate;
    return G__16798;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__16800) {
    var iref = cljs.core.first(arglist__16800);
    arglist__16800 = cljs.core.next(arglist__16800);
    var f = cljs.core.first(arglist__16800);
    var args = cljs.core.rest(arglist__16800);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj16802 = {};
  return obj16802;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3027__auto__ = x;
    if (and__3027__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__3666__auto__ = x == null ? null : x;
    return function() {
      var or__3039__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3027__auto__ = x;
    if (and__3027__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__3666__auto__ = x == null ? null : x;
    return function() {
      var or__3039__auto__ = cljs.core._key__GT_js[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__16804 = k;
    if (G__16804) {
      var bit__3689__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3039__auto__ = bit__3689__auto__;
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          return G__16804.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__16804.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16804);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16804);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__16818 = x;
      if (G__16818) {
        var bit__3689__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3039__auto__ = bit__3689__auto__;
          if (cljs.core.truth_(or__3039__auto__)) {
            return or__3039__auto__;
          } else {
            return G__16818.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__16818.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16818);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16818);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj16820 = {};
              return obj16820;
            }();
            var seq__16821_16831 = cljs.core.seq.call(null, x);
            var chunk__16822_16832 = null;
            var count__16823_16833 = 0;
            var i__16824_16834 = 0;
            while (true) {
              if (i__16824_16834 < count__16823_16833) {
                var vec__16825_16835 = cljs.core._nth.call(null, chunk__16822_16832, i__16824_16834);
                var k_16836 = cljs.core.nth.call(null, vec__16825_16835, 0, null);
                var v_16837 = cljs.core.nth.call(null, vec__16825_16835, 1, null);
                m[cljs.core.key__GT_js.call(null, k_16836)] = clj__GT_js.call(null, v_16837);
                var G__16838 = seq__16821_16831;
                var G__16839 = chunk__16822_16832;
                var G__16840 = count__16823_16833;
                var G__16841 = i__16824_16834 + 1;
                seq__16821_16831 = G__16838;
                chunk__16822_16832 = G__16839;
                count__16823_16833 = G__16840;
                i__16824_16834 = G__16841;
                continue;
              } else {
                var temp__4126__auto___16842 = cljs.core.seq.call(null, seq__16821_16831);
                if (temp__4126__auto___16842) {
                  var seq__16821_16843__$1 = temp__4126__auto___16842;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__16821_16843__$1)) {
                    var c__3795__auto___16844 = cljs.core.chunk_first.call(null, seq__16821_16843__$1);
                    var G__16845 = cljs.core.chunk_rest.call(null, seq__16821_16843__$1);
                    var G__16846 = c__3795__auto___16844;
                    var G__16847 = cljs.core.count.call(null, c__3795__auto___16844);
                    var G__16848 = 0;
                    seq__16821_16831 = G__16845;
                    chunk__16822_16832 = G__16846;
                    count__16823_16833 = G__16847;
                    i__16824_16834 = G__16848;
                    continue;
                  } else {
                    var vec__16826_16849 = cljs.core.first.call(null, seq__16821_16843__$1);
                    var k_16850 = cljs.core.nth.call(null, vec__16826_16849, 0, null);
                    var v_16851 = cljs.core.nth.call(null, vec__16826_16849, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_16850)] = clj__GT_js.call(null, v_16851);
                    var G__16852 = cljs.core.next.call(null, seq__16821_16843__$1);
                    var G__16853 = null;
                    var G__16854 = 0;
                    var G__16855 = 0;
                    seq__16821_16831 = G__16852;
                    chunk__16822_16832 = G__16853;
                    count__16823_16833 = G__16854;
                    i__16824_16834 = G__16855;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__16827_16856 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__16828_16857 = null;
              var count__16829_16858 = 0;
              var i__16830_16859 = 0;
              while (true) {
                if (i__16830_16859 < count__16829_16858) {
                  var x_16860__$1 = cljs.core._nth.call(null, chunk__16828_16857, i__16830_16859);
                  arr.push(x_16860__$1);
                  var G__16861 = seq__16827_16856;
                  var G__16862 = chunk__16828_16857;
                  var G__16863 = count__16829_16858;
                  var G__16864 = i__16830_16859 + 1;
                  seq__16827_16856 = G__16861;
                  chunk__16828_16857 = G__16862;
                  count__16829_16858 = G__16863;
                  i__16830_16859 = G__16864;
                  continue;
                } else {
                  var temp__4126__auto___16865 = cljs.core.seq.call(null, seq__16827_16856);
                  if (temp__4126__auto___16865) {
                    var seq__16827_16866__$1 = temp__4126__auto___16865;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__16827_16866__$1)) {
                      var c__3795__auto___16867 = cljs.core.chunk_first.call(null, seq__16827_16866__$1);
                      var G__16868 = cljs.core.chunk_rest.call(null, seq__16827_16866__$1);
                      var G__16869 = c__3795__auto___16867;
                      var G__16870 = cljs.core.count.call(null, c__3795__auto___16867);
                      var G__16871 = 0;
                      seq__16827_16856 = G__16868;
                      chunk__16828_16857 = G__16869;
                      count__16829_16858 = G__16870;
                      i__16830_16859 = G__16871;
                      continue;
                    } else {
                      var x_16872__$1 = cljs.core.first.call(null, seq__16827_16866__$1);
                      arr.push(x_16872__$1);
                      var G__16873 = cljs.core.next.call(null, seq__16827_16866__$1);
                      var G__16874 = null;
                      var G__16875 = 0;
                      var G__16876 = 0;
                      seq__16827_16856 = G__16873;
                      chunk__16828_16857 = G__16874;
                      count__16829_16858 = G__16875;
                      i__16830_16859 = G__16876;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj16878 = {};
  return obj16878;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3027__auto__ = x;
    if (and__3027__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__3666__auto__ = x == null ? null : x;
    return function() {
      var or__3039__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__16899__delegate = function(x, opts) {
      if (function() {
        var G__16889 = x;
        if (G__16889) {
          var bit__3689__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3039__auto__ = bit__3689__auto__;
            if (cljs.core.truth_(or__3039__auto__)) {
              return or__3039__auto__;
            } else {
              return G__16889.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__16889.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16889);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16889);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__16890 = opts;
          var map__16890__$1 = cljs.core.seq_QMARK_.call(null, map__16890) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16890) : map__16890;
          var keywordize_keys = cljs.core.get.call(null, map__16890__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__16890, map__16890__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__3764__auto__ = function(map__16890, map__16890__$1, keywordize_keys, keyfn) {
                          return function iter__16895(s__16896) {
                            return new cljs.core.LazySeq(null, function(map__16890, map__16890__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__16896__$1 = s__16896;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__16896__$1);
                                  if (temp__4126__auto__) {
                                    var s__16896__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__16896__$2)) {
                                      var c__3762__auto__ = cljs.core.chunk_first.call(null, s__16896__$2);
                                      var size__3763__auto__ = cljs.core.count.call(null, c__3762__auto__);
                                      var b__16898 = cljs.core.chunk_buffer.call(null, size__3763__auto__);
                                      if (function() {
                                        var i__16897 = 0;
                                        while (true) {
                                          if (i__16897 < size__3763__auto__) {
                                            var k = cljs.core._nth.call(null, c__3762__auto__, i__16897);
                                            cljs.core.chunk_append.call(null, b__16898, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__16900 = i__16897 + 1;
                                            i__16897 = G__16900;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16898), iter__16895.call(null, cljs.core.chunk_rest.call(null, s__16896__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16898), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__16896__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__16895.call(null, cljs.core.rest.call(null, s__16896__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__16890, map__16890__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__16890, map__16890__$1, keywordize_keys, keyfn);
                        return iter__3764__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__16890, map__16890__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__16899 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16899__delegate.call(this, x, opts);
    };
    G__16899.cljs$lang$maxFixedArity = 1;
    G__16899.cljs$lang$applyTo = function(arglist__16901) {
      var x = cljs.core.first(arglist__16901);
      var opts = cljs.core.rest(arglist__16901);
      return G__16899__delegate(x, opts);
    };
    G__16899.cljs$core$IFn$_invoke$arity$variadic = G__16899__delegate;
    return G__16899;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__16902__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__16902 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16902__delegate.call(this, args);
      };
      G__16902.cljs$lang$maxFixedArity = 0;
      G__16902.cljs$lang$applyTo = function(arglist__16903) {
        var args = cljs.core.seq(arglist__16903);
        return G__16902__delegate(args);
      };
      G__16902.cljs$core$IFn$_invoke$arity$variadic = G__16902__delegate;
      return G__16902;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__16904 = ret;
        f = G__16904;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__16905__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__16905 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16905__delegate.call(this, f, args);
    };
    G__16905.cljs$lang$maxFixedArity = 1;
    G__16905.cljs$lang$applyTo = function(arglist__16906) {
      var f = cljs.core.first(arglist__16906);
      var args = cljs.core.rest(arglist__16906);
      return G__16905__delegate(f, args);
    };
    G__16905.cljs$core$IFn$_invoke$arity$variadic = G__16905__delegate;
    return G__16905;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__16907) {
    var f = cljs.core.first(arglist__16907);
    var args = cljs.core.rest(arglist__16907);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3039__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3039__auto__) {
      return or__3039__auto__;
    } else {
      var or__3039__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3039__auto____$1) {
        return or__3039__auto____$1;
      } else {
        var and__3027__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3027__auto__) {
          var and__3027__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3027__auto____$1) {
            var and__3027__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3027__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__16908 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__16909 = i + 1;
                  ret = G__16908;
                  i = G__16909;
                  continue;
                }
                break;
              }
            } else {
              return and__3027__auto____$2;
            }
          } else {
            return and__3027__auto____$1;
          }
        } else {
          return and__3027__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3039__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3039__auto__)) {
      return or__3039__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__16910_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__16910_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__16910_SHARP_), cljs.core.second.call(null, p1__16910_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__16911_SHARP_, p2__16912_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__16911_SHARP_, p2__16912_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3039__auto__ = cljs.core.truth_(function() {
    var and__3027__auto__ = xprefs;
    if (cljs.core.truth_(and__3027__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3027__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3039__auto__)) {
    return or__3039__auto__;
  } else {
    var or__3039__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__16913 = cljs.core.rest.call(null, ps);
          ps = G__16913;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3039__auto____$1)) {
      return or__3039__auto____$1;
    } else {
      var or__3039__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__16914 = cljs.core.rest.call(null, ps);
            ps = G__16914;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3039__auto____$2)) {
        return or__3039__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3039__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3039__auto__)) {
    return or__3039__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__16917) {
    var vec__16918 = p__16917;
    var k = cljs.core.nth.call(null, vec__16918, 0, null);
    var _ = cljs.core.nth.call(null, vec__16918, 1, null);
    var e = vec__16918;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3039__auto__ = be == null;
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj16920 = {};
  return obj16920;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3027__auto__ = mf;
    if (and__3027__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__3666__auto__ = mf == null ? null : mf;
    return function() {
      var or__3039__auto__ = cljs.core._reset[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._reset["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3027__auto__ = mf;
    if (and__3027__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__3666__auto__ = mf == null ? null : mf;
    return function() {
      var or__3039__auto__ = cljs.core._add_method[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._add_method["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3027__auto__ = mf;
    if (and__3027__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__3666__auto__ = mf == null ? null : mf;
    return function() {
      var or__3039__auto__ = cljs.core._remove_method[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._remove_method["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3027__auto__ = mf;
    if (and__3027__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__3666__auto__ = mf == null ? null : mf;
    return function() {
      var or__3039__auto__ = cljs.core._prefer_method[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3027__auto__ = mf;
    if (and__3027__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__3666__auto__ = mf == null ? null : mf;
    return function() {
      var or__3039__auto__ = cljs.core._get_method[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._get_method["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3027__auto__ = mf;
    if (and__3027__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__3666__auto__ = mf == null ? null : mf;
    return function() {
      var or__3039__auto__ = cljs.core._methods[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._methods["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3027__auto__ = mf;
    if (and__3027__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__3666__auto__ = mf == null ? null : mf;
    return function() {
      var or__3039__auto__ = cljs.core._prefers[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core._prefers["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__16922 = null;
  var G__16922__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__16922__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__16922__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__16922__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__16922__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__16922__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__16922__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__16922__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__16922__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__16922__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__16922__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__16922__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__16922__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__16922__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__16922__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__16922__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__16922__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__16922__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__16922__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__16922__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__16922__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__16922 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__16922__2.call(this, self__, a);
      case 3:
        return G__16922__3.call(this, self__, a, b);
      case 4:
        return G__16922__4.call(this, self__, a, b, c);
      case 5:
        return G__16922__5.call(this, self__, a, b, c, d);
      case 6:
        return G__16922__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__16922__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__16922__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__16922__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__16922__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__16922__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__16922__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__16922__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__16922__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__16922__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__16922__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__16922__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__16922__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__16922__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__16922__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__16922__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__16922__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16922;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args16921) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16921)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3609__auto__, writer__3610__auto__, opts__3611__auto__) {
  return cljs.core._write.call(null, writer__3610__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj19655 = {};
  return obj19655;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3027__auto__ = port;
    if (and__3027__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__3666__auto__ = port == null ? null : port;
    return function() {
      var or__3039__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj19657 = {};
  return obj19657;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3027__auto__ = port;
    if (and__3027__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__3666__auto__ = port == null ? null : port;
    return function() {
      var or__3039__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj19659 = {};
  return obj19659;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3027__auto__ = chan;
    if (and__3027__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__3666__auto__ = chan == null ? null : chan;
    return function() {
      var or__3039__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3027__auto__ = chan;
    if (and__3027__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__3666__auto__ = chan == null ? null : chan;
    return function() {
      var or__3039__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj19661 = {};
  return obj19661;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3027__auto__ = h;
    if (and__3027__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__3666__auto__ = h == null ? null : h;
    return function() {
      var or__3039__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3027__auto__ = h;
    if (and__3027__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__3666__auto__ = h == null ? null : h;
    return function() {
      var or__3039__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj19663 = {};
  return obj19663;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3027__auto__ = b;
    if (and__3027__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__3666__auto__ = b == null ? null : b;
    return function() {
      var or__3039__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3027__auto__ = b;
    if (and__3027__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__3666__auto__ = b == null ? null : b;
    return function() {
      var or__3039__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3027__auto__ = b;
    if (and__3027__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__3666__auto__ = b == null ? null : b;
    return function() {
      var or__3039__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj19665 = {};
  return obj19665;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__19666 = cnt + 1;
      cnt = G__19666;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__3895__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__3895__auto__) {
      var v_19667 = this$.pop();
      if (keep_QMARK_.call(null, v_19667)) {
        this$.unshift(v_19667);
      } else {
      }
      var G__19668 = x + 1;
      x = G__19668;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_19669 = 0;
  while (true) {
    var m_19670 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_19670 == null) {
    } else {
      m_19670.call(null);
      if (count_19669 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__19671 = count_19669 + 1;
        count_19669 = G__19671;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3027__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3027__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3027__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t19675 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t19675 = function(val, box, meta19676) {
      this.val = val;
      this.box = box;
      this.meta19676 = meta19676;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t19675.cljs$lang$type = true;
    cljs.core.async.impl.channels.t19675.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t19675";
    cljs.core.async.impl.channels.t19675.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
      return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async.impl.channels/t19675");
    };
    cljs.core.async.impl.channels.t19675.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t19675.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19677) {
      var self__ = this;
      var _19677__$1 = this;
      return self__.meta19676;
    };
    cljs.core.async.impl.channels.t19675.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19677, meta19676__$1) {
      var self__ = this;
      var _19677__$1 = this;
      return new cljs.core.async.impl.channels.t19675(self__.val, self__.box, meta19676__$1);
    };
    cljs.core.async.impl.channels.__GT_t19675 = function __GT_t19675(val__$1, box__$1, meta19676) {
      return new cljs.core.async.impl.channels.t19675(val__$1, box__$1, meta19676);
    };
  }
  return new cljs.core.async.impl.channels.t19675(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3609__auto__, writer__3610__auto__, opts__3611__auto__) {
  return cljs.core._write.call(null, writer__3610__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_19678 = self__.takes.pop();
      if (taker_19678 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_19678)) {
          var take_cb_19679 = cljs.core.async.impl.protocols.commit.call(null, taker_19678);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_19679, taker_19678, this$__$1) {
            return function() {
              return take_cb_19679.call(null, null);
            };
          }(take_cb_19679, taker_19678, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        var putter_19680 = self__.puts.pop();
        if (!(putter_19680 == null)) {
          var put_handler_19681 = putter_19680.handler;
          var val_19682 = putter_19680.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_19681)) {
            var put_cb_19683 = cljs.core.async.impl.protocols.commit.call(null, put_handler_19681);
            var __19684__$1 = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb_19683, __19684__$1, put_handler_19681, val_19682, putter_19680, _, retval, this$__$1) {
              return function() {
                return put_cb_19683.call(null, true);
              };
            }(put_cb_19683, __19684__$1, put_handler_19681, val_19682, putter_19680, _, retval, this$__$1));
            cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val_19682);
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      return retval;
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb, _, put_handler, val, putter, this$__$1) {
              return function() {
                return put_cb.call(null, true);
              };
            }(put_cb, _, put_handler, val, putter, this$__$1));
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t19602 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t19602 = function(f, fn_handler, meta19603) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta19603 = meta19603;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t19602.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t19602.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t19602";
    cljs.core.async.impl.ioc_helpers.t19602.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
      return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async.impl.ioc-helpers/t19602");
    };
    cljs.core.async.impl.ioc_helpers.t19602.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t19602.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t19602.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t19602.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19604) {
      var self__ = this;
      var _19604__$1 = this;
      return self__.meta19603;
    };
    cljs.core.async.impl.ioc_helpers.t19602.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19604, meta19603__$1) {
      var self__ = this;
      var _19604__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t19602(self__.f, self__.fn_handler, meta19603__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t19602 = function __GT_t19602(f__$1, fn_handler__$1, meta19603) {
      return new cljs.core.async.impl.ioc_helpers.t19602(f__$1, fn_handler__$1, meta19603);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t19602(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e19606) {
    if (e19606 instanceof Object) {
      var ex = e19606;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw e19606;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_19609_19611 = state;
    statearr_19609_19611[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_19609_19611[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_19610_19612 = state;
    statearr_19610_19612[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_19610_19612[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_19615_19617 = state;
    statearr_19615_19617[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_19615_19617[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_19616_19618 = state;
    statearr_19616_19618[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_19616_19618[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__19619) {
    var map__19624 = p__19619;
    var map__19624__$1 = cljs.core.seq_QMARK_.call(null, map__19624) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19624) : map__19624;
    var opts = map__19624__$1;
    var statearr_19625_19628 = state;
    statearr_19625_19628[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__19624, map__19624__$1, opts) {
      return function(val) {
        var statearr_19626_19629 = state;
        statearr_19626_19629[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__19624, map__19624__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_19627_19630 = state;
      statearr_19627_19630[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__19619 = null;
    if (arguments.length > 3) {
      p__19619 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__19619);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__19631) {
    var state = cljs.core.first(arglist__19631);
    arglist__19631 = cljs.core.next(arglist__19631);
    var cont_block = cljs.core.first(arglist__19631);
    arglist__19631 = cljs.core.next(arglist__19631);
    var ports = cljs.core.first(arglist__19631);
    var p__19619 = cljs.core.rest(arglist__19631);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__19619);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3625__auto__, k__3626__auto__) {
  var self__ = this;
  var this__3625__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3625__auto____$1, k__3626__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3627__auto__, k19633, else__3628__auto__) {
  var self__ = this;
  var this__3627__auto____$1 = this;
  var G__19635 = k19633 instanceof cljs.core.Keyword ? k19633.fqn : null;
  switch(G__19635) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k19633, else__3628__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3639__auto__, writer__3640__auto__, opts__3641__auto__) {
  var self__ = this;
  var this__3639__auto____$1 = this;
  var pr_pair__3642__auto__ = function(this__3639__auto____$1) {
    return function(keyval__3643__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__3640__auto__, cljs.core.pr_writer, "", " ", "", opts__3641__auto__, keyval__3643__auto__);
    };
  }(this__3639__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__3640__auto__, pr_pair__3642__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__3641__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3623__auto__) {
  var self__ = this;
  var this__3623__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__3619__auto__) {
  var self__ = this;
  var this__3619__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3629__auto__) {
  var self__ = this;
  var this__3629__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3620__auto__) {
  var self__ = this;
  var this__3620__auto____$1 = this;
  var h__3450__auto__ = self__.__hash;
  if (!(h__3450__auto__ == null)) {
    return h__3450__auto__;
  } else {
    var h__3450__auto____$1 = cljs.core.hash_imap.call(null, this__3620__auto____$1);
    self__.__hash = h__3450__auto____$1;
    return h__3450__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3621__auto__, other__3622__auto__) {
  var self__ = this;
  var this__3621__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3027__auto__ = other__3622__auto__;
    if (cljs.core.truth_(and__3027__auto__)) {
      return this__3621__auto____$1.constructor === other__3622__auto__.constructor && cljs.core.equiv_map.call(null, this__3621__auto____$1, other__3622__auto__);
    } else {
      return and__3027__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3634__auto__, k__3635__auto__) {
  var self__ = this;
  var this__3634__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__3635__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3634__auto____$1), self__.__meta), k__3635__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3635__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3632__auto__, k__3633__auto__, G__19632) {
  var self__ = this;
  var this__3632__auto____$1 = this;
  var pred__19636 = cljs.core.keyword_identical_QMARK_;
  var expr__19637 = k__3633__auto__;
  if (cljs.core.truth_(pred__19636.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__19637))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__19632, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19636.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__19637))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__19632, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__19636.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__19637))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__19632, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__19636.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__19637))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__19632, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__19636.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__19637))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__19632, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3633__auto__, G__19632), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3637__auto__) {
  var self__ = this;
  var this__3637__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3624__auto__, G__19632) {
  var self__ = this;
  var this__3624__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__19632, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3630__auto__, entry__3631__auto__) {
  var self__ = this;
  var this__3630__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3631__auto__)) {
    return cljs.core._assoc.call(null, this__3630__auto____$1, cljs.core._nth.call(null, entry__3631__auto__, 0), cljs.core._nth.call(null, entry__3631__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3630__auto____$1, entry__3631__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__3659__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__3659__auto__, writer__3660__auto__) {
  return cljs.core._write.call(null, writer__3660__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__19634) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__19634), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__19634), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__19634), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__19634), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__19634), null, cljs.core.dissoc.call(null, G__19634, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_19641 = state;
  statearr_19641[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_19641;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3027__auto__ = exception;
      if (cljs.core.truth_(and__3027__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3027__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3027__auto__ = exception;
        if (cljs.core.truth_(and__3027__auto__)) {
          var and__3027__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3027__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3027__auto____$1;
          }
        } else {
          return and__3027__auto__;
        }
      }())) {
        var statearr_19647 = state;
        statearr_19647[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_19647[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_19647[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_19647[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_19647;
      } else {
        if (cljs.core.truth_(function() {
          var and__3027__auto__ = exception;
          if (cljs.core.truth_(and__3027__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3027__auto__;
          }
        }())) {
          var statearr_19648_19652 = state;
          statearr_19648_19652[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__19653 = state;
          state = G__19653;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3027__auto__ = exception;
            if (cljs.core.truth_(and__3027__auto__)) {
              var and__3027__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3027__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3027__auto____$1;
              }
            } else {
              return and__3027__auto__;
            }
          }())) {
            var statearr_19649 = state;
            statearr_19649[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_19649[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_19649;
          } else {
            if (cljs.core.truth_(function() {
              var and__3027__auto__ = cljs.core.not.call(null, exception);
              if (and__3027__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3027__auto__;
              }
            }())) {
              var statearr_19650 = state;
              statearr_19650[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_19650[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_19650;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_19651 = state;
                statearr_19651[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_19651[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_19651;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error("Assert failed: No matching clause\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, false)));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__19575 = level + 1;
        level = G__19575;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_19576 = 0;
    while (true) {
      if (i_19576 < arr.length) {
        arr[i_19576] = null;
        var G__19577 = i_19576 + 1;
        i_19576 = G__19577;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__19578 = x_SINGLEQUOTE_;
                x__$1 = G__19578;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__19579 = x__$1;
        var G__19580 = k;
        var G__19581 = level - 1;
        var G__19582 = update;
        x = G__19579;
        k = G__19580;
        level = G__19581;
        update = G__19582;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_19583 = self__.level + 1;
      while (true) {
        if (i_19583 <= new_level + 1) {
          update[i_19583] = self__.header;
          var G__19584 = i_19583 + 1;
          i_19583 = G__19584;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_19585 = 0;
    while (true) {
      if (i_19585 <= self__.level) {
        var links_19586 = update[i_19585].forward;
        if (links_19586[i_19585] === x__$1) {
          links_19586[i_19585] = x__$1.forward[i_19585];
          var G__19587 = i_19585 + 1;
          i_19585 = G__19587;
          continue;
        } else {
          var G__19588 = i_19585 + 1;
          i_19585 = G__19588;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__19589 = x_SINGLEQUOTE_;
              x__$1 = G__19589;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__19590 = nx;
        var G__19591 = level__$1 - 1;
        x = G__19590;
        level__$1 = G__19591;
        continue;
      } else {
        var G__19592 = x;
        var G__19593 = level__$1 - 1;
        x = G__19592;
        level__$1 = G__19593;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__19594 = x_SINGLEQUOTE_;
              x__$1 = G__19594;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__19595 = nx;
        var G__19596 = level__$1 - 1;
        x = G__19595;
        level__$1 = G__19596;
        continue;
      } else {
        var G__19597 = x;
        var G__19598 = level__$1 - 1;
        x = G__19597;
        level__$1 = G__19598;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3039__auto__ = cljs.core.truth_(function() {
    var and__3027__auto__ = me;
    if (cljs.core.truth_(and__3027__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3027__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3039__auto__)) {
    return or__3039__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3039__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3039__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t16926 !== "undefined") {
  } else {
    cljs.core.async.t16926 = function(f, fn_handler, meta16927) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta16927 = meta16927;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16926.cljs$lang$type = true;
    cljs.core.async.t16926.cljs$lang$ctorStr = "cljs.core.async/t16926";
    cljs.core.async.t16926.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
      return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t16926");
    };
    cljs.core.async.t16926.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t16926.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t16926.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t16926.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16928) {
      var self__ = this;
      var _16928__$1 = this;
      return self__.meta16927;
    };
    cljs.core.async.t16926.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16928, meta16927__$1) {
      var self__ = this;
      var _16928__$1 = this;
      return new cljs.core.async.t16926(self__.f, self__.fn_handler, meta16927__$1);
    };
    cljs.core.async.__GT_t16926 = function __GT_t16926(f__$1, fn_handler__$1, meta16927) {
      return new cljs.core.async.t16926(f__$1, fn_handler__$1, meta16927);
    };
  }
  return new cljs.core.async.t16926(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__16930 = buff;
  if (G__16930) {
    var bit__3689__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3039__auto__ = bit__3689__auto__;
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return G__16930.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__16930.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__16930);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__16930);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_16931 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_16931);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_16931, ret) {
          return function() {
            return fn1.call(null, val_16931);
          };
        }(val_16931, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__3895__auto___16932 = n;
  var x_16933 = 0;
  while (true) {
    if (x_16933 < n__3895__auto___16932) {
      a[x_16933] = 0;
      var G__16934 = x_16933 + 1;
      x_16933 = G__16934;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__16935 = i + 1;
      i = G__16935;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t16939 !== "undefined") {
  } else {
    cljs.core.async.t16939 = function(flag, alt_flag, meta16940) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta16940 = meta16940;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16939.cljs$lang$type = true;
    cljs.core.async.t16939.cljs$lang$ctorStr = "cljs.core.async/t16939";
    cljs.core.async.t16939.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
        return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t16939");
      };
    }(flag);
    cljs.core.async.t16939.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t16939.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t16939.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t16939.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_16941) {
        var self__ = this;
        var _16941__$1 = this;
        return self__.meta16940;
      };
    }(flag);
    cljs.core.async.t16939.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_16941, meta16940__$1) {
        var self__ = this;
        var _16941__$1 = this;
        return new cljs.core.async.t16939(self__.flag, self__.alt_flag, meta16940__$1);
      };
    }(flag);
    cljs.core.async.__GT_t16939 = function(flag) {
      return function __GT_t16939(flag__$1, alt_flag__$1, meta16940) {
        return new cljs.core.async.t16939(flag__$1, alt_flag__$1, meta16940);
      };
    }(flag);
  }
  return new cljs.core.async.t16939(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t16945 !== "undefined") {
  } else {
    cljs.core.async.t16945 = function(cb, flag, alt_handler, meta16946) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta16946 = meta16946;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16945.cljs$lang$type = true;
    cljs.core.async.t16945.cljs$lang$ctorStr = "cljs.core.async/t16945";
    cljs.core.async.t16945.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
      return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t16945");
    };
    cljs.core.async.t16945.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t16945.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t16945.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t16945.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16947) {
      var self__ = this;
      var _16947__$1 = this;
      return self__.meta16946;
    };
    cljs.core.async.t16945.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16947, meta16946__$1) {
      var self__ = this;
      var _16947__$1 = this;
      return new cljs.core.async.t16945(self__.cb, self__.flag, self__.alt_handler, meta16946__$1);
    };
    cljs.core.async.__GT_t16945 = function __GT_t16945(cb__$1, flag__$1, alt_handler__$1, meta16946) {
      return new cljs.core.async.t16945(cb__$1, flag__$1, alt_handler__$1, meta16946);
    };
  }
  return new cljs.core.async.t16945(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__16948_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16948_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__16949_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16949_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3039__auto__ = wport;
            if (cljs.core.truth_(or__3039__auto__)) {
              return or__3039__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__16950 = i + 1;
          i = G__16950;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3039__auto__ = ret;
  if (cljs.core.truth_(or__3039__auto__)) {
    return or__3039__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3027__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3027__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3027__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__16951) {
    var map__16953 = p__16951;
    var map__16953__$1 = cljs.core.seq_QMARK_.call(null, map__16953) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16953) : map__16953;
    var opts = map__16953__$1;
    if (null) {
      return null;
    } else {
      throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__16951 = null;
    if (arguments.length > 1) {
      p__16951 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__16951);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__16954) {
    var ports = cljs.core.first(arglist__16954);
    var p__16951 = cljs.core.rest(arglist__16954);
    return alts_BANG___delegate(ports, p__16951);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t16962 !== "undefined") {
  } else {
    cljs.core.async.t16962 = function(ch, f, map_LT_, meta16963) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta16963 = meta16963;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16962.cljs$lang$type = true;
    cljs.core.async.t16962.cljs$lang$ctorStr = "cljs.core.async/t16962";
    cljs.core.async.t16962.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
      return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t16962");
    };
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t16965 !== "undefined") {
        } else {
          cljs.core.async.t16965 = function(fn1, _, meta16963, ch, f, map_LT_, meta16966) {
            this.fn1 = fn1;
            this._ = _;
            this.meta16963 = meta16963;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta16966 = meta16966;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t16965.cljs$lang$type = true;
          cljs.core.async.t16965.cljs$lang$ctorStr = "cljs.core.async/t16965";
          cljs.core.async.t16965.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
              return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t16965");
            };
          }(___$1);
          cljs.core.async.t16965.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t16965.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t16965.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t16965.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__16955_SHARP_) {
                  return f1.call(null, p1__16955_SHARP_ == null ? null : self__.f.call(null, p1__16955_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t16965.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_16967) {
              var self__ = this;
              var _16967__$1 = this;
              return self__.meta16966;
            };
          }(___$1);
          cljs.core.async.t16965.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_16967, meta16966__$1) {
              var self__ = this;
              var _16967__$1 = this;
              return new cljs.core.async.t16965(self__.fn1, self__._, self__.meta16963, self__.ch, self__.f, self__.map_LT_, meta16966__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t16965 = function(___$1) {
            return function __GT_t16965(fn1__$1, ___$2, meta16963__$1, ch__$2, f__$2, map_LT___$2, meta16966) {
              return new cljs.core.async.t16965(fn1__$1, ___$2, meta16963__$1, ch__$2, f__$2, map_LT___$2, meta16966);
            };
          }(___$1);
        }
        return new cljs.core.async.t16965(fn1, ___$1, self__.meta16963, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3027__auto__ = ret;
        if (cljs.core.truth_(and__3027__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3027__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t16962.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t16962.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16964) {
      var self__ = this;
      var _16964__$1 = this;
      return self__.meta16963;
    };
    cljs.core.async.t16962.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16964, meta16963__$1) {
      var self__ = this;
      var _16964__$1 = this;
      return new cljs.core.async.t16962(self__.ch, self__.f, self__.map_LT_, meta16963__$1);
    };
    cljs.core.async.__GT_t16962 = function __GT_t16962(ch__$1, f__$1, map_LT___$1, meta16963) {
      return new cljs.core.async.t16962(ch__$1, f__$1, map_LT___$1, meta16963);
    };
  }
  return new cljs.core.async.t16962(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t16971 !== "undefined") {
  } else {
    cljs.core.async.t16971 = function(ch, f, map_GT_, meta16972) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta16972 = meta16972;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16971.cljs$lang$type = true;
    cljs.core.async.t16971.cljs$lang$ctorStr = "cljs.core.async/t16971";
    cljs.core.async.t16971.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
      return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t16971");
    };
    cljs.core.async.t16971.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t16971.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t16971.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t16971.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t16971.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t16971.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t16971.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16973) {
      var self__ = this;
      var _16973__$1 = this;
      return self__.meta16972;
    };
    cljs.core.async.t16971.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16973, meta16972__$1) {
      var self__ = this;
      var _16973__$1 = this;
      return new cljs.core.async.t16971(self__.ch, self__.f, self__.map_GT_, meta16972__$1);
    };
    cljs.core.async.__GT_t16971 = function __GT_t16971(ch__$1, f__$1, map_GT___$1, meta16972) {
      return new cljs.core.async.t16971(ch__$1, f__$1, map_GT___$1, meta16972);
    };
  }
  return new cljs.core.async.t16971(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t16977 !== "undefined") {
  } else {
    cljs.core.async.t16977 = function(ch, p, filter_GT_, meta16978) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta16978 = meta16978;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16977.cljs$lang$type = true;
    cljs.core.async.t16977.cljs$lang$ctorStr = "cljs.core.async/t16977";
    cljs.core.async.t16977.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
      return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t16977");
    };
    cljs.core.async.t16977.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t16977.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t16977.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t16977.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t16977.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t16977.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t16977.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t16977.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16979) {
      var self__ = this;
      var _16979__$1 = this;
      return self__.meta16978;
    };
    cljs.core.async.t16977.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16979, meta16978__$1) {
      var self__ = this;
      var _16979__$1 = this;
      return new cljs.core.async.t16977(self__.ch, self__.p, self__.filter_GT_, meta16978__$1);
    };
    cljs.core.async.__GT_t16977 = function __GT_t16977(ch__$1, p__$1, filter_GT___$1, meta16978) {
      return new cljs.core.async.t16977(ch__$1, p__$1, filter_GT___$1, meta16978);
    };
  }
  return new cljs.core.async.t16977(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12112__auto___17062 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___17062, out) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___17062, out) {
            return function(state_17041) {
              var state_val_17042 = state_17041[1];
              if (state_val_17042 === 7) {
                var inst_17037 = state_17041[2];
                var state_17041__$1 = state_17041;
                var statearr_17043_17063 = state_17041__$1;
                statearr_17043_17063[2] = inst_17037;
                statearr_17043_17063[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17042 === 1) {
                  var state_17041__$1 = state_17041;
                  var statearr_17044_17064 = state_17041__$1;
                  statearr_17044_17064[2] = null;
                  statearr_17044_17064[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17042 === 4) {
                    var inst_17023 = state_17041[7];
                    var inst_17023__$1 = state_17041[2];
                    var inst_17024 = inst_17023__$1 == null;
                    var state_17041__$1 = function() {
                      var statearr_17045 = state_17041;
                      statearr_17045[7] = inst_17023__$1;
                      return statearr_17045;
                    }();
                    if (cljs.core.truth_(inst_17024)) {
                      var statearr_17046_17065 = state_17041__$1;
                      statearr_17046_17065[1] = 5;
                    } else {
                      var statearr_17047_17066 = state_17041__$1;
                      statearr_17047_17066[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17042 === 6) {
                      var inst_17023 = state_17041[7];
                      var inst_17028 = p.call(null, inst_17023);
                      var state_17041__$1 = state_17041;
                      if (cljs.core.truth_(inst_17028)) {
                        var statearr_17048_17067 = state_17041__$1;
                        statearr_17048_17067[1] = 8;
                      } else {
                        var statearr_17049_17068 = state_17041__$1;
                        statearr_17049_17068[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17042 === 3) {
                        var inst_17039 = state_17041[2];
                        var state_17041__$1 = state_17041;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17041__$1, inst_17039);
                      } else {
                        if (state_val_17042 === 2) {
                          var state_17041__$1 = state_17041;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17041__$1, 4, ch);
                        } else {
                          if (state_val_17042 === 11) {
                            var inst_17031 = state_17041[2];
                            var state_17041__$1 = state_17041;
                            var statearr_17050_17069 = state_17041__$1;
                            statearr_17050_17069[2] = inst_17031;
                            statearr_17050_17069[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17042 === 9) {
                              var state_17041__$1 = state_17041;
                              var statearr_17051_17070 = state_17041__$1;
                              statearr_17051_17070[2] = null;
                              statearr_17051_17070[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17042 === 5) {
                                var inst_17026 = cljs.core.async.close_BANG_.call(null, out);
                                var state_17041__$1 = state_17041;
                                var statearr_17052_17071 = state_17041__$1;
                                statearr_17052_17071[2] = inst_17026;
                                statearr_17052_17071[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17042 === 10) {
                                  var inst_17034 = state_17041[2];
                                  var state_17041__$1 = function() {
                                    var statearr_17053 = state_17041;
                                    statearr_17053[8] = inst_17034;
                                    return statearr_17053;
                                  }();
                                  var statearr_17054_17072 = state_17041__$1;
                                  statearr_17054_17072[2] = null;
                                  statearr_17054_17072[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17042 === 8) {
                                    var inst_17023 = state_17041[7];
                                    var state_17041__$1 = state_17041;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17041__$1, 11, out, inst_17023);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___17062, out);
          return function(switch__12047__auto__, c__12112__auto___17062, out) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_17058 = [null, null, null, null, null, null, null, null, null];
                statearr_17058[0] = state_machine__12048__auto__;
                statearr_17058[1] = 1;
                return statearr_17058;
              };
              var state_machine__12048__auto____1 = function(state_17041) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_17041);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e17059) {
                      if (e17059 instanceof Object) {
                        var ex__12051__auto__ = e17059;
                        var statearr_17060_17073 = state_17041;
                        statearr_17060_17073[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17041);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17059;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17074 = state_17041;
                    state_17041 = G__17074;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_17041) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_17041);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___17062, out);
        }();
        var state__12114__auto__ = function() {
          var statearr_17061 = f__12113__auto__.call(null);
          statearr_17061[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___17062;
          return statearr_17061;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___17062, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__12112__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto__) {
    return function() {
      var f__12113__auto__ = function() {
        var switch__12047__auto__ = function(c__12112__auto__) {
          return function(state_17240) {
            var state_val_17241 = state_17240[1];
            if (state_val_17241 === 7) {
              var inst_17236 = state_17240[2];
              var state_17240__$1 = state_17240;
              var statearr_17242_17283 = state_17240__$1;
              statearr_17242_17283[2] = inst_17236;
              statearr_17242_17283[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17241 === 20) {
                var inst_17206 = state_17240[7];
                var inst_17217 = state_17240[2];
                var inst_17218 = cljs.core.next.call(null, inst_17206);
                var inst_17192 = inst_17218;
                var inst_17193 = null;
                var inst_17194 = 0;
                var inst_17195 = 0;
                var state_17240__$1 = function() {
                  var statearr_17243 = state_17240;
                  statearr_17243[8] = inst_17195;
                  statearr_17243[9] = inst_17217;
                  statearr_17243[10] = inst_17193;
                  statearr_17243[11] = inst_17192;
                  statearr_17243[12] = inst_17194;
                  return statearr_17243;
                }();
                var statearr_17244_17284 = state_17240__$1;
                statearr_17244_17284[2] = null;
                statearr_17244_17284[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17241 === 1) {
                  var state_17240__$1 = state_17240;
                  var statearr_17245_17285 = state_17240__$1;
                  statearr_17245_17285[2] = null;
                  statearr_17245_17285[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17241 === 4) {
                    var inst_17181 = state_17240[13];
                    var inst_17181__$1 = state_17240[2];
                    var inst_17182 = inst_17181__$1 == null;
                    var state_17240__$1 = function() {
                      var statearr_17246 = state_17240;
                      statearr_17246[13] = inst_17181__$1;
                      return statearr_17246;
                    }();
                    if (cljs.core.truth_(inst_17182)) {
                      var statearr_17247_17286 = state_17240__$1;
                      statearr_17247_17286[1] = 5;
                    } else {
                      var statearr_17248_17287 = state_17240__$1;
                      statearr_17248_17287[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17241 === 15) {
                      var state_17240__$1 = state_17240;
                      var statearr_17252_17288 = state_17240__$1;
                      statearr_17252_17288[2] = null;
                      statearr_17252_17288[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17241 === 21) {
                        var state_17240__$1 = state_17240;
                        var statearr_17253_17289 = state_17240__$1;
                        statearr_17253_17289[2] = null;
                        statearr_17253_17289[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17241 === 13) {
                          var inst_17195 = state_17240[8];
                          var inst_17193 = state_17240[10];
                          var inst_17192 = state_17240[11];
                          var inst_17194 = state_17240[12];
                          var inst_17202 = state_17240[2];
                          var inst_17203 = inst_17195 + 1;
                          var tmp17249 = inst_17193;
                          var tmp17250 = inst_17192;
                          var tmp17251 = inst_17194;
                          var inst_17192__$1 = tmp17250;
                          var inst_17193__$1 = tmp17249;
                          var inst_17194__$1 = tmp17251;
                          var inst_17195__$1 = inst_17203;
                          var state_17240__$1 = function() {
                            var statearr_17254 = state_17240;
                            statearr_17254[8] = inst_17195__$1;
                            statearr_17254[14] = inst_17202;
                            statearr_17254[10] = inst_17193__$1;
                            statearr_17254[11] = inst_17192__$1;
                            statearr_17254[12] = inst_17194__$1;
                            return statearr_17254;
                          }();
                          var statearr_17255_17290 = state_17240__$1;
                          statearr_17255_17290[2] = null;
                          statearr_17255_17290[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17241 === 22) {
                            var state_17240__$1 = state_17240;
                            var statearr_17256_17291 = state_17240__$1;
                            statearr_17256_17291[2] = null;
                            statearr_17256_17291[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17241 === 6) {
                              var inst_17181 = state_17240[13];
                              var inst_17190 = f.call(null, inst_17181);
                              var inst_17191 = cljs.core.seq.call(null, inst_17190);
                              var inst_17192 = inst_17191;
                              var inst_17193 = null;
                              var inst_17194 = 0;
                              var inst_17195 = 0;
                              var state_17240__$1 = function() {
                                var statearr_17257 = state_17240;
                                statearr_17257[8] = inst_17195;
                                statearr_17257[10] = inst_17193;
                                statearr_17257[11] = inst_17192;
                                statearr_17257[12] = inst_17194;
                                return statearr_17257;
                              }();
                              var statearr_17258_17292 = state_17240__$1;
                              statearr_17258_17292[2] = null;
                              statearr_17258_17292[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17241 === 17) {
                                var inst_17206 = state_17240[7];
                                var inst_17210 = cljs.core.chunk_first.call(null, inst_17206);
                                var inst_17211 = cljs.core.chunk_rest.call(null, inst_17206);
                                var inst_17212 = cljs.core.count.call(null, inst_17210);
                                var inst_17192 = inst_17211;
                                var inst_17193 = inst_17210;
                                var inst_17194 = inst_17212;
                                var inst_17195 = 0;
                                var state_17240__$1 = function() {
                                  var statearr_17259 = state_17240;
                                  statearr_17259[8] = inst_17195;
                                  statearr_17259[10] = inst_17193;
                                  statearr_17259[11] = inst_17192;
                                  statearr_17259[12] = inst_17194;
                                  return statearr_17259;
                                }();
                                var statearr_17260_17293 = state_17240__$1;
                                statearr_17260_17293[2] = null;
                                statearr_17260_17293[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17241 === 3) {
                                  var inst_17238 = state_17240[2];
                                  var state_17240__$1 = state_17240;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17240__$1, inst_17238);
                                } else {
                                  if (state_val_17241 === 12) {
                                    var inst_17226 = state_17240[2];
                                    var state_17240__$1 = state_17240;
                                    var statearr_17261_17294 = state_17240__$1;
                                    statearr_17261_17294[2] = inst_17226;
                                    statearr_17261_17294[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17241 === 2) {
                                      var state_17240__$1 = state_17240;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17240__$1, 4, in$);
                                    } else {
                                      if (state_val_17241 === 23) {
                                        var inst_17234 = state_17240[2];
                                        var state_17240__$1 = state_17240;
                                        var statearr_17262_17295 = state_17240__$1;
                                        statearr_17262_17295[2] = inst_17234;
                                        statearr_17262_17295[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17241 === 19) {
                                          var inst_17221 = state_17240[2];
                                          var state_17240__$1 = state_17240;
                                          var statearr_17263_17296 = state_17240__$1;
                                          statearr_17263_17296[2] = inst_17221;
                                          statearr_17263_17296[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_17241 === 11) {
                                            var inst_17206 = state_17240[7];
                                            var inst_17192 = state_17240[11];
                                            var inst_17206__$1 = cljs.core.seq.call(null, inst_17192);
                                            var state_17240__$1 = function() {
                                              var statearr_17264 = state_17240;
                                              statearr_17264[7] = inst_17206__$1;
                                              return statearr_17264;
                                            }();
                                            if (inst_17206__$1) {
                                              var statearr_17265_17297 = state_17240__$1;
                                              statearr_17265_17297[1] = 14;
                                            } else {
                                              var statearr_17266_17298 = state_17240__$1;
                                              statearr_17266_17298[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_17241 === 9) {
                                              var inst_17228 = state_17240[2];
                                              var inst_17229 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_17240__$1 = function() {
                                                var statearr_17267 = state_17240;
                                                statearr_17267[15] = inst_17228;
                                                return statearr_17267;
                                              }();
                                              if (cljs.core.truth_(inst_17229)) {
                                                var statearr_17268_17299 = state_17240__$1;
                                                statearr_17268_17299[1] = 21;
                                              } else {
                                                var statearr_17269_17300 = state_17240__$1;
                                                statearr_17269_17300[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_17241 === 5) {
                                                var inst_17184 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_17240__$1 = state_17240;
                                                var statearr_17270_17301 = state_17240__$1;
                                                statearr_17270_17301[2] = inst_17184;
                                                statearr_17270_17301[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_17241 === 14) {
                                                  var inst_17206 = state_17240[7];
                                                  var inst_17208 = cljs.core.chunked_seq_QMARK_.call(null, inst_17206);
                                                  var state_17240__$1 = state_17240;
                                                  if (inst_17208) {
                                                    var statearr_17271_17302 = state_17240__$1;
                                                    statearr_17271_17302[1] = 17;
                                                  } else {
                                                    var statearr_17272_17303 = state_17240__$1;
                                                    statearr_17272_17303[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_17241 === 16) {
                                                    var inst_17224 = state_17240[2];
                                                    var state_17240__$1 = state_17240;
                                                    var statearr_17273_17304 = state_17240__$1;
                                                    statearr_17273_17304[2] = inst_17224;
                                                    statearr_17273_17304[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_17241 === 10) {
                                                      var inst_17195 = state_17240[8];
                                                      var inst_17193 = state_17240[10];
                                                      var inst_17200 = cljs.core._nth.call(null, inst_17193, inst_17195);
                                                      var state_17240__$1 = state_17240;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17240__$1, 13, out, inst_17200);
                                                    } else {
                                                      if (state_val_17241 === 18) {
                                                        var inst_17206 = state_17240[7];
                                                        var inst_17215 = cljs.core.first.call(null, inst_17206);
                                                        var state_17240__$1 = state_17240;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17240__$1, 20, out, inst_17215);
                                                      } else {
                                                        if (state_val_17241 === 8) {
                                                          var inst_17195 = state_17240[8];
                                                          var inst_17194 = state_17240[12];
                                                          var inst_17197 = inst_17195 < inst_17194;
                                                          var inst_17198 = inst_17197;
                                                          var state_17240__$1 = state_17240;
                                                          if (cljs.core.truth_(inst_17198)) {
                                                            var statearr_17274_17305 = state_17240__$1;
                                                            statearr_17274_17305[1] = 10;
                                                          } else {
                                                            var statearr_17275_17306 = state_17240__$1;
                                                            statearr_17275_17306[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12112__auto__);
        return function(switch__12047__auto__, c__12112__auto__) {
          return function() {
            var state_machine__12048__auto__ = null;
            var state_machine__12048__auto____0 = function() {
              var statearr_17279 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17279[0] = state_machine__12048__auto__;
              statearr_17279[1] = 1;
              return statearr_17279;
            };
            var state_machine__12048__auto____1 = function(state_17240) {
              while (true) {
                var ret_value__12049__auto__ = function() {
                  try {
                    while (true) {
                      var result__12050__auto__ = switch__12047__auto__.call(null, state_17240);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12050__auto__;
                      }
                      break;
                    }
                  } catch (e17280) {
                    if (e17280 instanceof Object) {
                      var ex__12051__auto__ = e17280;
                      var statearr_17281_17307 = state_17240;
                      statearr_17281_17307[5] = ex__12051__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17240);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e17280;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17308 = state_17240;
                  state_17240 = G__17308;
                  continue;
                } else {
                  return ret_value__12049__auto__;
                }
                break;
              }
            };
            state_machine__12048__auto__ = function(state_17240) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12048__auto____0.call(this);
                case 1:
                  return state_machine__12048__auto____1.call(this, state_17240);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
            return state_machine__12048__auto__;
          }();
        }(switch__12047__auto__, c__12112__auto__);
      }();
      var state__12114__auto__ = function() {
        var statearr_17282 = f__12113__auto__.call(null);
        statearr_17282[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto__;
        return statearr_17282;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
    };
  }(c__12112__auto__));
  return c__12112__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__12112__auto___17403 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___17403) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___17403) {
            return function(state_17379) {
              var state_val_17380 = state_17379[1];
              if (state_val_17380 === 7) {
                var inst_17375 = state_17379[2];
                var state_17379__$1 = state_17379;
                var statearr_17381_17404 = state_17379__$1;
                statearr_17381_17404[2] = inst_17375;
                statearr_17381_17404[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17380 === 1) {
                  var state_17379__$1 = state_17379;
                  var statearr_17382_17405 = state_17379__$1;
                  statearr_17382_17405[2] = null;
                  statearr_17382_17405[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17380 === 4) {
                    var inst_17358 = state_17379[7];
                    var inst_17358__$1 = state_17379[2];
                    var inst_17359 = inst_17358__$1 == null;
                    var state_17379__$1 = function() {
                      var statearr_17383 = state_17379;
                      statearr_17383[7] = inst_17358__$1;
                      return statearr_17383;
                    }();
                    if (cljs.core.truth_(inst_17359)) {
                      var statearr_17384_17406 = state_17379__$1;
                      statearr_17384_17406[1] = 5;
                    } else {
                      var statearr_17385_17407 = state_17379__$1;
                      statearr_17385_17407[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17380 === 13) {
                      var state_17379__$1 = state_17379;
                      var statearr_17386_17408 = state_17379__$1;
                      statearr_17386_17408[2] = null;
                      statearr_17386_17408[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17380 === 6) {
                        var inst_17358 = state_17379[7];
                        var state_17379__$1 = state_17379;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17379__$1, 11, to, inst_17358);
                      } else {
                        if (state_val_17380 === 3) {
                          var inst_17377 = state_17379[2];
                          var state_17379__$1 = state_17379;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17379__$1, inst_17377);
                        } else {
                          if (state_val_17380 === 12) {
                            var state_17379__$1 = state_17379;
                            var statearr_17387_17409 = state_17379__$1;
                            statearr_17387_17409[2] = null;
                            statearr_17387_17409[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17380 === 2) {
                              var state_17379__$1 = state_17379;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17379__$1, 4, from);
                            } else {
                              if (state_val_17380 === 11) {
                                var inst_17368 = state_17379[2];
                                var state_17379__$1 = state_17379;
                                if (cljs.core.truth_(inst_17368)) {
                                  var statearr_17388_17410 = state_17379__$1;
                                  statearr_17388_17410[1] = 12;
                                } else {
                                  var statearr_17389_17411 = state_17379__$1;
                                  statearr_17389_17411[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17380 === 9) {
                                  var state_17379__$1 = state_17379;
                                  var statearr_17390_17412 = state_17379__$1;
                                  statearr_17390_17412[2] = null;
                                  statearr_17390_17412[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17380 === 5) {
                                    var state_17379__$1 = state_17379;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_17391_17413 = state_17379__$1;
                                      statearr_17391_17413[1] = 8;
                                    } else {
                                      var statearr_17392_17414 = state_17379__$1;
                                      statearr_17392_17414[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17380 === 14) {
                                      var inst_17373 = state_17379[2];
                                      var state_17379__$1 = state_17379;
                                      var statearr_17393_17415 = state_17379__$1;
                                      statearr_17393_17415[2] = inst_17373;
                                      statearr_17393_17415[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17380 === 10) {
                                        var inst_17365 = state_17379[2];
                                        var state_17379__$1 = state_17379;
                                        var statearr_17394_17416 = state_17379__$1;
                                        statearr_17394_17416[2] = inst_17365;
                                        statearr_17394_17416[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17380 === 8) {
                                          var inst_17362 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_17379__$1 = state_17379;
                                          var statearr_17395_17417 = state_17379__$1;
                                          statearr_17395_17417[2] = inst_17362;
                                          statearr_17395_17417[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___17403);
          return function(switch__12047__auto__, c__12112__auto___17403) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_17399 = [null, null, null, null, null, null, null, null];
                statearr_17399[0] = state_machine__12048__auto__;
                statearr_17399[1] = 1;
                return statearr_17399;
              };
              var state_machine__12048__auto____1 = function(state_17379) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_17379);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e17400) {
                      if (e17400 instanceof Object) {
                        var ex__12051__auto__ = e17400;
                        var statearr_17401_17418 = state_17379;
                        statearr_17401_17418[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17379);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17400;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17419 = state_17379;
                    state_17379 = G__17419;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_17379) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_17379);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___17403);
        }();
        var state__12114__auto__ = function() {
          var statearr_17402 = f__12113__auto__.call(null);
          statearr_17402[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___17403;
          return statearr_17402;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___17403));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__12112__auto___17520 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___17520, tc, fc) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___17520, tc, fc) {
            return function(state_17495) {
              var state_val_17496 = state_17495[1];
              if (state_val_17496 === 7) {
                var inst_17491 = state_17495[2];
                var state_17495__$1 = state_17495;
                var statearr_17497_17521 = state_17495__$1;
                statearr_17497_17521[2] = inst_17491;
                statearr_17497_17521[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17496 === 1) {
                  var state_17495__$1 = state_17495;
                  var statearr_17498_17522 = state_17495__$1;
                  statearr_17498_17522[2] = null;
                  statearr_17498_17522[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17496 === 4) {
                    var inst_17472 = state_17495[7];
                    var inst_17472__$1 = state_17495[2];
                    var inst_17473 = inst_17472__$1 == null;
                    var state_17495__$1 = function() {
                      var statearr_17499 = state_17495;
                      statearr_17499[7] = inst_17472__$1;
                      return statearr_17499;
                    }();
                    if (cljs.core.truth_(inst_17473)) {
                      var statearr_17500_17523 = state_17495__$1;
                      statearr_17500_17523[1] = 5;
                    } else {
                      var statearr_17501_17524 = state_17495__$1;
                      statearr_17501_17524[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17496 === 13) {
                      var state_17495__$1 = state_17495;
                      var statearr_17502_17525 = state_17495__$1;
                      statearr_17502_17525[2] = null;
                      statearr_17502_17525[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17496 === 6) {
                        var inst_17472 = state_17495[7];
                        var inst_17478 = p.call(null, inst_17472);
                        var state_17495__$1 = state_17495;
                        if (cljs.core.truth_(inst_17478)) {
                          var statearr_17503_17526 = state_17495__$1;
                          statearr_17503_17526[1] = 9;
                        } else {
                          var statearr_17504_17527 = state_17495__$1;
                          statearr_17504_17527[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17496 === 3) {
                          var inst_17493 = state_17495[2];
                          var state_17495__$1 = state_17495;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17495__$1, inst_17493);
                        } else {
                          if (state_val_17496 === 12) {
                            var state_17495__$1 = state_17495;
                            var statearr_17505_17528 = state_17495__$1;
                            statearr_17505_17528[2] = null;
                            statearr_17505_17528[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17496 === 2) {
                              var state_17495__$1 = state_17495;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17495__$1, 4, ch);
                            } else {
                              if (state_val_17496 === 11) {
                                var inst_17472 = state_17495[7];
                                var inst_17482 = state_17495[2];
                                var state_17495__$1 = state_17495;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17495__$1, 8, inst_17482, inst_17472);
                              } else {
                                if (state_val_17496 === 9) {
                                  var state_17495__$1 = state_17495;
                                  var statearr_17506_17529 = state_17495__$1;
                                  statearr_17506_17529[2] = tc;
                                  statearr_17506_17529[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17496 === 5) {
                                    var inst_17475 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_17476 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_17495__$1 = function() {
                                      var statearr_17507 = state_17495;
                                      statearr_17507[8] = inst_17475;
                                      return statearr_17507;
                                    }();
                                    var statearr_17508_17530 = state_17495__$1;
                                    statearr_17508_17530[2] = inst_17476;
                                    statearr_17508_17530[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17496 === 14) {
                                      var inst_17489 = state_17495[2];
                                      var state_17495__$1 = state_17495;
                                      var statearr_17509_17531 = state_17495__$1;
                                      statearr_17509_17531[2] = inst_17489;
                                      statearr_17509_17531[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17496 === 10) {
                                        var state_17495__$1 = state_17495;
                                        var statearr_17510_17532 = state_17495__$1;
                                        statearr_17510_17532[2] = fc;
                                        statearr_17510_17532[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17496 === 8) {
                                          var inst_17484 = state_17495[2];
                                          var state_17495__$1 = state_17495;
                                          if (cljs.core.truth_(inst_17484)) {
                                            var statearr_17511_17533 = state_17495__$1;
                                            statearr_17511_17533[1] = 12;
                                          } else {
                                            var statearr_17512_17534 = state_17495__$1;
                                            statearr_17512_17534[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___17520, tc, fc);
          return function(switch__12047__auto__, c__12112__auto___17520, tc, fc) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_17516 = [null, null, null, null, null, null, null, null, null];
                statearr_17516[0] = state_machine__12048__auto__;
                statearr_17516[1] = 1;
                return statearr_17516;
              };
              var state_machine__12048__auto____1 = function(state_17495) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_17495);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e17517) {
                      if (e17517 instanceof Object) {
                        var ex__12051__auto__ = e17517;
                        var statearr_17518_17535 = state_17495;
                        statearr_17518_17535[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17495);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17517;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17536 = state_17495;
                    state_17495 = G__17536;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_17495) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_17495);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___17520, tc, fc);
        }();
        var state__12114__auto__ = function() {
          var statearr_17519 = f__12113__auto__.call(null);
          statearr_17519[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___17520;
          return statearr_17519;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___17520, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__12112__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto__) {
    return function() {
      var f__12113__auto__ = function() {
        var switch__12047__auto__ = function(c__12112__auto__) {
          return function(state_17583) {
            var state_val_17584 = state_17583[1];
            if (state_val_17584 === 7) {
              var inst_17579 = state_17583[2];
              var state_17583__$1 = state_17583;
              var statearr_17585_17601 = state_17583__$1;
              statearr_17585_17601[2] = inst_17579;
              statearr_17585_17601[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17584 === 6) {
                var inst_17572 = state_17583[7];
                var inst_17569 = state_17583[8];
                var inst_17576 = f.call(null, inst_17569, inst_17572);
                var inst_17569__$1 = inst_17576;
                var state_17583__$1 = function() {
                  var statearr_17586 = state_17583;
                  statearr_17586[8] = inst_17569__$1;
                  return statearr_17586;
                }();
                var statearr_17587_17602 = state_17583__$1;
                statearr_17587_17602[2] = null;
                statearr_17587_17602[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17584 === 5) {
                  var inst_17569 = state_17583[8];
                  var state_17583__$1 = state_17583;
                  var statearr_17588_17603 = state_17583__$1;
                  statearr_17588_17603[2] = inst_17569;
                  statearr_17588_17603[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17584 === 4) {
                    var inst_17572 = state_17583[7];
                    var inst_17572__$1 = state_17583[2];
                    var inst_17573 = inst_17572__$1 == null;
                    var state_17583__$1 = function() {
                      var statearr_17589 = state_17583;
                      statearr_17589[7] = inst_17572__$1;
                      return statearr_17589;
                    }();
                    if (cljs.core.truth_(inst_17573)) {
                      var statearr_17590_17604 = state_17583__$1;
                      statearr_17590_17604[1] = 5;
                    } else {
                      var statearr_17591_17605 = state_17583__$1;
                      statearr_17591_17605[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17584 === 3) {
                      var inst_17581 = state_17583[2];
                      var state_17583__$1 = state_17583;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17583__$1, inst_17581);
                    } else {
                      if (state_val_17584 === 2) {
                        var state_17583__$1 = state_17583;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17583__$1, 4, ch);
                      } else {
                        if (state_val_17584 === 1) {
                          var inst_17569 = init;
                          var state_17583__$1 = function() {
                            var statearr_17592 = state_17583;
                            statearr_17592[8] = inst_17569;
                            return statearr_17592;
                          }();
                          var statearr_17593_17606 = state_17583__$1;
                          statearr_17593_17606[2] = null;
                          statearr_17593_17606[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12112__auto__);
        return function(switch__12047__auto__, c__12112__auto__) {
          return function() {
            var state_machine__12048__auto__ = null;
            var state_machine__12048__auto____0 = function() {
              var statearr_17597 = [null, null, null, null, null, null, null, null, null];
              statearr_17597[0] = state_machine__12048__auto__;
              statearr_17597[1] = 1;
              return statearr_17597;
            };
            var state_machine__12048__auto____1 = function(state_17583) {
              while (true) {
                var ret_value__12049__auto__ = function() {
                  try {
                    while (true) {
                      var result__12050__auto__ = switch__12047__auto__.call(null, state_17583);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12050__auto__;
                      }
                      break;
                    }
                  } catch (e17598) {
                    if (e17598 instanceof Object) {
                      var ex__12051__auto__ = e17598;
                      var statearr_17599_17607 = state_17583;
                      statearr_17599_17607[5] = ex__12051__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17583);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e17598;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17608 = state_17583;
                  state_17583 = G__17608;
                  continue;
                } else {
                  return ret_value__12049__auto__;
                }
                break;
              }
            };
            state_machine__12048__auto__ = function(state_17583) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12048__auto____0.call(this);
                case 1:
                  return state_machine__12048__auto____1.call(this, state_17583);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
            return state_machine__12048__auto__;
          }();
        }(switch__12047__auto__, c__12112__auto__);
      }();
      var state__12114__auto__ = function() {
        var statearr_17600 = f__12113__auto__.call(null);
        statearr_17600[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto__;
        return statearr_17600;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
    };
  }(c__12112__auto__));
  return c__12112__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__12112__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto__) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto__) {
            return function(state_17682) {
              var state_val_17683 = state_17682[1];
              if (state_val_17683 === 7) {
                var inst_17664 = state_17682[2];
                var state_17682__$1 = state_17682;
                var statearr_17684_17707 = state_17682__$1;
                statearr_17684_17707[2] = inst_17664;
                statearr_17684_17707[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17683 === 1) {
                  var inst_17658 = cljs.core.seq.call(null, coll);
                  var inst_17659 = inst_17658;
                  var state_17682__$1 = function() {
                    var statearr_17685 = state_17682;
                    statearr_17685[7] = inst_17659;
                    return statearr_17685;
                  }();
                  var statearr_17686_17708 = state_17682__$1;
                  statearr_17686_17708[2] = null;
                  statearr_17686_17708[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17683 === 4) {
                    var inst_17659 = state_17682[7];
                    var inst_17662 = cljs.core.first.call(null, inst_17659);
                    var state_17682__$1 = state_17682;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17682__$1, 7, ch, inst_17662);
                  } else {
                    if (state_val_17683 === 13) {
                      var inst_17676 = state_17682[2];
                      var state_17682__$1 = state_17682;
                      var statearr_17687_17709 = state_17682__$1;
                      statearr_17687_17709[2] = inst_17676;
                      statearr_17687_17709[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17683 === 6) {
                        var inst_17667 = state_17682[2];
                        var state_17682__$1 = state_17682;
                        if (cljs.core.truth_(inst_17667)) {
                          var statearr_17688_17710 = state_17682__$1;
                          statearr_17688_17710[1] = 8;
                        } else {
                          var statearr_17689_17711 = state_17682__$1;
                          statearr_17689_17711[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17683 === 3) {
                          var inst_17680 = state_17682[2];
                          var state_17682__$1 = state_17682;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17682__$1, inst_17680);
                        } else {
                          if (state_val_17683 === 12) {
                            var state_17682__$1 = state_17682;
                            var statearr_17690_17712 = state_17682__$1;
                            statearr_17690_17712[2] = null;
                            statearr_17690_17712[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17683 === 2) {
                              var inst_17659 = state_17682[7];
                              var state_17682__$1 = state_17682;
                              if (cljs.core.truth_(inst_17659)) {
                                var statearr_17691_17713 = state_17682__$1;
                                statearr_17691_17713[1] = 4;
                              } else {
                                var statearr_17692_17714 = state_17682__$1;
                                statearr_17692_17714[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17683 === 11) {
                                var inst_17673 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_17682__$1 = state_17682;
                                var statearr_17693_17715 = state_17682__$1;
                                statearr_17693_17715[2] = inst_17673;
                                statearr_17693_17715[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17683 === 9) {
                                  var state_17682__$1 = state_17682;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_17694_17716 = state_17682__$1;
                                    statearr_17694_17716[1] = 11;
                                  } else {
                                    var statearr_17695_17717 = state_17682__$1;
                                    statearr_17695_17717[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17683 === 5) {
                                    var inst_17659 = state_17682[7];
                                    var state_17682__$1 = state_17682;
                                    var statearr_17696_17718 = state_17682__$1;
                                    statearr_17696_17718[2] = inst_17659;
                                    statearr_17696_17718[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17683 === 10) {
                                      var inst_17678 = state_17682[2];
                                      var state_17682__$1 = state_17682;
                                      var statearr_17697_17719 = state_17682__$1;
                                      statearr_17697_17719[2] = inst_17678;
                                      statearr_17697_17719[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17683 === 8) {
                                        var inst_17659 = state_17682[7];
                                        var inst_17669 = cljs.core.next.call(null, inst_17659);
                                        var inst_17659__$1 = inst_17669;
                                        var state_17682__$1 = function() {
                                          var statearr_17698 = state_17682;
                                          statearr_17698[7] = inst_17659__$1;
                                          return statearr_17698;
                                        }();
                                        var statearr_17699_17720 = state_17682__$1;
                                        statearr_17699_17720[2] = null;
                                        statearr_17699_17720[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto__);
          return function(switch__12047__auto__, c__12112__auto__) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_17703 = [null, null, null, null, null, null, null, null];
                statearr_17703[0] = state_machine__12048__auto__;
                statearr_17703[1] = 1;
                return statearr_17703;
              };
              var state_machine__12048__auto____1 = function(state_17682) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_17682);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e17704) {
                      if (e17704 instanceof Object) {
                        var ex__12051__auto__ = e17704;
                        var statearr_17705_17721 = state_17682;
                        statearr_17705_17721[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17682);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e17704;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17722 = state_17682;
                    state_17682 = G__17722;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_17682) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_17682);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto__);
        }();
        var state__12114__auto__ = function() {
          var statearr_17706 = f__12113__auto__.call(null);
          statearr_17706[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto__;
          return statearr_17706;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto__));
    return c__12112__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj17724 = {};
  return obj17724;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3027__auto__ = _;
    if (and__3027__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__3666__auto__ = _ == null ? null : _;
    return function() {
      var or__3039__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj17726 = {};
  return obj17726;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3027__auto__ = m;
    if (and__3027__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__3666__auto__ = m == null ? null : m;
    return function() {
      var or__3039__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3027__auto__ = m;
    if (and__3027__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__3666__auto__ = m == null ? null : m;
    return function() {
      var or__3039__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3027__auto__ = m;
    if (and__3027__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__3666__auto__ = m == null ? null : m;
    return function() {
      var or__3039__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t17948 !== "undefined") {
    } else {
      cljs.core.async.t17948 = function(cs, ch, mult, meta17949) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta17949 = meta17949;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t17948.cljs$lang$type = true;
      cljs.core.async.t17948.cljs$lang$ctorStr = "cljs.core.async/t17948";
      cljs.core.async.t17948.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
          return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t17948");
        };
      }(cs);
      cljs.core.async.t17948.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t17948.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t17948.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t17948.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t17948.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t17948.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t17948.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_17950) {
          var self__ = this;
          var _17950__$1 = this;
          return self__.meta17949;
        };
      }(cs);
      cljs.core.async.t17948.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_17950, meta17949__$1) {
          var self__ = this;
          var _17950__$1 = this;
          return new cljs.core.async.t17948(self__.cs, self__.ch, self__.mult, meta17949__$1);
        };
      }(cs);
      cljs.core.async.__GT_t17948 = function(cs) {
        return function __GT_t17948(cs__$1, ch__$1, mult__$1, meta17949) {
          return new cljs.core.async.t17948(cs__$1, ch__$1, mult__$1, meta17949);
        };
      }(cs);
    }
    return new cljs.core.async.t17948(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__12112__auto___18169 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___18169, cs, m, dchan, dctr, done) {
    return function() {
      var f__12113__auto__ = function() {
        var switch__12047__auto__ = function(c__12112__auto___18169, cs, m, dchan, dctr, done) {
          return function(state_18081) {
            var state_val_18082 = state_18081[1];
            if (state_val_18082 === 7) {
              var inst_18077 = state_18081[2];
              var state_18081__$1 = state_18081;
              var statearr_18083_18170 = state_18081__$1;
              statearr_18083_18170[2] = inst_18077;
              statearr_18083_18170[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18082 === 20) {
                var inst_17982 = state_18081[7];
                var inst_17992 = cljs.core.first.call(null, inst_17982);
                var inst_17993 = cljs.core.nth.call(null, inst_17992, 0, null);
                var inst_17994 = cljs.core.nth.call(null, inst_17992, 1, null);
                var state_18081__$1 = function() {
                  var statearr_18084 = state_18081;
                  statearr_18084[8] = inst_17993;
                  return statearr_18084;
                }();
                if (cljs.core.truth_(inst_17994)) {
                  var statearr_18085_18171 = state_18081__$1;
                  statearr_18085_18171[1] = 22;
                } else {
                  var statearr_18086_18172 = state_18081__$1;
                  statearr_18086_18172[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18082 === 27) {
                  var inst_18022 = state_18081[9];
                  var inst_18024 = state_18081[10];
                  var inst_17953 = state_18081[11];
                  var inst_18029 = state_18081[12];
                  var inst_18029__$1 = cljs.core._nth.call(null, inst_18022, inst_18024);
                  var inst_18030 = cljs.core.async.put_BANG_.call(null, inst_18029__$1, inst_17953, done);
                  var state_18081__$1 = function() {
                    var statearr_18087 = state_18081;
                    statearr_18087[12] = inst_18029__$1;
                    return statearr_18087;
                  }();
                  if (cljs.core.truth_(inst_18030)) {
                    var statearr_18088_18173 = state_18081__$1;
                    statearr_18088_18173[1] = 30;
                  } else {
                    var statearr_18089_18174 = state_18081__$1;
                    statearr_18089_18174[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18082 === 1) {
                    var state_18081__$1 = state_18081;
                    var statearr_18090_18175 = state_18081__$1;
                    statearr_18090_18175[2] = null;
                    statearr_18090_18175[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18082 === 24) {
                      var inst_17982 = state_18081[7];
                      var inst_17999 = state_18081[2];
                      var inst_18000 = cljs.core.next.call(null, inst_17982);
                      var inst_17962 = inst_18000;
                      var inst_17963 = null;
                      var inst_17964 = 0;
                      var inst_17965 = 0;
                      var state_18081__$1 = function() {
                        var statearr_18091 = state_18081;
                        statearr_18091[13] = inst_17963;
                        statearr_18091[14] = inst_17999;
                        statearr_18091[15] = inst_17965;
                        statearr_18091[16] = inst_17964;
                        statearr_18091[17] = inst_17962;
                        return statearr_18091;
                      }();
                      var statearr_18092_18176 = state_18081__$1;
                      statearr_18092_18176[2] = null;
                      statearr_18092_18176[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18082 === 39) {
                        var state_18081__$1 = state_18081;
                        var statearr_18096_18177 = state_18081__$1;
                        statearr_18096_18177[2] = null;
                        statearr_18096_18177[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18082 === 4) {
                          var inst_17953 = state_18081[11];
                          var inst_17953__$1 = state_18081[2];
                          var inst_17954 = inst_17953__$1 == null;
                          var state_18081__$1 = function() {
                            var statearr_18097 = state_18081;
                            statearr_18097[11] = inst_17953__$1;
                            return statearr_18097;
                          }();
                          if (cljs.core.truth_(inst_17954)) {
                            var statearr_18098_18178 = state_18081__$1;
                            statearr_18098_18178[1] = 5;
                          } else {
                            var statearr_18099_18179 = state_18081__$1;
                            statearr_18099_18179[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18082 === 15) {
                            var inst_17963 = state_18081[13];
                            var inst_17965 = state_18081[15];
                            var inst_17964 = state_18081[16];
                            var inst_17962 = state_18081[17];
                            var inst_17978 = state_18081[2];
                            var inst_17979 = inst_17965 + 1;
                            var tmp18093 = inst_17963;
                            var tmp18094 = inst_17964;
                            var tmp18095 = inst_17962;
                            var inst_17962__$1 = tmp18095;
                            var inst_17963__$1 = tmp18093;
                            var inst_17964__$1 = tmp18094;
                            var inst_17965__$1 = inst_17979;
                            var state_18081__$1 = function() {
                              var statearr_18100 = state_18081;
                              statearr_18100[13] = inst_17963__$1;
                              statearr_18100[18] = inst_17978;
                              statearr_18100[15] = inst_17965__$1;
                              statearr_18100[16] = inst_17964__$1;
                              statearr_18100[17] = inst_17962__$1;
                              return statearr_18100;
                            }();
                            var statearr_18101_18180 = state_18081__$1;
                            statearr_18101_18180[2] = null;
                            statearr_18101_18180[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18082 === 21) {
                              var inst_18003 = state_18081[2];
                              var state_18081__$1 = state_18081;
                              var statearr_18105_18181 = state_18081__$1;
                              statearr_18105_18181[2] = inst_18003;
                              statearr_18105_18181[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18082 === 31) {
                                var inst_18029 = state_18081[12];
                                var inst_18033 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_18034 = cljs.core.async.untap_STAR_.call(null, m, inst_18029);
                                var state_18081__$1 = function() {
                                  var statearr_18106 = state_18081;
                                  statearr_18106[19] = inst_18033;
                                  return statearr_18106;
                                }();
                                var statearr_18107_18182 = state_18081__$1;
                                statearr_18107_18182[2] = inst_18034;
                                statearr_18107_18182[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18082 === 32) {
                                  var inst_18022 = state_18081[9];
                                  var inst_18023 = state_18081[20];
                                  var inst_18024 = state_18081[10];
                                  var inst_18021 = state_18081[21];
                                  var inst_18036 = state_18081[2];
                                  var inst_18037 = inst_18024 + 1;
                                  var tmp18102 = inst_18022;
                                  var tmp18103 = inst_18023;
                                  var tmp18104 = inst_18021;
                                  var inst_18021__$1 = tmp18104;
                                  var inst_18022__$1 = tmp18102;
                                  var inst_18023__$1 = tmp18103;
                                  var inst_18024__$1 = inst_18037;
                                  var state_18081__$1 = function() {
                                    var statearr_18108 = state_18081;
                                    statearr_18108[9] = inst_18022__$1;
                                    statearr_18108[20] = inst_18023__$1;
                                    statearr_18108[10] = inst_18024__$1;
                                    statearr_18108[22] = inst_18036;
                                    statearr_18108[21] = inst_18021__$1;
                                    return statearr_18108;
                                  }();
                                  var statearr_18109_18183 = state_18081__$1;
                                  statearr_18109_18183[2] = null;
                                  statearr_18109_18183[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18082 === 40) {
                                    var inst_18049 = state_18081[23];
                                    var inst_18053 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_18054 = cljs.core.async.untap_STAR_.call(null, m, inst_18049);
                                    var state_18081__$1 = function() {
                                      var statearr_18110 = state_18081;
                                      statearr_18110[24] = inst_18053;
                                      return statearr_18110;
                                    }();
                                    var statearr_18111_18184 = state_18081__$1;
                                    statearr_18111_18184[2] = inst_18054;
                                    statearr_18111_18184[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18082 === 33) {
                                      var inst_18040 = state_18081[25];
                                      var inst_18042 = cljs.core.chunked_seq_QMARK_.call(null, inst_18040);
                                      var state_18081__$1 = state_18081;
                                      if (inst_18042) {
                                        var statearr_18112_18185 = state_18081__$1;
                                        statearr_18112_18185[1] = 36;
                                      } else {
                                        var statearr_18113_18186 = state_18081__$1;
                                        statearr_18113_18186[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18082 === 13) {
                                        var inst_17972 = state_18081[26];
                                        var inst_17975 = cljs.core.async.close_BANG_.call(null, inst_17972);
                                        var state_18081__$1 = state_18081;
                                        var statearr_18114_18187 = state_18081__$1;
                                        statearr_18114_18187[2] = inst_17975;
                                        statearr_18114_18187[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18082 === 22) {
                                          var inst_17993 = state_18081[8];
                                          var inst_17996 = cljs.core.async.close_BANG_.call(null, inst_17993);
                                          var state_18081__$1 = state_18081;
                                          var statearr_18115_18188 = state_18081__$1;
                                          statearr_18115_18188[2] = inst_17996;
                                          statearr_18115_18188[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18082 === 36) {
                                            var inst_18040 = state_18081[25];
                                            var inst_18044 = cljs.core.chunk_first.call(null, inst_18040);
                                            var inst_18045 = cljs.core.chunk_rest.call(null, inst_18040);
                                            var inst_18046 = cljs.core.count.call(null, inst_18044);
                                            var inst_18021 = inst_18045;
                                            var inst_18022 = inst_18044;
                                            var inst_18023 = inst_18046;
                                            var inst_18024 = 0;
                                            var state_18081__$1 = function() {
                                              var statearr_18116 = state_18081;
                                              statearr_18116[9] = inst_18022;
                                              statearr_18116[20] = inst_18023;
                                              statearr_18116[10] = inst_18024;
                                              statearr_18116[21] = inst_18021;
                                              return statearr_18116;
                                            }();
                                            var statearr_18117_18189 = state_18081__$1;
                                            statearr_18117_18189[2] = null;
                                            statearr_18117_18189[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18082 === 41) {
                                              var inst_18040 = state_18081[25];
                                              var inst_18056 = state_18081[2];
                                              var inst_18057 = cljs.core.next.call(null, inst_18040);
                                              var inst_18021 = inst_18057;
                                              var inst_18022 = null;
                                              var inst_18023 = 0;
                                              var inst_18024 = 0;
                                              var state_18081__$1 = function() {
                                                var statearr_18118 = state_18081;
                                                statearr_18118[9] = inst_18022;
                                                statearr_18118[20] = inst_18023;
                                                statearr_18118[10] = inst_18024;
                                                statearr_18118[27] = inst_18056;
                                                statearr_18118[21] = inst_18021;
                                                return statearr_18118;
                                              }();
                                              var statearr_18119_18190 = state_18081__$1;
                                              statearr_18119_18190[2] = null;
                                              statearr_18119_18190[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18082 === 43) {
                                                var state_18081__$1 = state_18081;
                                                var statearr_18120_18191 = state_18081__$1;
                                                statearr_18120_18191[2] = null;
                                                statearr_18120_18191[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18082 === 29) {
                                                  var inst_18065 = state_18081[2];
                                                  var state_18081__$1 = state_18081;
                                                  var statearr_18121_18192 = state_18081__$1;
                                                  statearr_18121_18192[2] = inst_18065;
                                                  statearr_18121_18192[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18082 === 44) {
                                                    var inst_18074 = state_18081[2];
                                                    var state_18081__$1 = function() {
                                                      var statearr_18122 = state_18081;
                                                      statearr_18122[28] = inst_18074;
                                                      return statearr_18122;
                                                    }();
                                                    var statearr_18123_18193 = state_18081__$1;
                                                    statearr_18123_18193[2] = null;
                                                    statearr_18123_18193[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18082 === 6) {
                                                      var inst_18013 = state_18081[29];
                                                      var inst_18012 = cljs.core.deref.call(null, cs);
                                                      var inst_18013__$1 = cljs.core.keys.call(null, inst_18012);
                                                      var inst_18014 = cljs.core.count.call(null, inst_18013__$1);
                                                      var inst_18015 = cljs.core.reset_BANG_.call(null, dctr, inst_18014);
                                                      var inst_18020 = cljs.core.seq.call(null, inst_18013__$1);
                                                      var inst_18021 = inst_18020;
                                                      var inst_18022 = null;
                                                      var inst_18023 = 0;
                                                      var inst_18024 = 0;
                                                      var state_18081__$1 = function() {
                                                        var statearr_18124 = state_18081;
                                                        statearr_18124[29] = inst_18013__$1;
                                                        statearr_18124[9] = inst_18022;
                                                        statearr_18124[30] = inst_18015;
                                                        statearr_18124[20] = inst_18023;
                                                        statearr_18124[10] = inst_18024;
                                                        statearr_18124[21] = inst_18021;
                                                        return statearr_18124;
                                                      }();
                                                      var statearr_18125_18194 = state_18081__$1;
                                                      statearr_18125_18194[2] = null;
                                                      statearr_18125_18194[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18082 === 28) {
                                                        var inst_18040 = state_18081[25];
                                                        var inst_18021 = state_18081[21];
                                                        var inst_18040__$1 = cljs.core.seq.call(null, inst_18021);
                                                        var state_18081__$1 = function() {
                                                          var statearr_18126 = state_18081;
                                                          statearr_18126[25] = inst_18040__$1;
                                                          return statearr_18126;
                                                        }();
                                                        if (inst_18040__$1) {
                                                          var statearr_18127_18195 = state_18081__$1;
                                                          statearr_18127_18195[1] = 33;
                                                        } else {
                                                          var statearr_18128_18196 = state_18081__$1;
                                                          statearr_18128_18196[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18082 === 25) {
                                                          var inst_18023 = state_18081[20];
                                                          var inst_18024 = state_18081[10];
                                                          var inst_18026 = inst_18024 < inst_18023;
                                                          var inst_18027 = inst_18026;
                                                          var state_18081__$1 = state_18081;
                                                          if (cljs.core.truth_(inst_18027)) {
                                                            var statearr_18129_18197 = state_18081__$1;
                                                            statearr_18129_18197[1] = 27;
                                                          } else {
                                                            var statearr_18130_18198 = state_18081__$1;
                                                            statearr_18130_18198[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18082 === 34) {
                                                            var state_18081__$1 = state_18081;
                                                            var statearr_18131_18199 = state_18081__$1;
                                                            statearr_18131_18199[2] = null;
                                                            statearr_18131_18199[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18082 === 17) {
                                                              var state_18081__$1 = state_18081;
                                                              var statearr_18132_18200 = state_18081__$1;
                                                              statearr_18132_18200[2] = null;
                                                              statearr_18132_18200[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18082 === 3) {
                                                                var inst_18079 = state_18081[2];
                                                                var state_18081__$1 = state_18081;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18081__$1, inst_18079);
                                                              } else {
                                                                if (state_val_18082 === 12) {
                                                                  var inst_18008 = state_18081[2];
                                                                  var state_18081__$1 = state_18081;
                                                                  var statearr_18133_18201 = state_18081__$1;
                                                                  statearr_18133_18201[2] = inst_18008;
                                                                  statearr_18133_18201[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_18082 === 2) {
                                                                    var state_18081__$1 = state_18081;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18081__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_18082 === 23) {
                                                                      var state_18081__$1 = state_18081;
                                                                      var statearr_18134_18202 = state_18081__$1;
                                                                      statearr_18134_18202[2] = null;
                                                                      statearr_18134_18202[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_18082 === 35) {
                                                                        var inst_18063 = state_18081[2];
                                                                        var state_18081__$1 = state_18081;
                                                                        var statearr_18135_18203 = state_18081__$1;
                                                                        statearr_18135_18203[2] = inst_18063;
                                                                        statearr_18135_18203[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_18082 === 19) {
                                                                          var inst_17982 = state_18081[7];
                                                                          var inst_17986 = cljs.core.chunk_first.call(null, inst_17982);
                                                                          var inst_17987 = cljs.core.chunk_rest.call(null, inst_17982);
                                                                          var inst_17988 = cljs.core.count.call(null, inst_17986);
                                                                          var inst_17962 = inst_17987;
                                                                          var inst_17963 = inst_17986;
                                                                          var inst_17964 = inst_17988;
                                                                          var inst_17965 = 0;
                                                                          var state_18081__$1 = function() {
                                                                            var statearr_18136 = state_18081;
                                                                            statearr_18136[13] = inst_17963;
                                                                            statearr_18136[15] = inst_17965;
                                                                            statearr_18136[16] = inst_17964;
                                                                            statearr_18136[17] = inst_17962;
                                                                            return statearr_18136;
                                                                          }();
                                                                          var statearr_18137_18204 = state_18081__$1;
                                                                          statearr_18137_18204[2] = null;
                                                                          statearr_18137_18204[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_18082 === 11) {
                                                                            var inst_17982 = state_18081[7];
                                                                            var inst_17962 = state_18081[17];
                                                                            var inst_17982__$1 = cljs.core.seq.call(null, inst_17962);
                                                                            var state_18081__$1 = function() {
                                                                              var statearr_18138 = state_18081;
                                                                              statearr_18138[7] = inst_17982__$1;
                                                                              return statearr_18138;
                                                                            }();
                                                                            if (inst_17982__$1) {
                                                                              var statearr_18139_18205 = state_18081__$1;
                                                                              statearr_18139_18205[1] = 16;
                                                                            } else {
                                                                              var statearr_18140_18206 = state_18081__$1;
                                                                              statearr_18140_18206[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_18082 === 9) {
                                                                              var inst_18010 = state_18081[2];
                                                                              var state_18081__$1 = state_18081;
                                                                              var statearr_18141_18207 = state_18081__$1;
                                                                              statearr_18141_18207[2] = inst_18010;
                                                                              statearr_18141_18207[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_18082 === 5) {
                                                                                var inst_17960 = cljs.core.deref.call(null, cs);
                                                                                var inst_17961 = cljs.core.seq.call(null, inst_17960);
                                                                                var inst_17962 = inst_17961;
                                                                                var inst_17963 = null;
                                                                                var inst_17964 = 0;
                                                                                var inst_17965 = 0;
                                                                                var state_18081__$1 = function() {
                                                                                  var statearr_18142 = state_18081;
                                                                                  statearr_18142[13] = inst_17963;
                                                                                  statearr_18142[15] = inst_17965;
                                                                                  statearr_18142[16] = inst_17964;
                                                                                  statearr_18142[17] = inst_17962;
                                                                                  return statearr_18142;
                                                                                }();
                                                                                var statearr_18143_18208 = state_18081__$1;
                                                                                statearr_18143_18208[2] = null;
                                                                                statearr_18143_18208[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_18082 === 14) {
                                                                                  var state_18081__$1 = state_18081;
                                                                                  var statearr_18144_18209 = state_18081__$1;
                                                                                  statearr_18144_18209[2] = null;
                                                                                  statearr_18144_18209[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_18082 === 45) {
                                                                                    var inst_18071 = state_18081[2];
                                                                                    var state_18081__$1 = state_18081;
                                                                                    var statearr_18145_18210 = state_18081__$1;
                                                                                    statearr_18145_18210[2] = inst_18071;
                                                                                    statearr_18145_18210[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_18082 === 26) {
                                                                                      var inst_18013 = state_18081[29];
                                                                                      var inst_18067 = state_18081[2];
                                                                                      var inst_18068 = cljs.core.seq.call(null, inst_18013);
                                                                                      var state_18081__$1 = function() {
                                                                                        var statearr_18146 = state_18081;
                                                                                        statearr_18146[31] = inst_18067;
                                                                                        return statearr_18146;
                                                                                      }();
                                                                                      if (inst_18068) {
                                                                                        var statearr_18147_18211 = state_18081__$1;
                                                                                        statearr_18147_18211[1] = 42;
                                                                                      } else {
                                                                                        var statearr_18148_18212 = state_18081__$1;
                                                                                        statearr_18148_18212[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_18082 === 16) {
                                                                                        var inst_17982 = state_18081[7];
                                                                                        var inst_17984 = cljs.core.chunked_seq_QMARK_.call(null, inst_17982);
                                                                                        var state_18081__$1 = state_18081;
                                                                                        if (inst_17984) {
                                                                                          var statearr_18149_18213 = state_18081__$1;
                                                                                          statearr_18149_18213[1] = 19;
                                                                                        } else {
                                                                                          var statearr_18150_18214 = state_18081__$1;
                                                                                          statearr_18150_18214[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_18082 === 38) {
                                                                                          var inst_18060 = state_18081[2];
                                                                                          var state_18081__$1 = state_18081;
                                                                                          var statearr_18151_18215 = state_18081__$1;
                                                                                          statearr_18151_18215[2] = inst_18060;
                                                                                          statearr_18151_18215[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_18082 === 30) {
                                                                                            var state_18081__$1 = state_18081;
                                                                                            var statearr_18152_18216 = state_18081__$1;
                                                                                            statearr_18152_18216[2] = null;
                                                                                            statearr_18152_18216[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_18082 === 10) {
                                                                                              var inst_17963 = state_18081[13];
                                                                                              var inst_17965 = state_18081[15];
                                                                                              var inst_17971 = cljs.core._nth.call(null, inst_17963, inst_17965);
                                                                                              var inst_17972 = cljs.core.nth.call(null, inst_17971, 0, null);
                                                                                              var inst_17973 = cljs.core.nth.call(null, inst_17971, 1, null);
                                                                                              var state_18081__$1 = function() {
                                                                                                var statearr_18153 = state_18081;
                                                                                                statearr_18153[26] = inst_17972;
                                                                                                return statearr_18153;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_17973)) {
                                                                                                var statearr_18154_18217 = state_18081__$1;
                                                                                                statearr_18154_18217[1] = 13;
                                                                                              } else {
                                                                                                var statearr_18155_18218 = state_18081__$1;
                                                                                                statearr_18155_18218[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_18082 === 18) {
                                                                                                var inst_18006 = state_18081[2];
                                                                                                var state_18081__$1 = state_18081;
                                                                                                var statearr_18156_18219 = state_18081__$1;
                                                                                                statearr_18156_18219[2] = inst_18006;
                                                                                                statearr_18156_18219[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_18082 === 42) {
                                                                                                  var state_18081__$1 = state_18081;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18081__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_18082 === 37) {
                                                                                                    var inst_18040 = state_18081[25];
                                                                                                    var inst_17953 = state_18081[11];
                                                                                                    var inst_18049 = state_18081[23];
                                                                                                    var inst_18049__$1 = cljs.core.first.call(null, inst_18040);
                                                                                                    var inst_18050 = cljs.core.async.put_BANG_.call(null, inst_18049__$1, inst_17953, done);
                                                                                                    var state_18081__$1 = function() {
                                                                                                      var statearr_18157 = state_18081;
                                                                                                      statearr_18157[23] = inst_18049__$1;
                                                                                                      return statearr_18157;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_18050)) {
                                                                                                      var statearr_18158_18220 = state_18081__$1;
                                                                                                      statearr_18158_18220[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_18159_18221 = state_18081__$1;
                                                                                                      statearr_18159_18221[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_18082 === 8) {
                                                                                                      var inst_17965 = state_18081[15];
                                                                                                      var inst_17964 = state_18081[16];
                                                                                                      var inst_17967 = inst_17965 < inst_17964;
                                                                                                      var inst_17968 = inst_17967;
                                                                                                      var state_18081__$1 = state_18081;
                                                                                                      if (cljs.core.truth_(inst_17968)) {
                                                                                                        var statearr_18160_18222 = state_18081__$1;
                                                                                                        statearr_18160_18222[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_18161_18223 = state_18081__$1;
                                                                                                        statearr_18161_18223[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12112__auto___18169, cs, m, dchan, dctr, done);
        return function(switch__12047__auto__, c__12112__auto___18169, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__12048__auto__ = null;
            var state_machine__12048__auto____0 = function() {
              var statearr_18165 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18165[0] = state_machine__12048__auto__;
              statearr_18165[1] = 1;
              return statearr_18165;
            };
            var state_machine__12048__auto____1 = function(state_18081) {
              while (true) {
                var ret_value__12049__auto__ = function() {
                  try {
                    while (true) {
                      var result__12050__auto__ = switch__12047__auto__.call(null, state_18081);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12050__auto__;
                      }
                      break;
                    }
                  } catch (e18166) {
                    if (e18166 instanceof Object) {
                      var ex__12051__auto__ = e18166;
                      var statearr_18167_18224 = state_18081;
                      statearr_18167_18224[5] = ex__12051__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18081);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e18166;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18225 = state_18081;
                  state_18081 = G__18225;
                  continue;
                } else {
                  return ret_value__12049__auto__;
                }
                break;
              }
            };
            state_machine__12048__auto__ = function(state_18081) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12048__auto____0.call(this);
                case 1:
                  return state_machine__12048__auto____1.call(this, state_18081);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
            return state_machine__12048__auto__;
          }();
        }(switch__12047__auto__, c__12112__auto___18169, cs, m, dchan, dctr, done);
      }();
      var state__12114__auto__ = function() {
        var statearr_18168 = f__12113__auto__.call(null);
        statearr_18168[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___18169;
        return statearr_18168;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
    };
  }(c__12112__auto___18169, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj18227 = {};
  return obj18227;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3027__auto__ = m;
    if (and__3027__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__3666__auto__ = m == null ? null : m;
    return function() {
      var or__3039__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3027__auto__ = m;
    if (and__3027__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__3666__auto__ = m == null ? null : m;
    return function() {
      var or__3039__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3027__auto__ = m;
    if (and__3027__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__3666__auto__ = m == null ? null : m;
    return function() {
      var or__3039__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3027__auto__ = m;
    if (and__3027__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__3666__auto__ = m == null ? null : m;
    return function() {
      var or__3039__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3027__auto__ = m;
    if (and__3027__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__3666__auto__ = m == null ? null : m;
    return function() {
      var or__3039__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t18347 !== "undefined") {
    } else {
      cljs.core.async.t18347 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta18348) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta18348 = meta18348;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t18347.cljs$lang$type = true;
      cljs.core.async.t18347.cljs$lang$ctorStr = "cljs.core.async/t18347";
      cljs.core.async.t18347.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
          return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t18347");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18347.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t18347.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18347.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18347.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18347.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18347.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18347.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t18347.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18347.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18349) {
          var self__ = this;
          var _18349__$1 = this;
          return self__.meta18348;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18347.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18349, meta18348__$1) {
          var self__ = this;
          var _18349__$1 = this;
          return new cljs.core.async.t18347(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta18348__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t18347 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t18347(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18348) {
          return new cljs.core.async.t18347(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18348);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t18347(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__12112__auto___18466 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___18466, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__12113__auto__ = function() {
        var switch__12047__auto__ = function(c__12112__auto___18466, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_18419) {
            var state_val_18420 = state_18419[1];
            if (state_val_18420 === 7) {
              var inst_18363 = state_18419[7];
              var inst_18368 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18363);
              var state_18419__$1 = state_18419;
              var statearr_18421_18467 = state_18419__$1;
              statearr_18421_18467[2] = inst_18368;
              statearr_18421_18467[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18420 === 20) {
                var inst_18378 = state_18419[8];
                var state_18419__$1 = state_18419;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18419__$1, 23, out, inst_18378);
              } else {
                if (state_val_18420 === 1) {
                  var inst_18353 = state_18419[9];
                  var inst_18353__$1 = calc_state.call(null);
                  var inst_18354 = cljs.core.seq_QMARK_.call(null, inst_18353__$1);
                  var state_18419__$1 = function() {
                    var statearr_18422 = state_18419;
                    statearr_18422[9] = inst_18353__$1;
                    return statearr_18422;
                  }();
                  if (inst_18354) {
                    var statearr_18423_18468 = state_18419__$1;
                    statearr_18423_18468[1] = 2;
                  } else {
                    var statearr_18424_18469 = state_18419__$1;
                    statearr_18424_18469[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18420 === 24) {
                    var inst_18371 = state_18419[10];
                    var inst_18363 = inst_18371;
                    var state_18419__$1 = function() {
                      var statearr_18425 = state_18419;
                      statearr_18425[7] = inst_18363;
                      return statearr_18425;
                    }();
                    var statearr_18426_18470 = state_18419__$1;
                    statearr_18426_18470[2] = null;
                    statearr_18426_18470[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18420 === 4) {
                      var inst_18353 = state_18419[9];
                      var inst_18359 = state_18419[2];
                      var inst_18360 = cljs.core.get.call(null, inst_18359, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_18361 = cljs.core.get.call(null, inst_18359, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_18362 = cljs.core.get.call(null, inst_18359, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_18363 = inst_18353;
                      var state_18419__$1 = function() {
                        var statearr_18427 = state_18419;
                        statearr_18427[11] = inst_18361;
                        statearr_18427[7] = inst_18363;
                        statearr_18427[12] = inst_18362;
                        statearr_18427[13] = inst_18360;
                        return statearr_18427;
                      }();
                      var statearr_18428_18471 = state_18419__$1;
                      statearr_18428_18471[2] = null;
                      statearr_18428_18471[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18420 === 15) {
                        var state_18419__$1 = state_18419;
                        var statearr_18429_18472 = state_18419__$1;
                        statearr_18429_18472[2] = null;
                        statearr_18429_18472[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18420 === 21) {
                          var inst_18371 = state_18419[10];
                          var inst_18363 = inst_18371;
                          var state_18419__$1 = function() {
                            var statearr_18430 = state_18419;
                            statearr_18430[7] = inst_18363;
                            return statearr_18430;
                          }();
                          var statearr_18431_18473 = state_18419__$1;
                          statearr_18431_18473[2] = null;
                          statearr_18431_18473[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18420 === 13) {
                            var inst_18415 = state_18419[2];
                            var state_18419__$1 = state_18419;
                            var statearr_18432_18474 = state_18419__$1;
                            statearr_18432_18474[2] = inst_18415;
                            statearr_18432_18474[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18420 === 22) {
                              var inst_18413 = state_18419[2];
                              var state_18419__$1 = state_18419;
                              var statearr_18433_18475 = state_18419__$1;
                              statearr_18433_18475[2] = inst_18413;
                              statearr_18433_18475[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18420 === 6) {
                                var inst_18417 = state_18419[2];
                                var state_18419__$1 = state_18419;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18419__$1, inst_18417);
                              } else {
                                if (state_val_18420 === 25) {
                                  var state_18419__$1 = state_18419;
                                  var statearr_18434_18476 = state_18419__$1;
                                  statearr_18434_18476[2] = null;
                                  statearr_18434_18476[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18420 === 17) {
                                    var inst_18393 = state_18419[14];
                                    var state_18419__$1 = state_18419;
                                    var statearr_18435_18477 = state_18419__$1;
                                    statearr_18435_18477[2] = inst_18393;
                                    statearr_18435_18477[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18420 === 3) {
                                      var inst_18353 = state_18419[9];
                                      var state_18419__$1 = state_18419;
                                      var statearr_18436_18478 = state_18419__$1;
                                      statearr_18436_18478[2] = inst_18353;
                                      statearr_18436_18478[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18420 === 12) {
                                        var inst_18393 = state_18419[14];
                                        var inst_18374 = state_18419[15];
                                        var inst_18379 = state_18419[16];
                                        var inst_18393__$1 = inst_18374.call(null, inst_18379);
                                        var state_18419__$1 = function() {
                                          var statearr_18437 = state_18419;
                                          statearr_18437[14] = inst_18393__$1;
                                          return statearr_18437;
                                        }();
                                        if (cljs.core.truth_(inst_18393__$1)) {
                                          var statearr_18438_18479 = state_18419__$1;
                                          statearr_18438_18479[1] = 17;
                                        } else {
                                          var statearr_18439_18480 = state_18419__$1;
                                          statearr_18439_18480[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18420 === 2) {
                                          var inst_18353 = state_18419[9];
                                          var inst_18356 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18353);
                                          var state_18419__$1 = state_18419;
                                          var statearr_18440_18481 = state_18419__$1;
                                          statearr_18440_18481[2] = inst_18356;
                                          statearr_18440_18481[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18420 === 23) {
                                            var inst_18404 = state_18419[2];
                                            var state_18419__$1 = state_18419;
                                            if (cljs.core.truth_(inst_18404)) {
                                              var statearr_18441_18482 = state_18419__$1;
                                              statearr_18441_18482[1] = 24;
                                            } else {
                                              var statearr_18442_18483 = state_18419__$1;
                                              statearr_18442_18483[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18420 === 19) {
                                              var inst_18401 = state_18419[2];
                                              var state_18419__$1 = state_18419;
                                              if (cljs.core.truth_(inst_18401)) {
                                                var statearr_18443_18484 = state_18419__$1;
                                                statearr_18443_18484[1] = 20;
                                              } else {
                                                var statearr_18444_18485 = state_18419__$1;
                                                statearr_18444_18485[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18420 === 11) {
                                                var inst_18378 = state_18419[8];
                                                var inst_18384 = inst_18378 == null;
                                                var state_18419__$1 = state_18419;
                                                if (cljs.core.truth_(inst_18384)) {
                                                  var statearr_18445_18486 = state_18419__$1;
                                                  statearr_18445_18486[1] = 14;
                                                } else {
                                                  var statearr_18446_18487 = state_18419__$1;
                                                  statearr_18446_18487[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18420 === 9) {
                                                  var inst_18371 = state_18419[10];
                                                  var inst_18371__$1 = state_18419[2];
                                                  var inst_18372 = cljs.core.get.call(null, inst_18371__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_18373 = cljs.core.get.call(null, inst_18371__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_18374 = cljs.core.get.call(null, inst_18371__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_18419__$1 = function() {
                                                    var statearr_18447 = state_18419;
                                                    statearr_18447[17] = inst_18373;
                                                    statearr_18447[10] = inst_18371__$1;
                                                    statearr_18447[15] = inst_18374;
                                                    return statearr_18447;
                                                  }();
                                                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_18419__$1, 10, inst_18372);
                                                } else {
                                                  if (state_val_18420 === 5) {
                                                    var inst_18363 = state_18419[7];
                                                    var inst_18366 = cljs.core.seq_QMARK_.call(null, inst_18363);
                                                    var state_18419__$1 = state_18419;
                                                    if (inst_18366) {
                                                      var statearr_18448_18488 = state_18419__$1;
                                                      statearr_18448_18488[1] = 7;
                                                    } else {
                                                      var statearr_18449_18489 = state_18419__$1;
                                                      statearr_18449_18489[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18420 === 14) {
                                                      var inst_18379 = state_18419[16];
                                                      var inst_18386 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_18379);
                                                      var state_18419__$1 = state_18419;
                                                      var statearr_18450_18490 = state_18419__$1;
                                                      statearr_18450_18490[2] = inst_18386;
                                                      statearr_18450_18490[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18420 === 26) {
                                                        var inst_18409 = state_18419[2];
                                                        var state_18419__$1 = state_18419;
                                                        var statearr_18451_18491 = state_18419__$1;
                                                        statearr_18451_18491[2] = inst_18409;
                                                        statearr_18451_18491[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18420 === 16) {
                                                          var inst_18389 = state_18419[2];
                                                          var inst_18390 = calc_state.call(null);
                                                          var inst_18363 = inst_18390;
                                                          var state_18419__$1 = function() {
                                                            var statearr_18452 = state_18419;
                                                            statearr_18452[7] = inst_18363;
                                                            statearr_18452[18] = inst_18389;
                                                            return statearr_18452;
                                                          }();
                                                          var statearr_18453_18492 = state_18419__$1;
                                                          statearr_18453_18492[2] = null;
                                                          statearr_18453_18492[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18420 === 10) {
                                                            var inst_18379 = state_18419[16];
                                                            var inst_18378 = state_18419[8];
                                                            var inst_18377 = state_18419[2];
                                                            var inst_18378__$1 = cljs.core.nth.call(null, inst_18377, 0, null);
                                                            var inst_18379__$1 = cljs.core.nth.call(null, inst_18377, 1, null);
                                                            var inst_18380 = inst_18378__$1 == null;
                                                            var inst_18381 = cljs.core._EQ_.call(null, inst_18379__$1, change);
                                                            var inst_18382 = inst_18380 || inst_18381;
                                                            var state_18419__$1 = function() {
                                                              var statearr_18454 = state_18419;
                                                              statearr_18454[16] = inst_18379__$1;
                                                              statearr_18454[8] = inst_18378__$1;
                                                              return statearr_18454;
                                                            }();
                                                            if (cljs.core.truth_(inst_18382)) {
                                                              var statearr_18455_18493 = state_18419__$1;
                                                              statearr_18455_18493[1] = 11;
                                                            } else {
                                                              var statearr_18456_18494 = state_18419__$1;
                                                              statearr_18456_18494[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18420 === 18) {
                                                              var inst_18373 = state_18419[17];
                                                              var inst_18374 = state_18419[15];
                                                              var inst_18379 = state_18419[16];
                                                              var inst_18396 = cljs.core.empty_QMARK_.call(null, inst_18374);
                                                              var inst_18397 = inst_18373.call(null, inst_18379);
                                                              var inst_18398 = cljs.core.not.call(null, inst_18397);
                                                              var inst_18399 = inst_18396 && inst_18398;
                                                              var state_18419__$1 = state_18419;
                                                              var statearr_18457_18495 = state_18419__$1;
                                                              statearr_18457_18495[2] = inst_18399;
                                                              statearr_18457_18495[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18420 === 8) {
                                                                var inst_18363 = state_18419[7];
                                                                var state_18419__$1 = state_18419;
                                                                var statearr_18458_18496 = state_18419__$1;
                                                                statearr_18458_18496[2] = inst_18363;
                                                                statearr_18458_18496[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12112__auto___18466, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__12047__auto__, c__12112__auto___18466, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__12048__auto__ = null;
            var state_machine__12048__auto____0 = function() {
              var statearr_18462 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18462[0] = state_machine__12048__auto__;
              statearr_18462[1] = 1;
              return statearr_18462;
            };
            var state_machine__12048__auto____1 = function(state_18419) {
              while (true) {
                var ret_value__12049__auto__ = function() {
                  try {
                    while (true) {
                      var result__12050__auto__ = switch__12047__auto__.call(null, state_18419);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12050__auto__;
                      }
                      break;
                    }
                  } catch (e18463) {
                    if (e18463 instanceof Object) {
                      var ex__12051__auto__ = e18463;
                      var statearr_18464_18497 = state_18419;
                      statearr_18464_18497[5] = ex__12051__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18419);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e18463;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18498 = state_18419;
                  state_18419 = G__18498;
                  continue;
                } else {
                  return ret_value__12049__auto__;
                }
                break;
              }
            };
            state_machine__12048__auto__ = function(state_18419) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12048__auto____0.call(this);
                case 1:
                  return state_machine__12048__auto____1.call(this, state_18419);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
            return state_machine__12048__auto__;
          }();
        }(switch__12047__auto__, c__12112__auto___18466, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__12114__auto__ = function() {
        var statearr_18465 = f__12113__auto__.call(null);
        statearr_18465[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___18466;
        return statearr_18465;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
    };
  }(c__12112__auto___18466, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj18500 = {};
  return obj18500;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3027__auto__ = p;
    if (and__3027__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__3666__auto__ = p == null ? null : p;
    return function() {
      var or__3039__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3027__auto__ = p;
    if (and__3027__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__3666__auto__ = p == null ? null : p;
    return function() {
      var or__3039__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3027__auto__ = p;
      if (and__3027__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__3666__auto__ = p == null ? null : p;
      return function() {
        var or__3039__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3027__auto__ = p;
      if (and__3027__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3027__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__3666__auto__ = p == null ? null : p;
      return function() {
        var or__3039__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3666__auto__)];
        if (or__3039__auto__) {
          return or__3039__auto__;
        } else {
          var or__3039__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3039__auto____$1) {
            return or__3039__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3039__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3039__auto__, mults) {
            return function(p1__18501_SHARP_) {
              if (cljs.core.truth_(p1__18501_SHARP_.call(null, topic))) {
                return p1__18501_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__18501_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3039__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t18624 !== "undefined") {
      } else {
        cljs.core.async.t18624 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta18625) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta18625 = meta18625;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t18624.cljs$lang$type = true;
        cljs.core.async.t18624.cljs$lang$ctorStr = "cljs.core.async/t18624";
        cljs.core.async.t18624.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
            return cljs.core._write.call(null, writer__3607__auto__, "cljs.core.async/t18624");
          };
        }(mults, ensure_mult);
        cljs.core.async.t18624.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t18624.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18624.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t18624.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18624.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18624.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t18624.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18624.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_18626) {
            var self__ = this;
            var _18626__$1 = this;
            return self__.meta18625;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18624.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_18626, meta18625__$1) {
            var self__ = this;
            var _18626__$1 = this;
            return new cljs.core.async.t18624(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta18625__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t18624 = function(mults, ensure_mult) {
          return function __GT_t18624(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18625) {
            return new cljs.core.async.t18624(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18625);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t18624(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__12112__auto___18746 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___18746, mults, ensure_mult, p) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___18746, mults, ensure_mult, p) {
            return function(state_18698) {
              var state_val_18699 = state_18698[1];
              if (state_val_18699 === 7) {
                var inst_18694 = state_18698[2];
                var state_18698__$1 = state_18698;
                var statearr_18700_18747 = state_18698__$1;
                statearr_18700_18747[2] = inst_18694;
                statearr_18700_18747[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18699 === 20) {
                  var state_18698__$1 = state_18698;
                  var statearr_18701_18748 = state_18698__$1;
                  statearr_18701_18748[2] = null;
                  statearr_18701_18748[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18699 === 1) {
                    var state_18698__$1 = state_18698;
                    var statearr_18702_18749 = state_18698__$1;
                    statearr_18702_18749[2] = null;
                    statearr_18702_18749[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18699 === 24) {
                      var inst_18677 = state_18698[7];
                      var inst_18686 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_18677);
                      var state_18698__$1 = state_18698;
                      var statearr_18703_18750 = state_18698__$1;
                      statearr_18703_18750[2] = inst_18686;
                      statearr_18703_18750[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18699 === 4) {
                        var inst_18629 = state_18698[8];
                        var inst_18629__$1 = state_18698[2];
                        var inst_18630 = inst_18629__$1 == null;
                        var state_18698__$1 = function() {
                          var statearr_18704 = state_18698;
                          statearr_18704[8] = inst_18629__$1;
                          return statearr_18704;
                        }();
                        if (cljs.core.truth_(inst_18630)) {
                          var statearr_18705_18751 = state_18698__$1;
                          statearr_18705_18751[1] = 5;
                        } else {
                          var statearr_18706_18752 = state_18698__$1;
                          statearr_18706_18752[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18699 === 15) {
                          var inst_18671 = state_18698[2];
                          var state_18698__$1 = state_18698;
                          var statearr_18707_18753 = state_18698__$1;
                          statearr_18707_18753[2] = inst_18671;
                          statearr_18707_18753[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18699 === 21) {
                            var inst_18691 = state_18698[2];
                            var state_18698__$1 = function() {
                              var statearr_18708 = state_18698;
                              statearr_18708[9] = inst_18691;
                              return statearr_18708;
                            }();
                            var statearr_18709_18754 = state_18698__$1;
                            statearr_18709_18754[2] = null;
                            statearr_18709_18754[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18699 === 13) {
                              var inst_18653 = state_18698[10];
                              var inst_18655 = cljs.core.chunked_seq_QMARK_.call(null, inst_18653);
                              var state_18698__$1 = state_18698;
                              if (inst_18655) {
                                var statearr_18710_18755 = state_18698__$1;
                                statearr_18710_18755[1] = 16;
                              } else {
                                var statearr_18711_18756 = state_18698__$1;
                                statearr_18711_18756[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18699 === 22) {
                                var inst_18683 = state_18698[2];
                                var state_18698__$1 = state_18698;
                                if (cljs.core.truth_(inst_18683)) {
                                  var statearr_18712_18757 = state_18698__$1;
                                  statearr_18712_18757[1] = 23;
                                } else {
                                  var statearr_18713_18758 = state_18698__$1;
                                  statearr_18713_18758[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18699 === 6) {
                                  var inst_18677 = state_18698[7];
                                  var inst_18629 = state_18698[8];
                                  var inst_18679 = state_18698[11];
                                  var inst_18677__$1 = topic_fn.call(null, inst_18629);
                                  var inst_18678 = cljs.core.deref.call(null, mults);
                                  var inst_18679__$1 = cljs.core.get.call(null, inst_18678, inst_18677__$1);
                                  var state_18698__$1 = function() {
                                    var statearr_18714 = state_18698;
                                    statearr_18714[7] = inst_18677__$1;
                                    statearr_18714[11] = inst_18679__$1;
                                    return statearr_18714;
                                  }();
                                  if (cljs.core.truth_(inst_18679__$1)) {
                                    var statearr_18715_18759 = state_18698__$1;
                                    statearr_18715_18759[1] = 19;
                                  } else {
                                    var statearr_18716_18760 = state_18698__$1;
                                    statearr_18716_18760[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18699 === 25) {
                                    var inst_18688 = state_18698[2];
                                    var state_18698__$1 = state_18698;
                                    var statearr_18717_18761 = state_18698__$1;
                                    statearr_18717_18761[2] = inst_18688;
                                    statearr_18717_18761[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18699 === 17) {
                                      var inst_18653 = state_18698[10];
                                      var inst_18662 = cljs.core.first.call(null, inst_18653);
                                      var inst_18663 = cljs.core.async.muxch_STAR_.call(null, inst_18662);
                                      var inst_18664 = cljs.core.async.close_BANG_.call(null, inst_18663);
                                      var inst_18665 = cljs.core.next.call(null, inst_18653);
                                      var inst_18639 = inst_18665;
                                      var inst_18640 = null;
                                      var inst_18641 = 0;
                                      var inst_18642 = 0;
                                      var state_18698__$1 = function() {
                                        var statearr_18718 = state_18698;
                                        statearr_18718[12] = inst_18641;
                                        statearr_18718[13] = inst_18664;
                                        statearr_18718[14] = inst_18639;
                                        statearr_18718[15] = inst_18640;
                                        statearr_18718[16] = inst_18642;
                                        return statearr_18718;
                                      }();
                                      var statearr_18719_18762 = state_18698__$1;
                                      statearr_18719_18762[2] = null;
                                      statearr_18719_18762[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18699 === 3) {
                                        var inst_18696 = state_18698[2];
                                        var state_18698__$1 = state_18698;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18698__$1, inst_18696);
                                      } else {
                                        if (state_val_18699 === 12) {
                                          var inst_18673 = state_18698[2];
                                          var state_18698__$1 = state_18698;
                                          var statearr_18720_18763 = state_18698__$1;
                                          statearr_18720_18763[2] = inst_18673;
                                          statearr_18720_18763[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18699 === 2) {
                                            var state_18698__$1 = state_18698;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18698__$1, 4, ch);
                                          } else {
                                            if (state_val_18699 === 23) {
                                              var state_18698__$1 = state_18698;
                                              var statearr_18721_18764 = state_18698__$1;
                                              statearr_18721_18764[2] = null;
                                              statearr_18721_18764[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18699 === 19) {
                                                var inst_18629 = state_18698[8];
                                                var inst_18679 = state_18698[11];
                                                var inst_18681 = cljs.core.async.muxch_STAR_.call(null, inst_18679);
                                                var state_18698__$1 = state_18698;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18698__$1, 22, inst_18681, inst_18629);
                                              } else {
                                                if (state_val_18699 === 11) {
                                                  var inst_18639 = state_18698[14];
                                                  var inst_18653 = state_18698[10];
                                                  var inst_18653__$1 = cljs.core.seq.call(null, inst_18639);
                                                  var state_18698__$1 = function() {
                                                    var statearr_18722 = state_18698;
                                                    statearr_18722[10] = inst_18653__$1;
                                                    return statearr_18722;
                                                  }();
                                                  if (inst_18653__$1) {
                                                    var statearr_18723_18765 = state_18698__$1;
                                                    statearr_18723_18765[1] = 13;
                                                  } else {
                                                    var statearr_18724_18766 = state_18698__$1;
                                                    statearr_18724_18766[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18699 === 9) {
                                                    var inst_18675 = state_18698[2];
                                                    var state_18698__$1 = state_18698;
                                                    var statearr_18725_18767 = state_18698__$1;
                                                    statearr_18725_18767[2] = inst_18675;
                                                    statearr_18725_18767[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18699 === 5) {
                                                      var inst_18636 = cljs.core.deref.call(null, mults);
                                                      var inst_18637 = cljs.core.vals.call(null, inst_18636);
                                                      var inst_18638 = cljs.core.seq.call(null, inst_18637);
                                                      var inst_18639 = inst_18638;
                                                      var inst_18640 = null;
                                                      var inst_18641 = 0;
                                                      var inst_18642 = 0;
                                                      var state_18698__$1 = function() {
                                                        var statearr_18726 = state_18698;
                                                        statearr_18726[12] = inst_18641;
                                                        statearr_18726[14] = inst_18639;
                                                        statearr_18726[15] = inst_18640;
                                                        statearr_18726[16] = inst_18642;
                                                        return statearr_18726;
                                                      }();
                                                      var statearr_18727_18768 = state_18698__$1;
                                                      statearr_18727_18768[2] = null;
                                                      statearr_18727_18768[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18699 === 14) {
                                                        var state_18698__$1 = state_18698;
                                                        var statearr_18731_18769 = state_18698__$1;
                                                        statearr_18731_18769[2] = null;
                                                        statearr_18731_18769[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18699 === 16) {
                                                          var inst_18653 = state_18698[10];
                                                          var inst_18657 = cljs.core.chunk_first.call(null, inst_18653);
                                                          var inst_18658 = cljs.core.chunk_rest.call(null, inst_18653);
                                                          var inst_18659 = cljs.core.count.call(null, inst_18657);
                                                          var inst_18639 = inst_18658;
                                                          var inst_18640 = inst_18657;
                                                          var inst_18641 = inst_18659;
                                                          var inst_18642 = 0;
                                                          var state_18698__$1 = function() {
                                                            var statearr_18732 = state_18698;
                                                            statearr_18732[12] = inst_18641;
                                                            statearr_18732[14] = inst_18639;
                                                            statearr_18732[15] = inst_18640;
                                                            statearr_18732[16] = inst_18642;
                                                            return statearr_18732;
                                                          }();
                                                          var statearr_18733_18770 = state_18698__$1;
                                                          statearr_18733_18770[2] = null;
                                                          statearr_18733_18770[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18699 === 10) {
                                                            var inst_18641 = state_18698[12];
                                                            var inst_18639 = state_18698[14];
                                                            var inst_18640 = state_18698[15];
                                                            var inst_18642 = state_18698[16];
                                                            var inst_18647 = cljs.core._nth.call(null, inst_18640, inst_18642);
                                                            var inst_18648 = cljs.core.async.muxch_STAR_.call(null, inst_18647);
                                                            var inst_18649 = cljs.core.async.close_BANG_.call(null, inst_18648);
                                                            var inst_18650 = inst_18642 + 1;
                                                            var tmp18728 = inst_18641;
                                                            var tmp18729 = inst_18639;
                                                            var tmp18730 = inst_18640;
                                                            var inst_18639__$1 = tmp18729;
                                                            var inst_18640__$1 = tmp18730;
                                                            var inst_18641__$1 = tmp18728;
                                                            var inst_18642__$1 = inst_18650;
                                                            var state_18698__$1 = function() {
                                                              var statearr_18734 = state_18698;
                                                              statearr_18734[17] = inst_18649;
                                                              statearr_18734[12] = inst_18641__$1;
                                                              statearr_18734[14] = inst_18639__$1;
                                                              statearr_18734[15] = inst_18640__$1;
                                                              statearr_18734[16] = inst_18642__$1;
                                                              return statearr_18734;
                                                            }();
                                                            var statearr_18735_18771 = state_18698__$1;
                                                            statearr_18735_18771[2] = null;
                                                            statearr_18735_18771[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18699 === 18) {
                                                              var inst_18668 = state_18698[2];
                                                              var state_18698__$1 = state_18698;
                                                              var statearr_18736_18772 = state_18698__$1;
                                                              statearr_18736_18772[2] = inst_18668;
                                                              statearr_18736_18772[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18699 === 8) {
                                                                var inst_18641 = state_18698[12];
                                                                var inst_18642 = state_18698[16];
                                                                var inst_18644 = inst_18642 < inst_18641;
                                                                var inst_18645 = inst_18644;
                                                                var state_18698__$1 = state_18698;
                                                                if (cljs.core.truth_(inst_18645)) {
                                                                  var statearr_18737_18773 = state_18698__$1;
                                                                  statearr_18737_18773[1] = 10;
                                                                } else {
                                                                  var statearr_18738_18774 = state_18698__$1;
                                                                  statearr_18738_18774[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___18746, mults, ensure_mult, p);
          return function(switch__12047__auto__, c__12112__auto___18746, mults, ensure_mult, p) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_18742 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18742[0] = state_machine__12048__auto__;
                statearr_18742[1] = 1;
                return statearr_18742;
              };
              var state_machine__12048__auto____1 = function(state_18698) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_18698);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e18743) {
                      if (e18743 instanceof Object) {
                        var ex__12051__auto__ = e18743;
                        var statearr_18744_18775 = state_18698;
                        statearr_18744_18775[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18698);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e18743;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__18776 = state_18698;
                    state_18698 = G__18776;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_18698) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_18698);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___18746, mults, ensure_mult, p);
        }();
        var state__12114__auto__ = function() {
          var statearr_18745 = f__12113__auto__.call(null);
          statearr_18745[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___18746;
          return statearr_18745;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___18746, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__12112__auto___18913 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___18913, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___18913, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_18883) {
              var state_val_18884 = state_18883[1];
              if (state_val_18884 === 7) {
                var state_18883__$1 = state_18883;
                var statearr_18885_18914 = state_18883__$1;
                statearr_18885_18914[2] = null;
                statearr_18885_18914[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18884 === 1) {
                  var state_18883__$1 = state_18883;
                  var statearr_18886_18915 = state_18883__$1;
                  statearr_18886_18915[2] = null;
                  statearr_18886_18915[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18884 === 4) {
                    var inst_18847 = state_18883[7];
                    var inst_18849 = inst_18847 < cnt;
                    var state_18883__$1 = state_18883;
                    if (cljs.core.truth_(inst_18849)) {
                      var statearr_18887_18916 = state_18883__$1;
                      statearr_18887_18916[1] = 6;
                    } else {
                      var statearr_18888_18917 = state_18883__$1;
                      statearr_18888_18917[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18884 === 15) {
                      var inst_18879 = state_18883[2];
                      var state_18883__$1 = state_18883;
                      var statearr_18889_18918 = state_18883__$1;
                      statearr_18889_18918[2] = inst_18879;
                      statearr_18889_18918[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18884 === 13) {
                        var inst_18872 = cljs.core.async.close_BANG_.call(null, out);
                        var state_18883__$1 = state_18883;
                        var statearr_18890_18919 = state_18883__$1;
                        statearr_18890_18919[2] = inst_18872;
                        statearr_18890_18919[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18884 === 6) {
                          var state_18883__$1 = state_18883;
                          var statearr_18891_18920 = state_18883__$1;
                          statearr_18891_18920[2] = null;
                          statearr_18891_18920[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18884 === 3) {
                            var inst_18881 = state_18883[2];
                            var state_18883__$1 = state_18883;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18883__$1, inst_18881);
                          } else {
                            if (state_val_18884 === 12) {
                              var inst_18869 = state_18883[8];
                              var inst_18869__$1 = state_18883[2];
                              var inst_18870 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_18869__$1);
                              var state_18883__$1 = function() {
                                var statearr_18892 = state_18883;
                                statearr_18892[8] = inst_18869__$1;
                                return statearr_18892;
                              }();
                              if (cljs.core.truth_(inst_18870)) {
                                var statearr_18893_18921 = state_18883__$1;
                                statearr_18893_18921[1] = 13;
                              } else {
                                var statearr_18894_18922 = state_18883__$1;
                                statearr_18894_18922[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18884 === 2) {
                                var inst_18846 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_18847 = 0;
                                var state_18883__$1 = function() {
                                  var statearr_18895 = state_18883;
                                  statearr_18895[9] = inst_18846;
                                  statearr_18895[7] = inst_18847;
                                  return statearr_18895;
                                }();
                                var statearr_18896_18923 = state_18883__$1;
                                statearr_18896_18923[2] = null;
                                statearr_18896_18923[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18884 === 11) {
                                  var inst_18847 = state_18883[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_18883, 10, Object, null, 9);
                                  var inst_18856 = chs__$1.call(null, inst_18847);
                                  var inst_18857 = done.call(null, inst_18847);
                                  var inst_18858 = cljs.core.async.take_BANG_.call(null, inst_18856, inst_18857);
                                  var state_18883__$1 = state_18883;
                                  var statearr_18897_18924 = state_18883__$1;
                                  statearr_18897_18924[2] = inst_18858;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18883__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18884 === 9) {
                                    var inst_18847 = state_18883[7];
                                    var inst_18860 = state_18883[2];
                                    var inst_18861 = inst_18847 + 1;
                                    var inst_18847__$1 = inst_18861;
                                    var state_18883__$1 = function() {
                                      var statearr_18898 = state_18883;
                                      statearr_18898[10] = inst_18860;
                                      statearr_18898[7] = inst_18847__$1;
                                      return statearr_18898;
                                    }();
                                    var statearr_18899_18925 = state_18883__$1;
                                    statearr_18899_18925[2] = null;
                                    statearr_18899_18925[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18884 === 5) {
                                      var inst_18867 = state_18883[2];
                                      var state_18883__$1 = function() {
                                        var statearr_18900 = state_18883;
                                        statearr_18900[11] = inst_18867;
                                        return statearr_18900;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18883__$1, 12, dchan);
                                    } else {
                                      if (state_val_18884 === 14) {
                                        var inst_18869 = state_18883[8];
                                        var inst_18874 = cljs.core.apply.call(null, f, inst_18869);
                                        var state_18883__$1 = state_18883;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18883__$1, 16, out, inst_18874);
                                      } else {
                                        if (state_val_18884 === 16) {
                                          var inst_18876 = state_18883[2];
                                          var state_18883__$1 = function() {
                                            var statearr_18901 = state_18883;
                                            statearr_18901[12] = inst_18876;
                                            return statearr_18901;
                                          }();
                                          var statearr_18902_18926 = state_18883__$1;
                                          statearr_18902_18926[2] = null;
                                          statearr_18902_18926[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18884 === 10) {
                                            var inst_18851 = state_18883[2];
                                            var inst_18852 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_18883__$1 = function() {
                                              var statearr_18903 = state_18883;
                                              statearr_18903[13] = inst_18851;
                                              return statearr_18903;
                                            }();
                                            var statearr_18904_18927 = state_18883__$1;
                                            statearr_18904_18927[2] = inst_18852;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18883__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18884 === 8) {
                                              var inst_18865 = state_18883[2];
                                              var state_18883__$1 = state_18883;
                                              var statearr_18905_18928 = state_18883__$1;
                                              statearr_18905_18928[2] = inst_18865;
                                              statearr_18905_18928[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___18913, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__12047__auto__, c__12112__auto___18913, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_18909 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18909[0] = state_machine__12048__auto__;
                statearr_18909[1] = 1;
                return statearr_18909;
              };
              var state_machine__12048__auto____1 = function(state_18883) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_18883);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e18910) {
                      if (e18910 instanceof Object) {
                        var ex__12051__auto__ = e18910;
                        var statearr_18911_18929 = state_18883;
                        statearr_18911_18929[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18883);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e18910;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__18930 = state_18883;
                    state_18883 = G__18930;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_18883) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_18883);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___18913, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__12114__auto__ = function() {
          var statearr_18912 = f__12113__auto__.call(null);
          statearr_18912[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___18913;
          return statearr_18912;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___18913, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12112__auto___19038 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___19038, out) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___19038, out) {
            return function(state_19014) {
              var state_val_19015 = state_19014[1];
              if (state_val_19015 === 7) {
                var inst_18993 = state_19014[7];
                var inst_18994 = state_19014[8];
                var inst_18993__$1 = state_19014[2];
                var inst_18994__$1 = cljs.core.nth.call(null, inst_18993__$1, 0, null);
                var inst_18995 = cljs.core.nth.call(null, inst_18993__$1, 1, null);
                var inst_18996 = inst_18994__$1 == null;
                var state_19014__$1 = function() {
                  var statearr_19016 = state_19014;
                  statearr_19016[9] = inst_18995;
                  statearr_19016[7] = inst_18993__$1;
                  statearr_19016[8] = inst_18994__$1;
                  return statearr_19016;
                }();
                if (cljs.core.truth_(inst_18996)) {
                  var statearr_19017_19039 = state_19014__$1;
                  statearr_19017_19039[1] = 8;
                } else {
                  var statearr_19018_19040 = state_19014__$1;
                  statearr_19018_19040[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19015 === 1) {
                  var inst_18985 = cljs.core.vec.call(null, chs);
                  var inst_18986 = inst_18985;
                  var state_19014__$1 = function() {
                    var statearr_19019 = state_19014;
                    statearr_19019[10] = inst_18986;
                    return statearr_19019;
                  }();
                  var statearr_19020_19041 = state_19014__$1;
                  statearr_19020_19041[2] = null;
                  statearr_19020_19041[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19015 === 4) {
                    var inst_18986 = state_19014[10];
                    var state_19014__$1 = state_19014;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_19014__$1, 7, inst_18986);
                  } else {
                    if (state_val_19015 === 6) {
                      var inst_19010 = state_19014[2];
                      var state_19014__$1 = state_19014;
                      var statearr_19021_19042 = state_19014__$1;
                      statearr_19021_19042[2] = inst_19010;
                      statearr_19021_19042[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19015 === 3) {
                        var inst_19012 = state_19014[2];
                        var state_19014__$1 = state_19014;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19014__$1, inst_19012);
                      } else {
                        if (state_val_19015 === 2) {
                          var inst_18986 = state_19014[10];
                          var inst_18988 = cljs.core.count.call(null, inst_18986);
                          var inst_18989 = inst_18988 > 0;
                          var state_19014__$1 = state_19014;
                          if (cljs.core.truth_(inst_18989)) {
                            var statearr_19023_19043 = state_19014__$1;
                            statearr_19023_19043[1] = 4;
                          } else {
                            var statearr_19024_19044 = state_19014__$1;
                            statearr_19024_19044[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19015 === 11) {
                            var inst_18986 = state_19014[10];
                            var inst_19003 = state_19014[2];
                            var tmp19022 = inst_18986;
                            var inst_18986__$1 = tmp19022;
                            var state_19014__$1 = function() {
                              var statearr_19025 = state_19014;
                              statearr_19025[11] = inst_19003;
                              statearr_19025[10] = inst_18986__$1;
                              return statearr_19025;
                            }();
                            var statearr_19026_19045 = state_19014__$1;
                            statearr_19026_19045[2] = null;
                            statearr_19026_19045[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19015 === 9) {
                              var inst_18994 = state_19014[8];
                              var state_19014__$1 = state_19014;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19014__$1, 11, out, inst_18994);
                            } else {
                              if (state_val_19015 === 5) {
                                var inst_19008 = cljs.core.async.close_BANG_.call(null, out);
                                var state_19014__$1 = state_19014;
                                var statearr_19027_19046 = state_19014__$1;
                                statearr_19027_19046[2] = inst_19008;
                                statearr_19027_19046[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19015 === 10) {
                                  var inst_19006 = state_19014[2];
                                  var state_19014__$1 = state_19014;
                                  var statearr_19028_19047 = state_19014__$1;
                                  statearr_19028_19047[2] = inst_19006;
                                  statearr_19028_19047[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19015 === 8) {
                                    var inst_18995 = state_19014[9];
                                    var inst_18993 = state_19014[7];
                                    var inst_18986 = state_19014[10];
                                    var inst_18994 = state_19014[8];
                                    var inst_18998 = function() {
                                      var c = inst_18995;
                                      var v = inst_18994;
                                      var vec__18991 = inst_18993;
                                      var cs = inst_18986;
                                      return function(c, v, vec__18991, cs, inst_18995, inst_18993, inst_18986, inst_18994, state_val_19015, c__12112__auto___19038, out) {
                                        return function(p1__18931_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__18931_SHARP_);
                                        };
                                      }(c, v, vec__18991, cs, inst_18995, inst_18993, inst_18986, inst_18994, state_val_19015, c__12112__auto___19038, out);
                                    }();
                                    var inst_18999 = cljs.core.filterv.call(null, inst_18998, inst_18986);
                                    var inst_18986__$1 = inst_18999;
                                    var state_19014__$1 = function() {
                                      var statearr_19029 = state_19014;
                                      statearr_19029[10] = inst_18986__$1;
                                      return statearr_19029;
                                    }();
                                    var statearr_19030_19048 = state_19014__$1;
                                    statearr_19030_19048[2] = null;
                                    statearr_19030_19048[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___19038, out);
          return function(switch__12047__auto__, c__12112__auto___19038, out) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_19034 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19034[0] = state_machine__12048__auto__;
                statearr_19034[1] = 1;
                return statearr_19034;
              };
              var state_machine__12048__auto____1 = function(state_19014) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_19014);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e19035) {
                      if (e19035 instanceof Object) {
                        var ex__12051__auto__ = e19035;
                        var statearr_19036_19049 = state_19014;
                        statearr_19036_19049[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19014);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19035;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19050 = state_19014;
                    state_19014 = G__19050;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_19014) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_19014);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___19038, out);
        }();
        var state__12114__auto__ = function() {
          var statearr_19037 = f__12113__auto__.call(null);
          statearr_19037[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___19038;
          return statearr_19037;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___19038, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12112__auto___19143 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___19143, out) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___19143, out) {
            return function(state_19120) {
              var state_val_19121 = state_19120[1];
              if (state_val_19121 === 7) {
                var inst_19102 = state_19120[7];
                var inst_19102__$1 = state_19120[2];
                var inst_19103 = inst_19102__$1 == null;
                var inst_19104 = cljs.core.not.call(null, inst_19103);
                var state_19120__$1 = function() {
                  var statearr_19122 = state_19120;
                  statearr_19122[7] = inst_19102__$1;
                  return statearr_19122;
                }();
                if (inst_19104) {
                  var statearr_19123_19144 = state_19120__$1;
                  statearr_19123_19144[1] = 8;
                } else {
                  var statearr_19124_19145 = state_19120__$1;
                  statearr_19124_19145[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19121 === 1) {
                  var inst_19097 = 0;
                  var state_19120__$1 = function() {
                    var statearr_19125 = state_19120;
                    statearr_19125[8] = inst_19097;
                    return statearr_19125;
                  }();
                  var statearr_19126_19146 = state_19120__$1;
                  statearr_19126_19146[2] = null;
                  statearr_19126_19146[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19121 === 4) {
                    var state_19120__$1 = state_19120;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19120__$1, 7, ch);
                  } else {
                    if (state_val_19121 === 6) {
                      var inst_19115 = state_19120[2];
                      var state_19120__$1 = state_19120;
                      var statearr_19127_19147 = state_19120__$1;
                      statearr_19127_19147[2] = inst_19115;
                      statearr_19127_19147[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19121 === 3) {
                        var inst_19117 = state_19120[2];
                        var inst_19118 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19120__$1 = function() {
                          var statearr_19128 = state_19120;
                          statearr_19128[9] = inst_19117;
                          return statearr_19128;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19120__$1, inst_19118);
                      } else {
                        if (state_val_19121 === 2) {
                          var inst_19097 = state_19120[8];
                          var inst_19099 = inst_19097 < n;
                          var state_19120__$1 = state_19120;
                          if (cljs.core.truth_(inst_19099)) {
                            var statearr_19129_19148 = state_19120__$1;
                            statearr_19129_19148[1] = 4;
                          } else {
                            var statearr_19130_19149 = state_19120__$1;
                            statearr_19130_19149[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19121 === 11) {
                            var inst_19097 = state_19120[8];
                            var inst_19107 = state_19120[2];
                            var inst_19108 = inst_19097 + 1;
                            var inst_19097__$1 = inst_19108;
                            var state_19120__$1 = function() {
                              var statearr_19131 = state_19120;
                              statearr_19131[8] = inst_19097__$1;
                              statearr_19131[10] = inst_19107;
                              return statearr_19131;
                            }();
                            var statearr_19132_19150 = state_19120__$1;
                            statearr_19132_19150[2] = null;
                            statearr_19132_19150[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19121 === 9) {
                              var state_19120__$1 = state_19120;
                              var statearr_19133_19151 = state_19120__$1;
                              statearr_19133_19151[2] = null;
                              statearr_19133_19151[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19121 === 5) {
                                var state_19120__$1 = state_19120;
                                var statearr_19134_19152 = state_19120__$1;
                                statearr_19134_19152[2] = null;
                                statearr_19134_19152[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19121 === 10) {
                                  var inst_19112 = state_19120[2];
                                  var state_19120__$1 = state_19120;
                                  var statearr_19135_19153 = state_19120__$1;
                                  statearr_19135_19153[2] = inst_19112;
                                  statearr_19135_19153[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19121 === 8) {
                                    var inst_19102 = state_19120[7];
                                    var state_19120__$1 = state_19120;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19120__$1, 11, out, inst_19102);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___19143, out);
          return function(switch__12047__auto__, c__12112__auto___19143, out) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_19139 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19139[0] = state_machine__12048__auto__;
                statearr_19139[1] = 1;
                return statearr_19139;
              };
              var state_machine__12048__auto____1 = function(state_19120) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_19120);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e19140) {
                      if (e19140 instanceof Object) {
                        var ex__12051__auto__ = e19140;
                        var statearr_19141_19154 = state_19120;
                        statearr_19141_19154[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19120);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19140;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19155 = state_19120;
                    state_19120 = G__19155;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_19120) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_19120);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___19143, out);
        }();
        var state__12114__auto__ = function() {
          var statearr_19142 = f__12113__auto__.call(null);
          statearr_19142[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___19143;
          return statearr_19142;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___19143, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12112__auto___19252 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___19252, out) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___19252, out) {
            return function(state_19227) {
              var state_val_19228 = state_19227[1];
              if (state_val_19228 === 7) {
                var inst_19222 = state_19227[2];
                var state_19227__$1 = state_19227;
                var statearr_19229_19253 = state_19227__$1;
                statearr_19229_19253[2] = inst_19222;
                statearr_19229_19253[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19228 === 1) {
                  var inst_19204 = null;
                  var state_19227__$1 = function() {
                    var statearr_19230 = state_19227;
                    statearr_19230[7] = inst_19204;
                    return statearr_19230;
                  }();
                  var statearr_19231_19254 = state_19227__$1;
                  statearr_19231_19254[2] = null;
                  statearr_19231_19254[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19228 === 4) {
                    var inst_19207 = state_19227[8];
                    var inst_19207__$1 = state_19227[2];
                    var inst_19208 = inst_19207__$1 == null;
                    var inst_19209 = cljs.core.not.call(null, inst_19208);
                    var state_19227__$1 = function() {
                      var statearr_19232 = state_19227;
                      statearr_19232[8] = inst_19207__$1;
                      return statearr_19232;
                    }();
                    if (inst_19209) {
                      var statearr_19233_19255 = state_19227__$1;
                      statearr_19233_19255[1] = 5;
                    } else {
                      var statearr_19234_19256 = state_19227__$1;
                      statearr_19234_19256[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19228 === 6) {
                      var state_19227__$1 = state_19227;
                      var statearr_19235_19257 = state_19227__$1;
                      statearr_19235_19257[2] = null;
                      statearr_19235_19257[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19228 === 3) {
                        var inst_19224 = state_19227[2];
                        var inst_19225 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19227__$1 = function() {
                          var statearr_19236 = state_19227;
                          statearr_19236[9] = inst_19224;
                          return statearr_19236;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19227__$1, inst_19225);
                      } else {
                        if (state_val_19228 === 2) {
                          var state_19227__$1 = state_19227;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19227__$1, 4, ch);
                        } else {
                          if (state_val_19228 === 11) {
                            var inst_19207 = state_19227[8];
                            var inst_19216 = state_19227[2];
                            var inst_19204 = inst_19207;
                            var state_19227__$1 = function() {
                              var statearr_19237 = state_19227;
                              statearr_19237[10] = inst_19216;
                              statearr_19237[7] = inst_19204;
                              return statearr_19237;
                            }();
                            var statearr_19238_19258 = state_19227__$1;
                            statearr_19238_19258[2] = null;
                            statearr_19238_19258[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19228 === 9) {
                              var inst_19207 = state_19227[8];
                              var state_19227__$1 = state_19227;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19227__$1, 11, out, inst_19207);
                            } else {
                              if (state_val_19228 === 5) {
                                var inst_19207 = state_19227[8];
                                var inst_19204 = state_19227[7];
                                var inst_19211 = cljs.core._EQ_.call(null, inst_19207, inst_19204);
                                var state_19227__$1 = state_19227;
                                if (inst_19211) {
                                  var statearr_19240_19259 = state_19227__$1;
                                  statearr_19240_19259[1] = 8;
                                } else {
                                  var statearr_19241_19260 = state_19227__$1;
                                  statearr_19241_19260[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19228 === 10) {
                                  var inst_19219 = state_19227[2];
                                  var state_19227__$1 = state_19227;
                                  var statearr_19242_19261 = state_19227__$1;
                                  statearr_19242_19261[2] = inst_19219;
                                  statearr_19242_19261[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19228 === 8) {
                                    var inst_19204 = state_19227[7];
                                    var tmp19239 = inst_19204;
                                    var inst_19204__$1 = tmp19239;
                                    var state_19227__$1 = function() {
                                      var statearr_19243 = state_19227;
                                      statearr_19243[7] = inst_19204__$1;
                                      return statearr_19243;
                                    }();
                                    var statearr_19244_19262 = state_19227__$1;
                                    statearr_19244_19262[2] = null;
                                    statearr_19244_19262[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___19252, out);
          return function(switch__12047__auto__, c__12112__auto___19252, out) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_19248 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19248[0] = state_machine__12048__auto__;
                statearr_19248[1] = 1;
                return statearr_19248;
              };
              var state_machine__12048__auto____1 = function(state_19227) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_19227);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e19249) {
                      if (e19249 instanceof Object) {
                        var ex__12051__auto__ = e19249;
                        var statearr_19250_19263 = state_19227;
                        statearr_19250_19263[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19227);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19249;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19264 = state_19227;
                    state_19227 = G__19264;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_19227) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_19227);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___19252, out);
        }();
        var state__12114__auto__ = function() {
          var statearr_19251 = f__12113__auto__.call(null);
          statearr_19251[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___19252;
          return statearr_19251;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___19252, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12112__auto___19399 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___19399, out) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___19399, out) {
            return function(state_19369) {
              var state_val_19370 = state_19369[1];
              if (state_val_19370 === 7) {
                var inst_19365 = state_19369[2];
                var state_19369__$1 = state_19369;
                var statearr_19371_19400 = state_19369__$1;
                statearr_19371_19400[2] = inst_19365;
                statearr_19371_19400[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19370 === 1) {
                  var inst_19332 = new Array(n);
                  var inst_19333 = inst_19332;
                  var inst_19334 = 0;
                  var state_19369__$1 = function() {
                    var statearr_19372 = state_19369;
                    statearr_19372[7] = inst_19333;
                    statearr_19372[8] = inst_19334;
                    return statearr_19372;
                  }();
                  var statearr_19373_19401 = state_19369__$1;
                  statearr_19373_19401[2] = null;
                  statearr_19373_19401[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19370 === 4) {
                    var inst_19337 = state_19369[9];
                    var inst_19337__$1 = state_19369[2];
                    var inst_19338 = inst_19337__$1 == null;
                    var inst_19339 = cljs.core.not.call(null, inst_19338);
                    var state_19369__$1 = function() {
                      var statearr_19374 = state_19369;
                      statearr_19374[9] = inst_19337__$1;
                      return statearr_19374;
                    }();
                    if (inst_19339) {
                      var statearr_19375_19402 = state_19369__$1;
                      statearr_19375_19402[1] = 5;
                    } else {
                      var statearr_19376_19403 = state_19369__$1;
                      statearr_19376_19403[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19370 === 15) {
                      var inst_19359 = state_19369[2];
                      var state_19369__$1 = state_19369;
                      var statearr_19377_19404 = state_19369__$1;
                      statearr_19377_19404[2] = inst_19359;
                      statearr_19377_19404[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19370 === 13) {
                        var state_19369__$1 = state_19369;
                        var statearr_19378_19405 = state_19369__$1;
                        statearr_19378_19405[2] = null;
                        statearr_19378_19405[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19370 === 6) {
                          var inst_19334 = state_19369[8];
                          var inst_19355 = inst_19334 > 0;
                          var state_19369__$1 = state_19369;
                          if (cljs.core.truth_(inst_19355)) {
                            var statearr_19379_19406 = state_19369__$1;
                            statearr_19379_19406[1] = 12;
                          } else {
                            var statearr_19380_19407 = state_19369__$1;
                            statearr_19380_19407[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19370 === 3) {
                            var inst_19367 = state_19369[2];
                            var state_19369__$1 = state_19369;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19369__$1, inst_19367);
                          } else {
                            if (state_val_19370 === 12) {
                              var inst_19333 = state_19369[7];
                              var inst_19357 = cljs.core.vec.call(null, inst_19333);
                              var state_19369__$1 = state_19369;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19369__$1, 15, out, inst_19357);
                            } else {
                              if (state_val_19370 === 2) {
                                var state_19369__$1 = state_19369;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19369__$1, 4, ch);
                              } else {
                                if (state_val_19370 === 11) {
                                  var inst_19349 = state_19369[2];
                                  var inst_19350 = new Array(n);
                                  var inst_19333 = inst_19350;
                                  var inst_19334 = 0;
                                  var state_19369__$1 = function() {
                                    var statearr_19381 = state_19369;
                                    statearr_19381[7] = inst_19333;
                                    statearr_19381[8] = inst_19334;
                                    statearr_19381[10] = inst_19349;
                                    return statearr_19381;
                                  }();
                                  var statearr_19382_19408 = state_19369__$1;
                                  statearr_19382_19408[2] = null;
                                  statearr_19382_19408[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19370 === 9) {
                                    var inst_19333 = state_19369[7];
                                    var inst_19347 = cljs.core.vec.call(null, inst_19333);
                                    var state_19369__$1 = state_19369;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19369__$1, 11, out, inst_19347);
                                  } else {
                                    if (state_val_19370 === 5) {
                                      var inst_19333 = state_19369[7];
                                      var inst_19334 = state_19369[8];
                                      var inst_19342 = state_19369[11];
                                      var inst_19337 = state_19369[9];
                                      var inst_19341 = inst_19333[inst_19334] = inst_19337;
                                      var inst_19342__$1 = inst_19334 + 1;
                                      var inst_19343 = inst_19342__$1 < n;
                                      var state_19369__$1 = function() {
                                        var statearr_19383 = state_19369;
                                        statearr_19383[11] = inst_19342__$1;
                                        statearr_19383[12] = inst_19341;
                                        return statearr_19383;
                                      }();
                                      if (cljs.core.truth_(inst_19343)) {
                                        var statearr_19384_19409 = state_19369__$1;
                                        statearr_19384_19409[1] = 8;
                                      } else {
                                        var statearr_19385_19410 = state_19369__$1;
                                        statearr_19385_19410[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19370 === 14) {
                                        var inst_19362 = state_19369[2];
                                        var inst_19363 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_19369__$1 = function() {
                                          var statearr_19387 = state_19369;
                                          statearr_19387[13] = inst_19362;
                                          return statearr_19387;
                                        }();
                                        var statearr_19388_19411 = state_19369__$1;
                                        statearr_19388_19411[2] = inst_19363;
                                        statearr_19388_19411[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19370 === 10) {
                                          var inst_19353 = state_19369[2];
                                          var state_19369__$1 = state_19369;
                                          var statearr_19389_19412 = state_19369__$1;
                                          statearr_19389_19412[2] = inst_19353;
                                          statearr_19389_19412[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19370 === 8) {
                                            var inst_19333 = state_19369[7];
                                            var inst_19342 = state_19369[11];
                                            var tmp19386 = inst_19333;
                                            var inst_19333__$1 = tmp19386;
                                            var inst_19334 = inst_19342;
                                            var state_19369__$1 = function() {
                                              var statearr_19390 = state_19369;
                                              statearr_19390[7] = inst_19333__$1;
                                              statearr_19390[8] = inst_19334;
                                              return statearr_19390;
                                            }();
                                            var statearr_19391_19413 = state_19369__$1;
                                            statearr_19391_19413[2] = null;
                                            statearr_19391_19413[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___19399, out);
          return function(switch__12047__auto__, c__12112__auto___19399, out) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_19395 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19395[0] = state_machine__12048__auto__;
                statearr_19395[1] = 1;
                return statearr_19395;
              };
              var state_machine__12048__auto____1 = function(state_19369) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_19369);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e19396) {
                      if (e19396 instanceof Object) {
                        var ex__12051__auto__ = e19396;
                        var statearr_19397_19414 = state_19369;
                        statearr_19397_19414[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19369);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19396;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19415 = state_19369;
                    state_19369 = G__19415;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_19369) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_19369);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___19399, out);
        }();
        var state__12114__auto__ = function() {
          var statearr_19398 = f__12113__auto__.call(null);
          statearr_19398[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___19399;
          return statearr_19398;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___19399, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__12112__auto___19558 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___19558, out) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___19558, out) {
            return function(state_19528) {
              var state_val_19529 = state_19528[1];
              if (state_val_19529 === 7) {
                var inst_19524 = state_19528[2];
                var state_19528__$1 = state_19528;
                var statearr_19530_19559 = state_19528__$1;
                statearr_19530_19559[2] = inst_19524;
                statearr_19530_19559[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19529 === 1) {
                  var inst_19487 = [];
                  var inst_19488 = inst_19487;
                  var inst_19489 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_19528__$1 = function() {
                    var statearr_19531 = state_19528;
                    statearr_19531[7] = inst_19489;
                    statearr_19531[8] = inst_19488;
                    return statearr_19531;
                  }();
                  var statearr_19532_19560 = state_19528__$1;
                  statearr_19532_19560[2] = null;
                  statearr_19532_19560[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19529 === 4) {
                    var inst_19492 = state_19528[9];
                    var inst_19492__$1 = state_19528[2];
                    var inst_19493 = inst_19492__$1 == null;
                    var inst_19494 = cljs.core.not.call(null, inst_19493);
                    var state_19528__$1 = function() {
                      var statearr_19533 = state_19528;
                      statearr_19533[9] = inst_19492__$1;
                      return statearr_19533;
                    }();
                    if (inst_19494) {
                      var statearr_19534_19561 = state_19528__$1;
                      statearr_19534_19561[1] = 5;
                    } else {
                      var statearr_19535_19562 = state_19528__$1;
                      statearr_19535_19562[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19529 === 15) {
                      var inst_19518 = state_19528[2];
                      var state_19528__$1 = state_19528;
                      var statearr_19536_19563 = state_19528__$1;
                      statearr_19536_19563[2] = inst_19518;
                      statearr_19536_19563[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19529 === 13) {
                        var state_19528__$1 = state_19528;
                        var statearr_19537_19564 = state_19528__$1;
                        statearr_19537_19564[2] = null;
                        statearr_19537_19564[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19529 === 6) {
                          var inst_19488 = state_19528[8];
                          var inst_19513 = inst_19488.length;
                          var inst_19514 = inst_19513 > 0;
                          var state_19528__$1 = state_19528;
                          if (cljs.core.truth_(inst_19514)) {
                            var statearr_19538_19565 = state_19528__$1;
                            statearr_19538_19565[1] = 12;
                          } else {
                            var statearr_19539_19566 = state_19528__$1;
                            statearr_19539_19566[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19529 === 3) {
                            var inst_19526 = state_19528[2];
                            var state_19528__$1 = state_19528;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19528__$1, inst_19526);
                          } else {
                            if (state_val_19529 === 12) {
                              var inst_19488 = state_19528[8];
                              var inst_19516 = cljs.core.vec.call(null, inst_19488);
                              var state_19528__$1 = state_19528;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19528__$1, 15, out, inst_19516);
                            } else {
                              if (state_val_19529 === 2) {
                                var state_19528__$1 = state_19528;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19528__$1, 4, ch);
                              } else {
                                if (state_val_19529 === 11) {
                                  var inst_19496 = state_19528[10];
                                  var inst_19492 = state_19528[9];
                                  var inst_19506 = state_19528[2];
                                  var inst_19507 = [];
                                  var inst_19508 = inst_19507.push(inst_19492);
                                  var inst_19488 = inst_19507;
                                  var inst_19489 = inst_19496;
                                  var state_19528__$1 = function() {
                                    var statearr_19540 = state_19528;
                                    statearr_19540[11] = inst_19508;
                                    statearr_19540[7] = inst_19489;
                                    statearr_19540[8] = inst_19488;
                                    statearr_19540[12] = inst_19506;
                                    return statearr_19540;
                                  }();
                                  var statearr_19541_19567 = state_19528__$1;
                                  statearr_19541_19567[2] = null;
                                  statearr_19541_19567[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19529 === 9) {
                                    var inst_19488 = state_19528[8];
                                    var inst_19504 = cljs.core.vec.call(null, inst_19488);
                                    var state_19528__$1 = state_19528;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19528__$1, 11, out, inst_19504);
                                  } else {
                                    if (state_val_19529 === 5) {
                                      var inst_19496 = state_19528[10];
                                      var inst_19489 = state_19528[7];
                                      var inst_19492 = state_19528[9];
                                      var inst_19496__$1 = f.call(null, inst_19492);
                                      var inst_19497 = cljs.core._EQ_.call(null, inst_19496__$1, inst_19489);
                                      var inst_19498 = cljs.core.keyword_identical_QMARK_.call(null, inst_19489, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_19499 = inst_19497 || inst_19498;
                                      var state_19528__$1 = function() {
                                        var statearr_19542 = state_19528;
                                        statearr_19542[10] = inst_19496__$1;
                                        return statearr_19542;
                                      }();
                                      if (cljs.core.truth_(inst_19499)) {
                                        var statearr_19543_19568 = state_19528__$1;
                                        statearr_19543_19568[1] = 8;
                                      } else {
                                        var statearr_19544_19569 = state_19528__$1;
                                        statearr_19544_19569[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19529 === 14) {
                                        var inst_19521 = state_19528[2];
                                        var inst_19522 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_19528__$1 = function() {
                                          var statearr_19546 = state_19528;
                                          statearr_19546[13] = inst_19521;
                                          return statearr_19546;
                                        }();
                                        var statearr_19547_19570 = state_19528__$1;
                                        statearr_19547_19570[2] = inst_19522;
                                        statearr_19547_19570[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19529 === 10) {
                                          var inst_19511 = state_19528[2];
                                          var state_19528__$1 = state_19528;
                                          var statearr_19548_19571 = state_19528__$1;
                                          statearr_19548_19571[2] = inst_19511;
                                          statearr_19548_19571[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19529 === 8) {
                                            var inst_19496 = state_19528[10];
                                            var inst_19488 = state_19528[8];
                                            var inst_19492 = state_19528[9];
                                            var inst_19501 = inst_19488.push(inst_19492);
                                            var tmp19545 = inst_19488;
                                            var inst_19488__$1 = tmp19545;
                                            var inst_19489 = inst_19496;
                                            var state_19528__$1 = function() {
                                              var statearr_19549 = state_19528;
                                              statearr_19549[14] = inst_19501;
                                              statearr_19549[7] = inst_19489;
                                              statearr_19549[8] = inst_19488__$1;
                                              return statearr_19549;
                                            }();
                                            var statearr_19550_19572 = state_19528__$1;
                                            statearr_19550_19572[2] = null;
                                            statearr_19550_19572[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___19558, out);
          return function(switch__12047__auto__, c__12112__auto___19558, out) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_19554 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19554[0] = state_machine__12048__auto__;
                statearr_19554[1] = 1;
                return statearr_19554;
              };
              var state_machine__12048__auto____1 = function(state_19528) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_19528);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e19555) {
                      if (e19555 instanceof Object) {
                        var ex__12051__auto__ = e19555;
                        var statearr_19556_19573 = state_19528;
                        statearr_19556_19573[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19528);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e19555;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19574 = state_19528;
                    state_19528 = G__19574;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_19528) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_19528);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___19558, out);
        }();
        var state__12114__auto__ = function() {
          var statearr_19557 = f__12113__auto__.call(null);
          statearr_19557[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___19558;
          return statearr_19557;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___19558, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("clidget.widget");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
clidget.widget._STAR_context_STAR_ = null;
clidget.widget.get_widget_key = function get_widget_key(system, keys_binding) {
  return cljs.core.select_keys.call(null, system, cljs.core.map.call(null, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325), keys_binding));
};
clidget.widget.resolve_state = function resolve_state(system, keys_binding) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__3764__auto__ = function iter__15652(s__15653) {
      return new cljs.core.LazySeq(null, function() {
        var s__15653__$1 = s__15653;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__15653__$1);
          if (temp__4126__auto__) {
            var s__15653__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__15653__$2)) {
              var c__3762__auto__ = cljs.core.chunk_first.call(null, s__15653__$2);
              var size__3763__auto__ = cljs.core.count.call(null, c__3762__auto__);
              var b__15655 = cljs.core.chunk_buffer.call(null, size__3763__auto__);
              if (function() {
                var i__15654 = 0;
                while (true) {
                  if (i__15654 < size__3763__auto__) {
                    var map__15660 = cljs.core._nth.call(null, c__3762__auto__, i__15654);
                    var map__15660__$1 = cljs.core.seq_QMARK_.call(null, map__15660) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15660) : map__15660;
                    var atom_key = cljs.core.get.call(null, map__15660__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
                    var val_key = cljs.core.get.call(null, map__15660__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
                    cljs.core.chunk_append.call(null, b__15655, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [val_key, function() {
                      var or__3039__auto__ = cljs.core.get.call(null, system, val_key);
                      if (cljs.core.truth_(or__3039__auto__)) {
                        return or__3039__auto__;
                      } else {
                        var G__15661 = atom_key;
                        var G__15661__$1 = G__15661 == null ? null : cljs.core.get.call(null, system, G__15661);
                        var G__15661__$2 = G__15661__$1 == null ? null : cljs.core.deref.call(null, G__15661__$1);
                        return G__15661__$2;
                      }
                    }()], null));
                    var G__15664 = i__15654 + 1;
                    i__15654 = G__15664;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15655), iter__15652.call(null, cljs.core.chunk_rest.call(null, s__15653__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15655), null);
              }
            } else {
              var map__15662 = cljs.core.first.call(null, s__15653__$2);
              var map__15662__$1 = cljs.core.seq_QMARK_.call(null, map__15662) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15662) : map__15662;
              var atom_key = cljs.core.get.call(null, map__15662__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
              var val_key = cljs.core.get.call(null, map__15662__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [val_key, function() {
                var or__3039__auto__ = cljs.core.get.call(null, system, val_key);
                if (cljs.core.truth_(or__3039__auto__)) {
                  return or__3039__auto__;
                } else {
                  var G__15663 = atom_key;
                  var G__15663__$1 = G__15663 == null ? null : cljs.core.get.call(null, system, G__15663);
                  var G__15663__$2 = G__15663__$1 == null ? null : cljs.core.deref.call(null, G__15663__$1);
                  return G__15663__$2;
                }
              }()], null), iter__15652.call(null, cljs.core.rest.call(null, s__15653__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__3764__auto__.call(null, keys_binding);
  }());
};
clidget.widget.get_cached_widget = function get_cached_widget(p__15665, widget_key) {
  var map__15667 = p__15665;
  var map__15667__$1 = cljs.core.seq_QMARK_.call(null, map__15667) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15667) : map__15667;
  var _BANG_to_cache = cljs.core.get.call(null, map__15667__$1, new cljs.core.Keyword(null, "!to-cache", "!to-cache", 1995196812));
  var from_cache = cljs.core.get.call(null, map__15667__$1, new cljs.core.Keyword(null, "from-cache", "from-cache", 223356736));
  if (cljs.core.truth_(from_cache)) {
    var cached_widget = cljs.core.get.call(null, from_cache, widget_key);
    if (cljs.core.truth_(function() {
      var and__3027__auto__ = cached_widget;
      if (cljs.core.truth_(and__3027__auto__)) {
        return _BANG_to_cache;
      } else {
        return and__3027__auto__;
      }
    }())) {
      cljs.core.swap_BANG_.call(null, _BANG_to_cache, cljs.core.assoc, widget_key, cached_widget);
      return cached_widget;
    } else {
      return null;
    }
  } else {
    return null;
  }
};
clidget.widget.cache_widget_BANG_ = function cache_widget_BANG_(widget, _BANG_widget_cache, widget_key) {
  if (cljs.core.truth_(_BANG_widget_cache)) {
    return cljs.core.swap_BANG_.call(null, _BANG_widget_cache, cljs.core.assoc, widget_key, widget);
  } else {
    return null;
  }
};
clidget.widget.init_locals = function init_locals(system, locals_binding) {
  return cljs.core.reduce.call(null, function(system__$1, p__15670) {
    var vec__15671 = p__15670;
    var atom_key = cljs.core.nth.call(null, vec__15671, 0, null);
    var init_fn = cljs.core.nth.call(null, vec__15671, 1, null);
    return cljs.core.assoc.call(null, system__$1, atom_key, init_fn.call(null));
  }, system, locals_binding);
};
clidget.widget.add_watches = function add_watches(system, keys_binding, render_ch) {
  var seq__15680 = cljs.core.seq.call(null, keys_binding);
  var chunk__15681 = null;
  var count__15682 = 0;
  var i__15683 = 0;
  while (true) {
    if (i__15683 < count__15682) {
      var map__15684 = cljs.core._nth.call(null, chunk__15681, i__15683);
      var map__15684__$1 = cljs.core.seq_QMARK_.call(null, map__15684) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15684) : map__15684;
      var atom_key = cljs.core.get.call(null, map__15684__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
      var val_key = cljs.core.get.call(null, map__15684__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
      var temp__4126__auto___15688 = function() {
        var G__15685 = atom_key;
        var G__15685__$1 = G__15685 == null ? null : cljs.core.get.call(null, system, G__15685);
        return G__15685__$1;
      }();
      if (cljs.core.truth_(temp__4126__auto___15688)) {
        var watched_atom_15689 = temp__4126__auto___15688;
        cljs.core.add_watch.call(null, watched_atom_15689, cljs.core.gensym.call(null, "clidget"), function(seq__15680, chunk__15681, count__15682, i__15683, watched_atom_15689, temp__4126__auto___15688, map__15684, map__15684__$1, atom_key, val_key) {
          return function(_, ___$1, ___$2, new_value) {
            return cljs.core.async.put_BANG_.call(null, render_ch, cljs.core.assoc.call(null, system, val_key, new_value));
          };
        }(seq__15680, chunk__15681, count__15682, i__15683, watched_atom_15689, temp__4126__auto___15688, map__15684, map__15684__$1, atom_key, val_key));
      } else {
      }
      var G__15690 = seq__15680;
      var G__15691 = chunk__15681;
      var G__15692 = count__15682;
      var G__15693 = i__15683 + 1;
      seq__15680 = G__15690;
      chunk__15681 = G__15691;
      count__15682 = G__15692;
      i__15683 = G__15693;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__15680);
      if (temp__4126__auto__) {
        var seq__15680__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15680__$1)) {
          var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__15680__$1);
          var G__15694 = cljs.core.chunk_rest.call(null, seq__15680__$1);
          var G__15695 = c__3795__auto__;
          var G__15696 = cljs.core.count.call(null, c__3795__auto__);
          var G__15697 = 0;
          seq__15680 = G__15694;
          chunk__15681 = G__15695;
          count__15682 = G__15696;
          i__15683 = G__15697;
          continue;
        } else {
          var map__15686 = cljs.core.first.call(null, seq__15680__$1);
          var map__15686__$1 = cljs.core.seq_QMARK_.call(null, map__15686) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15686) : map__15686;
          var atom_key = cljs.core.get.call(null, map__15686__$1, new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458));
          var val_key = cljs.core.get.call(null, map__15686__$1, new cljs.core.Keyword(null, "val-key", "val-key", 1135580325));
          var temp__4126__auto___15698__$1 = function() {
            var G__15687 = atom_key;
            var G__15687__$1 = G__15687 == null ? null : cljs.core.get.call(null, system, G__15687);
            return G__15687__$1;
          }();
          if (cljs.core.truth_(temp__4126__auto___15698__$1)) {
            var watched_atom_15699 = temp__4126__auto___15698__$1;
            cljs.core.add_watch.call(null, watched_atom_15699, cljs.core.gensym.call(null, "clidget"), function(seq__15680, chunk__15681, count__15682, i__15683, watched_atom_15699, temp__4126__auto___15698__$1, map__15686, map__15686__$1, atom_key, val_key, seq__15680__$1, temp__4126__auto__) {
              return function(_, ___$1, ___$2, new_value) {
                return cljs.core.async.put_BANG_.call(null, render_ch, cljs.core.assoc.call(null, system, val_key, new_value));
              };
            }(seq__15680, chunk__15681, count__15682, i__15683, watched_atom_15699, temp__4126__auto___15698__$1, map__15686, map__15686__$1, atom_key, val_key, seq__15680__$1, temp__4126__auto__));
          } else {
          }
          var G__15700 = cljs.core.next.call(null, seq__15680__$1);
          var G__15701 = null;
          var G__15702 = 0;
          var G__15703 = 0;
          seq__15680 = G__15700;
          chunk__15681 = G__15701;
          count__15682 = G__15702;
          i__15683 = G__15703;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
clidget.widget.make_render_ch = function make_render_ch(render_widget_BANG_) {
  var ch = cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 1));
  var c__12112__auto___15762 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___15762, ch) {
    return function() {
      var f__12113__auto__ = function() {
        var switch__12047__auto__ = function(c__12112__auto___15762, ch) {
          return function(state_15745) {
            var state_val_15746 = state_15745[1];
            if (state_val_15746 === 7) {
              var inst_15741 = state_15745[2];
              var state_15745__$1 = state_15745;
              var statearr_15747_15763 = state_15745__$1;
              statearr_15747_15763[2] = inst_15741;
              statearr_15747_15763[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15746 === 6) {
                var state_15745__$1 = state_15745;
                var statearr_15748_15764 = state_15745__$1;
                statearr_15748_15764[2] = null;
                statearr_15748_15764[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15746 === 5) {
                  var inst_15735 = state_15745[7];
                  var inst_15737 = render_widget_BANG_.call(null, inst_15735);
                  var state_15745__$1 = function() {
                    var statearr_15749 = state_15745;
                    statearr_15749[8] = inst_15737;
                    return statearr_15749;
                  }();
                  var statearr_15750_15765 = state_15745__$1;
                  statearr_15750_15765[2] = null;
                  statearr_15750_15765[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15746 === 4) {
                    var inst_15735 = state_15745[7];
                    var inst_15735__$1 = state_15745[2];
                    var state_15745__$1 = function() {
                      var statearr_15751 = state_15745;
                      statearr_15751[7] = inst_15735__$1;
                      return statearr_15751;
                    }();
                    if (cljs.core.truth_(inst_15735__$1)) {
                      var statearr_15752_15766 = state_15745__$1;
                      statearr_15752_15766[1] = 5;
                    } else {
                      var statearr_15753_15767 = state_15745__$1;
                      statearr_15753_15767[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15746 === 3) {
                      var inst_15743 = state_15745[2];
                      var state_15745__$1 = state_15745;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15745__$1, inst_15743);
                    } else {
                      if (state_val_15746 === 2) {
                        var state_15745__$1 = state_15745;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15745__$1, 4, ch);
                      } else {
                        if (state_val_15746 === 1) {
                          var state_15745__$1 = state_15745;
                          var statearr_15754_15768 = state_15745__$1;
                          statearr_15754_15768[2] = null;
                          statearr_15754_15768[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12112__auto___15762, ch);
        return function(switch__12047__auto__, c__12112__auto___15762, ch) {
          return function() {
            var state_machine__12048__auto__ = null;
            var state_machine__12048__auto____0 = function() {
              var statearr_15758 = [null, null, null, null, null, null, null, null, null];
              statearr_15758[0] = state_machine__12048__auto__;
              statearr_15758[1] = 1;
              return statearr_15758;
            };
            var state_machine__12048__auto____1 = function(state_15745) {
              while (true) {
                var ret_value__12049__auto__ = function() {
                  try {
                    while (true) {
                      var result__12050__auto__ = switch__12047__auto__.call(null, state_15745);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12050__auto__;
                      }
                      break;
                    }
                  } catch (e15759) {
                    if (e15759 instanceof Object) {
                      var ex__12051__auto__ = e15759;
                      var statearr_15760_15769 = state_15745;
                      statearr_15760_15769[5] = ex__12051__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15745);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e15759;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15770 = state_15745;
                  state_15745 = G__15770;
                  continue;
                } else {
                  return ret_value__12049__auto__;
                }
                break;
              }
            };
            state_machine__12048__auto__ = function(state_15745) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12048__auto____0.call(this);
                case 1:
                  return state_machine__12048__auto____1.call(this, state_15745);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
            return state_machine__12048__auto__;
          }();
        }(switch__12047__auto__, c__12112__auto___15762, ch);
      }();
      var state__12114__auto__ = function() {
        var statearr_15761 = f__12113__auto__.call(null);
        statearr_15761[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___15762;
        return statearr_15761;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
    };
  }(c__12112__auto___15762, ch));
  return ch;
};
clidget.widget.re_render_widget = function re_render_widget(p__15772, widget_key, system, keys_binding, render_widget_fn) {
  var map__15777 = p__15772;
  var map__15777__$1 = cljs.core.seq_QMARK_.call(null, map__15777) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15777) : map__15777;
  var _BANG_parent_widget_cache = cljs.core.get.call(null, map__15777__$1, new cljs.core.Keyword(null, "!to-cache", "!to-cache", 1995196812));
  var _BANG_widget = cljs.core.atom.call(null, null);
  var _BANG_widget_cache = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var render_widget_BANG_ = function(_BANG_widget, _BANG_widget_cache, map__15777, map__15777__$1, _BANG_parent_widget_cache) {
    return function(system__$1) {
      var G__15778 = function() {
        var from_cache__10450__auto__ = cljs.core.deref.call(null, _BANG_widget_cache);
        var _STAR_context_STAR_15779 = clidget.widget._STAR_context_STAR_;
        try {
          clidget.widget._STAR_context_STAR_ = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "from-cache", "from-cache", 223356736), from_cache__10450__auto__, new cljs.core.Keyword(null, "!to-cache", "!to-cache", 1995196812), function() {
            var G__15780 = _BANG_widget_cache;
            cljs.core.reset_BANG_.call(null, G__15780, cljs.core.PersistentArrayMap.EMPTY);
            return G__15780;
          }()], null);
          return render_widget_fn.call(null, cljs.core.dissoc.call(null, cljs.core.merge.call(null, system__$1, clidget.widget.resolve_state.call(null, system__$1, keys_binding)), new cljs.core.Keyword("clidget", "widget-key", "clidget/widget-key", -879111104), new cljs.core.Keyword("clidget", "widget-type", "clidget/widget-type", 981736725)));
        } finally {
          clidget.widget._STAR_context_STAR_ = _STAR_context_STAR_15779;
        }
      }();
      clidget.widget.cache_widget_BANG_.call(null, G__15778, _BANG_parent_widget_cache, widget_key);
      (function(G__15778, _BANG_widget, _BANG_widget_cache, map__15777, map__15777__$1, _BANG_parent_widget_cache) {
        return function(p1__15771_SHARP_) {
          var temp__4126__auto__ = cljs.core.deref.call(null, _BANG_widget);
          if (cljs.core.truth_(temp__4126__auto__)) {
            var current_widget = temp__4126__auto__;
            return current_widget.parentNode.replaceChild(p1__15771_SHARP_, current_widget);
          } else {
            return null;
          }
        };
      })(G__15778, _BANG_widget, _BANG_widget_cache, map__15777, map__15777__$1, _BANG_parent_widget_cache).call(null, G__15778);
      cljs.core.reset_BANG_.call(null, _BANG_widget, G__15778);
      return G__15778;
    };
  }(_BANG_widget, _BANG_widget_cache, map__15777, map__15777__$1, _BANG_parent_widget_cache);
  var render_ch = clidget.widget.make_render_ch.call(null, render_widget_BANG_);
  clidget.widget.add_watches.call(null, system, keys_binding, render_ch);
  return cljs.core.reset_BANG_.call(null, _BANG_widget, render_widget_BANG_.call(null, system));
};
clidget.widget.updated_widget = function updated_widget(system, keys_binding, locals_binding, render_widget_fn) {
  var widget_key = clidget.widget.get_widget_key.call(null, system, keys_binding);
  var or__3039__auto__ = clidget.widget.get_cached_widget.call(null, clidget.widget._STAR_context_STAR_, widget_key);
  if (cljs.core.truth_(or__3039__auto__)) {
    return or__3039__auto__;
  } else {
    return clidget.widget.re_render_widget.call(null, clidget.widget._STAR_context_STAR_, widget_key, clidget.widget.init_locals.call(null, system, locals_binding), keys_binding, render_widget_fn);
  }
};
goog.provide("chord.channels");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async");
chord.channels.read_from_ws_BANG_ = function read_from_ws_BANG_(ws, ch) {
  return ws.onmessage = function(ev) {
    var message = ev.data;
    return cljs.core.async.put_BANG_.call(null, ch, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message", "message", -406056002), message], null));
  };
};
chord.channels.write_to_ws_BANG_ = function write_to_ws_BANG_(ws, ch) {
  var c__12112__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto__) {
    return function() {
      var f__12113__auto__ = function() {
        var switch__12047__auto__ = function(c__12112__auto__) {
          return function(state_21015) {
            var state_val_21016 = state_21015[1];
            if (state_val_21016 === 7) {
              var inst_21011 = state_21015[2];
              var state_21015__$1 = state_21015;
              var statearr_21017_21032 = state_21015__$1;
              statearr_21017_21032[2] = inst_21011;
              statearr_21017_21032[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21016 === 6) {
                var state_21015__$1 = state_21015;
                var statearr_21018_21033 = state_21015__$1;
                statearr_21018_21033[2] = null;
                statearr_21018_21033[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21016 === 5) {
                  var inst_21005 = state_21015[7];
                  var inst_21007 = ws.send(inst_21005);
                  var state_21015__$1 = function() {
                    var statearr_21019 = state_21015;
                    statearr_21019[8] = inst_21007;
                    return statearr_21019;
                  }();
                  var statearr_21020_21034 = state_21015__$1;
                  statearr_21020_21034[2] = null;
                  statearr_21020_21034[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21016 === 4) {
                    var inst_21005 = state_21015[7];
                    var inst_21005__$1 = state_21015[2];
                    var state_21015__$1 = function() {
                      var statearr_21021 = state_21015;
                      statearr_21021[7] = inst_21005__$1;
                      return statearr_21021;
                    }();
                    if (cljs.core.truth_(inst_21005__$1)) {
                      var statearr_21022_21035 = state_21015__$1;
                      statearr_21022_21035[1] = 5;
                    } else {
                      var statearr_21023_21036 = state_21015__$1;
                      statearr_21023_21036[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21016 === 3) {
                      var inst_21013 = state_21015[2];
                      var state_21015__$1 = state_21015;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21015__$1, inst_21013);
                    } else {
                      if (state_val_21016 === 2) {
                        var state_21015__$1 = state_21015;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21015__$1, 4, ch);
                      } else {
                        if (state_val_21016 === 1) {
                          var state_21015__$1 = state_21015;
                          var statearr_21024_21037 = state_21015__$1;
                          statearr_21024_21037[2] = null;
                          statearr_21024_21037[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12112__auto__);
        return function(switch__12047__auto__, c__12112__auto__) {
          return function() {
            var state_machine__12048__auto__ = null;
            var state_machine__12048__auto____0 = function() {
              var statearr_21028 = [null, null, null, null, null, null, null, null, null];
              statearr_21028[0] = state_machine__12048__auto__;
              statearr_21028[1] = 1;
              return statearr_21028;
            };
            var state_machine__12048__auto____1 = function(state_21015) {
              while (true) {
                var ret_value__12049__auto__ = function() {
                  try {
                    while (true) {
                      var result__12050__auto__ = switch__12047__auto__.call(null, state_21015);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12050__auto__;
                      }
                      break;
                    }
                  } catch (e21029) {
                    if (e21029 instanceof Object) {
                      var ex__12051__auto__ = e21029;
                      var statearr_21030_21038 = state_21015;
                      statearr_21030_21038[5] = ex__12051__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21015);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e21029;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21039 = state_21015;
                  state_21015 = G__21039;
                  continue;
                } else {
                  return ret_value__12049__auto__;
                }
                break;
              }
            };
            state_machine__12048__auto__ = function(state_21015) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12048__auto____0.call(this);
                case 1:
                  return state_machine__12048__auto____1.call(this, state_21015);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
            return state_machine__12048__auto__;
          }();
        }(switch__12047__auto__, c__12112__auto__);
      }();
      var state__12114__auto__ = function() {
        var statearr_21031 = f__12113__auto__.call(null);
        statearr_21031[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto__;
        return statearr_21031;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
    };
  }(c__12112__auto__));
  return c__12112__auto__;
};
chord.channels.bidi_ch = function() {
  var bidi_ch__delegate = function(read_ch, write_ch, p__21040) {
    var vec__21046 = p__21040;
    var map__21047 = cljs.core.nth.call(null, vec__21046, 0, null);
    var map__21047__$1 = cljs.core.seq_QMARK_.call(null, map__21047) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21047) : map__21047;
    var on_close = cljs.core.get.call(null, map__21047__$1, new cljs.core.Keyword(null, "on-close", "on-close", -761178394));
    if (typeof chord.channels.t21048 !== "undefined") {
    } else {
      chord.channels.t21048 = function(on_close, map__21047, vec__21046, p__21040, write_ch, read_ch, bidi_ch, meta21049) {
        this.on_close = on_close;
        this.map__21047 = map__21047;
        this.vec__21046 = vec__21046;
        this.p__21040 = p__21040;
        this.write_ch = write_ch;
        this.read_ch = read_ch;
        this.bidi_ch = bidi_ch;
        this.meta21049 = meta21049;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      chord.channels.t21048.cljs$lang$type = true;
      chord.channels.t21048.cljs$lang$ctorStr = "chord.channels/t21048";
      chord.channels.t21048.cljs$lang$ctorPrWriter = function(vec__21046, map__21047, map__21047__$1, on_close) {
        return function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
          return cljs.core._write.call(null, writer__3607__auto__, "chord.channels/t21048");
        };
      }(vec__21046, map__21047, map__21047__$1, on_close);
      chord.channels.t21048.prototype.cljs$core$async$impl$protocols$Channel$ = true;
      chord.channels.t21048.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(vec__21046, map__21047, map__21047__$1, on_close) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.async.impl.protocols.close_BANG_.call(null, self__.read_ch);
          cljs.core.async.impl.protocols.close_BANG_.call(null, self__.write_ch);
          if (cljs.core.truth_(self__.on_close)) {
            return self__.on_close.call(null);
          } else {
            return null;
          }
        };
      }(vec__21046, map__21047, map__21047__$1, on_close);
      chord.channels.t21048.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
      chord.channels.t21048.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(vec__21046, map__21047, map__21047__$1, on_close) {
        return function(_, msg, handler) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.write_ch, msg, handler);
        };
      }(vec__21046, map__21047, map__21047__$1, on_close);
      chord.channels.t21048.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
      chord.channels.t21048.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(vec__21046, map__21047, map__21047__$1, on_close) {
        return function(_, handler) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.read_ch, handler);
        };
      }(vec__21046, map__21047, map__21047__$1, on_close);
      chord.channels.t21048.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__21046, map__21047, map__21047__$1, on_close) {
        return function(_21050) {
          var self__ = this;
          var _21050__$1 = this;
          return self__.meta21049;
        };
      }(vec__21046, map__21047, map__21047__$1, on_close);
      chord.channels.t21048.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__21046, map__21047, map__21047__$1, on_close) {
        return function(_21050, meta21049__$1) {
          var self__ = this;
          var _21050__$1 = this;
          return new chord.channels.t21048(self__.on_close, self__.map__21047, self__.vec__21046, self__.p__21040, self__.write_ch, self__.read_ch, self__.bidi_ch, meta21049__$1);
        };
      }(vec__21046, map__21047, map__21047__$1, on_close);
      chord.channels.__GT_t21048 = function(vec__21046, map__21047, map__21047__$1, on_close) {
        return function __GT_t21048(on_close__$1, map__21047__$2, vec__21046__$1, p__21040__$1, write_ch__$1, read_ch__$1, bidi_ch__$1, meta21049) {
          return new chord.channels.t21048(on_close__$1, map__21047__$2, vec__21046__$1, p__21040__$1, write_ch__$1, read_ch__$1, bidi_ch__$1, meta21049);
        };
      }(vec__21046, map__21047, map__21047__$1, on_close);
    }
    return new chord.channels.t21048(on_close, map__21047__$1, vec__21046, p__21040, write_ch, read_ch, bidi_ch, null);
  };
  var bidi_ch = function(read_ch, write_ch, var_args) {
    var p__21040 = null;
    if (arguments.length > 2) {
      p__21040 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return bidi_ch__delegate.call(this, read_ch, write_ch, p__21040);
  };
  bidi_ch.cljs$lang$maxFixedArity = 2;
  bidi_ch.cljs$lang$applyTo = function(arglist__21051) {
    var read_ch = cljs.core.first(arglist__21051);
    arglist__21051 = cljs.core.next(arglist__21051);
    var write_ch = cljs.core.first(arglist__21051);
    var p__21040 = cljs.core.rest(arglist__21051);
    return bidi_ch__delegate(read_ch, write_ch, p__21040);
  };
  bidi_ch.cljs$core$IFn$_invoke$arity$variadic = bidi_ch__delegate;
  return bidi_ch;
}();
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj21053 = {};
  return obj21053;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3027__auto__ = reader;
    if (and__3027__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__3666__auto__ = reader == null ? null : reader;
    return function() {
      var or__3039__auto__ = cljs.reader.read_char[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.reader.read_char["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3027__auto__ = reader;
    if (and__3027__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__3666__auto__ = reader == null ? null : reader;
    return function() {
      var or__3039__auto__ = cljs.reader.unread[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.reader.unread["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
  return cljs.core._write.call(null, writer__3607__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3039__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3039__auto__)) {
    return or__3039__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__21054) {
    var rdr = cljs.core.first(arglist__21054);
    var msg = cljs.core.rest(arglist__21054);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3027__auto__ = !(ch === "#");
  if (and__3027__auto__) {
    var and__3027__auto____$1 = !(ch === "'");
    if (and__3027__auto____$1) {
      var and__3027__auto____$2 = !(ch === ":");
      if (and__3027__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3027__auto____$2;
      }
    } else {
      return and__3027__auto____$1;
    }
  } else {
    return and__3027__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__21055 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__21056 = cljs.reader.read_char.call(null, rdr);
      sb = G__21055;
      ch = G__21056;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var zero = groups[2];
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : new cljs.core.Keyword(null, "else", "else", -1508377146) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__21057 = cljs.reader.read_char.call(null, rdr);
      ch = G__21057;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__21058 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__21058;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__21059 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__21059;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3039__auto__ = ch == null;
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3039__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__21060 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__21061 = cljs.reader.read_char.call(null, reader);
      buffer = G__21060;
      ch = G__21061;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__21062 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__21063 = cljs.reader.read_char.call(null, reader);
        buffer = G__21062;
        ch = G__21063;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", -1987822328)) {
            var G__21064 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__21065 = cljs.reader.read_char.call(null, reader);
            buffer = G__21064;
            ch = G__21065;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__21070 = function() {
            var G__21068 = buffer;
            G__21068.append(nch);
            return G__21068;
          }();
          var G__21071 = cljs.reader.read_char.call(null, reader);
          buffer = G__21070;
          ch = G__21071;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var G__21072 = function() {
              var G__21069 = buffer;
              G__21069.append(ch);
              return G__21069;
            }();
            var G__21073 = cljs.reader.read_char.call(null, reader);
            buffer = G__21072;
            ch = G__21073;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__21075 = o;
    if (G__21075) {
      var bit__3689__auto__ = G__21075.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__3689__auto__ || G__21075.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__21075.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__21075);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__21075);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__21076 = reader;
        var G__21077 = eof_is_error;
        var G__21078 = sentinel;
        var G__21079 = is_recursive;
        reader = G__21076;
        eof_is_error = G__21077;
        sentinel = G__21078;
        is_recursive = G__21079;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__21080 = cljs.reader.read_comment.call(null, reader, ch);
          var G__21081 = eof_is_error;
          var G__21082 = sentinel;
          var G__21083 = is_recursive;
          reader = G__21080;
          eof_is_error = G__21081;
          sentinel = G__21082;
          is_recursive = G__21083;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", -1508377146) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__21084 = reader;
              var G__21085 = eof_is_error;
              var G__21086 = sentinel;
              var G__21087 = is_recursive;
              reader = G__21084;
              eof_is_error = G__21085;
              sentinel = G__21086;
              is_recursive = G__21087;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__21088 = b.append("0");
            b = G__21088;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__21090 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__21090, 0, null);
  var years = cljs.core.nth.call(null, vec__21090, 1, null);
  var months = cljs.core.nth.call(null, vec__21090, 2, null);
  var days = cljs.core.nth.call(null, vec__21090, 3, null);
  var hours = cljs.core.nth.call(null, vec__21090, 4, null);
  var minutes = cljs.core.nth.call(null, vec__21090, 5, null);
  var seconds = cljs.core.nth.call(null, vec__21090, 6, null);
  var fraction = cljs.core.nth.call(null, vec__21090, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__21090, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__21090, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__21090, 10, null);
  var v = vec__21090;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3039__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3039__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3039__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3039__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3039__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3039__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3039__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3039__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__21092 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__21092, 0, null);
    var months = cljs.core.nth.call(null, vec__21092, 1, null);
    var days = cljs.core.nth.call(null, vec__21092, 2, null);
    var hours = cljs.core.nth.call(null, vec__21092, 3, null);
    var minutes = cljs.core.nth.call(null, vec__21092, 4, null);
    var seconds = cljs.core.nth.call(null, vec__21092, 5, null);
    var ms = cljs.core.nth.call(null, vec__21092, 6, null);
    var offset = cljs.core.nth.call(null, vec__21092, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__21105_21117 = cljs.core.seq.call(null, form);
    var chunk__21106_21118 = null;
    var count__21107_21119 = 0;
    var i__21108_21120 = 0;
    while (true) {
      if (i__21108_21120 < count__21107_21119) {
        var x_21121 = cljs.core._nth.call(null, chunk__21106_21118, i__21108_21120);
        arr.push(x_21121);
        var G__21122 = seq__21105_21117;
        var G__21123 = chunk__21106_21118;
        var G__21124 = count__21107_21119;
        var G__21125 = i__21108_21120 + 1;
        seq__21105_21117 = G__21122;
        chunk__21106_21118 = G__21123;
        count__21107_21119 = G__21124;
        i__21108_21120 = G__21125;
        continue;
      } else {
        var temp__4126__auto___21126 = cljs.core.seq.call(null, seq__21105_21117);
        if (temp__4126__auto___21126) {
          var seq__21105_21127__$1 = temp__4126__auto___21126;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21105_21127__$1)) {
            var c__3795__auto___21128 = cljs.core.chunk_first.call(null, seq__21105_21127__$1);
            var G__21129 = cljs.core.chunk_rest.call(null, seq__21105_21127__$1);
            var G__21130 = c__3795__auto___21128;
            var G__21131 = cljs.core.count.call(null, c__3795__auto___21128);
            var G__21132 = 0;
            seq__21105_21117 = G__21129;
            chunk__21106_21118 = G__21130;
            count__21107_21119 = G__21131;
            i__21108_21120 = G__21132;
            continue;
          } else {
            var x_21133 = cljs.core.first.call(null, seq__21105_21127__$1);
            arr.push(x_21133);
            var G__21134 = cljs.core.next.call(null, seq__21105_21127__$1);
            var G__21135 = null;
            var G__21136 = 0;
            var G__21137 = 0;
            seq__21105_21117 = G__21134;
            chunk__21106_21118 = G__21135;
            count__21107_21119 = G__21136;
            i__21108_21120 = G__21137;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj21110 = {};
        return obj21110;
      }();
      var seq__21111_21138 = cljs.core.seq.call(null, form);
      var chunk__21112_21139 = null;
      var count__21113_21140 = 0;
      var i__21114_21141 = 0;
      while (true) {
        if (i__21114_21141 < count__21113_21140) {
          var vec__21115_21142 = cljs.core._nth.call(null, chunk__21112_21139, i__21114_21141);
          var k_21143 = cljs.core.nth.call(null, vec__21115_21142, 0, null);
          var v_21144 = cljs.core.nth.call(null, vec__21115_21142, 1, null);
          obj[cljs.core.name.call(null, k_21143)] = v_21144;
          var G__21145 = seq__21111_21138;
          var G__21146 = chunk__21112_21139;
          var G__21147 = count__21113_21140;
          var G__21148 = i__21114_21141 + 1;
          seq__21111_21138 = G__21145;
          chunk__21112_21139 = G__21146;
          count__21113_21140 = G__21147;
          i__21114_21141 = G__21148;
          continue;
        } else {
          var temp__4126__auto___21149 = cljs.core.seq.call(null, seq__21111_21138);
          if (temp__4126__auto___21149) {
            var seq__21111_21150__$1 = temp__4126__auto___21149;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__21111_21150__$1)) {
              var c__3795__auto___21151 = cljs.core.chunk_first.call(null, seq__21111_21150__$1);
              var G__21152 = cljs.core.chunk_rest.call(null, seq__21111_21150__$1);
              var G__21153 = c__3795__auto___21151;
              var G__21154 = cljs.core.count.call(null, c__3795__auto___21151);
              var G__21155 = 0;
              seq__21111_21138 = G__21152;
              chunk__21112_21139 = G__21153;
              count__21113_21140 = G__21154;
              i__21114_21141 = G__21155;
              continue;
            } else {
              var vec__21116_21156 = cljs.core.first.call(null, seq__21111_21150__$1);
              var k_21157 = cljs.core.nth.call(null, vec__21116_21156, 0, null);
              var v_21158 = cljs.core.nth.call(null, vec__21116_21156, 1, null);
              obj[cljs.core.name.call(null, k_21157)] = v_21158;
              var G__21159 = cljs.core.next.call(null, seq__21111_21150__$1);
              var G__21160 = null;
              var G__21161 = 0;
              var G__21162 = 0;
              seq__21111_21138 = G__21159;
              chunk__21112_21139 = G__21160;
              count__21113_21140 = G__21161;
              i__21114_21141 = G__21162;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__20968) {
    var vec__20969 = p__20968;
    var k = cljs.core.nth.call(null, vec__20969, 0, null);
    var v = cljs.core.nth.call(null, vec__20969, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__20972) {
    var vec__20973 = p__20972;
    var k = cljs.core.nth.call(null, vec__20973, 0, null);
    var v = cljs.core.nth.call(null, vec__20973, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("chord.format");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
chord.format.try_read = function try_read(read_fn) {
  return function(p__20958) {
    var map__20959 = p__20958;
    var map__20959__$1 = cljs.core.seq_QMARK_.call(null, map__20959) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20959) : map__20959;
    var data = map__20959__$1;
    var message = cljs.core.get.call(null, map__20959__$1, new cljs.core.Keyword(null, "message", "message", -406056002));
    var error = cljs.core.get.call(null, map__20959__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
    if (cljs.core.truth_(error)) {
      return data;
    } else {
      try {
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message", "message", -406056002), read_fn.call(null, message)], null);
      } catch (e20960) {
        if (e20960 instanceof Error) {
          var e = e20960;
          return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "invalid-format", "invalid-format", -72676108), new cljs.core.Keyword(null, "cause", "cause", 231901252), e, new cljs.core.Keyword(null, "invalid-msg", "invalid-msg", -1474361625), message], null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            throw e20960;
          } else {
            return null;
          }
        }
      }
    }
  };
};
chord.format.wrap_format = function() {
  var method_table__3905__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__3906__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__3907__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__3908__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__3909__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("wrap-format", function(method_table__3905__auto__, prefer_table__3906__auto__, method_cache__3907__auto__, cached_hierarchy__3908__auto__, hierarchy__3909__auto__) {
    return function(chs, format) {
      return format;
    };
  }(method_table__3905__auto__, prefer_table__3906__auto__, method_cache__3907__auto__, cached_hierarchy__3908__auto__, hierarchy__3909__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__3909__auto__, method_table__3905__auto__, prefer_table__3906__auto__, method_cache__3907__auto__, cached_hierarchy__3908__auto__);
}();
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "edn", "edn", 1317840885), function(p__20961, _) {
  var map__20962 = p__20961;
  var map__20962__$1 = cljs.core.seq_QMARK_.call(null, map__20962) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20962) : map__20962;
  var write_ch = cljs.core.get.call(null, map__20962__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
  var read_ch = cljs.core.get.call(null, map__20962__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), cljs.core.async.map_LT_.call(null, chord.format.try_read.call(null, cljs.reader.read_string), read_ch), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), cljs.core.async.map_GT_.call(null, cljs.core.pr_str, write_ch)], null);
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "json", "json", 1279968570), function(p__20963, _) {
  var map__20964 = p__20963;
  var map__20964__$1 = cljs.core.seq_QMARK_.call(null, map__20964) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20964) : map__20964;
  var write_ch = cljs.core.get.call(null, map__20964__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
  var read_ch = cljs.core.get.call(null, map__20964__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), cljs.core.async.map_LT_.call(null, chord.format.try_read.call(null, cljs.core.comp.call(null, cljs.core.js__GT_clj, JSON.parse)), read_ch), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), cljs.core.async.map_GT_.call(null, cljs.core.comp.call(null, JSON.stringify, cljs.core.clj__GT_js), write_ch)], null);
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "json-kw", "json-kw", 341203175), function(chs, _) {
  return cljs.core.update_in.call(null, chord.format.wrap_format.call(null, chs, new cljs.core.Keyword(null, "json", "json", 1279968570)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414)], null), function(p1__20965_SHARP_) {
    return cljs.core.async.map_LT_.call(null, clojure.walk.keywordize_keys, p1__20965_SHARP_);
  });
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "str", "str", 1089608819), function(chs, _) {
  return chs;
});
cljs.core._add_method.call(null, chord.format.wrap_format, null, function(chs, _) {
  return chord.format.wrap_format.call(null, chs, new cljs.core.Keyword(null, "edn", "edn", 1317840885));
});
cljs.core._add_method.call(null, chord.format.wrap_format, new cljs.core.Keyword(null, "default", "default", -1987822328), function(chs, format) {
  throw "ERROR: Invalid Chord channel format: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(format);
});
goog.provide("chord.client");
goog.require("cljs.core");
goog.require("chord.channels");
goog.require("cljs.core.async");
goog.require("chord.format");
goog.require("chord.format");
goog.require("chord.channels");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
chord.client.on_close = function() {
  var on_close__delegate = function(ws, read_ch, write_ch, p__20538) {
    var vec__20611 = p__20538;
    var err_meta_channel = cljs.core.nth.call(null, vec__20611, 0, null);
    return ws.onclose = function(vec__20611, err_meta_channel) {
      return function(ev) {
        var c__12112__auto__ = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto__, vec__20611, err_meta_channel) {
          return function() {
            var f__12113__auto__ = function() {
              var switch__12047__auto__ = function(c__12112__auto__, vec__20611, err_meta_channel) {
                return function(state_20650) {
                  var state_val_20651 = state_20650[1];
                  if (state_val_20651 === 7) {
                    var inst_20646 = state_20650[2];
                    var inst_20647 = cljs.core.async.close_BANG_.call(null, read_ch);
                    var inst_20648 = cljs.core.async.close_BANG_.call(null, write_ch);
                    var state_20650__$1 = function() {
                      var statearr_20652 = state_20650;
                      statearr_20652[7] = inst_20646;
                      statearr_20652[8] = inst_20647;
                      return statearr_20652;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20650__$1, inst_20648);
                  } else {
                    if (state_val_20651 === 1) {
                      var inst_20612 = state_20650[9];
                      var inst_20612__$1 = ws.error_seen;
                      var state_20650__$1 = function() {
                        var statearr_20653 = state_20650;
                        statearr_20653[9] = inst_20612__$1;
                        return statearr_20653;
                      }();
                      if (cljs.core.truth_(inst_20612__$1)) {
                        var statearr_20654_20683 = state_20650__$1;
                        statearr_20654_20683[1] = 2;
                      } else {
                        var statearr_20655_20684 = state_20650__$1;
                        statearr_20655_20684[1] = 3;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20651 === 4) {
                        var inst_20618 = state_20650[2];
                        var state_20650__$1 = state_20650;
                        if (cljs.core.truth_(inst_20618)) {
                          var statearr_20656_20685 = state_20650__$1;
                          statearr_20656_20685[1] = 5;
                        } else {
                          var statearr_20657_20686 = state_20650__$1;
                          statearr_20657_20686[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20651 === 6) {
                          var state_20650__$1 = state_20650;
                          var statearr_20658_20687 = state_20650__$1;
                          statearr_20658_20687[2] = null;
                          statearr_20658_20687[1] = 7;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20651 === 3) {
                            var inst_20615 = ev.wasClean;
                            var inst_20616 = cljs.core.not.call(null, inst_20615);
                            var state_20650__$1 = state_20650;
                            var statearr_20659_20688 = state_20650__$1;
                            statearr_20659_20688[2] = inst_20616;
                            statearr_20659_20688[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20651 === 12) {
                              var inst_20643 = state_20650[2];
                              var state_20650__$1 = state_20650;
                              var statearr_20660_20689 = state_20650__$1;
                              statearr_20660_20689[2] = inst_20643;
                              statearr_20660_20689[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20651 === 2) {
                                var inst_20612 = state_20650[9];
                                var state_20650__$1 = state_20650;
                                var statearr_20661_20690 = state_20650__$1;
                                statearr_20661_20690[2] = inst_20612;
                                statearr_20661_20690[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20651 === 11) {
                                  var inst_20638 = state_20650[2];
                                  var state_20650__$1 = state_20650;
                                  var statearr_20662_20691 = state_20650__$1;
                                  statearr_20662_20691[2] = inst_20638;
                                  statearr_20662_20691[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20651 === 9) {
                                    var state_20650__$1 = state_20650;
                                    var statearr_20663_20692 = state_20650__$1;
                                    statearr_20663_20692[2] = null;
                                    statearr_20663_20692[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20651 === 5) {
                                      var inst_20620 = [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "wasClean", "wasClean", -1404940601)];
                                      var inst_20621 = ev.reason;
                                      var inst_20622 = ev.code;
                                      var inst_20623 = ev.wasClean;
                                      var inst_20624 = [inst_20621, inst_20622, inst_20623];
                                      var inst_20625 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_20620, inst_20624);
                                      var state_20650__$1 = function() {
                                        var statearr_20664 = state_20650;
                                        statearr_20664[10] = inst_20625;
                                        return statearr_20664;
                                      }();
                                      if (cljs.core.truth_(err_meta_channel)) {
                                        var statearr_20665_20693 = state_20650__$1;
                                        statearr_20665_20693[1] = 8;
                                      } else {
                                        var statearr_20666_20694 = state_20650__$1;
                                        statearr_20666_20694[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20651 === 10) {
                                        var inst_20625 = state_20650[10];
                                        var inst_20641 = state_20650[2];
                                        var state_20650__$1 = function() {
                                          var statearr_20667 = state_20650;
                                          statearr_20667[11] = inst_20641;
                                          return statearr_20667;
                                        }();
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20650__$1, 12, read_ch, inst_20625);
                                      } else {
                                        if (state_val_20651 === 8) {
                                          var inst_20612 = state_20650[9];
                                          var inst_20625 = state_20650[10];
                                          var inst_20630 = cljs.core.async.chan.call(null, 1);
                                          var inst_20631 = function() {
                                            var c__12112__auto____$1 = inst_20630;
                                            var error_desc = inst_20625;
                                            var error_seen_QMARK_ = inst_20612;
                                            return function(c__12112__auto____$1, error_desc, error_seen_QMARK_, inst_20612, inst_20625, inst_20630, state_val_20651, c__12112__auto__, vec__20611, err_meta_channel) {
                                              return function() {
                                                var f__12113__auto__ = function() {
                                                  var switch__12047__auto__ = function(c__12112__auto____$1, error_desc, error_seen_QMARK_, inst_20612, inst_20625, inst_20630, state_val_20651, c__12112__auto__, vec__20611, err_meta_channel) {
                                                    return function(state_20628) {
                                                      var state_val_20629 = state_20628[1];
                                                      if (state_val_20629 === 1) {
                                                        var state_20628__$1 = state_20628;
                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20628__$1, error_desc);
                                                      } else {
                                                        return null;
                                                      }
                                                    };
                                                  }(c__12112__auto____$1, error_desc, error_seen_QMARK_, inst_20612, inst_20625, inst_20630, state_val_20651, c__12112__auto__, vec__20611, err_meta_channel);
                                                  return function(switch__12047__auto__, c__12112__auto____$1, error_desc, error_seen_QMARK_, inst_20612, inst_20625, inst_20630, state_val_20651, c__12112__auto__, vec__20611, err_meta_channel) {
                                                    return function() {
                                                      var state_machine__12048__auto__ = null;
                                                      var state_machine__12048__auto____0 = function() {
                                                        var statearr_20671 = [null, null, null, null, null, null, null];
                                                        statearr_20671[0] = state_machine__12048__auto__;
                                                        statearr_20671[1] = 1;
                                                        return statearr_20671;
                                                      };
                                                      var state_machine__12048__auto____1 = function(state_20628) {
                                                        while (true) {
                                                          var ret_value__12049__auto__ = function() {
                                                            try {
                                                              while (true) {
                                                                var result__12050__auto__ = switch__12047__auto__.call(null, state_20628);
                                                                if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                                  continue;
                                                                } else {
                                                                  return result__12050__auto__;
                                                                }
                                                                break;
                                                              }
                                                            } catch (e20672) {
                                                              if (e20672 instanceof Object) {
                                                                var ex__12051__auto__ = e20672;
                                                                var statearr_20673_20695 = state_20628;
                                                                statearr_20673_20695[5] = ex__12051__auto__;
                                                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20628);
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                                                  throw e20672;
                                                                } else {
                                                                  return null;
                                                                }
                                                              }
                                                            }
                                                          }();
                                                          if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                            var G__20696 = state_20628;
                                                            state_20628 = G__20696;
                                                            continue;
                                                          } else {
                                                            return ret_value__12049__auto__;
                                                          }
                                                          break;
                                                        }
                                                      };
                                                      state_machine__12048__auto__ = function(state_20628) {
                                                        switch(arguments.length) {
                                                          case 0:
                                                            return state_machine__12048__auto____0.call(this);
                                                          case 1:
                                                            return state_machine__12048__auto____1.call(this, state_20628);
                                                        }
                                                        throw new Error("Invalid arity: " + arguments.length);
                                                      };
                                                      state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
                                                      state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
                                                      return state_machine__12048__auto__;
                                                    }();
                                                  }(switch__12047__auto__, c__12112__auto____$1, error_desc, error_seen_QMARK_, inst_20612, inst_20625, inst_20630, state_val_20651, c__12112__auto__, vec__20611, err_meta_channel);
                                                }();
                                                var state__12114__auto__ = function() {
                                                  var statearr_20674 = f__12113__auto__.call(null);
                                                  statearr_20674[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto____$1;
                                                  return statearr_20674;
                                                }();
                                                return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
                                              };
                                            }(c__12112__auto____$1, error_desc, error_seen_QMARK_, inst_20612, inst_20625, inst_20630, state_val_20651, c__12112__auto__, vec__20611, err_meta_channel);
                                          }();
                                          var inst_20632 = cljs.core.async.impl.dispatch.run.call(null, inst_20631);
                                          var inst_20634 = cljs.core.async.chan.call(null);
                                          var inst_20635 = cljs.core.async.close_BANG_.call(null, inst_20634);
                                          var inst_20636 = chord.channels.bidi_ch.call(null, inst_20630, inst_20634);
                                          var state_20650__$1 = function() {
                                            var statearr_20675 = state_20650;
                                            statearr_20675[12] = inst_20635;
                                            statearr_20675[13] = inst_20632;
                                            return statearr_20675;
                                          }();
                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20650__$1, 11, err_meta_channel, inst_20636);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                };
              }(c__12112__auto__, vec__20611, err_meta_channel);
              return function(switch__12047__auto__, c__12112__auto__, vec__20611, err_meta_channel) {
                return function() {
                  var state_machine__12048__auto__ = null;
                  var state_machine__12048__auto____0 = function() {
                    var statearr_20679 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                    statearr_20679[0] = state_machine__12048__auto__;
                    statearr_20679[1] = 1;
                    return statearr_20679;
                  };
                  var state_machine__12048__auto____1 = function(state_20650) {
                    while (true) {
                      var ret_value__12049__auto__ = function() {
                        try {
                          while (true) {
                            var result__12050__auto__ = switch__12047__auto__.call(null, state_20650);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__12050__auto__;
                            }
                            break;
                          }
                        } catch (e20680) {
                          if (e20680 instanceof Object) {
                            var ex__12051__auto__ = e20680;
                            var statearr_20681_20697 = state_20650;
                            statearr_20681_20697[5] = ex__12051__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20650);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                              throw e20680;
                            } else {
                              return null;
                            }
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__20698 = state_20650;
                        state_20650 = G__20698;
                        continue;
                      } else {
                        return ret_value__12049__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__12048__auto__ = function(state_20650) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__12048__auto____0.call(this);
                      case 1:
                        return state_machine__12048__auto____1.call(this, state_20650);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
                  state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
                  return state_machine__12048__auto__;
                }();
              }(switch__12047__auto__, c__12112__auto__, vec__20611, err_meta_channel);
            }();
            var state__12114__auto__ = function() {
              var statearr_20682 = f__12113__auto__.call(null);
              statearr_20682[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto__;
              return statearr_20682;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
          };
        }(c__12112__auto__, vec__20611, err_meta_channel));
        return c__12112__auto__;
      };
    }(vec__20611, err_meta_channel);
  };
  var on_close = function(ws, read_ch, write_ch, var_args) {
    var p__20538 = null;
    if (arguments.length > 3) {
      p__20538 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return on_close__delegate.call(this, ws, read_ch, write_ch, p__20538);
  };
  on_close.cljs$lang$maxFixedArity = 3;
  on_close.cljs$lang$applyTo = function(arglist__20699) {
    var ws = cljs.core.first(arglist__20699);
    arglist__20699 = cljs.core.next(arglist__20699);
    var read_ch = cljs.core.first(arglist__20699);
    arglist__20699 = cljs.core.next(arglist__20699);
    var write_ch = cljs.core.first(arglist__20699);
    var p__20538 = cljs.core.rest(arglist__20699);
    return on_close__delegate(ws, read_ch, write_ch, p__20538);
  };
  on_close.cljs$core$IFn$_invoke$arity$variadic = on_close__delegate;
  return on_close;
}();
chord.client.make_open_ch = function make_open_ch(ws, read_ch, write_ch, v) {
  var ch = cljs.core.async.chan.call(null);
  chord.client.on_close.call(null, ws, read_ch, write_ch, ch);
  ws.onopen = function(ch) {
    return function() {
      var c__12112__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto__, ch) {
        return function() {
          var f__12113__auto__ = function() {
            var switch__12047__auto__ = function(c__12112__auto__, ch) {
              return function(state_20718) {
                var state_val_20719 = state_20718[1];
                if (state_val_20719 === 2) {
                  var inst_20715 = state_20718[2];
                  var inst_20716 = cljs.core.async.close_BANG_.call(null, ch);
                  var state_20718__$1 = function() {
                    var statearr_20720 = state_20718;
                    statearr_20720[7] = inst_20715;
                    return statearr_20720;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20718__$1, inst_20716);
                } else {
                  if (state_val_20719 === 1) {
                    var state_20718__$1 = state_20718;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20718__$1, 2, ch, v);
                  } else {
                    return null;
                  }
                }
              };
            }(c__12112__auto__, ch);
            return function(switch__12047__auto__, c__12112__auto__, ch) {
              return function() {
                var state_machine__12048__auto__ = null;
                var state_machine__12048__auto____0 = function() {
                  var statearr_20724 = [null, null, null, null, null, null, null, null];
                  statearr_20724[0] = state_machine__12048__auto__;
                  statearr_20724[1] = 1;
                  return statearr_20724;
                };
                var state_machine__12048__auto____1 = function(state_20718) {
                  while (true) {
                    var ret_value__12049__auto__ = function() {
                      try {
                        while (true) {
                          var result__12050__auto__ = switch__12047__auto__.call(null, state_20718);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__12050__auto__;
                          }
                          break;
                        }
                      } catch (e20725) {
                        if (e20725 instanceof Object) {
                          var ex__12051__auto__ = e20725;
                          var statearr_20726_20728 = state_20718;
                          statearr_20726_20728[5] = ex__12051__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20718);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                            throw e20725;
                          } else {
                            return null;
                          }
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__20729 = state_20718;
                      state_20718 = G__20729;
                      continue;
                    } else {
                      return ret_value__12049__auto__;
                    }
                    break;
                  }
                };
                state_machine__12048__auto__ = function(state_20718) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__12048__auto____0.call(this);
                    case 1:
                      return state_machine__12048__auto____1.call(this, state_20718);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
                state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
                return state_machine__12048__auto__;
              }();
            }(switch__12047__auto__, c__12112__auto__, ch);
          }();
          var state__12114__auto__ = function() {
            var statearr_20727 = f__12113__auto__.call(null);
            statearr_20727[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto__;
            return statearr_20727;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
        };
      }(c__12112__auto__, ch));
      return c__12112__auto__;
    };
  }(ch);
  return ch;
};
chord.client.close_event__GT_maybe_error = function close_event__GT_maybe_error(ev) {
  if (cljs.core.truth_(ev.wasClean)) {
    return null;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reason", "reason", -2070751759), ev.reason, new cljs.core.Keyword(null, "code", "code", 1586293142), ev.code], null);
  }
};
chord.client.ws_ch = function() {
  var ws_ch__delegate = function(ws_url, p__20732) {
    var vec__20831 = p__20732;
    var map__20832 = cljs.core.nth.call(null, vec__20831, 0, null);
    var map__20832__$1 = cljs.core.seq_QMARK_.call(null, map__20832) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20832) : map__20832;
    var format = cljs.core.get.call(null, map__20832__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
    var write_ch = cljs.core.get.call(null, map__20832__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
    var read_ch = cljs.core.get.call(null, map__20832__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
    var web_socket = new WebSocket(ws_url);
    var map__20833 = chord.format.wrap_format.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), function() {
      var or__3039__auto__ = read_ch;
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return cljs.core.async.chan.call(null);
      }
    }(), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), function() {
      var or__3039__auto__ = write_ch;
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return cljs.core.async.chan.call(null);
      }
    }()], null), format);
    var map__20833__$1 = cljs.core.seq_QMARK_.call(null, map__20833) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20833) : map__20833;
    var write_ch__$1 = cljs.core.get.call(null, map__20833__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
    var read_ch__$1 = cljs.core.get.call(null, map__20833__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
    var open_ch = cljs.core.async.chan.call(null);
    var close_ch = cljs.core.async.chan.call(null);
    web_socket.binaryType = "arraybuffer";
    chord.channels.read_from_ws_BANG_.call(null, web_socket, read_ch__$1);
    chord.channels.write_to_ws_BANG_.call(null, web_socket, write_ch__$1);
    web_socket.onopen = function(web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch) {
      return function(p1__20730_SHARP_) {
        return cljs.core.async.put_BANG_.call(null, open_ch, p1__20730_SHARP_);
      };
    }(web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch);
    web_socket.onclose = function(web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch) {
      return function(p1__20731_SHARP_) {
        return cljs.core.async.put_BANG_.call(null, close_ch, p1__20731_SHARP_);
      };
    }(web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch);
    var ws_chan = chord.channels.bidi_ch.call(null, read_ch__$1, write_ch__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-close", "on-close", -761178394), function(web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch) {
      return function() {
        return web_socket.close();
      };
    }(web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch)], null));
    var initial_ch = cljs.core.async.chan.call(null);
    var c__12112__auto___20929 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto___20929, ws_chan, initial_ch, web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch) {
      return function() {
        var f__12113__auto__ = function() {
          var switch__12047__auto__ = function(c__12112__auto___20929, ws_chan, initial_ch, web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch) {
            return function(state_20892) {
              var state_val_20893 = state_20892[1];
              if (state_val_20893 === 7) {
                var inst_20888 = state_20892[2];
                var state_20892__$1 = state_20892;
                var statearr_20894_20930 = state_20892__$1;
                statearr_20894_20930[2] = inst_20888;
                statearr_20894_20930[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20893 === 20) {
                  var state_20892__$1 = state_20892;
                  var statearr_20895_20931 = state_20892__$1;
                  statearr_20895_20931[2] = null;
                  statearr_20895_20931[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20893 === 1) {
                    var inst_20834 = false;
                    var state_20892__$1 = function() {
                      var statearr_20896 = state_20892;
                      statearr_20896[7] = inst_20834;
                      return statearr_20896;
                    }();
                    var statearr_20897_20932 = state_20892__$1;
                    statearr_20897_20932[2] = null;
                    statearr_20897_20932[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20893 === 4) {
                      var inst_20846 = state_20892[8];
                      var inst_20844 = state_20892[9];
                      var inst_20844__$1 = state_20892[2];
                      var inst_20845 = cljs.core.nth.call(null, inst_20844__$1, 0, null);
                      var inst_20846__$1 = cljs.core.nth.call(null, inst_20844__$1, 1, null);
                      var inst_20847 = cljs.core._EQ_.call(null, inst_20846__$1, open_ch);
                      var state_20892__$1 = function() {
                        var statearr_20898 = state_20892;
                        statearr_20898[8] = inst_20846__$1;
                        statearr_20898[9] = inst_20844__$1;
                        statearr_20898[10] = inst_20845;
                        return statearr_20898;
                      }();
                      if (inst_20847) {
                        var statearr_20899_20933 = state_20892__$1;
                        statearr_20899_20933[1] = 5;
                      } else {
                        var statearr_20900_20934 = state_20892__$1;
                        statearr_20900_20934[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20893 === 15) {
                        var inst_20873 = state_20892[2];
                        var state_20892__$1 = state_20892;
                        var statearr_20901_20935 = state_20892__$1;
                        statearr_20901_20935[2] = inst_20873;
                        statearr_20901_20935[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20893 === 21) {
                          var inst_20884 = state_20892[2];
                          var state_20892__$1 = state_20892;
                          var statearr_20902_20936 = state_20892__$1;
                          statearr_20902_20936[2] = inst_20884;
                          statearr_20902_20936[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20893 === 13) {
                            var state_20892__$1 = state_20892;
                            var statearr_20903_20937 = state_20892__$1;
                            statearr_20903_20937[2] = null;
                            statearr_20903_20937[1] = 14;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20893 === 6) {
                              var inst_20846 = state_20892[8];
                              var inst_20859 = cljs.core._EQ_.call(null, inst_20846, close_ch);
                              var state_20892__$1 = state_20892;
                              if (inst_20859) {
                                var statearr_20904_20938 = state_20892__$1;
                                statearr_20904_20938[1] = 9;
                              } else {
                                var statearr_20905_20939 = state_20892__$1;
                                statearr_20905_20939[1] = 10;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20893 === 17) {
                                var state_20892__$1 = state_20892;
                                var statearr_20906_20940 = state_20892__$1;
                                statearr_20906_20940[2] = initial_ch;
                                statearr_20906_20940[1] = 18;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20893 === 3) {
                                  var inst_20890 = state_20892[2];
                                  var state_20892__$1 = state_20892;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20892__$1, inst_20890);
                                } else {
                                  if (state_val_20893 === 12) {
                                    var inst_20834 = state_20892[7];
                                    var state_20892__$1 = state_20892;
                                    if (cljs.core.truth_(inst_20834)) {
                                      var statearr_20907_20941 = state_20892__$1;
                                      statearr_20907_20941[1] = 16;
                                    } else {
                                      var statearr_20908_20942 = state_20892__$1;
                                      statearr_20908_20942[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20893 === 2) {
                                      var inst_20841 = [open_ch, close_ch];
                                      var inst_20842 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_20841, null);
                                      var state_20892__$1 = state_20892;
                                      return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_20892__$1, 4, inst_20842);
                                    } else {
                                      if (state_val_20893 === 19) {
                                        var inst_20845 = state_20892[10];
                                        var state_20892__$1 = state_20892;
                                        var statearr_20909_20943 = state_20892__$1;
                                        statearr_20909_20943[2] = inst_20845;
                                        statearr_20909_20943[1] = 21;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_20893 === 11) {
                                          var inst_20886 = state_20892[2];
                                          var state_20892__$1 = state_20892;
                                          var statearr_20910_20944 = state_20892__$1;
                                          statearr_20910_20944[2] = inst_20886;
                                          statearr_20910_20944[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20893 === 9) {
                                            var inst_20844 = state_20892[9];
                                            var inst_20863 = state_20892[11];
                                            var inst_20862 = cljs.core.nth.call(null, inst_20844, 0, null);
                                            var inst_20863__$1 = chord.client.close_event__GT_maybe_error.call(null, inst_20862);
                                            var state_20892__$1 = function() {
                                              var statearr_20911 = state_20892;
                                              statearr_20911[11] = inst_20863__$1;
                                              return statearr_20911;
                                            }();
                                            if (cljs.core.truth_(inst_20863__$1)) {
                                              var statearr_20912_20945 = state_20892__$1;
                                              statearr_20912_20945[1] = 12;
                                            } else {
                                              var statearr_20913_20946 = state_20892__$1;
                                              statearr_20913_20946[1] = 13;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_20893 === 5) {
                                              var inst_20844 = state_20892[9];
                                              var inst_20850 = cljs.core.nth.call(null, inst_20844, 0, null);
                                              var inst_20851 = [new cljs.core.Keyword(null, "ws-channel", "ws-channel", 1643892174)];
                                              var inst_20852 = [ws_chan];
                                              var inst_20853 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_20851, inst_20852);
                                              var state_20892__$1 = function() {
                                                var statearr_20914 = state_20892;
                                                statearr_20914[12] = inst_20850;
                                                return statearr_20914;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20892__$1, 8, initial_ch, inst_20853);
                                            } else {
                                              if (state_val_20893 === 14) {
                                                var inst_20876 = state_20892[2];
                                                var inst_20877 = cljs.core.async.close_BANG_.call(null, ws_chan);
                                                var inst_20878 = cljs.core.async.close_BANG_.call(null, initial_ch);
                                                var state_20892__$1 = function() {
                                                  var statearr_20915 = state_20892;
                                                  statearr_20915[13] = inst_20877;
                                                  statearr_20915[14] = inst_20876;
                                                  return statearr_20915;
                                                }();
                                                var statearr_20916_20947 = state_20892__$1;
                                                statearr_20916_20947[2] = inst_20878;
                                                statearr_20916_20947[1] = 11;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_20893 === 16) {
                                                  var state_20892__$1 = state_20892;
                                                  var statearr_20917_20948 = state_20892__$1;
                                                  statearr_20917_20948[2] = read_ch__$1;
                                                  statearr_20917_20948[1] = 18;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_20893 === 10) {
                                                    var inst_20846 = state_20892[8];
                                                    var inst_20880 = cljs.core._EQ_.call(null, inst_20846, new cljs.core.Keyword(null, "default", "default", -1987822328));
                                                    var state_20892__$1 = state_20892;
                                                    if (inst_20880) {
                                                      var statearr_20918_20949 = state_20892__$1;
                                                      statearr_20918_20949[1] = 19;
                                                    } else {
                                                      var statearr_20919_20950 = state_20892__$1;
                                                      statearr_20919_20950[1] = 20;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_20893 === 18) {
                                                      var inst_20863 = state_20892[11];
                                                      var inst_20868 = state_20892[2];
                                                      var inst_20869 = [new cljs.core.Keyword(null, "error", "error", -978969032)];
                                                      var inst_20870 = [inst_20863];
                                                      var inst_20871 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_20869, inst_20870);
                                                      var state_20892__$1 = state_20892;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20892__$1, 15, inst_20868, inst_20871);
                                                    } else {
                                                      if (state_val_20893 === 8) {
                                                        var inst_20855 = state_20892[2];
                                                        var inst_20856 = cljs.core.async.close_BANG_.call(null, initial_ch);
                                                        var inst_20834 = true;
                                                        var state_20892__$1 = function() {
                                                          var statearr_20920 = state_20892;
                                                          statearr_20920[15] = inst_20855;
                                                          statearr_20920[16] = inst_20856;
                                                          statearr_20920[7] = inst_20834;
                                                          return statearr_20920;
                                                        }();
                                                        var statearr_20921_20951 = state_20892__$1;
                                                        statearr_20921_20951[2] = null;
                                                        statearr_20921_20951[1] = 2;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        return null;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__12112__auto___20929, ws_chan, initial_ch, web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch);
          return function(switch__12047__auto__, c__12112__auto___20929, ws_chan, initial_ch, web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch) {
            return function() {
              var state_machine__12048__auto__ = null;
              var state_machine__12048__auto____0 = function() {
                var statearr_20925 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20925[0] = state_machine__12048__auto__;
                statearr_20925[1] = 1;
                return statearr_20925;
              };
              var state_machine__12048__auto____1 = function(state_20892) {
                while (true) {
                  var ret_value__12049__auto__ = function() {
                    try {
                      while (true) {
                        var result__12050__auto__ = switch__12047__auto__.call(null, state_20892);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__12050__auto__;
                        }
                        break;
                      }
                    } catch (e20926) {
                      if (e20926 instanceof Object) {
                        var ex__12051__auto__ = e20926;
                        var statearr_20927_20952 = state_20892;
                        statearr_20927_20952[5] = ex__12051__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20892);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e20926;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20953 = state_20892;
                    state_20892 = G__20953;
                    continue;
                  } else {
                    return ret_value__12049__auto__;
                  }
                  break;
                }
              };
              state_machine__12048__auto__ = function(state_20892) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__12048__auto____0.call(this);
                  case 1:
                    return state_machine__12048__auto____1.call(this, state_20892);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
              state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
              return state_machine__12048__auto__;
            }();
          }(switch__12047__auto__, c__12112__auto___20929, ws_chan, initial_ch, web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch);
        }();
        var state__12114__auto__ = function() {
          var statearr_20928 = f__12113__auto__.call(null);
          statearr_20928[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto___20929;
          return statearr_20928;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
      };
    }(c__12112__auto___20929, ws_chan, initial_ch, web_socket, map__20833, map__20833__$1, write_ch__$1, read_ch__$1, open_ch, close_ch, vec__20831, map__20832, map__20832__$1, format, write_ch, read_ch));
    return initial_ch;
  };
  var ws_ch = function(ws_url, var_args) {
    var p__20732 = null;
    if (arguments.length > 1) {
      p__20732 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ws_ch__delegate.call(this, ws_url, p__20732);
  };
  ws_ch.cljs$lang$maxFixedArity = 1;
  ws_ch.cljs$lang$applyTo = function(arglist__20954) {
    var ws_url = cljs.core.first(arglist__20954);
    var p__20732 = cljs.core.rest(arglist__20954);
    return ws_ch__delegate(ws_url, p__20732);
  };
  ws_ch.cljs$core$IFn$_invoke$arity$variadic = ws_ch__delegate;
  return ws_ch;
}();
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__20080 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__20080;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__20084 = cljs.core._EQ_;
    var expr__20085 = limit;
    if (cljs.core.truth_(pred__20084.call(null, 1, expr__20085))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__20084.call(null, 2, expr__20085))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__20087 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__20088 = limit__$1 - 1;
            var G__20089 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__20087;
            limit__$1 = G__20088;
            parts = G__20089;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__20090 = index - 1;
        index = G__20090;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___20091 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___20091)) {
        var replacement_20092 = temp__4124__auto___20091;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_20092));
      } else {
        buffer.append(ch);
      }
      var G__20093 = index + 1;
      index = G__20093;
      continue;
    }
    break;
  }
};
goog.provide("dommy.attrs");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.attrs.class_match_QMARK_ = function class_match_QMARK_(class_name, class$, idx) {
  var and__3027__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__3027__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__3027__auto__;
  }
};
dommy.attrs.class_index = function class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.attrs.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__20097 = i + class$.length;
        start_from = G__20097;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.attrs.has_class_QMARK_ = function has_class_QMARK_(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4124__auto__ = elem__$1.classList;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var class_list = temp__4124__auto__;
    return class_list.contains(class$__$1);
  } else {
    var temp__4126__auto__ = elem__$1.className;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var class_name = temp__4126__auto__;
      var temp__4126__auto____$1 = dommy.attrs.class_index.call(null, class_name, class$__$1);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var i = temp__4126__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.attrs.add_class_BANG_ = function() {
  var add_class_BANG_ = null;
  var add_class_BANG___2 = function(elem, classes) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var classes__$1 = clojure.string.trim.call(null, cljs.core.name.call(null, classes));
    if (cljs.core.seq.call(null, classes__$1)) {
      var temp__4124__auto___20122 = elem__$1.classList;
      if (cljs.core.truth_(temp__4124__auto___20122)) {
        var class_list_20123 = temp__4124__auto___20122;
        var seq__20110_20124 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__20111_20125 = null;
        var count__20112_20126 = 0;
        var i__20113_20127 = 0;
        while (true) {
          if (i__20113_20127 < count__20112_20126) {
            var class_20128 = cljs.core._nth.call(null, chunk__20111_20125, i__20113_20127);
            class_list_20123.add(class_20128);
            var G__20129 = seq__20110_20124;
            var G__20130 = chunk__20111_20125;
            var G__20131 = count__20112_20126;
            var G__20132 = i__20113_20127 + 1;
            seq__20110_20124 = G__20129;
            chunk__20111_20125 = G__20130;
            count__20112_20126 = G__20131;
            i__20113_20127 = G__20132;
            continue;
          } else {
            var temp__4126__auto___20133 = cljs.core.seq.call(null, seq__20110_20124);
            if (temp__4126__auto___20133) {
              var seq__20110_20134__$1 = temp__4126__auto___20133;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20110_20134__$1)) {
                var c__3795__auto___20135 = cljs.core.chunk_first.call(null, seq__20110_20134__$1);
                var G__20136 = cljs.core.chunk_rest.call(null, seq__20110_20134__$1);
                var G__20137 = c__3795__auto___20135;
                var G__20138 = cljs.core.count.call(null, c__3795__auto___20135);
                var G__20139 = 0;
                seq__20110_20124 = G__20136;
                chunk__20111_20125 = G__20137;
                count__20112_20126 = G__20138;
                i__20113_20127 = G__20139;
                continue;
              } else {
                var class_20140 = cljs.core.first.call(null, seq__20110_20134__$1);
                class_list_20123.add(class_20140);
                var G__20141 = cljs.core.next.call(null, seq__20110_20134__$1);
                var G__20142 = null;
                var G__20143 = 0;
                var G__20144 = 0;
                seq__20110_20124 = G__20141;
                chunk__20111_20125 = G__20142;
                count__20112_20126 = G__20143;
                i__20113_20127 = G__20144;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        var class_name_20145 = elem__$1.className;
        var seq__20114_20146 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__20115_20147 = null;
        var count__20116_20148 = 0;
        var i__20117_20149 = 0;
        while (true) {
          if (i__20117_20149 < count__20116_20148) {
            var class_20150 = cljs.core._nth.call(null, chunk__20115_20147, i__20117_20149);
            if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_20145, class_20150))) {
            } else {
              elem__$1.className = class_name_20145 === "" ? class_20150 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_20145) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_20150);
            }
            var G__20151 = seq__20114_20146;
            var G__20152 = chunk__20115_20147;
            var G__20153 = count__20116_20148;
            var G__20154 = i__20117_20149 + 1;
            seq__20114_20146 = G__20151;
            chunk__20115_20147 = G__20152;
            count__20116_20148 = G__20153;
            i__20117_20149 = G__20154;
            continue;
          } else {
            var temp__4126__auto___20155 = cljs.core.seq.call(null, seq__20114_20146);
            if (temp__4126__auto___20155) {
              var seq__20114_20156__$1 = temp__4126__auto___20155;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20114_20156__$1)) {
                var c__3795__auto___20157 = cljs.core.chunk_first.call(null, seq__20114_20156__$1);
                var G__20158 = cljs.core.chunk_rest.call(null, seq__20114_20156__$1);
                var G__20159 = c__3795__auto___20157;
                var G__20160 = cljs.core.count.call(null, c__3795__auto___20157);
                var G__20161 = 0;
                seq__20114_20146 = G__20158;
                chunk__20115_20147 = G__20159;
                count__20116_20148 = G__20160;
                i__20117_20149 = G__20161;
                continue;
              } else {
                var class_20162 = cljs.core.first.call(null, seq__20114_20156__$1);
                if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_20145, class_20162))) {
                } else {
                  elem__$1.className = class_name_20145 === "" ? class_20162 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_20145) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_20162);
                }
                var G__20163 = cljs.core.next.call(null, seq__20114_20156__$1);
                var G__20164 = null;
                var G__20165 = 0;
                var G__20166 = 0;
                seq__20114_20146 = G__20163;
                chunk__20115_20147 = G__20164;
                count__20116_20148 = G__20165;
                i__20117_20149 = G__20166;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
    } else {
    }
    return elem__$1;
  };
  var add_class_BANG___3 = function() {
    var G__20167__delegate = function(elem, classes, more_classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20118_20168 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
      var chunk__20119_20169 = null;
      var count__20120_20170 = 0;
      var i__20121_20171 = 0;
      while (true) {
        if (i__20121_20171 < count__20120_20170) {
          var c_20172 = cljs.core._nth.call(null, chunk__20119_20169, i__20121_20171);
          add_class_BANG_.call(null, elem__$1, c_20172);
          var G__20173 = seq__20118_20168;
          var G__20174 = chunk__20119_20169;
          var G__20175 = count__20120_20170;
          var G__20176 = i__20121_20171 + 1;
          seq__20118_20168 = G__20173;
          chunk__20119_20169 = G__20174;
          count__20120_20170 = G__20175;
          i__20121_20171 = G__20176;
          continue;
        } else {
          var temp__4126__auto___20177 = cljs.core.seq.call(null, seq__20118_20168);
          if (temp__4126__auto___20177) {
            var seq__20118_20178__$1 = temp__4126__auto___20177;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20118_20178__$1)) {
              var c__3795__auto___20179 = cljs.core.chunk_first.call(null, seq__20118_20178__$1);
              var G__20180 = cljs.core.chunk_rest.call(null, seq__20118_20178__$1);
              var G__20181 = c__3795__auto___20179;
              var G__20182 = cljs.core.count.call(null, c__3795__auto___20179);
              var G__20183 = 0;
              seq__20118_20168 = G__20180;
              chunk__20119_20169 = G__20181;
              count__20120_20170 = G__20182;
              i__20121_20171 = G__20183;
              continue;
            } else {
              var c_20184 = cljs.core.first.call(null, seq__20118_20178__$1);
              add_class_BANG_.call(null, elem__$1, c_20184);
              var G__20185 = cljs.core.next.call(null, seq__20118_20178__$1);
              var G__20186 = null;
              var G__20187 = 0;
              var G__20188 = 0;
              seq__20118_20168 = G__20185;
              chunk__20119_20169 = G__20186;
              count__20120_20170 = G__20187;
              i__20121_20171 = G__20188;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__20167 = function(elem, classes, var_args) {
      var more_classes = null;
      if (arguments.length > 2) {
        more_classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20167__delegate.call(this, elem, classes, more_classes);
    };
    G__20167.cljs$lang$maxFixedArity = 2;
    G__20167.cljs$lang$applyTo = function(arglist__20189) {
      var elem = cljs.core.first(arglist__20189);
      arglist__20189 = cljs.core.next(arglist__20189);
      var classes = cljs.core.first(arglist__20189);
      var more_classes = cljs.core.rest(arglist__20189);
      return G__20167__delegate(elem, classes, more_classes);
    };
    G__20167.cljs$core$IFn$_invoke$arity$variadic = G__20167__delegate;
    return G__20167;
  }();
  add_class_BANG_ = function(elem, classes, var_args) {
    var more_classes = var_args;
    switch(arguments.length) {
      case 2:
        return add_class_BANG___2.call(this, elem, classes);
      default:
        return add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, classes, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_class_BANG_.cljs$lang$maxFixedArity = 2;
  add_class_BANG_.cljs$lang$applyTo = add_class_BANG___3.cljs$lang$applyTo;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = add_class_BANG___2;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return add_class_BANG_;
}();
dommy.attrs.remove_class_str = function remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4124__auto__ = dommy.attrs.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var i = temp__4124__auto__;
      var G__20190 = function() {
        var end = i + class$.length;
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(end < class_len ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substring(0, i)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substr(end + 1)) : class_name.substring(0, i - 1));
      }();
      class_name = G__20190;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_ = function() {
  var remove_class_BANG_ = null;
  var remove_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___20199 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___20199)) {
      var class_list_20200 = temp__4124__auto___20199;
      class_list_20200.remove(class$__$1);
    } else {
      var class_name_20201 = elem__$1.className;
      var new_class_name_20202 = dommy.attrs.remove_class_str.call(null, class_name_20201, class$__$1);
      if (class_name_20201 === new_class_name_20202) {
      } else {
        elem__$1.className = new_class_name_20202;
      }
    }
    return elem__$1;
  };
  var remove_class_BANG___3 = function() {
    var G__20203__delegate = function(elem, class$, classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20195 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
      var chunk__20196 = null;
      var count__20197 = 0;
      var i__20198 = 0;
      while (true) {
        if (i__20198 < count__20197) {
          var c = cljs.core._nth.call(null, chunk__20196, i__20198);
          remove_class_BANG_.call(null, elem__$1, c);
          var G__20204 = seq__20195;
          var G__20205 = chunk__20196;
          var G__20206 = count__20197;
          var G__20207 = i__20198 + 1;
          seq__20195 = G__20204;
          chunk__20196 = G__20205;
          count__20197 = G__20206;
          i__20198 = G__20207;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__20195);
          if (temp__4126__auto__) {
            var seq__20195__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20195__$1)) {
              var c__3795__auto__ = cljs.core.chunk_first.call(null, seq__20195__$1);
              var G__20208 = cljs.core.chunk_rest.call(null, seq__20195__$1);
              var G__20209 = c__3795__auto__;
              var G__20210 = cljs.core.count.call(null, c__3795__auto__);
              var G__20211 = 0;
              seq__20195 = G__20208;
              chunk__20196 = G__20209;
              count__20197 = G__20210;
              i__20198 = G__20211;
              continue;
            } else {
              var c = cljs.core.first.call(null, seq__20195__$1);
              remove_class_BANG_.call(null, elem__$1, c);
              var G__20212 = cljs.core.next.call(null, seq__20195__$1);
              var G__20213 = null;
              var G__20214 = 0;
              var G__20215 = 0;
              seq__20195 = G__20212;
              chunk__20196 = G__20213;
              count__20197 = G__20214;
              i__20198 = G__20215;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
    var G__20203 = function(elem, class$, var_args) {
      var classes = null;
      if (arguments.length > 2) {
        classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20203__delegate.call(this, elem, class$, classes);
    };
    G__20203.cljs$lang$maxFixedArity = 2;
    G__20203.cljs$lang$applyTo = function(arglist__20216) {
      var elem = cljs.core.first(arglist__20216);
      arglist__20216 = cljs.core.next(arglist__20216);
      var class$ = cljs.core.first(arglist__20216);
      var classes = cljs.core.rest(arglist__20216);
      return G__20203__delegate(elem, class$, classes);
    };
    G__20203.cljs$core$IFn$_invoke$arity$variadic = G__20203__delegate;
    return G__20203;
  }();
  remove_class_BANG_ = function(elem, class$, var_args) {
    var classes = var_args;
    switch(arguments.length) {
      case 2:
        return remove_class_BANG___2.call(this, elem, class$);
      default:
        return remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, class$, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_class_BANG_.cljs$lang$maxFixedArity = 2;
  remove_class_BANG_.cljs$lang$applyTo = remove_class_BANG___3.cljs$lang$applyTo;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_class_BANG___2;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_class_BANG_;
}();
dommy.attrs.toggle_class_BANG_ = function() {
  var toggle_class_BANG_ = null;
  var toggle_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___20217 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___20217)) {
      var class_list_20218 = temp__4124__auto___20217;
      class_list_20218.toggle(class$__$1);
    } else {
      toggle_class_BANG_.call(null, elem__$1, class$__$1, !dommy.attrs.has_class_QMARK_.call(null, elem__$1, class$__$1));
    }
    return elem__$1;
  };
  var toggle_class_BANG___3 = function(elem, class$, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      dommy.attrs.add_class_BANG_.call(null, elem__$1, class$);
    } else {
      dommy.attrs.remove_class_BANG_.call(null, elem__$1, class$);
    }
    return elem__$1;
  };
  toggle_class_BANG_ = function(elem, class$, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_class_BANG___2.call(this, elem, class$);
      case 3:
        return toggle_class_BANG___3.call(this, elem, class$, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_class_BANG___2;
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_class_BANG___3;
  return toggle_class_BANG_;
}();
dommy.attrs.style_str = function style_str(x) {
  if (typeof x === "string") {
    return x;
  } else {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, function(p__20221) {
      var vec__20222 = p__20221;
      var k = cljs.core.nth.call(null, vec__20222, 0, null);
      var v = cljs.core.nth.call(null, vec__20222, 1, null);
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, k)) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, v)) + ";";
    }, x));
  }
};
dommy.attrs.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var style = elem__$1.style;
    var seq__20229_20235 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__20230_20236 = null;
    var count__20231_20237 = 0;
    var i__20232_20238 = 0;
    while (true) {
      if (i__20232_20238 < count__20231_20237) {
        var vec__20233_20239 = cljs.core._nth.call(null, chunk__20230_20236, i__20232_20238);
        var k_20240 = cljs.core.nth.call(null, vec__20233_20239, 0, null);
        var v_20241 = cljs.core.nth.call(null, vec__20233_20239, 1, null);
        style[cljs.core.name.call(null, k_20240)] = v_20241;
        var G__20242 = seq__20229_20235;
        var G__20243 = chunk__20230_20236;
        var G__20244 = count__20231_20237;
        var G__20245 = i__20232_20238 + 1;
        seq__20229_20235 = G__20242;
        chunk__20230_20236 = G__20243;
        count__20231_20237 = G__20244;
        i__20232_20238 = G__20245;
        continue;
      } else {
        var temp__4126__auto___20246 = cljs.core.seq.call(null, seq__20229_20235);
        if (temp__4126__auto___20246) {
          var seq__20229_20247__$1 = temp__4126__auto___20246;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20229_20247__$1)) {
            var c__3795__auto___20248 = cljs.core.chunk_first.call(null, seq__20229_20247__$1);
            var G__20249 = cljs.core.chunk_rest.call(null, seq__20229_20247__$1);
            var G__20250 = c__3795__auto___20248;
            var G__20251 = cljs.core.count.call(null, c__3795__auto___20248);
            var G__20252 = 0;
            seq__20229_20235 = G__20249;
            chunk__20230_20236 = G__20250;
            count__20231_20237 = G__20251;
            i__20232_20238 = G__20252;
            continue;
          } else {
            var vec__20234_20253 = cljs.core.first.call(null, seq__20229_20247__$1);
            var k_20254 = cljs.core.nth.call(null, vec__20234_20253, 0, null);
            var v_20255 = cljs.core.nth.call(null, vec__20234_20253, 1, null);
            style[cljs.core.name.call(null, k_20254)] = v_20255;
            var G__20256 = cljs.core.next.call(null, seq__20229_20247__$1);
            var G__20257 = null;
            var G__20258 = 0;
            var G__20259 = 0;
            seq__20229_20235 = G__20256;
            chunk__20230_20236 = G__20257;
            count__20231_20237 = G__20258;
            i__20232_20238 = G__20259;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_style_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_style_BANG___delegate.call(this, elem, kvs);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 1;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__20260) {
    var elem = cljs.core.first(arglist__20260);
    var kvs = cljs.core.rest(arglist__20260);
    return set_style_BANG___delegate(elem, kvs);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
dommy.attrs.style = function style(elem, k) {
  if (cljs.core.truth_(k)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "k", "k", -505765866, null))));
  }
  return window.getComputedStyle(dommy.template.__GT_node_like.call(null, elem))[cljs.core.name.call(null, k)];
};
dommy.attrs.set_px_BANG_ = function() {
  var set_px_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var seq__20267_20273 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__20268_20274 = null;
    var count__20269_20275 = 0;
    var i__20270_20276 = 0;
    while (true) {
      if (i__20270_20276 < count__20269_20275) {
        var vec__20271_20277 = cljs.core._nth.call(null, chunk__20268_20274, i__20270_20276);
        var k_20278 = cljs.core.nth.call(null, vec__20271_20277, 0, null);
        var v_20279 = cljs.core.nth.call(null, vec__20271_20277, 1, null);
        dommy.attrs.set_style_BANG_.call(null, elem__$1, k_20278, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_20279) + "px");
        var G__20280 = seq__20267_20273;
        var G__20281 = chunk__20268_20274;
        var G__20282 = count__20269_20275;
        var G__20283 = i__20270_20276 + 1;
        seq__20267_20273 = G__20280;
        chunk__20268_20274 = G__20281;
        count__20269_20275 = G__20282;
        i__20270_20276 = G__20283;
        continue;
      } else {
        var temp__4126__auto___20284 = cljs.core.seq.call(null, seq__20267_20273);
        if (temp__4126__auto___20284) {
          var seq__20267_20285__$1 = temp__4126__auto___20284;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20267_20285__$1)) {
            var c__3795__auto___20286 = cljs.core.chunk_first.call(null, seq__20267_20285__$1);
            var G__20287 = cljs.core.chunk_rest.call(null, seq__20267_20285__$1);
            var G__20288 = c__3795__auto___20286;
            var G__20289 = cljs.core.count.call(null, c__3795__auto___20286);
            var G__20290 = 0;
            seq__20267_20273 = G__20287;
            chunk__20268_20274 = G__20288;
            count__20269_20275 = G__20289;
            i__20270_20276 = G__20290;
            continue;
          } else {
            var vec__20272_20291 = cljs.core.first.call(null, seq__20267_20285__$1);
            var k_20292 = cljs.core.nth.call(null, vec__20272_20291, 0, null);
            var v_20293 = cljs.core.nth.call(null, vec__20272_20291, 1, null);
            dommy.attrs.set_style_BANG_.call(null, elem__$1, k_20292, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_20293) + "px");
            var G__20294 = cljs.core.next.call(null, seq__20267_20285__$1);
            var G__20295 = null;
            var G__20296 = 0;
            var G__20297 = 0;
            seq__20267_20273 = G__20294;
            chunk__20268_20274 = G__20295;
            count__20269_20275 = G__20296;
            i__20270_20276 = G__20297;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_px_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_px_BANG___delegate.call(this, elem, kvs);
  };
  set_px_BANG_.cljs$lang$maxFixedArity = 1;
  set_px_BANG_.cljs$lang$applyTo = function(arglist__20298) {
    var elem = cljs.core.first(arglist__20298);
    var kvs = cljs.core.rest(arglist__20298);
    return set_px_BANG___delegate(elem, kvs);
  };
  set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_px_BANG___delegate;
  return set_px_BANG_;
}();
dommy.attrs.px = function px(elem, k) {
  var pixels = dommy.attrs.style.call(null, dommy.template.__GT_node_like.call(null, elem), k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_ = function() {
  var set_attr_BANG_ = null;
  var set_attr_BANG___2 = function(elem, k) {
    return set_attr_BANG_.call(null, dommy.template.__GT_node_like.call(null, elem), k, "true");
  };
  var set_attr_BANG___3 = function(elem, k, v) {
    if (cljs.core.truth_(v)) {
      if (cljs.core.fn_QMARK_.call(null, v)) {
        var G__20307 = dommy.template.__GT_node_like.call(null, elem);
        G__20307[cljs.core.name.call(null, k)] = v;
        return G__20307;
      } else {
        var G__20308 = dommy.template.__GT_node_like.call(null, elem);
        G__20308.setAttribute(cljs.core.name.call(null, k), k === new cljs.core.Keyword(null, "style", "style", -496642736) ? dommy.attrs.style_str.call(null, v) : v);
        return G__20308;
      }
    } else {
      return null;
    }
  };
  var set_attr_BANG___4 = function() {
    var G__20315__delegate = function(elem, k, v, kvs) {
      if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null))))));
      }
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20309_20316 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
      var chunk__20310_20317 = null;
      var count__20311_20318 = 0;
      var i__20312_20319 = 0;
      while (true) {
        if (i__20312_20319 < count__20311_20318) {
          var vec__20313_20320 = cljs.core._nth.call(null, chunk__20310_20317, i__20312_20319);
          var k_20321__$1 = cljs.core.nth.call(null, vec__20313_20320, 0, null);
          var v_20322__$1 = cljs.core.nth.call(null, vec__20313_20320, 1, null);
          set_attr_BANG_.call(null, elem__$1, k_20321__$1, v_20322__$1);
          var G__20323 = seq__20309_20316;
          var G__20324 = chunk__20310_20317;
          var G__20325 = count__20311_20318;
          var G__20326 = i__20312_20319 + 1;
          seq__20309_20316 = G__20323;
          chunk__20310_20317 = G__20324;
          count__20311_20318 = G__20325;
          i__20312_20319 = G__20326;
          continue;
        } else {
          var temp__4126__auto___20327 = cljs.core.seq.call(null, seq__20309_20316);
          if (temp__4126__auto___20327) {
            var seq__20309_20328__$1 = temp__4126__auto___20327;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20309_20328__$1)) {
              var c__3795__auto___20329 = cljs.core.chunk_first.call(null, seq__20309_20328__$1);
              var G__20330 = cljs.core.chunk_rest.call(null, seq__20309_20328__$1);
              var G__20331 = c__3795__auto___20329;
              var G__20332 = cljs.core.count.call(null, c__3795__auto___20329);
              var G__20333 = 0;
              seq__20309_20316 = G__20330;
              chunk__20310_20317 = G__20331;
              count__20311_20318 = G__20332;
              i__20312_20319 = G__20333;
              continue;
            } else {
              var vec__20314_20334 = cljs.core.first.call(null, seq__20309_20328__$1);
              var k_20335__$1 = cljs.core.nth.call(null, vec__20314_20334, 0, null);
              var v_20336__$1 = cljs.core.nth.call(null, vec__20314_20334, 1, null);
              set_attr_BANG_.call(null, elem__$1, k_20335__$1, v_20336__$1);
              var G__20337 = cljs.core.next.call(null, seq__20309_20328__$1);
              var G__20338 = null;
              var G__20339 = 0;
              var G__20340 = 0;
              seq__20309_20316 = G__20337;
              chunk__20310_20317 = G__20338;
              count__20311_20318 = G__20339;
              i__20312_20319 = G__20340;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__20315 = function(elem, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20315__delegate.call(this, elem, k, v, kvs);
    };
    G__20315.cljs$lang$maxFixedArity = 3;
    G__20315.cljs$lang$applyTo = function(arglist__20341) {
      var elem = cljs.core.first(arglist__20341);
      arglist__20341 = cljs.core.next(arglist__20341);
      var k = cljs.core.first(arglist__20341);
      arglist__20341 = cljs.core.next(arglist__20341);
      var v = cljs.core.first(arglist__20341);
      var kvs = cljs.core.rest(arglist__20341);
      return G__20315__delegate(elem, k, v, kvs);
    };
    G__20315.cljs$core$IFn$_invoke$arity$variadic = G__20315__delegate;
    return G__20315;
  }();
  set_attr_BANG_ = function(elem, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 2:
        return set_attr_BANG___2.call(this, elem, k);
      case 3:
        return set_attr_BANG___3.call(this, elem, k, v);
      default:
        return set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic(elem, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 3;
  set_attr_BANG_.cljs$lang$applyTo = set_attr_BANG___4.cljs$lang$applyTo;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_attr_BANG___2;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_attr_BANG___3;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return set_attr_BANG_;
}();
dommy.attrs.remove_attr_BANG_ = function() {
  var remove_attr_BANG_ = null;
  var remove_attr_BANG___2 = function(elem, k) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), null, new cljs.core.Keyword(null, "classes", "classes", 2037804510), null], null), null)).call(null, k))) {
      elem__$1.className = "";
    } else {
      elem__$1.removeAttribute(cljs.core.name.call(null, k));
    }
    return elem__$1;
  };
  var remove_attr_BANG___3 = function() {
    var G__20350__delegate = function(elem, k, ks) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__20346_20351 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
      var chunk__20347_20352 = null;
      var count__20348_20353 = 0;
      var i__20349_20354 = 0;
      while (true) {
        if (i__20349_20354 < count__20348_20353) {
          var k_20355__$1 = cljs.core._nth.call(null, chunk__20347_20352, i__20349_20354);
          remove_attr_BANG_.call(null, elem__$1, k_20355__$1);
          var G__20356 = seq__20346_20351;
          var G__20357 = chunk__20347_20352;
          var G__20358 = count__20348_20353;
          var G__20359 = i__20349_20354 + 1;
          seq__20346_20351 = G__20356;
          chunk__20347_20352 = G__20357;
          count__20348_20353 = G__20358;
          i__20349_20354 = G__20359;
          continue;
        } else {
          var temp__4126__auto___20360 = cljs.core.seq.call(null, seq__20346_20351);
          if (temp__4126__auto___20360) {
            var seq__20346_20361__$1 = temp__4126__auto___20360;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20346_20361__$1)) {
              var c__3795__auto___20362 = cljs.core.chunk_first.call(null, seq__20346_20361__$1);
              var G__20363 = cljs.core.chunk_rest.call(null, seq__20346_20361__$1);
              var G__20364 = c__3795__auto___20362;
              var G__20365 = cljs.core.count.call(null, c__3795__auto___20362);
              var G__20366 = 0;
              seq__20346_20351 = G__20363;
              chunk__20347_20352 = G__20364;
              count__20348_20353 = G__20365;
              i__20349_20354 = G__20366;
              continue;
            } else {
              var k_20367__$1 = cljs.core.first.call(null, seq__20346_20361__$1);
              remove_attr_BANG_.call(null, elem__$1, k_20367__$1);
              var G__20368 = cljs.core.next.call(null, seq__20346_20361__$1);
              var G__20369 = null;
              var G__20370 = 0;
              var G__20371 = 0;
              seq__20346_20351 = G__20368;
              chunk__20347_20352 = G__20369;
              count__20348_20353 = G__20370;
              i__20349_20354 = G__20371;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__20350 = function(elem, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20350__delegate.call(this, elem, k, ks);
    };
    G__20350.cljs$lang$maxFixedArity = 2;
    G__20350.cljs$lang$applyTo = function(arglist__20372) {
      var elem = cljs.core.first(arglist__20372);
      arglist__20372 = cljs.core.next(arglist__20372);
      var k = cljs.core.first(arglist__20372);
      var ks = cljs.core.rest(arglist__20372);
      return G__20350__delegate(elem, k, ks);
    };
    G__20350.cljs$core$IFn$_invoke$arity$variadic = G__20350__delegate;
    return G__20350;
  }();
  remove_attr_BANG_ = function(elem, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return remove_attr_BANG___2.call(this, elem, k);
      default:
        return remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
  remove_attr_BANG_.cljs$lang$applyTo = remove_attr_BANG___3.cljs$lang$applyTo;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_attr_BANG___2;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_attr_BANG_;
}();
dommy.attrs.attr = function attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return dommy.template.__GT_node_like.call(null, elem).getAttribute(cljs.core.name.call(null, k));
  } else {
    return null;
  }
};
dommy.attrs.toggle_attr_BANG_ = function() {
  var toggle_attr_BANG_ = null;
  var toggle_attr_BANG___2 = function(elem, k) {
    return toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.attrs.attr.call(null, elem, k)));
  };
  var toggle_attr_BANG___3 = function(elem, k, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      return dommy.attrs.set_attr_BANG_.call(null, elem__$1, k);
    } else {
      return dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k);
    }
  };
  toggle_attr_BANG_ = function(elem, k, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_attr_BANG___2.call(this, elem, k);
      case 3:
        return toggle_attr_BANG___3.call(this, elem, k, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_attr_BANG___2;
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_attr_BANG___3;
  return toggle_attr_BANG_;
}();
dommy.attrs.hidden_QMARK_ = function hidden_QMARK_(elem) {
  return "none" === dommy.template.__GT_node_like.call(null, elem).style.display;
};
dommy.attrs.toggle_BANG_ = function() {
  var toggle_BANG_ = null;
  var toggle_BANG___1 = function(elem) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    toggle_BANG_.call(null, elem__$1, dommy.attrs.hidden_QMARK_.call(null, elem__$1));
    return elem__$1;
  };
  var toggle_BANG___2 = function(elem, show_QMARK_) {
    var G__20374 = dommy.template.__GT_node_like.call(null, elem);
    G__20374.style.display = show_QMARK_ ? "" : "none";
    return G__20374;
  };
  toggle_BANG_ = function(elem, show_QMARK_) {
    switch(arguments.length) {
      case 1:
        return toggle_BANG___1.call(this, elem);
      case 2:
        return toggle_BANG___2.call(this, elem, show_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = toggle_BANG___1;
  toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_BANG___2;
  return toggle_BANG_;
}();
dommy.attrs.hide_BANG_ = function hide_BANG_(elem) {
  var G__20376 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__20376, false);
  return G__20376;
};
dommy.attrs.show_BANG_ = function show_BANG_(elem) {
  var G__20378 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__20378, true);
  return G__20378;
};
dommy.attrs.bounding_client_rect = function bounding_client_rect(elem) {
  return cljs.core.js__GT_clj.call(null, function() {
    var G__20380 = dommy.template.__GT_node_like.call(null, elem).getBoundingClientRect();
    G__20380["constructor"] = Object;
    return G__20380;
  }(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
};
dommy.attrs.scroll_into_view = function scroll_into_view(elem, align_with_top_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var top = (new cljs.core.Keyword(null, "top", "top", -1856271961)).cljs$core$IFn$_invoke$arity$1(dommy.attrs.bounding_client_rect.call(null, elem__$1));
  if (window.innerHeight < top + elem__$1.offsetHeight) {
    return elem__$1.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
goog.provide("dommy.template");
goog.require("cljs.core");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.template._PLUS_svg_ns_PLUS_ = "http://www.w3.org/2000/svg";
dommy.template._PLUS_svg_tags_PLUS_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["svg", null, "line", null], null), null);
dommy.template.PElement = function() {
  var obj20382 = {};
  return obj20382;
}();
dommy.template._elem = function _elem(this$) {
  if (function() {
    var and__3027__auto__ = this$;
    if (and__3027__auto__) {
      return this$.dommy$template$PElement$_elem$arity$1;
    } else {
      return and__3027__auto__;
    }
  }()) {
    return this$.dommy$template$PElement$_elem$arity$1(this$);
  } else {
    var x__3666__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3039__auto__ = dommy.template._elem[goog.typeOf(x__3666__auto__)];
      if (or__3039__auto__) {
        return or__3039__auto__;
      } else {
        var or__3039__auto____$1 = dommy.template._elem["_"];
        if (or__3039__auto____$1) {
          return or__3039__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PElement.-elem", this$);
        }
      }
    }().call(null, this$);
  }
};
dommy.template.next_css_index = function next_css_index(s, start_idx) {
  var id_idx = s.indexOf("#", start_idx);
  var class_idx = s.indexOf(".", start_idx);
  var idx = Math.min(id_idx, class_idx);
  if (idx < 0) {
    return Math.max(id_idx, class_idx);
  } else {
    return idx;
  }
};
dommy.template.base_element = function base_element(node_key) {
  var node_str = cljs.core.name.call(null, node_key);
  var base_idx = dommy.template.next_css_index.call(null, node_str, 0);
  var tag = base_idx > 0 ? node_str.substring(0, base_idx) : base_idx === 0 ? "div" : new cljs.core.Keyword(null, "else", "else", -1508377146) ? node_str : null;
  var node = cljs.core.truth_(dommy.template._PLUS_svg_tags_PLUS_.call(null, tag)) ? document.createElementNS(dommy.template._PLUS_svg_ns_PLUS_, tag) : document.createElement(tag);
  if (base_idx >= 0) {
    var str_20385 = node_str.substring(base_idx);
    while (true) {
      var next_idx_20386 = dommy.template.next_css_index.call(null, str_20385, 1);
      var frag_20387 = next_idx_20386 >= 0 ? str_20385.substring(0, next_idx_20386) : str_20385;
      var G__20384_20388 = frag_20387.charAt(0);
      switch(G__20384_20388) {
        case ".":
          dommy.attrs.add_class_BANG_.call(null, node, frag_20387.substring(1));
          break;
        case "#":
          node.setAttribute("id", frag_20387.substring(1));
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(frag_20387.charAt(0)));;
      }
      if (next_idx_20386 >= 0) {
        var G__20390 = str_20385.substring(next_idx_20386);
        str_20385 = G__20390;
        continue;
      } else {
      }
      break;
    }
  } else {
  }
  return node;
};
dommy.template.throw_unable_to_make_node = function throw_unable_to_make_node(node_data) {
  throw "Don't know how to make node from: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, node_data));
};
dommy.template.__GT_document_fragment = function() {
  var __GT_document_fragment = null;
  var __GT_document_fragment__1 = function(data) {
    return __GT_document_fragment.call(null, document.createDocumentFragment(), data);
  };
  var __GT_document_fragment__2 = function(result_frag, data) {
    if (function() {
      var G__20396 = data;
      if (G__20396) {
        var bit__3689__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3039__auto__ = bit__3689__auto__;
          if (cljs.core.truth_(or__3039__auto__)) {
            return or__3039__auto__;
          } else {
            return G__20396.dommy$template$PElement$;
          }
        }())) {
          return true;
        } else {
          if (!G__20396.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20396);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20396);
      }
    }()) {
      result_frag.appendChild(dommy.template._elem.call(null, data));
      return result_frag;
    } else {
      if (cljs.core.seq_QMARK_.call(null, data)) {
        var seq__20397_20401 = cljs.core.seq.call(null, data);
        var chunk__20398_20402 = null;
        var count__20399_20403 = 0;
        var i__20400_20404 = 0;
        while (true) {
          if (i__20400_20404 < count__20399_20403) {
            var child_20405 = cljs.core._nth.call(null, chunk__20398_20402, i__20400_20404);
            __GT_document_fragment.call(null, result_frag, child_20405);
            var G__20406 = seq__20397_20401;
            var G__20407 = chunk__20398_20402;
            var G__20408 = count__20399_20403;
            var G__20409 = i__20400_20404 + 1;
            seq__20397_20401 = G__20406;
            chunk__20398_20402 = G__20407;
            count__20399_20403 = G__20408;
            i__20400_20404 = G__20409;
            continue;
          } else {
            var temp__4126__auto___20410 = cljs.core.seq.call(null, seq__20397_20401);
            if (temp__4126__auto___20410) {
              var seq__20397_20411__$1 = temp__4126__auto___20410;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__20397_20411__$1)) {
                var c__3795__auto___20412 = cljs.core.chunk_first.call(null, seq__20397_20411__$1);
                var G__20413 = cljs.core.chunk_rest.call(null, seq__20397_20411__$1);
                var G__20414 = c__3795__auto___20412;
                var G__20415 = cljs.core.count.call(null, c__3795__auto___20412);
                var G__20416 = 0;
                seq__20397_20401 = G__20413;
                chunk__20398_20402 = G__20414;
                count__20399_20403 = G__20415;
                i__20400_20404 = G__20416;
                continue;
              } else {
                var child_20417 = cljs.core.first.call(null, seq__20397_20411__$1);
                __GT_document_fragment.call(null, result_frag, child_20417);
                var G__20418 = cljs.core.next.call(null, seq__20397_20411__$1);
                var G__20419 = null;
                var G__20420 = 0;
                var G__20421 = 0;
                seq__20397_20401 = G__20418;
                chunk__20398_20402 = G__20419;
                count__20399_20403 = G__20420;
                i__20400_20404 = G__20421;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return result_frag;
      } else {
        if (data == null) {
          return result_frag;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return dommy.template.throw_unable_to_make_node.call(null, data);
          } else {
            return null;
          }
        }
      }
    }
  };
  __GT_document_fragment = function(result_frag, data) {
    switch(arguments.length) {
      case 1:
        return __GT_document_fragment__1.call(this, result_frag);
      case 2:
        return __GT_document_fragment__2.call(this, result_frag, data);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$1 = __GT_document_fragment__1;
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$2 = __GT_document_fragment__2;
  return __GT_document_fragment;
}();
dommy.template.__GT_node_like = function __GT_node_like(data) {
  if (function() {
    var G__20423 = data;
    if (G__20423) {
      var bit__3689__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3039__auto__ = bit__3689__auto__;
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          return G__20423.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__20423.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20423);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20423);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.__GT_document_fragment.call(null, data);
  }
};
dommy.template.compound_element = function compound_element(p__20424) {
  var vec__20444 = p__20424;
  var tag_name = cljs.core.nth.call(null, vec__20444, 0, null);
  var maybe_attrs = cljs.core.nth.call(null, vec__20444, 1, null);
  var children = cljs.core.nthnext.call(null, vec__20444, 2);
  var n = dommy.template.base_element.call(null, tag_name);
  var attrs = cljs.core.map_QMARK_.call(null, maybe_attrs) && !function() {
    var G__20446 = maybe_attrs;
    if (G__20446) {
      var bit__3689__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3039__auto__ = bit__3689__auto__;
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          return G__20446.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__20446.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20446);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20446);
    }
  }() ? maybe_attrs : null;
  var children__$1 = cljs.core.truth_(attrs) ? children : cljs.core.cons.call(null, maybe_attrs, children);
  var seq__20447_20463 = cljs.core.seq.call(null, attrs);
  var chunk__20448_20464 = null;
  var count__20449_20465 = 0;
  var i__20450_20466 = 0;
  while (true) {
    if (i__20450_20466 < count__20449_20465) {
      var vec__20451_20467 = cljs.core._nth.call(null, chunk__20448_20464, i__20450_20466);
      var k_20468 = cljs.core.nth.call(null, vec__20451_20467, 0, null);
      var v_20469 = cljs.core.nth.call(null, vec__20451_20467, 1, null);
      var G__20452_20470 = k_20468 instanceof cljs.core.Keyword ? k_20468.fqn : null;
      switch(G__20452_20470) {
        case "classes":
          var seq__20453_20472 = cljs.core.seq.call(null, v_20469);
          var chunk__20454_20473 = null;
          var count__20455_20474 = 0;
          var i__20456_20475 = 0;
          while (true) {
            if (i__20456_20475 < count__20455_20474) {
              var c_20476 = cljs.core._nth.call(null, chunk__20454_20473, i__20456_20475);
              dommy.attrs.add_class_BANG_.call(null, n, c_20476);
              var G__20477 = seq__20453_20472;
              var G__20478 = chunk__20454_20473;
              var G__20479 = count__20455_20474;
              var G__20480 = i__20456_20475 + 1;
              seq__20453_20472 = G__20477;
              chunk__20454_20473 = G__20478;
              count__20455_20474 = G__20479;
              i__20456_20475 = G__20480;
              continue;
            } else {
              var temp__4126__auto___20481 = cljs.core.seq.call(null, seq__20453_20472);
              if (temp__4126__auto___20481) {
                var seq__20453_20482__$1 = temp__4126__auto___20481;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__20453_20482__$1)) {
                  var c__3795__auto___20483 = cljs.core.chunk_first.call(null, seq__20453_20482__$1);
                  var G__20484 = cljs.core.chunk_rest.call(null, seq__20453_20482__$1);
                  var G__20485 = c__3795__auto___20483;
                  var G__20486 = cljs.core.count.call(null, c__3795__auto___20483);
                  var G__20487 = 0;
                  seq__20453_20472 = G__20484;
                  chunk__20454_20473 = G__20485;
                  count__20455_20474 = G__20486;
                  i__20456_20475 = G__20487;
                  continue;
                } else {
                  var c_20488 = cljs.core.first.call(null, seq__20453_20482__$1);
                  dommy.attrs.add_class_BANG_.call(null, n, c_20488);
                  var G__20489 = cljs.core.next.call(null, seq__20453_20482__$1);
                  var G__20490 = null;
                  var G__20491 = 0;
                  var G__20492 = 0;
                  seq__20453_20472 = G__20489;
                  chunk__20454_20473 = G__20490;
                  count__20455_20474 = G__20491;
                  i__20456_20475 = G__20492;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          break;
        case "class":
          dommy.attrs.add_class_BANG_.call(null, n, v_20469);
          break;
        default:
          dommy.attrs.set_attr_BANG_.call(null, n, k_20468, v_20469);
      }
      var G__20493 = seq__20447_20463;
      var G__20494 = chunk__20448_20464;
      var G__20495 = count__20449_20465;
      var G__20496 = i__20450_20466 + 1;
      seq__20447_20463 = G__20493;
      chunk__20448_20464 = G__20494;
      count__20449_20465 = G__20495;
      i__20450_20466 = G__20496;
      continue;
    } else {
      var temp__4126__auto___20497 = cljs.core.seq.call(null, seq__20447_20463);
      if (temp__4126__auto___20497) {
        var seq__20447_20498__$1 = temp__4126__auto___20497;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__20447_20498__$1)) {
          var c__3795__auto___20499 = cljs.core.chunk_first.call(null, seq__20447_20498__$1);
          var G__20500 = cljs.core.chunk_rest.call(null, seq__20447_20498__$1);
          var G__20501 = c__3795__auto___20499;
          var G__20502 = cljs.core.count.call(null, c__3795__auto___20499);
          var G__20503 = 0;
          seq__20447_20463 = G__20500;
          chunk__20448_20464 = G__20501;
          count__20449_20465 = G__20502;
          i__20450_20466 = G__20503;
          continue;
        } else {
          var vec__20457_20504 = cljs.core.first.call(null, seq__20447_20498__$1);
          var k_20505 = cljs.core.nth.call(null, vec__20457_20504, 0, null);
          var v_20506 = cljs.core.nth.call(null, vec__20457_20504, 1, null);
          var G__20458_20507 = k_20505 instanceof cljs.core.Keyword ? k_20505.fqn : null;
          switch(G__20458_20507) {
            case "classes":
              var seq__20459_20509 = cljs.core.seq.call(null, v_20506);
              var chunk__20460_20510 = null;
              var count__20461_20511 = 0;
              var i__20462_20512 = 0;
              while (true) {
                if (i__20462_20512 < count__20461_20511) {
                  var c_20513 = cljs.core._nth.call(null, chunk__20460_20510, i__20462_20512);
                  dommy.attrs.add_class_BANG_.call(null, n, c_20513);
                  var G__20514 = seq__20459_20509;
                  var G__20515 = chunk__20460_20510;
                  var G__20516 = count__20461_20511;
                  var G__20517 = i__20462_20512 + 1;
                  seq__20459_20509 = G__20514;
                  chunk__20460_20510 = G__20515;
                  count__20461_20511 = G__20516;
                  i__20462_20512 = G__20517;
                  continue;
                } else {
                  var temp__4126__auto___20518__$1 = cljs.core.seq.call(null, seq__20459_20509);
                  if (temp__4126__auto___20518__$1) {
                    var seq__20459_20519__$1 = temp__4126__auto___20518__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__20459_20519__$1)) {
                      var c__3795__auto___20520 = cljs.core.chunk_first.call(null, seq__20459_20519__$1);
                      var G__20521 = cljs.core.chunk_rest.call(null, seq__20459_20519__$1);
                      var G__20522 = c__3795__auto___20520;
                      var G__20523 = cljs.core.count.call(null, c__3795__auto___20520);
                      var G__20524 = 0;
                      seq__20459_20509 = G__20521;
                      chunk__20460_20510 = G__20522;
                      count__20461_20511 = G__20523;
                      i__20462_20512 = G__20524;
                      continue;
                    } else {
                      var c_20525 = cljs.core.first.call(null, seq__20459_20519__$1);
                      dommy.attrs.add_class_BANG_.call(null, n, c_20525);
                      var G__20526 = cljs.core.next.call(null, seq__20459_20519__$1);
                      var G__20527 = null;
                      var G__20528 = 0;
                      var G__20529 = 0;
                      seq__20459_20509 = G__20526;
                      chunk__20460_20510 = G__20527;
                      count__20461_20511 = G__20528;
                      i__20462_20512 = G__20529;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              break;
            case "class":
              dommy.attrs.add_class_BANG_.call(null, n, v_20506);
              break;
            default:
              dommy.attrs.set_attr_BANG_.call(null, n, k_20505, v_20506);
          }
          var G__20530 = cljs.core.next.call(null, seq__20447_20498__$1);
          var G__20531 = null;
          var G__20532 = 0;
          var G__20533 = 0;
          seq__20447_20463 = G__20530;
          chunk__20448_20464 = G__20531;
          count__20449_20465 = G__20532;
          i__20450_20466 = G__20533;
          continue;
        }
      } else {
      }
    }
    break;
  }
  n.appendChild(dommy.template.__GT_node_like.call(null, children__$1));
  return n;
};
dommy.template.PElement["string"] = true;
dommy.template._elem["string"] = function(this$) {
  if (this$ instanceof cljs.core.Keyword) {
    return dommy.template.base_element.call(null, this$);
  } else {
    return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
  }
};
dommy.template.PElement["number"] = true;
dommy.template._elem["number"] = function(this$) {
  return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
};
cljs.core.PersistentVector.prototype.dommy$template$PElement$ = true;
cljs.core.PersistentVector.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return dommy.template.compound_element.call(null, this$__$1);
};
SVGElement.prototype.dommy$template$PElement$ = true;
SVGElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Document.prototype.dommy$template$PElement$ = true;
Document.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Text.prototype.dommy$template$PElement$ = true;
Text.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
DocumentFragment.prototype.dommy$template$PElement$ = true;
DocumentFragment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
HTMLElement.prototype.dommy$template$PElement$ = true;
HTMLElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
try {
  Window.prototype.dommy$template$PElement$ = true;
  Window.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} catch (e20534) {
  if (e20534 instanceof ReferenceError) {
    var __20535 = e20534;
    console.log("PElement: js/Window not defined by browser, skipping it... (running on phantomjs?)");
  } else {
    if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
      throw e20534;
    } else {
    }
  }
}
dommy.template.node = function node(data) {
  if (function() {
    var G__20537 = data;
    if (G__20537) {
      var bit__3689__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3039__auto__ = bit__3689__auto__;
        if (cljs.core.truth_(or__3039__auto__)) {
          return or__3039__auto__;
        } else {
          return G__20537.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__20537.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20537);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20537);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.throw_unable_to_make_node.call(null, data);
  }
};
dommy.template.html__GT_nodes = function html__GT_nodes(html) {
  var parent = document.createElement("div");
  parent.insertAdjacentHTML("beforeend", html);
  return cljs.core.seq.call(null, Array.prototype.slice.call(parent.childNodes));
};
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dissoc_in(m, p__20094) {
  var vec__20096 = p__20094;
  var k = cljs.core.nth.call(null, vec__20096, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__20096, 1);
  if (cljs.core.truth_(m)) {
    var temp__4124__auto__ = function() {
      var and__3027__auto__ = ks;
      if (and__3027__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3027__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var res = temp__4124__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function __GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("dommy.template");
goog.require("dommy.template");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("dommy.utils");
goog.require("dommy.utils");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.core.has_class_QMARK_ = dommy.attrs.has_class_QMARK_;
dommy.core.add_class_BANG_ = dommy.attrs.add_class_BANG_;
dommy.core.remove_class_BANG_ = dommy.attrs.remove_class_BANG_;
dommy.core.toggle_class_BANG_ = dommy.attrs.toggle_class_BANG_;
dommy.core.set_attr_BANG_ = dommy.attrs.set_attr_BANG_;
dommy.core.set_style_BANG_ = dommy.attrs.set_style_BANG_;
dommy.core.set_px_BANG_ = dommy.attrs.set_px_BANG_;
dommy.core.px = dommy.attrs.px;
dommy.core.style_str = dommy.attrs.style_str;
dommy.core.style = dommy.attrs.style;
dommy.core.remove_attr_BANG_ = dommy.attrs.remove_attr_BANG_;
dommy.core.toggle_attr_BANG_ = dommy.attrs.toggle_attr_BANG_;
dommy.core.attr = dommy.attrs.attr;
dommy.core.hidden_QMARK_ = dommy.attrs.hidden_QMARK_;
dommy.core.toggle_BANG_ = dommy.attrs.toggle_BANG_;
dommy.core.hide_BANG_ = dommy.attrs.hide_BANG_;
dommy.core.show_BANG_ = dommy.attrs.show_BANG_;
dommy.core.bounding_client_rect = dommy.attrs.bounding_client_rect;
dommy.core.scroll_into_view = dommy.attrs.scroll_into_view;
dommy.core.dissoc_in = dommy.utils.dissoc_in;
dommy.core.__GT_Array = dommy.utils.__GT_Array;
dommy.core.set_html_BANG_ = function set_html_BANG_(elem, html) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.innerHTML = html;
  return elem__$1;
};
dommy.core.html = function html(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML;
};
dommy.core.set_text_BANG_ = function set_text_BANG_(elem, text) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var prop = cljs.core.truth_(elem__$1.textContent) ? "textContent" : "innerText";
  elem__$1[prop] = text;
  return elem__$1;
};
dommy.core.text = function text(elem) {
  var or__3039__auto__ = elem.textContent;
  if (cljs.core.truth_(or__3039__auto__)) {
    return or__3039__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.value = function value(elem) {
  return dommy.template.__GT_node_like.call(null, elem).value;
};
dommy.core.set_value_BANG_ = function set_value_BANG_(elem, value) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.value = value;
  return elem__$1;
};
dommy.core.append_BANG_ = function() {
  var append_BANG_ = null;
  var append_BANG___2 = function(parent, child) {
    var G__19690 = dommy.template.__GT_node_like.call(null, parent);
    G__19690.appendChild(dommy.template.__GT_node_like.call(null, child));
    return G__19690;
  };
  var append_BANG___3 = function() {
    var G__19695__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__19691_19696 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__19692_19697 = null;
      var count__19693_19698 = 0;
      var i__19694_19699 = 0;
      while (true) {
        if (i__19694_19699 < count__19693_19698) {
          var c_19700 = cljs.core._nth.call(null, chunk__19692_19697, i__19694_19699);
          append_BANG_.call(null, parent__$1, c_19700);
          var G__19701 = seq__19691_19696;
          var G__19702 = chunk__19692_19697;
          var G__19703 = count__19693_19698;
          var G__19704 = i__19694_19699 + 1;
          seq__19691_19696 = G__19701;
          chunk__19692_19697 = G__19702;
          count__19693_19698 = G__19703;
          i__19694_19699 = G__19704;
          continue;
        } else {
          var temp__4126__auto___19705 = cljs.core.seq.call(null, seq__19691_19696);
          if (temp__4126__auto___19705) {
            var seq__19691_19706__$1 = temp__4126__auto___19705;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19691_19706__$1)) {
              var c__3795__auto___19707 = cljs.core.chunk_first.call(null, seq__19691_19706__$1);
              var G__19708 = cljs.core.chunk_rest.call(null, seq__19691_19706__$1);
              var G__19709 = c__3795__auto___19707;
              var G__19710 = cljs.core.count.call(null, c__3795__auto___19707);
              var G__19711 = 0;
              seq__19691_19696 = G__19708;
              chunk__19692_19697 = G__19709;
              count__19693_19698 = G__19710;
              i__19694_19699 = G__19711;
              continue;
            } else {
              var c_19712 = cljs.core.first.call(null, seq__19691_19706__$1);
              append_BANG_.call(null, parent__$1, c_19712);
              var G__19713 = cljs.core.next.call(null, seq__19691_19706__$1);
              var G__19714 = null;
              var G__19715 = 0;
              var G__19716 = 0;
              seq__19691_19696 = G__19713;
              chunk__19692_19697 = G__19714;
              count__19693_19698 = G__19715;
              i__19694_19699 = G__19716;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__19695 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19695__delegate.call(this, parent, child, more_children);
    };
    G__19695.cljs$lang$maxFixedArity = 2;
    G__19695.cljs$lang$applyTo = function(arglist__19717) {
      var parent = cljs.core.first(arglist__19717);
      arglist__19717 = cljs.core.next(arglist__19717);
      var child = cljs.core.first(arglist__19717);
      var more_children = cljs.core.rest(arglist__19717);
      return G__19695__delegate(parent, child, more_children);
    };
    G__19695.cljs$core$IFn$_invoke$arity$variadic = G__19695__delegate;
    return G__19695;
  }();
  append_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return append_BANG___2.call(this, parent, child);
      default:
        return append_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  append_BANG_.cljs$lang$maxFixedArity = 2;
  append_BANG_.cljs$lang$applyTo = append_BANG___3.cljs$lang$applyTo;
  append_BANG_.cljs$core$IFn$_invoke$arity$2 = append_BANG___2;
  append_BANG_.cljs$core$IFn$_invoke$arity$variadic = append_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return append_BANG_;
}();
dommy.core.prepend_BANG_ = function() {
  var prepend_BANG_ = null;
  var prepend_BANG___2 = function(parent, child) {
    var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
    return parent__$1.insertBefore(dommy.template.__GT_node_like.call(null, child), parent__$1.firstChild);
  };
  var prepend_BANG___3 = function() {
    var G__19726__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__19722_19727 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__19723_19728 = null;
      var count__19724_19729 = 0;
      var i__19725_19730 = 0;
      while (true) {
        if (i__19725_19730 < count__19724_19729) {
          var c_19731 = cljs.core._nth.call(null, chunk__19723_19728, i__19725_19730);
          prepend_BANG_.call(null, parent__$1, c_19731);
          var G__19732 = seq__19722_19727;
          var G__19733 = chunk__19723_19728;
          var G__19734 = count__19724_19729;
          var G__19735 = i__19725_19730 + 1;
          seq__19722_19727 = G__19732;
          chunk__19723_19728 = G__19733;
          count__19724_19729 = G__19734;
          i__19725_19730 = G__19735;
          continue;
        } else {
          var temp__4126__auto___19736 = cljs.core.seq.call(null, seq__19722_19727);
          if (temp__4126__auto___19736) {
            var seq__19722_19737__$1 = temp__4126__auto___19736;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19722_19737__$1)) {
              var c__3795__auto___19738 = cljs.core.chunk_first.call(null, seq__19722_19737__$1);
              var G__19739 = cljs.core.chunk_rest.call(null, seq__19722_19737__$1);
              var G__19740 = c__3795__auto___19738;
              var G__19741 = cljs.core.count.call(null, c__3795__auto___19738);
              var G__19742 = 0;
              seq__19722_19727 = G__19739;
              chunk__19723_19728 = G__19740;
              count__19724_19729 = G__19741;
              i__19725_19730 = G__19742;
              continue;
            } else {
              var c_19743 = cljs.core.first.call(null, seq__19722_19737__$1);
              prepend_BANG_.call(null, parent__$1, c_19743);
              var G__19744 = cljs.core.next.call(null, seq__19722_19737__$1);
              var G__19745 = null;
              var G__19746 = 0;
              var G__19747 = 0;
              seq__19722_19727 = G__19744;
              chunk__19723_19728 = G__19745;
              count__19724_19729 = G__19746;
              i__19725_19730 = G__19747;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__19726 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19726__delegate.call(this, parent, child, more_children);
    };
    G__19726.cljs$lang$maxFixedArity = 2;
    G__19726.cljs$lang$applyTo = function(arglist__19748) {
      var parent = cljs.core.first(arglist__19748);
      arglist__19748 = cljs.core.next(arglist__19748);
      var child = cljs.core.first(arglist__19748);
      var more_children = cljs.core.rest(arglist__19748);
      return G__19726__delegate(parent, child, more_children);
    };
    G__19726.cljs$core$IFn$_invoke$arity$variadic = G__19726__delegate;
    return G__19726;
  }();
  prepend_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return prepend_BANG___2.call(this, parent, child);
      default:
        return prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prepend_BANG_.cljs$lang$maxFixedArity = 2;
  prepend_BANG_.cljs$lang$applyTo = prepend_BANG___3.cljs$lang$applyTo;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = prepend_BANG___2;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return prepend_BANG_;
}();
dommy.core.insert_before_BANG_ = function insert_before_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  if (cljs.core.truth_(other__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", -1418255893, null), new cljs.core.Symbol(null, "other", "other", -1658642225, null)))));
  }
  other__$1.parentNode.insertBefore(actual_node, other__$1);
  return actual_node;
};
dommy.core.insert_after_BANG_ = function insert_after_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  var parent = other__$1.parentNode;
  var temp__4124__auto___19749 = other__$1.nextSibling;
  if (cljs.core.truth_(temp__4124__auto___19749)) {
    var next_19750 = temp__4124__auto___19749;
    parent.insertBefore(actual_node, next_19750);
  } else {
    parent.appendChild(actual_node);
  }
  return actual_node;
};
dommy.core.replace_BANG_ = function replace_BANG_(elem, new$) {
  var new$__$1 = dommy.template.__GT_node_like.call(null, new$);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_(elem__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", -1418255893, null), new cljs.core.Symbol(null, "elem", "elem", -2035804713, null)))));
  }
  elem__$1.parentNode.replaceChild(new$__$1, elem__$1);
  return new$__$1;
};
dommy.core.replace_contents_BANG_ = function replace_contents_BANG_(parent, node_like) {
  var G__19752 = dommy.template.__GT_node_like.call(null, parent);
  G__19752.innerHTML = "";
  dommy.core.append_BANG_.call(null, G__19752, node_like);
  return G__19752;
};
dommy.core.remove_BANG_ = function remove_BANG_(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var G__19754 = elem__$1.parentNode;
  G__19754.removeChild(elem__$1);
  return G__19754;
};
dommy.core.clear_BANG_ = function clear_BANG_(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML = "";
};
dommy.core.selector = function selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.selector_map = function selector_map(template, key_selectors_map) {
  var container = dommy.template.__GT_node_like.call(null, template);
  if (!cljs.core.contains_QMARK_.call(null, key_selectors_map, new cljs.core.Keyword(null, "container", "container", -1736937707))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "key-selectors-map", "key-selectors-map", 1212911103, null), new cljs.core.Keyword(null, "container", "container", -1736937707))))));
  }
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "container", "container", -1736937707), container], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(container) {
    return function(p__19760) {
      var vec__19761 = p__19760;
      var k = cljs.core.nth.call(null, vec__19761, 0, null);
      var v = cljs.core.nth.call(null, vec__19761, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.truth_((new cljs.core.Keyword(null, "live", "live", -1610148039)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v))) ? function() {
        if (typeof dommy.core.t19762 !== "undefined") {
        } else {
          dommy.core.t19762 = function(v, k, vec__19761, p__19760, container, key_selectors_map, template, selector_map, meta19763) {
            this.v = v;
            this.k = k;
            this.vec__19761 = vec__19761;
            this.p__19760 = p__19760;
            this.container = container;
            this.key_selectors_map = key_selectors_map;
            this.template = template;
            this.selector_map = selector_map;
            this.meta19763 = meta19763;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 425984;
          };
          dommy.core.t19762.cljs$lang$type = true;
          dommy.core.t19762.cljs$lang$ctorStr = "dommy.core/t19762";
          dommy.core.t19762.cljs$lang$ctorPrWriter = function(vec__19761, k, v, container) {
            return function(this__3606__auto__, writer__3607__auto__, opt__3608__auto__) {
              return cljs.core._write.call(null, writer__3607__auto__, "dommy.core/t19762");
            };
          }(vec__19761, k, v, container);
          dommy.core.t19762.prototype.cljs$core$IDeref$_deref$arity$1 = function(vec__19761, k, v, container) {
            return function(this$) {
              var self__ = this;
              var this$__$1 = this;
              return dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, self__.container).querySelectorAll(dommy.core.selector.call(null, self__.v)));
            };
          }(vec__19761, k, v, container);
          dommy.core.t19762.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__19761, k, v, container) {
            return function(_19764) {
              var self__ = this;
              var _19764__$1 = this;
              return self__.meta19763;
            };
          }(vec__19761, k, v, container);
          dommy.core.t19762.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__19761, k, v, container) {
            return function(_19764, meta19763__$1) {
              var self__ = this;
              var _19764__$1 = this;
              return new dommy.core.t19762(self__.v, self__.k, self__.vec__19761, self__.p__19760, self__.container, self__.key_selectors_map, self__.template, self__.selector_map, meta19763__$1);
            };
          }(vec__19761, k, v, container);
          dommy.core.__GT_t19762 = function(vec__19761, k, v, container) {
            return function __GT_t19762(v__$1, k__$1, vec__19761__$1, p__19760__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta19763) {
              return new dommy.core.t19762(v__$1, k__$1, vec__19761__$1, p__19760__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta19763);
            };
          }(vec__19761, k, v, container);
        }
        return new dommy.core.t19762(v, k, vec__19761, p__19760, container, key_selectors_map, template, selector_map, null);
      }() : dommy.template.__GT_node_like.call(null, container).querySelector(dommy.core.selector.call(null, v))], null);
    };
  }(container), key_selectors_map)));
};
dommy.core.ancestor_nodes = function ancestor_nodes(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, function(p1__19765_SHARP_) {
    return p1__19765_SHARP_.parentNode;
  }, dommy.template.__GT_node_like.call(null, elem)));
};
dommy.core.matches_pred = function() {
  var matches_pred = null;
  var matches_pred__1 = function(selector) {
    return matches_pred.call(null, document, selector);
  };
  var matches_pred__2 = function(base, selector) {
    var matches = dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, dommy.template.__GT_node_like.call(null, base)).querySelectorAll(dommy.core.selector.call(null, selector)));
    return function(matches) {
      return function(elem) {
        return matches.indexOf(elem) >= 0;
      };
    }(matches);
  };
  matches_pred = function(base, selector) {
    switch(arguments.length) {
      case 1:
        return matches_pred__1.call(this, base);
      case 2:
        return matches_pred__2.call(this, base, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  matches_pred.cljs$core$IFn$_invoke$arity$1 = matches_pred__1;
  matches_pred.cljs$core$IFn$_invoke$arity$2 = matches_pred__2;
  return matches_pred;
}();
dommy.core.closest = function() {
  var closest = null;
  var closest__2 = function(elem, selector) {
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, selector), dommy.core.ancestor_nodes.call(null, dommy.template.__GT_node_like.call(null, elem))));
  };
  var closest__3 = function(base, elem, selector) {
    var base__$1 = dommy.template.__GT_node_like.call(null, base);
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base__$1, selector), cljs.core.take_while.call(null, function(base__$1, elem__$1) {
      return function(p1__19766_SHARP_) {
        return!(p1__19766_SHARP_ === base__$1);
      };
    }(base__$1, elem__$1), dommy.core.ancestor_nodes.call(null, elem__$1))));
  };
  closest = function(base, elem, selector) {
    switch(arguments.length) {
      case 2:
        return closest__2.call(this, base, elem);
      case 3:
        return closest__3.call(this, base, elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  closest.cljs$core$IFn$_invoke$arity$2 = closest__2;
  closest.cljs$core$IFn$_invoke$arity$3 = closest__3;
  return closest;
}();
dommy.core.descendant_QMARK_ = function descendant_QMARK_(descendant, ancestor) {
  var descendant__$1 = dommy.template.__GT_node_like.call(null, descendant);
  var ancestor__$1 = dommy.template.__GT_node_like.call(null, ancestor);
  if (cljs.core.truth_(ancestor__$1.contains)) {
    return ancestor__$1.contains(descendant__$1);
  } else {
    if (cljs.core.truth_(ancestor__$1.compareDocumentPosition)) {
      return(ancestor__$1.compareDocumentPosition(descendant__$1) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__19767) {
  var vec__19768 = p__19767;
  var special_mouse_event = cljs.core.nth.call(null, vec__19768, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__19768, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(vec__19768, special_mouse_event, real_mouse_event) {
    return function(f) {
      return function(vec__19768, special_mouse_event, real_mouse_event) {
        return function(event) {
          var related_target = event.relatedTarget;
          var listener_target = function() {
            var or__3039__auto__ = event.selectedTarget;
            if (cljs.core.truth_(or__3039__auto__)) {
              return or__3039__auto__;
            } else {
              return event.currentTarget;
            }
          }();
          if (cljs.core.truth_(function() {
            var and__3027__auto__ = related_target;
            if (cljs.core.truth_(and__3027__auto__)) {
              return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
            } else {
              return and__3027__auto__;
            }
          }())) {
            return null;
          } else {
            return f.call(null, event);
          }
        };
      }(vec__19768, special_mouse_event, real_mouse_event);
    };
  }(vec__19768, special_mouse_event, real_mouse_event)], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560), new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580), new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890)], null)));
dommy.core.live_listener = function live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, dommy.template.__GT_node_like.call(null, elem), event.target, selector);
    if (cljs.core.truth_(function() {
      var and__3027__auto__ = selected_target;
      if (cljs.core.truth_(and__3027__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", -1529784218)));
      } else {
        return and__3027__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function event_listeners(elem) {
  var or__3039__auto__ = dommy.template.__GT_node_like.call(null, elem).dommyEventListeners;
  if (cljs.core.truth_(or__3039__auto__)) {
    return or__3039__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function() {
  var update_event_listeners_BANG___delegate = function(elem, f, args) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
  };
  var update_event_listeners_BANG_ = function(elem, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return update_event_listeners_BANG___delegate.call(this, elem, f, args);
  };
  update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
  update_event_listeners_BANG_.cljs$lang$applyTo = function(arglist__19769) {
    var elem = cljs.core.first(arglist__19769);
    arglist__19769 = cljs.core.next(arglist__19769);
    var f = cljs.core.first(arglist__19769);
    var args = cljs.core.rest(arglist__19769);
    return update_event_listeners_BANG___delegate(elem, f, args);
  };
  update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = update_event_listeners_BANG___delegate;
  return update_event_listeners_BANG_;
}();
dommy.core.elem_and_selector = function elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, function(p1__19770_SHARP_) {
      return dommy.template.__GT_node_like.call(null, cljs.core.first.call(null, p1__19770_SHARP_));
    }, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [dommy.template.__GT_node_like.call(null, elem_sel), null], null);
  }
};
dommy.core.listen_BANG_ = function() {
  var listen_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null))))));
    }
    var vec__19794_19817 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_19818 = cljs.core.nth.call(null, vec__19794_19817, 0, null);
    var selector_19819 = cljs.core.nth.call(null, vec__19794_19817, 1, null);
    var seq__19795_19820 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__19802_19821 = null;
    var count__19803_19822 = 0;
    var i__19804_19823 = 0;
    while (true) {
      if (i__19804_19823 < count__19803_19822) {
        var vec__19811_19824 = cljs.core._nth.call(null, chunk__19802_19821, i__19804_19823);
        var orig_type_19825 = cljs.core.nth.call(null, vec__19811_19824, 0, null);
        var f_19826 = cljs.core.nth.call(null, vec__19811_19824, 1, null);
        var seq__19805_19827 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19825, new cljs.core.PersistentArrayMap.fromArray([orig_type_19825, cljs.core.identity], true, false)));
        var chunk__19807_19828 = null;
        var count__19808_19829 = 0;
        var i__19809_19830 = 0;
        while (true) {
          if (i__19809_19830 < count__19808_19829) {
            var vec__19812_19831 = cljs.core._nth.call(null, chunk__19807_19828, i__19809_19830);
            var actual_type_19832 = cljs.core.nth.call(null, vec__19812_19831, 0, null);
            var factory_19833 = cljs.core.nth.call(null, vec__19812_19831, 1, null);
            var canonical_f_19834 = (cljs.core.truth_(selector_19819) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19818, selector_19819) : cljs.core.identity).call(null, factory_19833.call(null, f_19826));
            dommy.core.update_event_listeners_BANG_.call(null, elem_19818, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19819, actual_type_19832, f_19826], null), canonical_f_19834);
            if (cljs.core.truth_(elem_19818.addEventListener)) {
              elem_19818.addEventListener(cljs.core.name.call(null, actual_type_19832), canonical_f_19834);
            } else {
              elem_19818.attachEvent(cljs.core.name.call(null, actual_type_19832), canonical_f_19834);
            }
            var G__19835 = seq__19805_19827;
            var G__19836 = chunk__19807_19828;
            var G__19837 = count__19808_19829;
            var G__19838 = i__19809_19830 + 1;
            seq__19805_19827 = G__19835;
            chunk__19807_19828 = G__19836;
            count__19808_19829 = G__19837;
            i__19809_19830 = G__19838;
            continue;
          } else {
            var temp__4126__auto___19839 = cljs.core.seq.call(null, seq__19805_19827);
            if (temp__4126__auto___19839) {
              var seq__19805_19840__$1 = temp__4126__auto___19839;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19805_19840__$1)) {
                var c__3795__auto___19841 = cljs.core.chunk_first.call(null, seq__19805_19840__$1);
                var G__19842 = cljs.core.chunk_rest.call(null, seq__19805_19840__$1);
                var G__19843 = c__3795__auto___19841;
                var G__19844 = cljs.core.count.call(null, c__3795__auto___19841);
                var G__19845 = 0;
                seq__19805_19827 = G__19842;
                chunk__19807_19828 = G__19843;
                count__19808_19829 = G__19844;
                i__19809_19830 = G__19845;
                continue;
              } else {
                var vec__19813_19846 = cljs.core.first.call(null, seq__19805_19840__$1);
                var actual_type_19847 = cljs.core.nth.call(null, vec__19813_19846, 0, null);
                var factory_19848 = cljs.core.nth.call(null, vec__19813_19846, 1, null);
                var canonical_f_19849 = (cljs.core.truth_(selector_19819) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19818, selector_19819) : cljs.core.identity).call(null, factory_19848.call(null, f_19826));
                dommy.core.update_event_listeners_BANG_.call(null, elem_19818, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19819, actual_type_19847, f_19826], null), canonical_f_19849);
                if (cljs.core.truth_(elem_19818.addEventListener)) {
                  elem_19818.addEventListener(cljs.core.name.call(null, actual_type_19847), canonical_f_19849);
                } else {
                  elem_19818.attachEvent(cljs.core.name.call(null, actual_type_19847), canonical_f_19849);
                }
                var G__19850 = cljs.core.next.call(null, seq__19805_19840__$1);
                var G__19851 = null;
                var G__19852 = 0;
                var G__19853 = 0;
                seq__19805_19827 = G__19850;
                chunk__19807_19828 = G__19851;
                count__19808_19829 = G__19852;
                i__19809_19830 = G__19853;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__19854 = seq__19795_19820;
        var G__19855 = chunk__19802_19821;
        var G__19856 = count__19803_19822;
        var G__19857 = i__19804_19823 + 1;
        seq__19795_19820 = G__19854;
        chunk__19802_19821 = G__19855;
        count__19803_19822 = G__19856;
        i__19804_19823 = G__19857;
        continue;
      } else {
        var temp__4126__auto___19858 = cljs.core.seq.call(null, seq__19795_19820);
        if (temp__4126__auto___19858) {
          var seq__19795_19859__$1 = temp__4126__auto___19858;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19795_19859__$1)) {
            var c__3795__auto___19860 = cljs.core.chunk_first.call(null, seq__19795_19859__$1);
            var G__19861 = cljs.core.chunk_rest.call(null, seq__19795_19859__$1);
            var G__19862 = c__3795__auto___19860;
            var G__19863 = cljs.core.count.call(null, c__3795__auto___19860);
            var G__19864 = 0;
            seq__19795_19820 = G__19861;
            chunk__19802_19821 = G__19862;
            count__19803_19822 = G__19863;
            i__19804_19823 = G__19864;
            continue;
          } else {
            var vec__19814_19865 = cljs.core.first.call(null, seq__19795_19859__$1);
            var orig_type_19866 = cljs.core.nth.call(null, vec__19814_19865, 0, null);
            var f_19867 = cljs.core.nth.call(null, vec__19814_19865, 1, null);
            var seq__19796_19868 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19866, new cljs.core.PersistentArrayMap.fromArray([orig_type_19866, cljs.core.identity], true, false)));
            var chunk__19798_19869 = null;
            var count__19799_19870 = 0;
            var i__19800_19871 = 0;
            while (true) {
              if (i__19800_19871 < count__19799_19870) {
                var vec__19815_19872 = cljs.core._nth.call(null, chunk__19798_19869, i__19800_19871);
                var actual_type_19873 = cljs.core.nth.call(null, vec__19815_19872, 0, null);
                var factory_19874 = cljs.core.nth.call(null, vec__19815_19872, 1, null);
                var canonical_f_19875 = (cljs.core.truth_(selector_19819) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19818, selector_19819) : cljs.core.identity).call(null, factory_19874.call(null, f_19867));
                dommy.core.update_event_listeners_BANG_.call(null, elem_19818, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19819, actual_type_19873, f_19867], null), canonical_f_19875);
                if (cljs.core.truth_(elem_19818.addEventListener)) {
                  elem_19818.addEventListener(cljs.core.name.call(null, actual_type_19873), canonical_f_19875);
                } else {
                  elem_19818.attachEvent(cljs.core.name.call(null, actual_type_19873), canonical_f_19875);
                }
                var G__19876 = seq__19796_19868;
                var G__19877 = chunk__19798_19869;
                var G__19878 = count__19799_19870;
                var G__19879 = i__19800_19871 + 1;
                seq__19796_19868 = G__19876;
                chunk__19798_19869 = G__19877;
                count__19799_19870 = G__19878;
                i__19800_19871 = G__19879;
                continue;
              } else {
                var temp__4126__auto___19880__$1 = cljs.core.seq.call(null, seq__19796_19868);
                if (temp__4126__auto___19880__$1) {
                  var seq__19796_19881__$1 = temp__4126__auto___19880__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__19796_19881__$1)) {
                    var c__3795__auto___19882 = cljs.core.chunk_first.call(null, seq__19796_19881__$1);
                    var G__19883 = cljs.core.chunk_rest.call(null, seq__19796_19881__$1);
                    var G__19884 = c__3795__auto___19882;
                    var G__19885 = cljs.core.count.call(null, c__3795__auto___19882);
                    var G__19886 = 0;
                    seq__19796_19868 = G__19883;
                    chunk__19798_19869 = G__19884;
                    count__19799_19870 = G__19885;
                    i__19800_19871 = G__19886;
                    continue;
                  } else {
                    var vec__19816_19887 = cljs.core.first.call(null, seq__19796_19881__$1);
                    var actual_type_19888 = cljs.core.nth.call(null, vec__19816_19887, 0, null);
                    var factory_19889 = cljs.core.nth.call(null, vec__19816_19887, 1, null);
                    var canonical_f_19890 = (cljs.core.truth_(selector_19819) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19818, selector_19819) : cljs.core.identity).call(null, factory_19889.call(null, f_19867));
                    dommy.core.update_event_listeners_BANG_.call(null, elem_19818, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19819, actual_type_19888, f_19867], null), canonical_f_19890);
                    if (cljs.core.truth_(elem_19818.addEventListener)) {
                      elem_19818.addEventListener(cljs.core.name.call(null, actual_type_19888), canonical_f_19890);
                    } else {
                      elem_19818.attachEvent(cljs.core.name.call(null, actual_type_19888), canonical_f_19890);
                    }
                    var G__19891 = cljs.core.next.call(null, seq__19796_19881__$1);
                    var G__19892 = null;
                    var G__19893 = 0;
                    var G__19894 = 0;
                    seq__19796_19868 = G__19891;
                    chunk__19798_19869 = G__19892;
                    count__19799_19870 = G__19893;
                    i__19800_19871 = G__19894;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__19895 = cljs.core.next.call(null, seq__19795_19859__$1);
            var G__19896 = null;
            var G__19897 = 0;
            var G__19898 = 0;
            seq__19795_19820 = G__19895;
            chunk__19802_19821 = G__19896;
            count__19803_19822 = G__19897;
            i__19804_19823 = G__19898;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_BANG_.cljs$lang$maxFixedArity = 1;
  listen_BANG_.cljs$lang$applyTo = function(arglist__19899) {
    var elem_sel = cljs.core.first(arglist__19899);
    var type_fs = cljs.core.rest(arglist__19899);
    return listen_BANG___delegate(elem_sel, type_fs);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_BANG___delegate;
  return listen_BANG_;
}();
dommy.core.unlisten_BANG_ = function() {
  var unlisten_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null))))));
    }
    var vec__19923_19946 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_19947 = cljs.core.nth.call(null, vec__19923_19946, 0, null);
    var selector_19948 = cljs.core.nth.call(null, vec__19923_19946, 1, null);
    var seq__19924_19949 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__19931_19950 = null;
    var count__19932_19951 = 0;
    var i__19933_19952 = 0;
    while (true) {
      if (i__19933_19952 < count__19932_19951) {
        var vec__19940_19953 = cljs.core._nth.call(null, chunk__19931_19950, i__19933_19952);
        var orig_type_19954 = cljs.core.nth.call(null, vec__19940_19953, 0, null);
        var f_19955 = cljs.core.nth.call(null, vec__19940_19953, 1, null);
        var seq__19934_19956 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19954, new cljs.core.PersistentArrayMap.fromArray([orig_type_19954, cljs.core.identity], true, false)));
        var chunk__19936_19957 = null;
        var count__19937_19958 = 0;
        var i__19938_19959 = 0;
        while (true) {
          if (i__19938_19959 < count__19937_19958) {
            var vec__19941_19960 = cljs.core._nth.call(null, chunk__19936_19957, i__19938_19959);
            var actual_type_19961 = cljs.core.nth.call(null, vec__19941_19960, 0, null);
            var __19962 = cljs.core.nth.call(null, vec__19941_19960, 1, null);
            var keys_19963 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19948, actual_type_19961, f_19955], null);
            var canonical_f_19964 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19947), keys_19963);
            dommy.core.update_event_listeners_BANG_.call(null, elem_19947, dommy.utils.dissoc_in, keys_19963);
            if (cljs.core.truth_(elem_19947.removeEventListener)) {
              elem_19947.removeEventListener(cljs.core.name.call(null, actual_type_19961), canonical_f_19964);
            } else {
              elem_19947.detachEvent(cljs.core.name.call(null, actual_type_19961), canonical_f_19964);
            }
            var G__19965 = seq__19934_19956;
            var G__19966 = chunk__19936_19957;
            var G__19967 = count__19937_19958;
            var G__19968 = i__19938_19959 + 1;
            seq__19934_19956 = G__19965;
            chunk__19936_19957 = G__19966;
            count__19937_19958 = G__19967;
            i__19938_19959 = G__19968;
            continue;
          } else {
            var temp__4126__auto___19969 = cljs.core.seq.call(null, seq__19934_19956);
            if (temp__4126__auto___19969) {
              var seq__19934_19970__$1 = temp__4126__auto___19969;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19934_19970__$1)) {
                var c__3795__auto___19971 = cljs.core.chunk_first.call(null, seq__19934_19970__$1);
                var G__19972 = cljs.core.chunk_rest.call(null, seq__19934_19970__$1);
                var G__19973 = c__3795__auto___19971;
                var G__19974 = cljs.core.count.call(null, c__3795__auto___19971);
                var G__19975 = 0;
                seq__19934_19956 = G__19972;
                chunk__19936_19957 = G__19973;
                count__19937_19958 = G__19974;
                i__19938_19959 = G__19975;
                continue;
              } else {
                var vec__19942_19976 = cljs.core.first.call(null, seq__19934_19970__$1);
                var actual_type_19977 = cljs.core.nth.call(null, vec__19942_19976, 0, null);
                var __19978 = cljs.core.nth.call(null, vec__19942_19976, 1, null);
                var keys_19979 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19948, actual_type_19977, f_19955], null);
                var canonical_f_19980 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19947), keys_19979);
                dommy.core.update_event_listeners_BANG_.call(null, elem_19947, dommy.utils.dissoc_in, keys_19979);
                if (cljs.core.truth_(elem_19947.removeEventListener)) {
                  elem_19947.removeEventListener(cljs.core.name.call(null, actual_type_19977), canonical_f_19980);
                } else {
                  elem_19947.detachEvent(cljs.core.name.call(null, actual_type_19977), canonical_f_19980);
                }
                var G__19981 = cljs.core.next.call(null, seq__19934_19970__$1);
                var G__19982 = null;
                var G__19983 = 0;
                var G__19984 = 0;
                seq__19934_19956 = G__19981;
                chunk__19936_19957 = G__19982;
                count__19937_19958 = G__19983;
                i__19938_19959 = G__19984;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__19985 = seq__19924_19949;
        var G__19986 = chunk__19931_19950;
        var G__19987 = count__19932_19951;
        var G__19988 = i__19933_19952 + 1;
        seq__19924_19949 = G__19985;
        chunk__19931_19950 = G__19986;
        count__19932_19951 = G__19987;
        i__19933_19952 = G__19988;
        continue;
      } else {
        var temp__4126__auto___19989 = cljs.core.seq.call(null, seq__19924_19949);
        if (temp__4126__auto___19989) {
          var seq__19924_19990__$1 = temp__4126__auto___19989;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19924_19990__$1)) {
            var c__3795__auto___19991 = cljs.core.chunk_first.call(null, seq__19924_19990__$1);
            var G__19992 = cljs.core.chunk_rest.call(null, seq__19924_19990__$1);
            var G__19993 = c__3795__auto___19991;
            var G__19994 = cljs.core.count.call(null, c__3795__auto___19991);
            var G__19995 = 0;
            seq__19924_19949 = G__19992;
            chunk__19931_19950 = G__19993;
            count__19932_19951 = G__19994;
            i__19933_19952 = G__19995;
            continue;
          } else {
            var vec__19943_19996 = cljs.core.first.call(null, seq__19924_19990__$1);
            var orig_type_19997 = cljs.core.nth.call(null, vec__19943_19996, 0, null);
            var f_19998 = cljs.core.nth.call(null, vec__19943_19996, 1, null);
            var seq__19925_19999 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19997, new cljs.core.PersistentArrayMap.fromArray([orig_type_19997, cljs.core.identity], true, false)));
            var chunk__19927_20000 = null;
            var count__19928_20001 = 0;
            var i__19929_20002 = 0;
            while (true) {
              if (i__19929_20002 < count__19928_20001) {
                var vec__19944_20003 = cljs.core._nth.call(null, chunk__19927_20000, i__19929_20002);
                var actual_type_20004 = cljs.core.nth.call(null, vec__19944_20003, 0, null);
                var __20005 = cljs.core.nth.call(null, vec__19944_20003, 1, null);
                var keys_20006 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19948, actual_type_20004, f_19998], null);
                var canonical_f_20007 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19947), keys_20006);
                dommy.core.update_event_listeners_BANG_.call(null, elem_19947, dommy.utils.dissoc_in, keys_20006);
                if (cljs.core.truth_(elem_19947.removeEventListener)) {
                  elem_19947.removeEventListener(cljs.core.name.call(null, actual_type_20004), canonical_f_20007);
                } else {
                  elem_19947.detachEvent(cljs.core.name.call(null, actual_type_20004), canonical_f_20007);
                }
                var G__20008 = seq__19925_19999;
                var G__20009 = chunk__19927_20000;
                var G__20010 = count__19928_20001;
                var G__20011 = i__19929_20002 + 1;
                seq__19925_19999 = G__20008;
                chunk__19927_20000 = G__20009;
                count__19928_20001 = G__20010;
                i__19929_20002 = G__20011;
                continue;
              } else {
                var temp__4126__auto___20012__$1 = cljs.core.seq.call(null, seq__19925_19999);
                if (temp__4126__auto___20012__$1) {
                  var seq__19925_20013__$1 = temp__4126__auto___20012__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__19925_20013__$1)) {
                    var c__3795__auto___20014 = cljs.core.chunk_first.call(null, seq__19925_20013__$1);
                    var G__20015 = cljs.core.chunk_rest.call(null, seq__19925_20013__$1);
                    var G__20016 = c__3795__auto___20014;
                    var G__20017 = cljs.core.count.call(null, c__3795__auto___20014);
                    var G__20018 = 0;
                    seq__19925_19999 = G__20015;
                    chunk__19927_20000 = G__20016;
                    count__19928_20001 = G__20017;
                    i__19929_20002 = G__20018;
                    continue;
                  } else {
                    var vec__19945_20019 = cljs.core.first.call(null, seq__19925_20013__$1);
                    var actual_type_20020 = cljs.core.nth.call(null, vec__19945_20019, 0, null);
                    var __20021 = cljs.core.nth.call(null, vec__19945_20019, 1, null);
                    var keys_20022 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19948, actual_type_20020, f_19998], null);
                    var canonical_f_20023 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19947), keys_20022);
                    dommy.core.update_event_listeners_BANG_.call(null, elem_19947, dommy.utils.dissoc_in, keys_20022);
                    if (cljs.core.truth_(elem_19947.removeEventListener)) {
                      elem_19947.removeEventListener(cljs.core.name.call(null, actual_type_20020), canonical_f_20023);
                    } else {
                      elem_19947.detachEvent(cljs.core.name.call(null, actual_type_20020), canonical_f_20023);
                    }
                    var G__20024 = cljs.core.next.call(null, seq__19925_20013__$1);
                    var G__20025 = null;
                    var G__20026 = 0;
                    var G__20027 = 0;
                    seq__19925_19999 = G__20024;
                    chunk__19927_20000 = G__20025;
                    count__19928_20001 = G__20026;
                    i__19929_20002 = G__20027;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__20028 = cljs.core.next.call(null, seq__19924_19990__$1);
            var G__20029 = null;
            var G__20030 = 0;
            var G__20031 = 0;
            seq__19924_19949 = G__20028;
            chunk__19931_19950 = G__20029;
            count__19932_19951 = G__20030;
            i__19933_19952 = G__20031;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var unlisten_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return unlisten_BANG___delegate.call(this, elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$lang$maxFixedArity = 1;
  unlisten_BANG_.cljs$lang$applyTo = function(arglist__20032) {
    var elem_sel = cljs.core.first(arglist__20032);
    var type_fs = cljs.core.rest(arglist__20032);
    return unlisten_BANG___delegate(elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = unlisten_BANG___delegate;
  return unlisten_BANG_;
}();
dommy.core.listen_once_BANG_ = function() {
  var listen_once_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null))))));
    }
    var vec__20040_20047 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_20048 = cljs.core.nth.call(null, vec__20040_20047, 0, null);
    var selector_20049 = cljs.core.nth.call(null, vec__20040_20047, 1, null);
    var seq__20041_20050 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__20042_20051 = null;
    var count__20043_20052 = 0;
    var i__20044_20053 = 0;
    while (true) {
      if (i__20044_20053 < count__20043_20052) {
        var vec__20045_20054 = cljs.core._nth.call(null, chunk__20042_20051, i__20044_20053);
        var type_20055 = cljs.core.nth.call(null, vec__20045_20054, 0, null);
        var f_20056 = cljs.core.nth.call(null, vec__20045_20054, 1, null);
        dommy.core.listen_BANG_.call(null, elem_sel, type_20055, function(seq__20041_20050, chunk__20042_20051, count__20043_20052, i__20044_20053, vec__20045_20054, type_20055, f_20056, vec__20040_20047, elem_20048, selector_20049) {
          return function this_fn(e) {
            dommy.core.unlisten_BANG_.call(null, elem_sel, type_20055, this_fn);
            return f_20056.call(null, e);
          };
        }(seq__20041_20050, chunk__20042_20051, count__20043_20052, i__20044_20053, vec__20045_20054, type_20055, f_20056, vec__20040_20047, elem_20048, selector_20049));
        var G__20057 = seq__20041_20050;
        var G__20058 = chunk__20042_20051;
        var G__20059 = count__20043_20052;
        var G__20060 = i__20044_20053 + 1;
        seq__20041_20050 = G__20057;
        chunk__20042_20051 = G__20058;
        count__20043_20052 = G__20059;
        i__20044_20053 = G__20060;
        continue;
      } else {
        var temp__4126__auto___20061 = cljs.core.seq.call(null, seq__20041_20050);
        if (temp__4126__auto___20061) {
          var seq__20041_20062__$1 = temp__4126__auto___20061;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20041_20062__$1)) {
            var c__3795__auto___20063 = cljs.core.chunk_first.call(null, seq__20041_20062__$1);
            var G__20064 = cljs.core.chunk_rest.call(null, seq__20041_20062__$1);
            var G__20065 = c__3795__auto___20063;
            var G__20066 = cljs.core.count.call(null, c__3795__auto___20063);
            var G__20067 = 0;
            seq__20041_20050 = G__20064;
            chunk__20042_20051 = G__20065;
            count__20043_20052 = G__20066;
            i__20044_20053 = G__20067;
            continue;
          } else {
            var vec__20046_20068 = cljs.core.first.call(null, seq__20041_20062__$1);
            var type_20069 = cljs.core.nth.call(null, vec__20046_20068, 0, null);
            var f_20070 = cljs.core.nth.call(null, vec__20046_20068, 1, null);
            dommy.core.listen_BANG_.call(null, elem_sel, type_20069, function(seq__20041_20050, chunk__20042_20051, count__20043_20052, i__20044_20053, vec__20046_20068, type_20069, f_20070, seq__20041_20062__$1, temp__4126__auto___20061, vec__20040_20047, elem_20048, selector_20049) {
              return function this_fn(e) {
                dommy.core.unlisten_BANG_.call(null, elem_sel, type_20069, this_fn);
                return f_20070.call(null, e);
              };
            }(seq__20041_20050, chunk__20042_20051, count__20043_20052, i__20044_20053, vec__20046_20068, type_20069, f_20070, seq__20041_20062__$1, temp__4126__auto___20061, vec__20040_20047, elem_20048, selector_20049));
            var G__20071 = cljs.core.next.call(null, seq__20041_20062__$1);
            var G__20072 = null;
            var G__20073 = 0;
            var G__20074 = 0;
            seq__20041_20050 = G__20071;
            chunk__20042_20051 = G__20072;
            count__20043_20052 = G__20073;
            i__20044_20053 = G__20074;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_once_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_once_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$lang$maxFixedArity = 1;
  listen_once_BANG_.cljs$lang$applyTo = function(arglist__20075) {
    var elem_sel = cljs.core.first(arglist__20075);
    var type_fs = cljs.core.rest(arglist__20075);
    return listen_once_BANG___delegate(elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_once_BANG___delegate;
  return listen_once_BANG_;
}();
dommy.core.fire_BANG_ = function() {
  var fire_BANG___delegate = function(node, event_type, p__20076) {
    var vec__20078 = p__20076;
    var update_event_BANG_ = cljs.core.nth.call(null, vec__20078, 0, null);
    if (dommy.core.descendant_QMARK_.call(null, node, document.documentElement)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "descendant?", "descendant?", -1027057938, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol("js", "document.documentElement", "js/document.documentElement", 1597931428, null)))));
    }
    var update_event_BANG___$1 = function() {
      var or__3039__auto__ = update_event_BANG_;
      if (cljs.core.truth_(or__3039__auto__)) {
        return or__3039__auto__;
      } else {
        return cljs.core.identity;
      }
    }();
    if (cljs.core.truth_(document.createEvent)) {
      var event = document.createEvent("Event");
      event.initEvent(cljs.core.name.call(null, event_type), true, true);
      return node.dispatchEvent(update_event_BANG___$1.call(null, event));
    } else {
      return node.fireEvent("on" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, event_type)), update_event_BANG___$1.call(null, document.createEventObject()));
    }
  };
  var fire_BANG_ = function(node, event_type, var_args) {
    var p__20076 = null;
    if (arguments.length > 2) {
      p__20076 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return fire_BANG___delegate.call(this, node, event_type, p__20076);
  };
  fire_BANG_.cljs$lang$maxFixedArity = 2;
  fire_BANG_.cljs$lang$applyTo = function(arglist__20079) {
    var node = cljs.core.first(arglist__20079);
    arglist__20079 = cljs.core.next(arglist__20079);
    var event_type = cljs.core.first(arglist__20079);
    var p__20076 = cljs.core.rest(arglist__20079);
    return fire_BANG___delegate(node, event_type, p__20076);
  };
  fire_BANG_.cljs$core$IFn$_invoke$arity$variadic = fire_BANG___delegate;
  return fire_BANG_;
}();
goog.provide("muzak.event_handlers");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("clidget.widget");
goog.require("dommy.core");
goog.require("dommy.core");
goog.require("cljs.core.async");
cljs.core.enable_console_print_BANG_.call(null);
muzak.event_handlers.search_map = cljs.core.PersistentArrayMap.EMPTY;
muzak.event_handlers.toggle_value = function toggle_value(hash_key) {
  var value = cljs.core.get.call(null, muzak.event_handlers.search_map, hash_key);
  var new_value = cljs.core.not.call(null, value);
  muzak.event_handlers.search_map = cljs.core.assoc.call(null, muzak.event_handlers.search_map, hash_key, new_value);
};
muzak.event_handlers.with_click_handler_toggle_map = function with_click_handler_toggle_map($button, hash_key) {
  return dommy.core.listen_BANG_.call(null, $button, new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
    muzak.event_handlers.toggle_value.call(null, hash_key);
    return cljs.core.println.call(null, muzak.event_handlers.search_map);
  });
};
muzak.event_handlers.with_click_handler_search = function with_click_handler_search($button, new_event_ch) {
  return dommy.core.listen_BANG_.call(null, $button, new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
    var msg = cljs.core.PersistentHashMap.fromArrays.call(null, [new cljs.core.Keyword(null, "event", "event", 301435442), new cljs.core.Keyword(null, "data", "data", -232669377)], ["parse", muzak.event_handlers.search_map]);
    return cljs.core.async.put_BANG_.call(null, new_event_ch, msg);
  });
};
muzak.event_handlers.bpm_button = function bpm_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom16613 = document.createElement("input");
    if ("button") {
      dom16613.setAttribute("type", "button");
    } else {
    }
    if ("btn filter-button") {
      dom16613.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16613.className) + " btn filter-button").trim();
    } else {
    }
    if ("BPM") {
      dom16613.setAttribute("value", "BPM");
    } else {
    }
    return dom16613;
  }(), new cljs.core.Keyword(null, "BPM", "BPM", -686901081));
};
muzak.event_handlers.classical_button = function classical_button(new_event_ch) {
  muzak.event_handlers.toggle_value.call(null, new cljs.core.Keyword(null, "CLASSICAL", "CLASSICAL", -1768639824));
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom16615 = document.createElement("input");
    if ("button") {
      dom16615.setAttribute("type", "button");
    } else {
    }
    if ("btn filter-button") {
      dom16615.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16615.className) + " btn filter-button").trim();
    } else {
    }
    if ("Classical") {
      dom16615.setAttribute("value", "Classical");
    } else {
    }
    return dom16615;
  }(), new cljs.core.Keyword(null, "CLASSICAL", "CLASSICAL", -1768639824));
};
muzak.event_handlers.rock_button = function rock_button(new_event_ch) {
  muzak.event_handlers.toggle_value.call(null, new cljs.core.Keyword(null, "ROCK", "ROCK", 689705274));
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom16617 = document.createElement("input");
    if ("button") {
      dom16617.setAttribute("type", "button");
    } else {
    }
    if ("btn filter-button") {
      dom16617.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16617.className) + " btn filter-button").trim();
    } else {
    }
    if ("Rock") {
      dom16617.setAttribute("value", "Rock");
    } else {
    }
    return dom16617;
  }(), new cljs.core.Keyword(null, "ROCK", "ROCK", 689705274));
};
muzak.event_handlers.pop_button = function pop_button(new_event_ch) {
  muzak.event_handlers.toggle_value.call(null, new cljs.core.Keyword(null, "POP", "POP", 997989906));
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom16619 = document.createElement("input");
    if ("button") {
      dom16619.setAttribute("type", "button");
    } else {
    }
    if ("btn filter-button") {
      dom16619.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16619.className) + " btn filter-button").trim();
    } else {
    }
    if ("Pop") {
      dom16619.setAttribute("value", "Pop");
    } else {
    }
    return dom16619;
  }(), new cljs.core.Keyword(null, "POP", "POP", 997989906));
};
muzak.event_handlers.popularity_button = function popularity_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom16622 = document.createElement("li");
    dom16622.appendChild(function() {
      var dom16623 = document.createElement("a");
      if ("active") {
        dom16623.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16623.className) + " active").trim();
      } else {
      }
      if ("Popularity") {
        dom16623.setAttribute("html", "Popularity");
      } else {
      }
      return dom16623;
    }());
    return dom16622;
  }(), new cljs.core.Keyword(null, "POPULARITY", "POPULARITY", 1785324413));
};
muzak.event_handlers.hottness_button = function hottness_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom16626 = document.createElement("li");
    dom16626.appendChild(function() {
      var dom16627 = document.createElement("a");
      if ("btn") {
        dom16627.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16627.className) + " btn").trim();
      } else {
      }
      if ("Hottness") {
        dom16627.setAttribute("html", "Hottness");
      } else {
      }
      return dom16627;
    }());
    return dom16626;
  }(), new cljs.core.Keyword(null, "HOTNESS", "HOTNESS", -672824995));
};
muzak.event_handlers.tempo_button = function tempo_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom16630 = document.createElement("li");
    dom16630.appendChild(function() {
      var dom16631 = document.createElement("a");
      if ("btn") {
        dom16631.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16631.className) + " btn").trim();
      } else {
      }
      if ("Tempo") {
        dom16631.setAttribute("html", "Tempo");
      } else {
      }
      return dom16631;
    }());
    return dom16630;
  }(), new cljs.core.Keyword(null, "TEMPO", "TEMPO", 1124648812));
};
muzak.event_handlers.dance_ability_button = function dance_ability_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_toggle_map.call(null, function() {
    var dom16634 = document.createElement("li");
    dom16634.appendChild(function() {
      var dom16635 = document.createElement("a");
      if ("btn") {
        dom16635.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16635.className) + " btn").trim();
      } else {
      }
      if ("Dance-ability") {
        dom16635.setAttribute("html", "Dance-ability");
      } else {
      }
      return dom16635;
    }());
    return dom16634;
  }(), new cljs.core.Keyword(null, "DANCE", "DANCE", -1620715004));
};
muzak.event_handlers.search_button = function search_button(new_event_ch) {
  return muzak.event_handlers.with_click_handler_search.call(null, function() {
    var dom16638 = document.createElement("button");
    if ("button") {
      dom16638.setAttribute("type:", "button");
    } else {
    }
    if ("btn btn-warning") {
      dom16638.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16638.className) + " btn btn-warning").trim();
    } else {
    }
    if ("search-button") {
      dom16638.setAttribute("id", "search-button");
    } else {
    }
    dom16638.appendChild(function() {
      var dom16639 = document.createElement("i");
      if ("icon-search") {
        dom16639.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16639.className) + " icon-search").trim();
      } else {
      }
      if ("true") {
        dom16639.setAttribute("aria-hidden", "true");
      } else {
      }
      return dom16639;
    }());
    return dom16638;
  }(), new_event_ch);
};
muzak.event_handlers.update_state = function update_state(new_state) {
  muzak.event_handlers.search_map = new_state;
};
muzak.event_handlers.page_body = function page_body(new_event_ch) {
  var dom16651 = document.createElement("div");
  dom16651.appendChild(function() {
    var dom16652 = document.createElement("h1");
    dom16652.setAttribute("id", "million");
    dom16652.appendChild(document.createTextNode("Million Song Search"));
    return dom16652;
  }());
  dom16651.appendChild(function() {
    var dom16653 = document.createElement("p");
    dom16653.appendChild(document.createTextNode("Select Filters:"));
    return dom16653;
  }());
  dom16651.appendChild(function() {
    var dom16654 = document.createElement("div");
    dom16654.appendChild(function() {
      var dom16655 = document.createElement("div");
      if ("btn-grp") {
        dom16655.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16655.className) + " btn-grp").trim();
      } else {
      }
      if ("filters") {
        dom16655.setAttribute("id", "filters");
      } else {
      }
      if ("buttons-checkbox") {
        dom16655.setAttribute("data-toggle", "buttons-checkbox");
      } else {
      }
      dom16655.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.bpm_button.call(null, new_event_ch)));
      dom16655.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.classical_button.call(null, new_event_ch)));
      dom16655.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.rock_button.call(null, new_event_ch)));
      dom16655.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.pop_button.call(null, new_event_ch)));
      return dom16655;
    }());
    dom16654.appendChild(function() {
      var dom16656 = document.createElement("div");
      if ("search-button-container") {
        dom16656.setAttribute("id", "search-button-container");
      } else {
      }
      dom16656.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.search_button.call(null, new_event_ch)));
      return dom16656;
    }());
    return dom16654;
  }());
  dom16651.appendChild(function() {
    var dom16657 = document.createElement("div");
    dom16657.setAttribute("id", "bubble-chart");
    dom16657.appendChild(function() {
      var dom16658 = document.createElement("div");
      dom16658.setAttribute("id", "chart-body");
      return dom16658;
    }());
    return dom16657;
  }());
  dom16651.appendChild(function() {
    var dom16659 = document.createElement("p");
    dom16659.appendChild(document.createTextNode("Sort By:"));
    return dom16659;
  }());
  dom16651.appendChild(function() {
    var dom16660 = document.createElement("div");
    dom16660.appendChild(function() {
      var dom16661 = document.createElement("ul");
      if ("nav nav-pills") {
        dom16661.className = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dom16661.className) + " nav nav-pills").trim();
      } else {
      }
      dom16661.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.popularity_button.call(null, new_event_ch)));
      dom16661.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.hottness_button.call(null, new_event_ch)));
      dom16661.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.tempo_button.call(null, new_event_ch)));
      dom16661.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.dance_ability_button.call(null, new_event_ch)));
      return dom16661;
    }());
    return dom16660;
  }());
  return dom16651;
};
muzak.event_handlers.bubble_chart = function() {
  var bubble_chart__delegate = function(system__10504__auto__, params__10505__auto__) {
    return clidget.widget.updated_widget.call(null, cljs.core.assoc.call(null, system__10504__auto__, new cljs.core.Keyword("clidget", "widget-type", "clidget/widget-type", 981736725), new cljs.core.Symbol(null, "widget16662", "widget16662", 1660994288, null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "val-key", "val-key", 1135580325), new cljs.core.Keyword(null, "msgs", "msgs", -1176489773), 
    new cljs.core.Keyword(null, "atom-key", "atom-key", 329783458), new cljs.core.Keyword(null, "!msgs", "!msgs", 1863868512)], null)], null), cljs.core.PersistentArrayMap.EMPTY, function(resolved_state__10506__auto__) {
      var map__16672 = resolved_state__10506__auto__;
      var map__16672__$1 = cljs.core.seq_QMARK_.call(null, map__16672) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16672) : map__16672;
      var msgs = cljs.core.get.call(null, map__16672__$1, new cljs.core.Keyword(null, "msgs", "msgs", -1176489773));
      var vec__16673 = params__10505__auto__;
      var dom16674 = document.createElement("div");
      dom16674.appendChild(function() {
        var dom16675 = document.createElement("h3");
        dom16675.appendChild(document.createTextNode("Messages from the server:"));
        return dom16675;
      }());
      dom16674.appendChild(function() {
        var dom16676 = document.createElement("ul");
        dom16676.appendChild(dommy.template.__GT_node_like.call(null, cljs.core.seq.call(null, msgs) ? function() {
          var iter__3764__auto__ = function(dom16676, dom16674, map__16672, map__16672__$1, msgs, vec__16673) {
            return function iter__16677(s__16678) {
              return new cljs.core.LazySeq(null, function(dom16676, dom16674, map__16672, map__16672__$1, msgs, vec__16673) {
                return function() {
                  var s__16678__$1 = s__16678;
                  while (true) {
                    var temp__4126__auto__ = cljs.core.seq.call(null, s__16678__$1);
                    if (temp__4126__auto__) {
                      var s__16678__$2 = temp__4126__auto__;
                      if (cljs.core.chunked_seq_QMARK_.call(null, s__16678__$2)) {
                        var c__3762__auto__ = cljs.core.chunk_first.call(null, s__16678__$2);
                        var size__3763__auto__ = cljs.core.count.call(null, c__3762__auto__);
                        var b__16680 = cljs.core.chunk_buffer.call(null, size__3763__auto__);
                        if (function() {
                          var i__16679 = 0;
                          while (true) {
                            if (i__16679 < size__3763__auto__) {
                              var msg = cljs.core._nth.call(null, c__3762__auto__, i__16679);
                              cljs.core.chunk_append.call(null, b__16680, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), cljs.core.pr_str.call(null, msg)], null));
                              var G__16681 = i__16679 + 1;
                              i__16679 = G__16681;
                              continue;
                            } else {
                              return true;
                            }
                            break;
                          }
                        }()) {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16680), iter__16677.call(null, cljs.core.chunk_rest.call(null, s__16678__$2)));
                        } else {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16680), null);
                        }
                      } else {
                        var msg = cljs.core.first.call(null, s__16678__$2);
                        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), cljs.core.pr_str.call(null, msg)], null), iter__16677.call(null, cljs.core.rest.call(null, s__16678__$2)));
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(dom16676, dom16674, map__16672, map__16672__$1, msgs, vec__16673), null, null);
            };
          }(dom16676, dom16674, map__16672, map__16672__$1, msgs, vec__16673);
          return iter__3764__auto__.call(null, msgs);
        }() : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "None yet."], null)));
        return dom16676;
      }());
      return dom16674;
    });
  };
  var bubble_chart = function(system__10504__auto__, var_args) {
    var params__10505__auto__ = null;
    if (arguments.length > 1) {
      params__10505__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bubble_chart__delegate.call(this, system__10504__auto__, params__10505__auto__);
  };
  bubble_chart.cljs$lang$maxFixedArity = 1;
  bubble_chart.cljs$lang$applyTo = function(arglist__16682) {
    var system__10504__auto__ = cljs.core.first(arglist__16682);
    var params__10505__auto__ = cljs.core.rest(arglist__16682);
    return bubble_chart__delegate(system__10504__auto__, params__10505__auto__);
  };
  bubble_chart.cljs$core$IFn$_invoke$arity$variadic = bubble_chart__delegate;
  return bubble_chart;
}();
muzak.event_handlers.page_component = function page_component(_BANG_events, new_event_ch) {
  var dom16684 = document.createElement("div");
  dom16684.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.page_body.call(null, new_event_ch)));
  dom16684.appendChild(dommy.template.__GT_node_like.call(null, muzak.event_handlers.bubble_chart.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "!msgs", "!msgs", 1863868512), _BANG_events], null))));
  return dom16684;
};
goog.provide("muzak.front_end");
goog.require("cljs.core");
goog.require("chord.client");
goog.require("muzak.event_handlers");
goog.require("cljs.core.async");
goog.require("clidget.widget");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("dommy.core");
goog.require("dommy.core");
goog.require("cljs.core.async");
goog.require("muzak.event_handlers");
goog.require("chord.client");
cljs.core.enable_console_print_BANG_.call(null);
muzak.front_end.add_msg = function add_msg(msgs, new_msg) {
  return cljs.core.take.call(null, 10, cljs.core.cons.call(null, new_msg, msgs));
};
muzak.front_end.receive_msgs_BANG_ = function receive_msgs_BANG_(_BANG_msgs, server_ch) {
  var c__12112__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto__) {
    return function() {
      var f__12113__auto__ = function() {
        var switch__12047__auto__ = function(c__12112__auto__) {
          return function(state_15566) {
            var state_val_15567 = state_15566[1];
            if (state_val_15567 === 7) {
              var inst_15562 = state_15566[2];
              var state_15566__$1 = state_15566;
              var statearr_15568_15596 = state_15566__$1;
              statearr_15568_15596[2] = inst_15562;
              statearr_15568_15596[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15567 === 1) {
                var state_15566__$1 = state_15566;
                var statearr_15569_15597 = state_15566__$1;
                statearr_15569_15597[2] = null;
                statearr_15569_15597[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15567 === 4) {
                  var inst_15534 = state_15566[7];
                  var inst_15534__$1 = state_15566[2];
                  var state_15566__$1 = function() {
                    var statearr_15570 = state_15566;
                    statearr_15570[7] = inst_15534__$1;
                    return statearr_15570;
                  }();
                  if (cljs.core.truth_(inst_15534__$1)) {
                    var statearr_15571_15598 = state_15566__$1;
                    statearr_15571_15598[1] = 5;
                  } else {
                    var statearr_15572_15599 = state_15566__$1;
                    statearr_15572_15599[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15567 === 15) {
                    var state_15566__$1 = state_15566;
                    var statearr_15573_15600 = state_15566__$1;
                    statearr_15573_15600[2] = null;
                    statearr_15573_15600[1] = 16;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15567 === 13) {
                      var inst_15556 = state_15566[2];
                      var state_15566__$1 = state_15566;
                      var statearr_15574_15601 = state_15566__$1;
                      statearr_15574_15601[2] = inst_15556;
                      statearr_15574_15601[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15567 === 6) {
                        var state_15566__$1 = state_15566;
                        var statearr_15575_15602 = state_15566__$1;
                        statearr_15575_15602[2] = null;
                        statearr_15575_15602[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15567 === 3) {
                          var inst_15564 = state_15566[2];
                          var state_15566__$1 = state_15566;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15566__$1, inst_15564);
                        } else {
                          if (state_val_15567 === 12) {
                            var state_15566__$1 = state_15566;
                            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                              var statearr_15576_15603 = state_15566__$1;
                              statearr_15576_15603[1] = 14;
                            } else {
                              var statearr_15577_15604 = state_15566__$1;
                              statearr_15577_15604[1] = 15;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15567 === 2) {
                              var state_15566__$1 = state_15566;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15566__$1, 4, server_ch);
                            } else {
                              if (state_val_15567 === 11) {
                                var inst_15534 = state_15566[7];
                                var inst_15548 = cljs.core.swap_BANG_.call(null, _BANG_msgs, muzak.front_end.add_msg, inst_15534);
                                var state_15566__$1 = state_15566;
                                var statearr_15578_15605 = state_15566__$1;
                                statearr_15578_15605[2] = inst_15548;
                                statearr_15578_15605[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15567 === 9) {
                                  var inst_15538 = state_15566[8];
                                  var inst_15546 = cljs.core._EQ_.call(null, inst_15538, "result");
                                  var state_15566__$1 = state_15566;
                                  if (inst_15546) {
                                    var statearr_15579_15606 = state_15566__$1;
                                    statearr_15579_15606[1] = 11;
                                  } else {
                                    var statearr_15580_15607 = state_15566__$1;
                                    statearr_15580_15607[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15567 === 5) {
                                    var inst_15538 = state_15566[8];
                                    var inst_15534 = state_15566[7];
                                    var inst_15536 = [new cljs.core.Keyword(null, "message", "message", -406056002), new cljs.core.Keyword(null, "event", "event", 301435442)];
                                    var inst_15537 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_15536, null);
                                    var inst_15538__$1 = cljs.core.get_in.call(null, inst_15534, inst_15537);
                                    var inst_15539 = [new cljs.core.Keyword(null, "message", "message", -406056002), new cljs.core.Keyword(null, "data", "data", -232669377)];
                                    var inst_15540 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_15539, null);
                                    var inst_15541 = cljs.core.get_in.call(null, inst_15534, inst_15540);
                                    var inst_15542 = cljs.core._EQ_.call(null, inst_15538__$1, "state");
                                    var state_15566__$1 = function() {
                                      var statearr_15581 = state_15566;
                                      statearr_15581[9] = inst_15541;
                                      statearr_15581[8] = inst_15538__$1;
                                      return statearr_15581;
                                    }();
                                    if (inst_15542) {
                                      var statearr_15582_15608 = state_15566__$1;
                                      statearr_15582_15608[1] = 8;
                                    } else {
                                      var statearr_15583_15609 = state_15566__$1;
                                      statearr_15583_15609[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15567 === 14) {
                                      var inst_15534 = state_15566[7];
                                      var inst_15551 = cljs.core.swap_BANG_.call(null, _BANG_msgs, muzak.front_end.add_msg, inst_15534);
                                      var state_15566__$1 = state_15566;
                                      var statearr_15584_15610 = state_15566__$1;
                                      statearr_15584_15610[2] = inst_15551;
                                      statearr_15584_15610[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15567 === 16) {
                                        var inst_15554 = state_15566[2];
                                        var state_15566__$1 = state_15566;
                                        var statearr_15585_15611 = state_15566__$1;
                                        statearr_15585_15611[2] = inst_15554;
                                        statearr_15585_15611[1] = 13;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15567 === 10) {
                                          var inst_15558 = state_15566[2];
                                          var state_15566__$1 = function() {
                                            var statearr_15586 = state_15566;
                                            statearr_15586[10] = inst_15558;
                                            return statearr_15586;
                                          }();
                                          var statearr_15587_15612 = state_15566__$1;
                                          statearr_15587_15612[2] = null;
                                          statearr_15587_15612[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15567 === 8) {
                                            var inst_15541 = state_15566[9];
                                            var inst_15544 = muzak.event_handlers.update_state.call(null, inst_15541);
                                            var state_15566__$1 = state_15566;
                                            var statearr_15588_15613 = state_15566__$1;
                                            statearr_15588_15613[2] = inst_15544;
                                            statearr_15588_15613[1] = 10;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12112__auto__);
        return function(switch__12047__auto__, c__12112__auto__) {
          return function() {
            var state_machine__12048__auto__ = null;
            var state_machine__12048__auto____0 = function() {
              var statearr_15592 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_15592[0] = state_machine__12048__auto__;
              statearr_15592[1] = 1;
              return statearr_15592;
            };
            var state_machine__12048__auto____1 = function(state_15566) {
              while (true) {
                var ret_value__12049__auto__ = function() {
                  try {
                    while (true) {
                      var result__12050__auto__ = switch__12047__auto__.call(null, state_15566);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12050__auto__;
                      }
                      break;
                    }
                  } catch (e15593) {
                    if (e15593 instanceof Object) {
                      var ex__12051__auto__ = e15593;
                      var statearr_15594_15614 = state_15566;
                      statearr_15594_15614[5] = ex__12051__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15566);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e15593;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15615 = state_15566;
                  state_15566 = G__15615;
                  continue;
                } else {
                  return ret_value__12049__auto__;
                }
                break;
              }
            };
            state_machine__12048__auto__ = function(state_15566) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12048__auto____0.call(this);
                case 1:
                  return state_machine__12048__auto____1.call(this, state_15566);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
            return state_machine__12048__auto__;
          }();
        }(switch__12047__auto__, c__12112__auto__);
      }();
      var state__12114__auto__ = function() {
        var statearr_15595 = f__12113__auto__.call(null);
        statearr_15595[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto__;
        return statearr_15595;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
    };
  }(c__12112__auto__));
  return c__12112__auto__;
};
muzak.front_end.send_msgs_BANG_ = function send_msgs_BANG_(new_msg_ch, server_ch) {
  var c__12112__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto__) {
    return function() {
      var f__12113__auto__ = function() {
        var switch__12047__auto__ = function(c__12112__auto__) {
          return function(state_15659) {
            var state_val_15660 = state_15659[1];
            if (state_val_15660 === 8) {
              var inst_15651 = state_15659[2];
              var state_15659__$1 = function() {
                var statearr_15661 = state_15659;
                statearr_15661[7] = inst_15651;
                return statearr_15661;
              }();
              var statearr_15662_15676 = state_15659__$1;
              statearr_15662_15676[2] = null;
              statearr_15662_15676[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15660 === 7) {
                var inst_15655 = state_15659[2];
                var state_15659__$1 = state_15659;
                var statearr_15663_15677 = state_15659__$1;
                statearr_15663_15677[2] = inst_15655;
                statearr_15663_15677[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15660 === 6) {
                  var state_15659__$1 = state_15659;
                  var statearr_15664_15678 = state_15659__$1;
                  statearr_15664_15678[2] = null;
                  statearr_15664_15678[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15660 === 5) {
                    var inst_15648 = state_15659[8];
                    var state_15659__$1 = state_15659;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15659__$1, 8, server_ch, inst_15648);
                  } else {
                    if (state_val_15660 === 4) {
                      var inst_15648 = state_15659[8];
                      var inst_15648__$1 = state_15659[2];
                      var state_15659__$1 = function() {
                        var statearr_15665 = state_15659;
                        statearr_15665[8] = inst_15648__$1;
                        return statearr_15665;
                      }();
                      if (cljs.core.truth_(inst_15648__$1)) {
                        var statearr_15666_15679 = state_15659__$1;
                        statearr_15666_15679[1] = 5;
                      } else {
                        var statearr_15667_15680 = state_15659__$1;
                        statearr_15667_15680[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15660 === 3) {
                        var inst_15657 = state_15659[2];
                        var state_15659__$1 = state_15659;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15659__$1, inst_15657);
                      } else {
                        if (state_val_15660 === 2) {
                          var state_15659__$1 = state_15659;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15659__$1, 4, new_msg_ch);
                        } else {
                          if (state_val_15660 === 1) {
                            var state_15659__$1 = state_15659;
                            var statearr_15668_15681 = state_15659__$1;
                            statearr_15668_15681[2] = null;
                            statearr_15668_15681[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12112__auto__);
        return function(switch__12047__auto__, c__12112__auto__) {
          return function() {
            var state_machine__12048__auto__ = null;
            var state_machine__12048__auto____0 = function() {
              var statearr_15672 = [null, null, null, null, null, null, null, null, null];
              statearr_15672[0] = state_machine__12048__auto__;
              statearr_15672[1] = 1;
              return statearr_15672;
            };
            var state_machine__12048__auto____1 = function(state_15659) {
              while (true) {
                var ret_value__12049__auto__ = function() {
                  try {
                    while (true) {
                      var result__12050__auto__ = switch__12047__auto__.call(null, state_15659);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12050__auto__;
                      }
                      break;
                    }
                  } catch (e15673) {
                    if (e15673 instanceof Object) {
                      var ex__12051__auto__ = e15673;
                      var statearr_15674_15682 = state_15659;
                      statearr_15674_15682[5] = ex__12051__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15659);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e15673;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15683 = state_15659;
                  state_15659 = G__15683;
                  continue;
                } else {
                  return ret_value__12049__auto__;
                }
                break;
              }
            };
            state_machine__12048__auto__ = function(state_15659) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12048__auto____0.call(this);
                case 1:
                  return state_machine__12048__auto____1.call(this, state_15659);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
            return state_machine__12048__auto__;
          }();
        }(switch__12047__auto__, c__12112__auto__);
      }();
      var state__12114__auto__ = function() {
        var statearr_15675 = f__12113__auto__.call(null);
        statearr_15675[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto__;
        return statearr_15675;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
    };
  }(c__12112__auto__));
  return c__12112__auto__;
};
window.onload = function() {
  var c__12112__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12112__auto__) {
    return function() {
      var f__12113__auto__ = function() {
        var switch__12047__auto__ = function(c__12112__auto__) {
          return function(state_15722) {
            var state_val_15723 = state_15722[1];
            if (state_val_15723 === 8) {
              var inst_15720 = state_15722[2];
              var state_15722__$1 = state_15722;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15722__$1, inst_15720);
            } else {
              if (state_val_15723 === 7) {
                var inst_15698 = state_15722[7];
                var inst_15711 = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
                var inst_15712 = muzak.front_end.receive_msgs_BANG_.call(null, inst_15711, inst_15698);
                var inst_15714 = cljs.core.async.chan.call(null);
                var inst_15715 = muzak.front_end.send_msgs_BANG_.call(null, inst_15714, inst_15698);
                var inst_15716 = document.getElementById("content");
                var inst_15717 = muzak.event_handlers.page_component.call(null, inst_15711, inst_15714);
                var inst_15718 = dommy.core.replace_contents_BANG_.call(null, inst_15716, inst_15717);
                var state_15722__$1 = function() {
                  var statearr_15724 = state_15722;
                  statearr_15724[8] = inst_15715;
                  statearr_15724[9] = inst_15712;
                  return statearr_15724;
                }();
                var statearr_15725_15743 = state_15722__$1;
                statearr_15725_15743[2] = inst_15718;
                statearr_15725_15743[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15723 === 6) {
                  var inst_15697 = state_15722[10];
                  var inst_15700 = document.getElementById("content");
                  var inst_15702 = document.createElement("div");
                  var inst_15703 = document.createTextNode("Couldn't connect to websocket: ");
                  var inst_15704 = inst_15702.appendChild(inst_15703);
                  var inst_15705 = cljs.core.pr_str.call(null, inst_15697);
                  var inst_15706 = dommy.template.__GT_node_like.call(null, inst_15705);
                  var inst_15707 = inst_15702.appendChild(inst_15706);
                  var inst_15708 = dommy.core.replace_contents_BANG_.call(null, inst_15700, inst_15702);
                  var state_15722__$1 = function() {
                    var statearr_15726 = state_15722;
                    statearr_15726[11] = inst_15707;
                    statearr_15726[12] = inst_15704;
                    return statearr_15726;
                  }();
                  var statearr_15727_15744 = state_15722__$1;
                  statearr_15727_15744[2] = inst_15708;
                  statearr_15727_15744[1] = 8;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15723 === 5) {
                    var inst_15697 = state_15722[10];
                    var inst_15696 = state_15722[2];
                    var inst_15697__$1 = cljs.core.get.call(null, inst_15696, new cljs.core.Keyword(null, "error", "error", -978969032));
                    var inst_15698 = cljs.core.get.call(null, inst_15696, new cljs.core.Keyword(null, "ws-channel", "ws-channel", 1643892174));
                    var state_15722__$1 = function() {
                      var statearr_15728 = state_15722;
                      statearr_15728[10] = inst_15697__$1;
                      statearr_15728[7] = inst_15698;
                      return statearr_15728;
                    }();
                    if (cljs.core.truth_(inst_15697__$1)) {
                      var statearr_15729_15745 = state_15722__$1;
                      statearr_15729_15745[1] = 6;
                    } else {
                      var statearr_15730_15746 = state_15722__$1;
                      statearr_15730_15746[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15723 === 4) {
                      var inst_15690 = state_15722[13];
                      var state_15722__$1 = state_15722;
                      var statearr_15731_15747 = state_15722__$1;
                      statearr_15731_15747[2] = inst_15690;
                      statearr_15731_15747[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15723 === 3) {
                        var inst_15690 = state_15722[13];
                        var inst_15693 = cljs.core.apply.call(null, cljs.core.hash_map, inst_15690);
                        var state_15722__$1 = state_15722;
                        var statearr_15732_15748 = state_15722__$1;
                        statearr_15732_15748[2] = inst_15693;
                        statearr_15732_15748[1] = 5;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15723 === 2) {
                          var inst_15690 = state_15722[13];
                          var inst_15690__$1 = state_15722[2];
                          var inst_15691 = cljs.core.seq_QMARK_.call(null, inst_15690__$1);
                          var state_15722__$1 = function() {
                            var statearr_15733 = state_15722;
                            statearr_15733[13] = inst_15690__$1;
                            return statearr_15733;
                          }();
                          if (inst_15691) {
                            var statearr_15734_15749 = state_15722__$1;
                            statearr_15734_15749[1] = 3;
                          } else {
                            var statearr_15735_15750 = state_15722__$1;
                            statearr_15735_15750[1] = 4;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15723 === 1) {
                            var inst_15685 = [new cljs.core.Keyword(null, "format", "format", -1306924766)];
                            var inst_15686 = [new cljs.core.Keyword(null, "json-kw", "json-kw", 341203175)];
                            var inst_15687 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_15685, inst_15686);
                            var inst_15688 = chord.client.ws_ch.call(null, "ws://localhost:3000/ws", inst_15687);
                            var state_15722__$1 = state_15722;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15722__$1, 2, inst_15688);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12112__auto__);
        return function(switch__12047__auto__, c__12112__auto__) {
          return function() {
            var state_machine__12048__auto__ = null;
            var state_machine__12048__auto____0 = function() {
              var statearr_15739 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15739[0] = state_machine__12048__auto__;
              statearr_15739[1] = 1;
              return statearr_15739;
            };
            var state_machine__12048__auto____1 = function(state_15722) {
              while (true) {
                var ret_value__12049__auto__ = function() {
                  try {
                    while (true) {
                      var result__12050__auto__ = switch__12047__auto__.call(null, state_15722);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12050__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12050__auto__;
                      }
                      break;
                    }
                  } catch (e15740) {
                    if (e15740 instanceof Object) {
                      var ex__12051__auto__ = e15740;
                      var statearr_15741_15751 = state_15722;
                      statearr_15741_15751[5] = ex__12051__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15722);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e15740;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12049__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15752 = state_15722;
                  state_15722 = G__15752;
                  continue;
                } else {
                  return ret_value__12049__auto__;
                }
                break;
              }
            };
            state_machine__12048__auto__ = function(state_15722) {
              switch(arguments.length) {
                case 0:
                  return state_machine__12048__auto____0.call(this);
                case 1:
                  return state_machine__12048__auto____1.call(this, state_15722);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__12048__auto____0;
            state_machine__12048__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__12048__auto____1;
            return state_machine__12048__auto__;
          }();
        }(switch__12047__auto__, c__12112__auto__);
      }();
      var state__12114__auto__ = function() {
        var statearr_15742 = f__12113__auto__.call(null);
        statearr_15742[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12112__auto__;
        return statearr_15742;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12114__auto__);
    };
  }(c__12112__auto__));
  return c__12112__auto__;
};
